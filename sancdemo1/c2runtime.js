// Generated by Construct 2, the HTML5 game and app creator :: http://www.scirra.com
var cr = {};
cr.plugins_ = {};
cr.behaviors = {};
if (typeof Object.getPrototypeOf !== "function")
{
	if (typeof "test".__proto__ === "object")
	{
		Object.getPrototypeOf = function(object) {
			return object.__proto__;
		};
	}
	else
	{
		Object.getPrototypeOf = function(object) {
			return object.constructor.prototype;
		};
	}
}
(function(){
	cr.logexport = function (msg)
	{
		if (window.console && window.console.log)
			window.console.log(msg);
	};
	cr.logerror = function (msg)
	{
		if (window.console && window.console.error)
			window.console.error(msg);
	};
	cr.seal = function(x)
	{
		return x;
	};
	cr.freeze = function(x)
	{
		return x;
	};
	cr.is_undefined = function (x)
	{
		return typeof x === "undefined";
	};
	cr.is_number = function (x)
	{
		return typeof x === "number";
	};
	cr.is_string = function (x)
	{
		return typeof x === "string";
	};
	cr.isPOT = function (x)
	{
		return x > 0 && ((x - 1) & x) === 0;
	};
	cr.nextHighestPowerOfTwo = function(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	cr.abs = function (x)
	{
		return (x < 0 ? -x : x);
	};
	cr.max = function (a, b)
	{
		return (a > b ? a : b);
	};
	cr.min = function (a, b)
	{
		return (a < b ? a : b);
	};
	cr.PI = Math.PI;
	cr.round = function (x)
	{
		return (x + 0.5) | 0;
	};
	cr.floor = function (x)
	{
		if (x >= 0)
			return x | 0;
		else
			return (x | 0) - 1;		// correctly round down when negative
	};
	cr.ceil = function (x)
	{
		var f = x | 0;
		return (f === x ? f : f + 1);
	};
	function Vector2(x, y)
	{
		this.x = x;
		this.y = y;
		cr.seal(this);
	};
	Vector2.prototype.offset = function (px, py)
	{
		this.x += px;
		this.y += py;
		return this;
	};
	Vector2.prototype.mul = function (px, py)
	{
		this.x *= px;
		this.y *= py;
		return this;
	};
	cr.vector2 = Vector2;
	cr.segments_intersect = function(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)
	{
		var max_ax, min_ax, max_ay, min_ay, max_bx, min_bx, max_by, min_by;
		if (a1x < a2x)
		{
			min_ax = a1x;
			max_ax = a2x;
		}
		else
		{
			min_ax = a2x;
			max_ax = a1x;
		}
		if (b1x < b2x)
		{
			min_bx = b1x;
			max_bx = b2x;
		}
		else
		{
			min_bx = b2x;
			max_bx = b1x;
		}
		if (max_ax < min_bx || min_ax > max_bx)
			return false;
		if (a1y < a2y)
		{
			min_ay = a1y;
			max_ay = a2y;
		}
		else
		{
			min_ay = a2y;
			max_ay = a1y;
		}
		if (b1y < b2y)
		{
			min_by = b1y;
			max_by = b2y;
		}
		else
		{
			min_by = b2y;
			max_by = b1y;
		}
		if (max_ay < min_by || min_ay > max_by)
			return false;
		var dpx = b1x - a1x + b2x - a2x;
		var dpy = b1y - a1y + b2y - a2y;
		var qax = a2x - a1x;
		var qay = a2y - a1y;
		var qbx = b2x - b1x;
		var qby = b2y - b1y;
		var d = cr.abs(qay * qbx - qby * qax);
		var la = qbx * dpy - qby * dpx;
		if (cr.abs(la) > d)
			return false;
		var lb = qax * dpy - qay * dpx;
		return cr.abs(lb) <= d;
	};
	function Rect(left, top, right, bottom)
	{
		this.set(left, top, right, bottom);
		cr.seal(this);
	};
	Rect.prototype.set = function (left, top, right, bottom)
	{
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	};
	Rect.prototype.copy = function (r)
	{
		this.left = r.left;
		this.top = r.top;
		this.right = r.right;
		this.bottom = r.bottom;
	};
	Rect.prototype.width = function ()
	{
		return this.right - this.left;
	};
	Rect.prototype.height = function ()
	{
		return this.bottom - this.top;
	};
	Rect.prototype.offset = function (px, py)
	{
		this.left += px;
		this.top += py;
		this.right += px;
		this.bottom += py;
		return this;
	};
	Rect.prototype.normalize = function ()
	{
		var temp = 0;
		if (this.left > this.right)
		{
			temp = this.left;
			this.left = this.right;
			this.right = temp;
		}
		if (this.top > this.bottom)
		{
			temp = this.top;
			this.top = this.bottom;
			this.bottom = temp;
		}
	};
	Rect.prototype.intersects_rect = function (rc)
	{
		return !(rc.right < this.left || rc.bottom < this.top || rc.left > this.right || rc.top > this.bottom);
	};
	Rect.prototype.intersects_rect_off = function (rc, ox, oy)
	{
		return !(rc.right + ox < this.left || rc.bottom + oy < this.top || rc.left + ox > this.right || rc.top + oy > this.bottom);
	};
	Rect.prototype.contains_pt = function (x, y)
	{
		return (x >= this.left && x <= this.right) && (y >= this.top && y <= this.bottom);
	};
	Rect.prototype.equals = function (r)
	{
		return this.left === r.left && this.top === r.top && this.right === r.right && this.bottom === r.bottom;
	};
	cr.rect = Rect;
	function Quad()
	{
		this.tlx = 0;
		this.tly = 0;
		this.trx = 0;
		this.try_ = 0;	// is a keyword otherwise!
		this.brx = 0;
		this.bry = 0;
		this.blx = 0;
		this.bly = 0;
		cr.seal(this);
	};
	Quad.prototype.set_from_rect = function (rc)
	{
		this.tlx = rc.left;
		this.tly = rc.top;
		this.trx = rc.right;
		this.try_ = rc.top;
		this.brx = rc.right;
		this.bry = rc.bottom;
		this.blx = rc.left;
		this.bly = rc.bottom;
	};
	Quad.prototype.set_from_rotated_rect = function (rc, a)
	{
		if (a === 0)
		{
			this.set_from_rect(rc);
		}
		else
		{
			var sin_a = Math.sin(a);
			var cos_a = Math.cos(a);
			var left_sin_a = rc.left * sin_a;
			var top_sin_a = rc.top * sin_a;
			var right_sin_a = rc.right * sin_a;
			var bottom_sin_a = rc.bottom * sin_a;
			var left_cos_a = rc.left * cos_a;
			var top_cos_a = rc.top * cos_a;
			var right_cos_a = rc.right * cos_a;
			var bottom_cos_a = rc.bottom * cos_a;
			this.tlx = left_cos_a - top_sin_a;
			this.tly = top_cos_a + left_sin_a;
			this.trx = right_cos_a - top_sin_a;
			this.try_ = top_cos_a + right_sin_a;
			this.brx = right_cos_a - bottom_sin_a;
			this.bry = bottom_cos_a + right_sin_a;
			this.blx = left_cos_a - bottom_sin_a;
			this.bly = bottom_cos_a + left_sin_a;
		}
	};
	Quad.prototype.offset = function (px, py)
	{
		this.tlx += px;
		this.tly += py;
		this.trx += px;
		this.try_ += py;
		this.brx += px;
		this.bry += py;
		this.blx += px;
		this.bly += py;
		return this;
	};
	var minresult = 0;
	var maxresult = 0;
	function minmax4(a, b, c, d)
	{
		if (a < b)
		{
			if (c < d)
			{
				if (a < c)
					minresult = a;
				else
					minresult = c;
				if (b > d)
					maxresult = b;
				else
					maxresult = d;
			}
			else
			{
				if (a < d)
					minresult = a;
				else
					minresult = d;
				if (b > c)
					maxresult = b;
				else
					maxresult = c;
			}
		}
		else
		{
			if (c < d)
			{
				if (b < c)
					minresult = b;
				else
					minresult = c;
				if (a > d)
					maxresult = a;
				else
					maxresult = d;
			}
			else
			{
				if (b < d)
					minresult = b;
				else
					minresult = d;
				if (a > c)
					maxresult = a;
				else
					maxresult = c;
			}
		}
	};
	Quad.prototype.bounding_box = function (rc)
	{
		minmax4(this.tlx, this.trx, this.brx, this.blx);
		rc.left = minresult;
		rc.right = maxresult;
		minmax4(this.tly, this.try_, this.bry, this.bly);
		rc.top = minresult;
		rc.bottom = maxresult;
	};
	Quad.prototype.contains_pt = function (x, y)
	{
		var tlx = this.tlx;
		var tly = this.tly;
		var v0x = this.trx - tlx;
		var v0y = this.try_ - tly;
		var v1x = this.brx - tlx;
		var v1y = this.bry - tly;
		var v2x = x - tlx;
		var v2y = y - tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		var dot11 = v1x * v1x + v1y * v1y
		var dot12 = v1x * v2x + v1y * v2y
		var invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		if ((u >= 0.0) && (v > 0.0) && (u + v < 1))
			return true;
		v0x = this.blx - tlx;
		v0y = this.bly - tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		return (u >= 0.0) && (v > 0.0) && (u + v < 1);
	};
	Quad.prototype.at = function (i, xory)
	{
		if (xory)
		{
			switch (i)
			{
				case 0: return this.tlx;
				case 1: return this.trx;
				case 2: return this.brx;
				case 3: return this.blx;
				case 4: return this.tlx;
				default: return this.tlx;
			}
		}
		else
		{
			switch (i)
			{
				case 0: return this.tly;
				case 1: return this.try_;
				case 2: return this.bry;
				case 3: return this.bly;
				case 4: return this.tly;
				default: return this.tly;
			}
		}
	};
	Quad.prototype.midX = function ()
	{
		return (this.tlx + this.trx  + this.brx + this.blx) / 4;
	};
	Quad.prototype.midY = function ()
	{
		return (this.tly + this.try_ + this.bry + this.bly) / 4;
	};
	Quad.prototype.intersects_segment = function (x1, y1, x2, y2)
	{
		if (this.contains_pt(x1, y1) || this.contains_pt(x2, y2))
			return true;
		var a1x, a1y, a2x, a2y;
		var i;
		for (i = 0; i < 4; i++)
		{
			a1x = this.at(i, true);
			a1y = this.at(i, false);
			a2x = this.at(i + 1, true);
			a2y = this.at(i + 1, false);
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	Quad.prototype.intersects_quad = function (rhs)
	{
		var midx = rhs.midX();
		var midy = rhs.midY();
		if (this.contains_pt(midx, midy))
			return true;
		midx = this.midX();
		midy = this.midY();
		if (rhs.contains_pt(midx, midy))
			return true;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		var i, j;
		for (i = 0; i < 4; i++)
		{
			for (j = 0; j < 4; j++)
			{
				a1x = this.at(i, true);
				a1y = this.at(i, false);
				a2x = this.at(i + 1, true);
				a2y = this.at(i + 1, false);
				b1x = rhs.at(j, true);
				b1y = rhs.at(j, false);
				b2x = rhs.at(j + 1, true);
				b2y = rhs.at(j + 1, false);
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	cr.quad = Quad;
	cr.RGB = function (red, green, blue)
	{
		return Math.max(Math.min(red, 255), 0)
			 | (Math.max(Math.min(green, 255), 0) << 8)
			 | (Math.max(Math.min(blue, 255), 0) << 16);
	};
	cr.GetRValue = function (rgb)
	{
		return rgb & 0xFF;
	};
	cr.GetGValue = function (rgb)
	{
		return (rgb & 0xFF00) >> 8;
	};
	cr.GetBValue = function (rgb)
	{
		return (rgb & 0xFF0000) >> 16;
	};
	cr.shallowCopy = function (a, b, allowOverwrite)
	{
		var attr;
		for (attr in b)
		{
			if (b.hasOwnProperty(attr))
			{
;
				a[attr] = b[attr];
			}
		}
		return a;
	};
	cr.arrayRemove = function (arr, index)
	{
		var i, len;
		index = cr.floor(index);
		if (index < 0 || index >= arr.length)
			return;							// index out of bounds
		for (i = index, len = arr.length - 1; i < len; i++)
			arr[i] = arr[i + 1];
		cr.truncateArray(arr, len);
	};
	cr.truncateArray = function (arr, index)
	{
		arr.length = index;
	};
	cr.clearArray = function (arr)
	{
		cr.truncateArray(arr, 0);
	};
	cr.shallowAssignArray = function (dest, src)
	{
		cr.clearArray(dest);
		var i, len;
		for (i = 0, len = src.length; i < len; ++i)
			dest[i] = src[i];
	};
	cr.appendArray = function (a, b)
	{
		a.push.apply(a, b);
	};
	cr.fastIndexOf = function (arr, item)
	{
		var i, len;
		for (i = 0, len = arr.length; i < len; ++i)
		{
			if (arr[i] === item)
				return i;
		}
		return -1;
	};
	cr.arrayFindRemove = function (arr, item)
	{
		var index = cr.fastIndexOf(arr, item);
		if (index !== -1)
			cr.arrayRemove(arr, index);
	};
	cr.clamp = function(x, a, b)
	{
		if (x < a)
			return a;
		else if (x > b)
			return b;
		else
			return x;
	};
	cr.to_radians = function(x)
	{
		return x / (180.0 / cr.PI);
	};
	cr.to_degrees = function(x)
	{
		return x * (180.0 / cr.PI);
	};
	cr.clamp_angle_degrees = function (a)
	{
		a %= 360;       // now in (-360, 360) range
		if (a < 0)
			a += 360;   // now in [0, 360) range
		return a;
	};
	cr.clamp_angle = function (a)
	{
		a %= 2 * cr.PI;       // now in (-2pi, 2pi) range
		if (a < 0)
			a += 2 * cr.PI;   // now in [0, 2pi) range
		return a;
	};
	cr.to_clamped_degrees = function (x)
	{
		return cr.clamp_angle_degrees(cr.to_degrees(x));
	};
	cr.to_clamped_radians = function (x)
	{
		return cr.clamp_angle(cr.to_radians(x));
	};
	cr.angleTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.atan2(dy, dx);
	};
	cr.angleDiff = function (a1, a2)
	{
		if (a1 === a2)
			return 0;
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		var n = s1 * s2 + c1 * c2;
		if (n >= 1)
			return 0;
		if (n <= -1)
			return cr.PI;
		return Math.acos(n);
	};
	cr.angleRotate = function (start, end, step)
	{
		var ss = Math.sin(start);
		var cs = Math.cos(start);
		var se = Math.sin(end);
		var ce = Math.cos(end);
		if (Math.acos(ss * se + cs * ce) > step)
		{
			if (cs * se - ss * ce > 0)
				return cr.clamp_angle(start + step);
			else
				return cr.clamp_angle(start - step);
		}
		else
			return cr.clamp_angle(end);
	};
	cr.angleClockwise = function (a1, a2)
	{
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		return c1 * s2 - s1 * c2 <= 0;
	};
	cr.rotatePtAround = function (px, py, a, ox, oy, getx)
	{
		if (a === 0)
			return getx ? px : py;
		var sin_a = Math.sin(a);
		var cos_a = Math.cos(a);
		px -= ox;
		py -= oy;
		var left_sin_a = px * sin_a;
		var top_sin_a = py * sin_a;
		var left_cos_a = px * cos_a;
		var top_cos_a = py * cos_a;
		px = left_cos_a - top_sin_a;
		py = top_cos_a + left_sin_a;
		px += ox;
		py += oy;
		return getx ? px : py;
	}
	cr.distanceTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.sqrt(dx*dx + dy*dy);
	};
	cr.xor = function (x, y)
	{
		return !x !== !y;
	};
	cr.lerp = function (a, b, x)
	{
		return a + (b - a) * x;
	};
	cr.unlerp = function (a, b, c)
	{
		if (a === b)
			return 0;		// avoid divide by 0
		return (c - a) / (b - a);
	};
	cr.anglelerp = function (a, b, x)
	{
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			return a + diff * x;
		}
		else
		{
			return a - diff * x;
		}
	};
	cr.qarp = function (a, b, c, x)
	{
		return cr.lerp(cr.lerp(a, b, x), cr.lerp(b, c, x), x);
	};
	cr.cubic = function (a, b, c, d, x)
	{
		return cr.lerp(cr.qarp(a, b, c, x), cr.qarp(b, c, d, x), x);
	};
	cr.cosp = function (a, b, x)
	{
		return (a + b + (a - b) * Math.cos(x * Math.PI)) / 2;
	};
	cr.hasAnyOwnProperty = function (o)
	{
		var p;
		for (p in o)
		{
			if (o.hasOwnProperty(p))
				return true;
		}
		return false;
	};
	cr.wipe = function (obj)
	{
		var p;
		for (p in obj)
		{
			if (obj.hasOwnProperty(p))
				delete obj[p];
		}
	};
	var startup_time = +(new Date());
	cr.performance_now = function()
	{
		if (typeof window["performance"] !== "undefined")
		{
			var winperf = window["performance"];
			if (typeof winperf.now !== "undefined")
				return winperf.now();
			else if (typeof winperf["webkitNow"] !== "undefined")
				return winperf["webkitNow"]();
			else if (typeof winperf["mozNow"] !== "undefined")
				return winperf["mozNow"]();
			else if (typeof winperf["msNow"] !== "undefined")
				return winperf["msNow"]();
		}
		return Date.now() - startup_time;
	};
	var isChrome = false;
	var isSafari = false;
	var isiOS = false;
	var isEjecta = false;
	if (typeof window !== "undefined")		// not c2 editor
	{
		isChrome = /chrome/i.test(navigator.userAgent) || /chromium/i.test(navigator.userAgent);
		isSafari = !isChrome && /safari/i.test(navigator.userAgent);
		isiOS = /(iphone|ipod|ipad)/i.test(navigator.userAgent);
		isEjecta = window["c2ejecta"];
	}
	var supports_set = ((!isSafari && !isEjecta && !isiOS) && (typeof Set !== "undefined" && typeof Set.prototype["forEach"] !== "undefined"));
	function ObjectSet_()
	{
		this.s = null;
		this.items = null;			// lazy allocated (hopefully results in better GC performance)
		this.item_count = 0;
		if (supports_set)
		{
			this.s = new Set();
		}
		this.values_cache = [];
		this.cache_valid = true;
		cr.seal(this);
	};
	ObjectSet_.prototype.contains = function (x)
	{
		if (this.isEmpty())
			return false;
		if (supports_set)
			return this.s["has"](x);
		else
			return (this.items && this.items.hasOwnProperty(x));
	};
	ObjectSet_.prototype.add = function (x)
	{
		if (supports_set)
		{
			if (!this.s["has"](x))
			{
				this.s["add"](x);
				this.cache_valid = false;
			}
		}
		else
		{
			var str = x.toString();
			var items = this.items;
			if (!items)
			{
				this.items = {};
				this.items[str] = x;
				this.item_count = 1;
				this.cache_valid = false;
			}
			else if (!items.hasOwnProperty(str))
			{
				items[str] = x;
				this.item_count++;
				this.cache_valid = false;
			}
		}
	};
	ObjectSet_.prototype.remove = function (x)
	{
		if (this.isEmpty())
			return;
		if (supports_set)
		{
			if (this.s["has"](x))
			{
				this.s["delete"](x);
				this.cache_valid = false;
			}
		}
		else if (this.items)
		{
			var str = x.toString();
			var items = this.items;
			if (items.hasOwnProperty(str))
			{
				delete items[str];
				this.item_count--;
				this.cache_valid = false;
			}
		}
	};
	ObjectSet_.prototype.clear = function (/*wipe_*/)
	{
		if (this.isEmpty())
			return;
		if (supports_set)
		{
			this.s["clear"]();			// best!
		}
		else
		{
				this.items = null;		// creates garbage; will lazy allocate on next add()
			this.item_count = 0;
		}
		cr.clearArray(this.values_cache);
		this.cache_valid = true;
	};
	ObjectSet_.prototype.isEmpty = function ()
	{
		return this.count() === 0;
	};
	ObjectSet_.prototype.count = function ()
	{
		if (supports_set)
			return this.s["size"];
		else
			return this.item_count;
	};
	var current_arr = null;
	var current_index = 0;
	function set_append_to_arr(x)
	{
		current_arr[current_index++] = x;
	};
	ObjectSet_.prototype.update_cache = function ()
	{
		if (this.cache_valid)
			return;
		if (supports_set)
		{
			cr.clearArray(this.values_cache);
			current_arr = this.values_cache;
			current_index = 0;
			this.s["forEach"](set_append_to_arr);
;
			current_arr = null;
			current_index = 0;
		}
		else
		{
			var values_cache = this.values_cache;
			cr.clearArray(values_cache);
			var p, n = 0, items = this.items;
			if (items)
			{
				for (p in items)
				{
					if (items.hasOwnProperty(p))
						values_cache[n++] = items[p];
				}
			}
;
		}
		this.cache_valid = true;
	};
	ObjectSet_.prototype.valuesRef = function ()
	{
		this.update_cache();
		return this.values_cache;
	};
	cr.ObjectSet = ObjectSet_;
	var tmpSet = new cr.ObjectSet();
	cr.removeArrayDuplicates = function (arr)
	{
		var i, len;
		for (i = 0, len = arr.length; i < len; ++i)
		{
			tmpSet.add(arr[i]);
		}
		cr.shallowAssignArray(arr, tmpSet.valuesRef());
		tmpSet.clear();
	};
	cr.arrayRemoveAllFromObjectSet = function (arr, remset)
	{
		if (supports_set)
			cr.arrayRemoveAll_set(arr, remset.s);
		else
			cr.arrayRemoveAll_arr(arr, remset.valuesRef());
	};
	cr.arrayRemoveAll_set = function (arr, s)
	{
		var i, j, len, item;
		for (i = 0, j = 0, len = arr.length; i < len; ++i)
		{
			item = arr[i];
			if (!s["has"](item))					// not an item to remove
				arr[j++] = item;					// keep it
		}
		cr.truncateArray(arr, j);
	};
	cr.arrayRemoveAll_arr = function (arr, rem)
	{
		var i, j, len, item;
		for (i = 0, j = 0, len = arr.length; i < len; ++i)
		{
			item = arr[i];
			if (cr.fastIndexOf(rem, item) === -1)	// not an item to remove
				arr[j++] = item;					// keep it
		}
		cr.truncateArray(arr, j);
	};
	function KahanAdder_()
	{
		this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
		cr.seal(this);
	};
	KahanAdder_.prototype.add = function (v)
	{
		this.y = v - this.c;
	    this.t = this.sum + this.y;
	    this.c = (this.t - this.sum) - this.y;
	    this.sum = this.t;
	};
    KahanAdder_.prototype.reset = function ()
    {
        this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
    };
	cr.KahanAdder = KahanAdder_;
	cr.regexp_escape = function(text)
	{
		return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	};
	function CollisionPoly_(pts_array_)
	{
		this.pts_cache = [];
		this.bboxLeft = 0;
		this.bboxTop = 0;
		this.bboxRight = 0;
		this.bboxBottom = 0;
		this.convexpolys = null;		// for physics behavior to cache separated polys
		this.set_pts(pts_array_);
		cr.seal(this);
	};
	CollisionPoly_.prototype.set_pts = function(pts_array_)
	{
		this.pts_array = pts_array_;
		this.pts_count = pts_array_.length / 2;			// x, y, x, y... in array
		this.pts_cache.length = pts_array_.length;
		this.cache_width = -1;
		this.cache_height = -1;
		this.cache_angle = 0;
	};
	CollisionPoly_.prototype.is_empty = function()
	{
		return !this.pts_array.length;
	};
	CollisionPoly_.prototype.update_bbox = function ()
	{
		var myptscache = this.pts_cache;
		var bboxLeft_ = myptscache[0];
		var bboxRight_ = bboxLeft_;
		var bboxTop_ = myptscache[1];
		var bboxBottom_ = bboxTop_;
		var x, y, i = 1, i2, len = this.pts_count;
		for ( ; i < len; ++i)
		{
			i2 = i*2;
			x = myptscache[i2];
			y = myptscache[i2+1];
			if (x < bboxLeft_)
				bboxLeft_ = x;
			if (x > bboxRight_)
				bboxRight_ = x;
			if (y < bboxTop_)
				bboxTop_ = y;
			if (y > bboxBottom_)
				bboxBottom_ = y;
		}
		this.bboxLeft = bboxLeft_;
		this.bboxRight = bboxRight_;
		this.bboxTop = bboxTop_;
		this.bboxBottom = bboxBottom_;
	};
	CollisionPoly_.prototype.set_from_rect = function(rc, offx, offy)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = rc.left - offx;
		myptscache[1] = rc.top - offy;
		myptscache[2] = rc.right - offx;
		myptscache[3] = rc.top - offy;
		myptscache[4] = rc.right - offx;
		myptscache[5] = rc.bottom - offy;
		myptscache[6] = rc.left - offx;
		myptscache[7] = rc.bottom - offy;
		this.cache_width = rc.right - rc.left;
		this.cache_height = rc.bottom - rc.top;
		this.update_bbox();
	};
	CollisionPoly_.prototype.set_from_quad = function(q, offx, offy, w, h)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = q.tlx - offx;
		myptscache[1] = q.tly - offy;
		myptscache[2] = q.trx - offx;
		myptscache[3] = q.try_ - offy;
		myptscache[4] = q.brx - offx;
		myptscache[5] = q.bry - offy;
		myptscache[6] = q.blx - offx;
		myptscache[7] = q.bly - offy;
		this.cache_width = w;
		this.cache_height = h;
		this.update_bbox();
	};
	CollisionPoly_.prototype.set_from_poly = function (r)
	{
		this.pts_count = r.pts_count;
		cr.shallowAssignArray(this.pts_cache, r.pts_cache);
		this.bboxLeft = r.bboxLeft;
		this.bboxTop - r.bboxTop;
		this.bboxRight = r.bboxRight;
		this.bboxBottom = r.bboxBottom;
	};
	CollisionPoly_.prototype.cache_poly = function(w, h, a)
	{
		if (this.cache_width === w && this.cache_height === h && this.cache_angle === a)
			return;		// cache up-to-date
		this.cache_width = w;
		this.cache_height = h;
		this.cache_angle = a;
		var i, i2, i21, len, x, y;
		var sina = 0;
		var cosa = 1;
		var myptsarray = this.pts_array;
		var myptscache = this.pts_cache;
		if (a !== 0)
		{
			sina = Math.sin(a);
			cosa = Math.cos(a);
		}
		for (i = 0, len = this.pts_count; i < len; i++)
		{
			i2 = i*2;
			i21 = i2+1;
			x = myptsarray[i2] * w;
			y = myptsarray[i21] * h;
			myptscache[i2] = (x * cosa) - (y * sina);
			myptscache[i21] = (y * cosa) + (x * sina);
		}
		this.update_bbox();
	};
	CollisionPoly_.prototype.contains_pt = function (a2x, a2y)
	{
		var myptscache = this.pts_cache;
		if (a2x === myptscache[0] && a2y === myptscache[1])
			return true;
		var i, i2, imod, len = this.pts_count;
		var a1x = this.bboxLeft - 110;
		var a1y = this.bboxTop - 101;
		var a3x = this.bboxRight + 131
		var a3y = this.bboxBottom + 120;
		var b1x, b1y, b2x, b2y;
		var count1 = 0, count2 = 0;
		for (i = 0; i < len; i++)
		{
			i2 = i*2;
			imod = ((i+1)%len)*2;
			b1x = myptscache[i2];
			b1y = myptscache[i2+1];
			b2x = myptscache[imod];
			b2y = myptscache[imod+1];
			if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
				count1++;
			if (cr.segments_intersect(a3x, a3y, a2x, a2y, b1x, b1y, b2x, b2y))
				count2++;
		}
		return (count1 % 2 === 1) || (count2 % 2 === 1);
	};
	CollisionPoly_.prototype.intersects_poly = function (rhs, offx, offy)
	{
		var rhspts = rhs.pts_cache;
		var mypts = this.pts_cache;
		if (this.contains_pt(rhspts[0] + offx, rhspts[1] + offy))
			return true;
		if (rhs.contains_pt(mypts[0] - offx, mypts[1] - offy))
			return true;
		var i, i2, imod, leni, j, j2, jmod, lenj;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			i2 = i*2;
			imod = ((i+1)%leni)*2;
			a1x = mypts[i2];
			a1y = mypts[i2+1];
			a2x = mypts[imod];
			a2y = mypts[imod+1];
			for (j = 0, lenj = rhs.pts_count; j < lenj; j++)
			{
				j2 = j*2;
				jmod = ((j+1)%lenj)*2;
				b1x = rhspts[j2] + offx;
				b1y = rhspts[j2+1] + offy;
				b2x = rhspts[jmod] + offx;
				b2y = rhspts[jmod+1] + offy;
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	CollisionPoly_.prototype.intersects_segment = function (offx, offy, x1, y1, x2, y2)
	{
		var mypts = this.pts_cache;
		if (this.contains_pt(x1 - offx, y1 - offy))
			return true;
		var i, leni, i2, imod;
		var a1x, a1y, a2x, a2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			i2 = i*2;
			imod = ((i+1)%leni)*2;
			a1x = mypts[i2] + offx;
			a1y = mypts[i2+1] + offy;
			a2x = mypts[imod] + offx;
			a2y = mypts[imod+1] + offy;
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	CollisionPoly_.prototype.mirror = function (px)
	{
		var i, leni, i2;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i2 = i*2;
			this.pts_cache[i2] = px * 2 - this.pts_cache[i2];
		}
	};
	CollisionPoly_.prototype.flip = function (py)
	{
		var i, leni, i21;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i21 = i*2+1;
			this.pts_cache[i21] = py * 2 - this.pts_cache[i21];
		}
	};
	CollisionPoly_.prototype.diag = function ()
	{
		var i, leni, i2, i21, temp;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i2 = i*2;
			i21 = i2+1;
			temp = this.pts_cache[i2];
			this.pts_cache[i2] = this.pts_cache[i21];
			this.pts_cache[i21] = temp;
		}
	};
	cr.CollisionPoly = CollisionPoly_;
	function SparseGrid_(cellwidth_, cellheight_)
	{
		this.cellwidth = cellwidth_;
		this.cellheight = cellheight_;
		this.cells = {};
	};
	SparseGrid_.prototype.totalCellCount = 0;
	SparseGrid_.prototype.getCell = function (x_, y_, create_if_missing)
	{
		var ret;
		var col = this.cells[x_];
		if (!col)
		{
			if (create_if_missing)
			{
				ret = allocGridCell(this, x_, y_);
				this.cells[x_] = {};
				this.cells[x_][y_] = ret;
				return ret;
			}
			else
				return null;
		}
		ret = col[y_];
		if (ret)
			return ret;
		else if (create_if_missing)
		{
			ret = allocGridCell(this, x_, y_);
			this.cells[x_][y_] = ret;
			return ret;
		}
		else
			return null;
	};
	SparseGrid_.prototype.XToCell = function (x_)
	{
		return cr.floor(x_ / this.cellwidth);
	};
	SparseGrid_.prototype.YToCell = function (y_)
	{
		return cr.floor(y_ / this.cellheight);
	};
	SparseGrid_.prototype.update = function (inst, oldrange, newrange)
	{
		var x, lenx, y, leny, cell;
		if (oldrange)
		{
			for (x = oldrange.left, lenx = oldrange.right; x <= lenx; ++x)
			{
				for (y = oldrange.top, leny = oldrange.bottom; y <= leny; ++y)
				{
					if (newrange && newrange.contains_pt(x, y))
						continue;	// is still in this cell
					cell = this.getCell(x, y, false);	// don't create if missing
					if (!cell)
						continue;	// cell does not exist yet
					cell.remove(inst);
					if (cell.isEmpty())
					{
						freeGridCell(cell);
						this.cells[x][y] = null;
					}
				}
			}
		}
		if (newrange)
		{
			for (x = newrange.left, lenx = newrange.right; x <= lenx; ++x)
			{
				for (y = newrange.top, leny = newrange.bottom; y <= leny; ++y)
				{
					if (oldrange && oldrange.contains_pt(x, y))
						continue;	// is still in this cell
					this.getCell(x, y, true).insert(inst);
				}
			}
		}
	};
	SparseGrid_.prototype.queryRange = function (rc, result)
	{
		var x, lenx, ystart, y, leny, cell;
		x = this.XToCell(rc.left);
		ystart = this.YToCell(rc.top);
		lenx = this.XToCell(rc.right);
		leny = this.YToCell(rc.bottom);
		for ( ; x <= lenx; ++x)
		{
			for (y = ystart; y <= leny; ++y)
			{
				cell = this.getCell(x, y, false);
				if (!cell)
					continue;
				cell.dump(result);
			}
		}
	};
	cr.SparseGrid = SparseGrid_;
	function RenderGrid_(cellwidth_, cellheight_)
	{
		this.cellwidth = cellwidth_;
		this.cellheight = cellheight_;
		this.cells = {};
	};
	RenderGrid_.prototype.totalCellCount = 0;
	RenderGrid_.prototype.getCell = function (x_, y_, create_if_missing)
	{
		var ret;
		var col = this.cells[x_];
		if (!col)
		{
			if (create_if_missing)
			{
				ret = allocRenderCell(this, x_, y_);
				this.cells[x_] = {};
				this.cells[x_][y_] = ret;
				return ret;
			}
			else
				return null;
		}
		ret = col[y_];
		if (ret)
			return ret;
		else if (create_if_missing)
		{
			ret = allocRenderCell(this, x_, y_);
			this.cells[x_][y_] = ret;
			return ret;
		}
		else
			return null;
	};
	RenderGrid_.prototype.XToCell = function (x_)
	{
		return cr.floor(x_ / this.cellwidth);
	};
	RenderGrid_.prototype.YToCell = function (y_)
	{
		return cr.floor(y_ / this.cellheight);
	};
	RenderGrid_.prototype.update = function (inst, oldrange, newrange)
	{
		var x, lenx, y, leny, cell;
		if (oldrange)
		{
			for (x = oldrange.left, lenx = oldrange.right; x <= lenx; ++x)
			{
				for (y = oldrange.top, leny = oldrange.bottom; y <= leny; ++y)
				{
					if (newrange && newrange.contains_pt(x, y))
						continue;	// is still in this cell
					cell = this.getCell(x, y, false);	// don't create if missing
					if (!cell)
						continue;	// cell does not exist yet
					cell.remove(inst);
					if (cell.isEmpty())
					{
						freeRenderCell(cell);
						this.cells[x][y] = null;
					}
				}
			}
		}
		if (newrange)
		{
			for (x = newrange.left, lenx = newrange.right; x <= lenx; ++x)
			{
				for (y = newrange.top, leny = newrange.bottom; y <= leny; ++y)
				{
					if (oldrange && oldrange.contains_pt(x, y))
						continue;	// is still in this cell
					this.getCell(x, y, true).insert(inst);
				}
			}
		}
	};
	RenderGrid_.prototype.queryRange = function (left, top, right, bottom, result)
	{
		var x, lenx, ystart, y, leny, cell;
		x = this.XToCell(left);
		ystart = this.YToCell(top);
		lenx = this.XToCell(right);
		leny = this.YToCell(bottom);
		for ( ; x <= lenx; ++x)
		{
			for (y = ystart; y <= leny; ++y)
			{
				cell = this.getCell(x, y, false);
				if (!cell)
					continue;
				cell.dump(result);
			}
		}
	};
	RenderGrid_.prototype.markRangeChanged = function (rc)
	{
		var x, lenx, ystart, y, leny, cell;
		x = rc.left;
		ystart = rc.top;
		lenx = rc.right;
		leny = rc.bottom;
		for ( ; x <= lenx; ++x)
		{
			for (y = ystart; y <= leny; ++y)
			{
				cell = this.getCell(x, y, false);
				if (!cell)
					continue;
				cell.is_sorted = false;
			}
		}
	};
	cr.RenderGrid = RenderGrid_;
	var gridcellcache = [];
	function allocGridCell(grid_, x_, y_)
	{
		var ret;
		SparseGrid_.prototype.totalCellCount++;
		if (gridcellcache.length)
		{
			ret = gridcellcache.pop();
			ret.grid = grid_;
			ret.x = x_;
			ret.y = y_;
			return ret;
		}
		else
			return new cr.GridCell(grid_, x_, y_);
	};
	function freeGridCell(c)
	{
		SparseGrid_.prototype.totalCellCount--;
		c.objects.clear();
		if (gridcellcache.length < 1000)
			gridcellcache.push(c);
	};
	function GridCell_(grid_, x_, y_)
	{
		this.grid = grid_;
		this.x = x_;
		this.y = y_;
		this.objects = new cr.ObjectSet();
	};
	GridCell_.prototype.isEmpty = function ()
	{
		return this.objects.isEmpty();
	};
	GridCell_.prototype.insert = function (inst)
	{
		this.objects.add(inst);
	};
	GridCell_.prototype.remove = function (inst)
	{
		this.objects.remove(inst);
	};
	GridCell_.prototype.dump = function (result)
	{
		cr.appendArray(result, this.objects.valuesRef());
	};
	cr.GridCell = GridCell_;
	var rendercellcache = [];
	function allocRenderCell(grid_, x_, y_)
	{
		var ret;
		RenderGrid_.prototype.totalCellCount++;
		if (rendercellcache.length)
		{
			ret = rendercellcache.pop();
			ret.grid = grid_;
			ret.x = x_;
			ret.y = y_;
			return ret;
		}
		else
			return new cr.RenderCell(grid_, x_, y_);
	};
	function freeRenderCell(c)
	{
		RenderGrid_.prototype.totalCellCount--;
		c.reset();
		if (rendercellcache.length < 1000)
			rendercellcache.push(c);
	};
	function RenderCell_(grid_, x_, y_)
	{
		this.grid = grid_;
		this.x = x_;
		this.y = y_;
		this.objects = [];		// array which needs to be sorted by Z order
		this.is_sorted = true;	// whether array is in correct sort order or not
		this.pending_removal = new cr.ObjectSet();
		this.any_pending_removal = false;
	};
	RenderCell_.prototype.isEmpty = function ()
	{
		if (!this.objects.length)
		{
;
;
			return true;
		}
		if (this.objects.length > this.pending_removal.count())
			return false;
;
		this.flush_pending();		// takes fast path and just resets state
		return true;
	};
	RenderCell_.prototype.insert = function (inst)
	{
		if (this.pending_removal.contains(inst))
		{
			this.pending_removal.remove(inst);
			if (this.pending_removal.isEmpty())
				this.any_pending_removal = false;
			return;
		}
		if (this.objects.length)
		{
			var top = this.objects[this.objects.length - 1];
			if (top.get_zindex() > inst.get_zindex())
				this.is_sorted = false;		// 'inst' should be somewhere beneath 'top'
			this.objects.push(inst);
		}
		else
		{
			this.objects.push(inst);
			this.is_sorted = true;
		}
;
	};
	RenderCell_.prototype.remove = function (inst)
	{
		this.pending_removal.add(inst);
		this.any_pending_removal = true;
		if (this.pending_removal.count() >= 30)
			this.flush_pending();
	};
	RenderCell_.prototype.flush_pending = function ()
	{
;
		if (!this.any_pending_removal)
			return;		// not changed
		if (this.pending_removal.count() === this.objects.length)
		{
			this.reset();
			return;
		}
		cr.arrayRemoveAllFromObjectSet(this.objects, this.pending_removal);
		this.pending_removal.clear();
		this.any_pending_removal = false;
	};
	function sortByInstanceZIndex(a, b)
	{
		return a.zindex - b.zindex;
	};
	RenderCell_.prototype.ensure_sorted = function ()
	{
		if (this.is_sorted)
			return;		// already sorted
		this.objects.sort(sortByInstanceZIndex);
		this.is_sorted = true;
	};
	RenderCell_.prototype.reset = function ()
	{
		cr.clearArray(this.objects);
		this.is_sorted = true;
		this.pending_removal.clear();
		this.any_pending_removal = false;
	};
	RenderCell_.prototype.dump = function (result)
	{
		this.flush_pending();
		this.ensure_sorted();
		if (this.objects.length)
			result.push(this.objects);
	};
	cr.RenderCell = RenderCell_;
	var fxNames = [ "lighter",
					"xor",
					"copy",
					"destination-over",
					"source-in",
					"destination-in",
					"source-out",
					"destination-out",
					"source-atop",
					"destination-atop"];
	cr.effectToCompositeOp = function(effect)
	{
		if (effect <= 0 || effect >= 11)
			return "source-over";
		return fxNames[effect - 1];	// not including "none" so offset by 1
	};
	cr.setGLBlend = function(this_, effect, gl)
	{
		if (!gl)
			return;
		this_.srcBlend = gl.ONE;
		this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
		switch (effect) {
		case 1:		// lighter (additive)
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ONE;
			break;
		case 2:		// xor
			break;	// todo
		case 3:		// copy
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ZERO;
			break;
		case 4:		// destination-over
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ONE;
			break;
		case 5:		// source-in
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 6:		// destination-in
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		case 7:		// source-out
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 8:		// destination-out
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 9:		// source-atop
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 10:	// destination-atop
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		}
	};
	cr.round6dp = function (x)
	{
		return Math.round(x * 1000000) / 1000000;
	};
	/*
	var localeCompare_options = {
		"usage": "search",
		"sensitivity": "accent"
	};
	var has_localeCompare = !!"a".localeCompare;
	var localeCompare_works1 = (has_localeCompare && "a".localeCompare("A", undefined, localeCompare_options) === 0);
	var localeCompare_works2 = (has_localeCompare && "a".localeCompare("á", undefined, localeCompare_options) !== 0);
	var supports_localeCompare = (has_localeCompare && localeCompare_works1 && localeCompare_works2);
	*/
	cr.equals_nocase = function (a, b)
	{
		if (typeof a !== "string" || typeof b !== "string")
			return false;
		if (a.length !== b.length)
			return false;
		if (a === b)
			return true;
		/*
		if (supports_localeCompare)
		{
			return (a.localeCompare(b, undefined, localeCompare_options) === 0);
		}
		else
		{
		*/
			return a.toLowerCase() === b.toLowerCase();
	};
	cr.isCanvasInputEvent = function (e)
	{
		var target = e.target;
		if (!target)
			return true;
		if (target === document || target === window)
			return true;
		if (document && document.body && target === document.body)
			return true;
		if (cr.equals_nocase(target.tagName, "canvas"))
			return true;
		return false;
	};
}());
;
(function()
{
	var raf = window["requestAnimationFrame"] ||
	  window["mozRequestAnimationFrame"]    ||
	  window["webkitRequestAnimationFrame"] ||
	  window["msRequestAnimationFrame"]     ||
	  window["oRequestAnimationFrame"];
	function Runtime(canvas)
	{
		if (!canvas || (!canvas.getContext && !canvas["dc"]))
			return;
		if (canvas["c2runtime"])
			return;
		else
			canvas["c2runtime"] = this;
		var self = this;
		this.isCrosswalk = /crosswalk/i.test(navigator.userAgent) || /xwalk/i.test(navigator.userAgent) || !!(typeof window["c2isCrosswalk"] !== "undefined" && window["c2isCrosswalk"]);
		this.isCordova = this.isCrosswalk || (typeof window["device"] !== "undefined" && (typeof window["device"]["cordova"] !== "undefined" || typeof window["device"]["phonegap"] !== "undefined")) || (typeof window["c2iscordova"] !== "undefined" && window["c2iscordova"]);
		this.isPhoneGap = this.isCordova;
		this.isDirectCanvas = !!canvas["dc"];
		this.isAppMobi = (typeof window["AppMobi"] !== "undefined" || this.isDirectCanvas);
		this.isCocoonJs = !!window["c2cocoonjs"];
		this.isEjecta = !!window["c2ejecta"];
		if (this.isCocoonJs)
		{
			CocoonJS["App"]["onSuspended"].addEventListener(function() {
				self["setSuspended"](true);
			});
			CocoonJS["App"]["onActivated"].addEventListener(function () {
				self["setSuspended"](false);
			});
		}
		if (this.isEjecta)
		{
			document.addEventListener("pagehide", function() {
				self["setSuspended"](true);
			});
			document.addEventListener("pageshow", function() {
				self["setSuspended"](false);
			});
			document.addEventListener("resize", function () {
				self["setSize"](window.innerWidth, window.innerHeight);
			});
		}
		this.isDomFree = (this.isDirectCanvas || this.isCocoonJs || this.isEjecta);
		this.isMicrosoftEdge = /edge\//i.test(navigator.userAgent);
		this.isIE = (/msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent) || /iemobile/i.test(navigator.userAgent)) && !this.isMicrosoftEdge;
		this.isTizen = /tizen/i.test(navigator.userAgent);
		this.isAndroid = /android/i.test(navigator.userAgent) && !this.isTizen && !this.isIE && !this.isMicrosoftEdge;		// IE mobile and Tizen masquerade as Android
		this.isiPhone = (/iphone/i.test(navigator.userAgent) || /ipod/i.test(navigator.userAgent)) && !this.isIE && !this.isMicrosoftEdge;	// treat ipod as an iphone; IE mobile masquerades as iPhone
		this.isiPad = /ipad/i.test(navigator.userAgent);
		this.isiOS = this.isiPhone || this.isiPad || this.isEjecta;
		this.isiPhoneiOS6 = (this.isiPhone && /os\s6/i.test(navigator.userAgent));
		this.isChrome = (/chrome/i.test(navigator.userAgent) || /chromium/i.test(navigator.userAgent)) && !this.isIE && !this.isMicrosoftEdge;	// note true on Chromium-based webview on Android 4.4+; IE 'Edge' mode also pretends to be Chrome
		this.isAmazonWebApp = /amazonwebappplatform/i.test(navigator.userAgent);
		this.isFirefox = /firefox/i.test(navigator.userAgent);
		this.isSafari = /safari/i.test(navigator.userAgent) && !this.isChrome && !this.isIE && !this.isMicrosoftEdge;		// Chrome and IE Mobile masquerade as Safari
		this.isWindows = /windows/i.test(navigator.userAgent);
		this.isNWjs = (typeof window["c2nodewebkit"] !== "undefined" || typeof window["c2nwjs"] !== "undefined" || /nodewebkit/i.test(navigator.userAgent) || /nwjs/i.test(navigator.userAgent));
		this.isNodeWebkit = this.isNWjs;		// old name for backwards compat
		this.isArcade = (typeof window["is_scirra_arcade"] !== "undefined");
		this.isWindows8App = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.isWindows8Capable = !!(typeof window["c2isWindows8Capable"] !== "undefined" && window["c2isWindows8Capable"]);
		this.isWindowsPhone8 = !!(typeof window["c2isWindowsPhone8"] !== "undefined" && window["c2isWindowsPhone8"]);
		this.isWindowsPhone81 = !!(typeof window["c2isWindowsPhone81"] !== "undefined" && window["c2isWindowsPhone81"]);
		this.isWindows10 = !!window["cr_windows10"];
		this.isWinJS = (this.isWindows8App || this.isWindows8Capable || this.isWindowsPhone81 || this.isWindows10);	// note not WP8.0
		this.isBlackberry10 = !!(typeof window["c2isBlackberry10"] !== "undefined" && window["c2isBlackberry10"]);
		this.isAndroidStockBrowser = (this.isAndroid && !this.isChrome && !this.isCrosswalk && !this.isFirefox && !this.isAmazonWebApp && !this.isDomFree);
		this.devicePixelRatio = 1;
		this.isMobile = (this.isCordova || this.isCrosswalk || this.isAppMobi || this.isCocoonJs || this.isAndroid || this.isiOS || this.isWindowsPhone8 || this.isWindowsPhone81 || this.isBlackberry10 || this.isTizen || this.isEjecta);
		if (!this.isMobile)
		{
			this.isMobile = /(blackberry|bb10|playbook|palm|symbian|nokia|windows\s+ce|phone|mobile|tablet|kindle|silk)/i.test(navigator.userAgent);
		}
		this.isWKWebView = !!(this.isiOS && this.isCordova && window["webkit"]);
		if (typeof cr_is_preview !== "undefined" && !this.isNWjs && (window.location.search === "?nw" || /nodewebkit/i.test(navigator.userAgent) || /nwjs/i.test(navigator.userAgent)))
		{
			this.isNWjs = true;
		}
		this.isDebug = (typeof cr_is_preview !== "undefined" && window.location.search.indexOf("debug") > -1);
		this.canvas = canvas;
		this.canvasdiv = document.getElementById("c2canvasdiv");
		this.gl = null;
		this.glwrap = null;
		this.glUnmaskedRenderer = "(unavailable)";
		this.enableFrontToBack = false;
		this.earlyz_index = 0;
		this.ctx = null;
		this.firstInFullscreen = false;
		this.oldWidth = 0;		// for restoring non-fullscreen canvas after fullscreen
		this.oldHeight = 0;
		this.canvas.oncontextmenu = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		this.canvas.onselectstart = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		if (this.isDirectCanvas)
			window["c2runtime"] = this;
		if (this.isNWjs)
		{
			window["ondragover"] = function(e) { e.preventDefault(); return false; };
			window["ondrop"] = function(e) { e.preventDefault(); return false; };
			if (window["nwgui"] && window["nwgui"]["App"]["clearCache"])
				window["nwgui"]["App"]["clearCache"]();
		}
		if (this.isAndroidStockBrowser && typeof jQuery !== "undefined")
		{
			jQuery("canvas").parents("*").css("overflow", "visible");
		}
		this.width = canvas.width;
		this.height = canvas.height;
		this.draw_width = this.width;
		this.draw_height = this.height;
		this.cssWidth = this.width;
		this.cssHeight = this.height;
		this.lastWindowWidth = window.innerWidth;
		this.lastWindowHeight = window.innerHeight;
		this.forceCanvasAlpha = false;		// note: now unused, left for backwards compat since plugins could modify it
		this.redraw = true;
		this.isSuspended = false;
		if (!Date.now) {
		  Date.now = function now() {
			return +new Date();
		  };
		}
		this.plugins = [];
		this.types = {};
		this.types_by_index = [];
		this.behaviors = [];
		this.layouts = {};
		this.layouts_by_index = [];
		this.eventsheets = {};
		this.eventsheets_by_index = [];
		this.wait_for_textures = [];        // for blocking until textures loaded
		this.triggers_to_postinit = [];
		this.all_global_vars = [];
		this.all_local_vars = [];
		this.solidBehavior = null;
		this.jumpthruBehavior = null;
		this.shadowcasterBehavior = null;
		this.deathRow = {};
		this.hasPendingInstances = false;		// true if anything exists in create row or death row
		this.isInClearDeathRow = false;
		this.isInOnDestroy = 0;					// needs to support recursion so increments and decrements and is true if > 0
		this.isRunningEvents = false;
		this.isEndingLayout = false;
		this.createRow = [];
		this.isLoadingState = false;
		this.saveToSlot = "";
		this.loadFromSlot = "";
		this.loadFromJson = null;			// set to string when there is something to try to load
		this.lastSaveJson = "";
		this.signalledContinuousPreview = false;
		this.suspendDrawing = false;		// for hiding display until continuous preview loads
		this.fireOnCreateAfterLoad = [];	// for delaying "On create" triggers until loading complete
		this.dt = 0;
        this.dt1 = 0;
		this.minimumFramerate = 30;
		this.logictime = 0;			// used to calculate CPUUtilisation
		this.cpuutilisation = 0;
        this.timescale = 1.0;
        this.kahanTime = new cr.KahanAdder();
		this.wallTime = new cr.KahanAdder();
		this.last_tick_time = 0;
		this.fps = 0;
		this.last_fps_time = 0;
		this.tickcount = 0;
		this.execcount = 0;
		this.framecount = 0;        // for fps
		this.objectcount = 0;
		this.changelayout = null;
		this.destroycallbacks = [];
		this.event_stack = [];
		this.event_stack_index = -1;
		this.localvar_stack = [[]];
		this.localvar_stack_index = 0;
		this.trigger_depth = 0;		// recursion depth for triggers
		this.pushEventStack(null);
		this.loop_stack = [];
		this.loop_stack_index = -1;
		this.next_uid = 0;
		this.next_puid = 0;		// permanent unique ids
		this.layout_first_tick = true;
		this.family_count = 0;
		this.suspend_events = [];
		this.raf_id = -1;
		this.timeout_id = -1;
		this.isloading = true;
		this.loadingprogress = 0;
		this.isNodeFullscreen = false;
		this.stackLocalCount = 0;	// number of stack-based local vars for recursion
		this.audioInstance = null;
		this.had_a_click = false;
		this.isInUserInputEvent = false;
		this.objects_to_pretick = new cr.ObjectSet();
        this.objects_to_tick = new cr.ObjectSet();
		this.objects_to_tick2 = new cr.ObjectSet();
		this.registered_collisions = [];
		this.temp_poly = new cr.CollisionPoly([]);
		this.temp_poly2 = new cr.CollisionPoly([]);
		this.allGroups = [];				// array of all event groups
        this.groups_by_name = {};
		this.cndsBySid = {};
		this.actsBySid = {};
		this.varsBySid = {};
		this.blocksBySid = {};
		this.running_layout = null;			// currently running layout
		this.layer_canvas = null;			// for layers "render-to-texture"
		this.layer_ctx = null;
		this.layer_tex = null;
		this.layout_tex = null;
		this.layout_canvas = null;
		this.layout_ctx = null;
		this.is_WebGL_context_lost = false;
		this.uses_background_blending = false;	// if any shader uses background blending, so entire layout renders to texture
		this.fx_tex = [null, null];
		this.fullscreen_scaling = 0;
		this.files_subfolder = "";			// path with project files
		this.objectsByUid = {};				// maps every in-use UID (as a string) to its instance
		this.loaderlogos = null;
		this.snapshotCanvas = null;
		this.snapshotData = "";
		this.objectRefTable = [];
		this.requestProjectData();
	};
	Runtime.prototype.requestProjectData = function ()
	{
		var self = this;
		if (this.isWKWebView)
		{
			this.fetchLocalFileViaCordovaAsText("data.js", function (str)
			{
				self.loadProject(JSON.parse(str));
			}, function (err)
			{
				alert("Error fetching data.js");
			});
			return;
		}
		var xhr;
		if (this.isWindowsPhone8)
			xhr = new ActiveXObject("Microsoft.XMLHTTP");
		else
			xhr = new XMLHttpRequest();
		var datajs_filename = "data.js";
		if (this.isWindows8App || this.isWindowsPhone8 || this.isWindowsPhone81 || this.isWindows10)
			datajs_filename = "data.json";
		xhr.open("GET", datajs_filename, true);
		var supportsJsonResponse = false;
		if (!this.isDomFree && ("response" in xhr) && ("responseType" in xhr))
		{
			try {
				xhr["responseType"] = "json";
				supportsJsonResponse = (xhr["responseType"] === "json");
			}
			catch (e) {
				supportsJsonResponse = false;
			}
		}
		if (!supportsJsonResponse && ("responseType" in xhr))
		{
			try {
				xhr["responseType"] = "text";
			}
			catch (e) {}
		}
		if ("overrideMimeType" in xhr)
		{
			try {
				xhr["overrideMimeType"]("application/json; charset=utf-8");
			}
			catch (e) {}
		}
		if (this.isWindowsPhone8)
		{
			xhr.onreadystatechange = function ()
			{
				if (xhr.readyState !== 4)
					return;
				self.loadProject(JSON.parse(xhr["responseText"]));
			};
		}
		else
		{
			xhr.onload = function ()
			{
				if (supportsJsonResponse)
				{
					self.loadProject(xhr["response"]);					// already parsed by browser
				}
				else
				{
					if (self.isEjecta)
					{
						var str = xhr["responseText"];
						str = str.substr(str.indexOf("{"));		// trim any BOM
						self.loadProject(JSON.parse(str));
					}
					else
					{
						self.loadProject(JSON.parse(xhr["responseText"]));	// forced to sync parse JSON
					}
				}
			};
			xhr.onerror = function (e)
			{
				cr.logerror("Error requesting " + datajs_filename + ":");
				cr.logerror(e);
			};
		}
		xhr.send();
	};
	Runtime.prototype.initRendererAndLoader = function ()
	{
		var self = this;
		var i, len, j, lenj, k, lenk, t, s, l, y;
		this.isRetina = ((!this.isDomFree || this.isEjecta || this.isCordova) && this.useHighDpi && !this.isAndroidStockBrowser);
		if (this.fullscreen_mode === 0 && this.isiOS)
			this.isRetina = false;
		this.devicePixelRatio = (this.isRetina ? (window["devicePixelRatio"] || window["webkitDevicePixelRatio"] || window["mozDevicePixelRatio"] || window["msDevicePixelRatio"] || 1) : 1);
		this.ClearDeathRow();
		var attribs;
		if (this.fullscreen_mode > 0)
			this["setSize"](window.innerWidth, window.innerHeight, true);
		this.canvas.addEventListener("webglcontextlost", function (ev) {
			ev.preventDefault();
			self.onContextLost();
			cr.logexport("[Construct 2] WebGL context lost");
			window["cr_setSuspended"](true);		// stop rendering
		}, false);
		this.canvas.addEventListener("webglcontextrestored", function (ev) {
			self.glwrap.initState();
			self.glwrap.setSize(self.glwrap.width, self.glwrap.height, true);
			self.layer_tex = null;
			self.layout_tex = null;
			self.fx_tex[0] = null;
			self.fx_tex[1] = null;
			self.onContextRestored();
			self.redraw = true;
			cr.logexport("[Construct 2] WebGL context restored");
			window["cr_setSuspended"](false);		// resume rendering
		}, false);
		try {
			if (this.enableWebGL && (this.isCocoonJs || this.isEjecta || !this.isDomFree))
			{
				attribs = {
					"alpha": true,
					"depth": false,
					"antialias": false,
					"powerPreference": "high-performance",
					"failIfMajorPerformanceCaveat": true
				};
				this.gl = (this.canvas.getContext("webgl2", attribs) ||
						   this.canvas.getContext("webgl", attribs) ||
						   this.canvas.getContext("experimental-webgl", attribs));
			}
		}
		catch (e) {
		}
		if (this.gl)
		{
			var isWebGL2 = (this.gl.getParameter(this.gl.VERSION).indexOf("WebGL 2") === 0);
			var debug_ext = this.gl.getExtension("WEBGL_debug_renderer_info");
			if (debug_ext)
			{
				var unmasked_vendor = this.gl.getParameter(debug_ext.UNMASKED_VENDOR_WEBGL);
				var unmasked_renderer = this.gl.getParameter(debug_ext.UNMASKED_RENDERER_WEBGL);
				this.glUnmaskedRenderer = unmasked_renderer + " [" + unmasked_vendor + "]";
			}
			if (this.enableFrontToBack)
				this.glUnmaskedRenderer += " [front-to-back enabled]";
;
			if (!this.isDomFree)
			{
				this.overlay_canvas = document.createElement("canvas");
				jQuery(this.overlay_canvas).appendTo(this.canvas.parentNode);
				this.overlay_canvas.oncontextmenu = function (e) { return false; };
				this.overlay_canvas.onselectstart = function (e) { return false; };
				this.overlay_canvas.width = Math.round(this.cssWidth * this.devicePixelRatio);
				this.overlay_canvas.height = Math.round(this.cssHeight * this.devicePixelRatio);
				jQuery(this.overlay_canvas).css({"width": this.cssWidth + "px",
												"height": this.cssHeight + "px"});
				this.positionOverlayCanvas();
				this.overlay_ctx = this.overlay_canvas.getContext("2d");
			}
			this.glwrap = new cr.GLWrap(this.gl, this.isMobile, this.enableFrontToBack);
			this.glwrap.setSize(this.canvas.width, this.canvas.height);
			this.glwrap.enable_mipmaps = (this.downscalingQuality !== 0);
			this.ctx = null;
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
				{
					s = t.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
					s.preservesOpaqueness = this.glwrap.programPreservesOpaqueness(s.shaderindex);
					this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
				}
			}
			for (i = 0, len = this.layouts_by_index.length; i < len; i++)
			{
				l = this.layouts_by_index[i];
				for (j = 0, lenj = l.effect_types.length; j < lenj; j++)
				{
					s = l.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
					s.preservesOpaqueness = this.glwrap.programPreservesOpaqueness(s.shaderindex);
				}
				l.updateActiveEffects();		// update preserves opaqueness flag
				for (j = 0, lenj = l.layers.length; j < lenj; j++)
				{
					y = l.layers[j];
					for (k = 0, lenk = y.effect_types.length; k < lenk; k++)
					{
						s = y.effect_types[k];
						s.shaderindex = this.glwrap.getShaderIndex(s.id);
						s.preservesOpaqueness = this.glwrap.programPreservesOpaqueness(s.shaderindex);
						this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
					}
					y.updateActiveEffects();		// update preserves opaqueness flag
				}
			}
		}
		else
		{
			if (this.fullscreen_mode > 0 && this.isDirectCanvas)
			{
;
				this.canvas = null;
				document.oncontextmenu = function (e) { return false; };
				document.onselectstart = function (e) { return false; };
				this.ctx = AppMobi["canvas"]["getContext"]("2d");
				try {
					this.ctx["samplingMode"] = this.linearSampling ? "smooth" : "sharp";
					this.ctx["globalScale"] = 1;
					this.ctx["HTML5CompatibilityMode"] = true;
					this.ctx["imageSmoothingEnabled"] = this.linearSampling;
				} catch(e){}
				if (this.width !== 0 && this.height !== 0)
				{
					this.ctx.width = this.width;
					this.ctx.height = this.height;
				}
			}
			if (!this.ctx)
			{
;
				if (this.isCocoonJs)
				{
					attribs = {
						"antialias": !!this.linearSampling,
						"alpha": true
					};
					this.ctx = this.canvas.getContext("2d", attribs);
				}
				else
				{
					attribs = {
						"alpha": true
					};
					this.ctx = this.canvas.getContext("2d", attribs);
				}
				this.setCtxImageSmoothingEnabled(this.ctx, this.linearSampling);
			}
			this.overlay_canvas = null;
			this.overlay_ctx = null;
		}
		this.tickFunc = function (timestamp) { self.tick(false, timestamp); };
		if (window != window.top && !this.isDomFree && !this.isWinJS && !this.isWindowsPhone8)
		{
			document.addEventListener("mousedown", function () {
				window.focus();
			}, true);
			document.addEventListener("touchstart", function () {
				window.focus();
			}, true);
		}
		if (typeof cr_is_preview !== "undefined")
		{
			if (this.isCocoonJs)
				console.log("[Construct 2] In preview-over-wifi via CocoonJS mode");
			if (window.location.search.indexOf("continuous") > -1)
			{
				cr.logexport("Reloading for continuous preview");
				this.loadFromSlot = "__c2_continuouspreview";
				this.suspendDrawing = true;
			}
			if (this.pauseOnBlur && !this.isMobile)
			{
				jQuery(window).focus(function ()
				{
					self["setSuspended"](false);
				});
				jQuery(window).blur(function ()
				{
					var parent = window.parent;
					if (!parent || !parent.document.hasFocus())
						self["setSuspended"](true);
				});
			}
		}
		window.addEventListener("blur", function () {
			self.onWindowBlur();
		});
		if (!this.isDomFree)
		{
			var unfocusFormControlFunc = function (e) {
				if (cr.isCanvasInputEvent(e) && document["activeElement"] && document["activeElement"] !== document.getElementsByTagName("body")[0] && document["activeElement"].blur)
				{
					try {
						document["activeElement"].blur();
					}
					catch (e) {}
				}
			}
			if (typeof PointerEvent !== "undefined")
			{
				document.addEventListener("pointerdown", unfocusFormControlFunc);
			}
			else if (window.navigator["msPointerEnabled"])
			{
				document.addEventListener("MSPointerDown", unfocusFormControlFunc);
			}
			else
			{
				document.addEventListener("touchstart", unfocusFormControlFunc);
			}
			document.addEventListener("mousedown", unfocusFormControlFunc);
		}
		if (this.fullscreen_mode === 0 && this.isRetina && this.devicePixelRatio > 1)
		{
			this["setSize"](this.original_width, this.original_height, true);
		}
		this.tryLockOrientation();
		this.getready();	// determine things to preload
		this.go();			// run loading screen
		this.extra = {};
		cr.seal(this);
	};
	var webkitRepaintFlag = false;
	Runtime.prototype["setSize"] = function (w, h, force)
	{
		var offx = 0, offy = 0;
		var neww = 0, newh = 0, intscale = 0;
		if (this.lastWindowWidth === w && this.lastWindowHeight === h && !force)
			return;
		this.lastWindowWidth = w;
		this.lastWindowHeight = h;
		var mode = this.fullscreen_mode;
		var orig_aspect, cur_aspect;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.isNodeFullscreen) && !this.isCordova;
		if (!isfullscreen && this.fullscreen_mode === 0 && !force)
			return;			// ignore size events when not fullscreen and not using a fullscreen-in-browser mode
		if (isfullscreen && this.fullscreen_scaling > 0)
			mode = this.fullscreen_scaling;
		var dpr = this.devicePixelRatio;
		if (mode >= 4)
		{
			orig_aspect = this.original_width / this.original_height;
			cur_aspect = w / h;
			if (cur_aspect > orig_aspect)
			{
				neww = h * orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = (neww * dpr) / this.original_width;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale / dpr;
					newh = this.original_height * intscale / dpr;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offx = (w - neww) / 2;
					w = neww;
				}
			}
			else
			{
				newh = w / orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = (newh * dpr) / this.original_height;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale / dpr;
					newh = this.original_height * intscale / dpr;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offy = (h - newh) / 2;
					h = newh;
				}
			}
		}
		else if (this.isNWjs && this.isNodeFullscreen && this.fullscreen_mode_set === 0)
		{
			offx = Math.floor((w - this.original_width) / 2);
			offy = Math.floor((h - this.original_height) / 2);
			w = this.original_width;
			h = this.original_height;
		}
		if (mode < 2)
			this.aspect_scale = dpr;
		this.cssWidth = Math.round(w);
		this.cssHeight = Math.round(h);
		this.width = Math.round(w * dpr);
		this.height = Math.round(h * dpr);
		this.redraw = true;
		if (this.wantFullscreenScalingQuality)
		{
			this.draw_width = this.width;
			this.draw_height = this.height;
			this.fullscreenScalingQuality = true;
		}
		else
		{
			if ((this.width < this.original_width && this.height < this.original_height) || mode === 1)
			{
				this.draw_width = this.width;
				this.draw_height = this.height;
				this.fullscreenScalingQuality = true;
			}
			else
			{
				this.draw_width = this.original_width;
				this.draw_height = this.original_height;
				this.fullscreenScalingQuality = false;
				/*var orig_aspect = this.original_width / this.original_height;
				var cur_aspect = this.width / this.height;
				if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
					this.aspect_scale = this.height / this.original_height;
				else
					this.aspect_scale = this.width / this.original_width;*/
				if (mode === 2)		// scale inner
				{
					orig_aspect = this.original_width / this.original_height;
					cur_aspect = this.lastWindowWidth / this.lastWindowHeight;
					if (cur_aspect < orig_aspect)
						this.draw_width = this.draw_height * cur_aspect;
					else if (cur_aspect > orig_aspect)
						this.draw_height = this.draw_width / cur_aspect;
				}
				else if (mode === 3)
				{
					orig_aspect = this.original_width / this.original_height;
					cur_aspect = this.lastWindowWidth / this.lastWindowHeight;
					if (cur_aspect > orig_aspect)
						this.draw_width = this.draw_height * cur_aspect;
					else if (cur_aspect < orig_aspect)
						this.draw_height = this.draw_width / cur_aspect;
				}
			}
		}
		if (this.canvasdiv && !this.isDomFree)
		{
			jQuery(this.canvasdiv).css({"width": Math.round(w) + "px",
										"height": Math.round(h) + "px",
										"margin-left": Math.floor(offx) + "px",
										"margin-top": Math.floor(offy) + "px"});
			if (typeof cr_is_preview !== "undefined")
			{
				jQuery("#borderwrap").css({"width": Math.round(w) + "px",
											"height": Math.round(h) + "px"});
			}
		}
		if (this.canvas)
		{
			this.canvas.width = Math.round(w * dpr);
			this.canvas.height = Math.round(h * dpr);
			if (this.isEjecta)
			{
				this.canvas.style.left = Math.floor(offx) + "px";
				this.canvas.style.top = Math.floor(offy) + "px";
				this.canvas.style.width = Math.round(w) + "px";
				this.canvas.style.height = Math.round(h) + "px";
			}
			else if (this.isRetina && !this.isDomFree)
			{
				this.canvas.style.width = Math.round(w) + "px";
				this.canvas.style.height = Math.round(h) + "px";
			}
		}
		if (this.overlay_canvas)
		{
			this.overlay_canvas.width = Math.round(w * dpr);
			this.overlay_canvas.height = Math.round(h * dpr);
			this.overlay_canvas.style.width = this.cssWidth + "px";
			this.overlay_canvas.style.height = this.cssHeight + "px";
		}
		if (this.glwrap)
		{
			this.glwrap.setSize(Math.round(w * dpr), Math.round(h * dpr));
		}
		if (this.isDirectCanvas && this.ctx)
		{
			this.ctx.width = Math.round(w);
			this.ctx.height = Math.round(h);
		}
		if (this.ctx)
		{
			this.setCtxImageSmoothingEnabled(this.ctx, this.linearSampling);
		}
		this.tryLockOrientation();
		if (this.isiPhone && !this.isCordova)
		{
			window.scrollTo(0, 0);
		}
	};
	Runtime.prototype.tryLockOrientation = function ()
	{
		if (!this.autoLockOrientation || this.orientations === 0)
			return;
		var orientation = "portrait";
		if (this.orientations === 2)
			orientation = "landscape";
		try {
			if (screen["orientation"] && screen["orientation"]["lock"])
				screen["orientation"]["lock"](orientation).catch(function(){});
			else if (screen["lockOrientation"])
				screen["lockOrientation"](orientation);
			else if (screen["webkitLockOrientation"])
				screen["webkitLockOrientation"](orientation);
			else if (screen["mozLockOrientation"])
				screen["mozLockOrientation"](orientation);
			else if (screen["msLockOrientation"])
				screen["msLockOrientation"](orientation);
		}
		catch (e)
		{
			if (console && console.warn)
				console.warn("Failed to lock orientation: ", e);
		}
	};
	Runtime.prototype.onContextLost = function ()
	{
		this.glwrap.contextLost();
		this.is_WebGL_context_lost = true;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onLostWebGLContext)
				t.onLostWebGLContext();
		}
	};
	Runtime.prototype.onContextRestored = function ()
	{
		this.is_WebGL_context_lost = false;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onRestoreWebGLContext)
				t.onRestoreWebGLContext();
		}
	};
	Runtime.prototype.positionOverlayCanvas = function()
	{
		if (this.isDomFree)
			return;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"] || this.isNodeFullscreen) && !this.isCordova;
		var overlay_position = isfullscreen ? jQuery(this.canvas).offset() : jQuery(this.canvas).position();
		overlay_position.position = "absolute";
		jQuery(this.overlay_canvas).css(overlay_position);
	};
	var caf = window["cancelAnimationFrame"] ||
	  window["mozCancelAnimationFrame"]    ||
	  window["webkitCancelAnimationFrame"] ||
	  window["msCancelAnimationFrame"]     ||
	  window["oCancelAnimationFrame"];
	Runtime.prototype["setSuspended"] = function (s)
	{
		var i, len;
		var self = this;
		if (s && !this.isSuspended)
		{
			cr.logexport("[Construct 2] Suspending");
			this.isSuspended = true;			// next tick will be last
			if (this.raf_id !== -1 && caf)		// note: CocoonJS does not implement cancelAnimationFrame
				caf(this.raf_id);
			if (this.timeout_id !== -1)
				clearTimeout(this.timeout_id);
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](true);
		}
		else if (!s && this.isSuspended)
		{
			cr.logexport("[Construct 2] Resuming");
			this.isSuspended = false;
			this.last_tick_time = cr.performance_now();	// ensure first tick is a zero-dt one
			this.last_fps_time = cr.performance_now();	// reset FPS counter
			this.framecount = 0;
			this.logictime = 0;
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](false);
			this.tick(false);						// kick off runtime again
		}
	};
	Runtime.prototype.addSuspendCallback = function (f)
	{
		this.suspend_events.push(f);
	};
	Runtime.prototype.GetObjectReference = function (i)
	{
;
		return this.objectRefTable[i];
	};
	Runtime.prototype.loadProject = function (data_response)
	{
;
		if (!data_response || !data_response["project"])
			cr.logerror("Project model unavailable");
		var pm = data_response["project"];
		this.name = pm[0];
		this.first_layout = pm[1];
		this.fullscreen_mode = pm[12];	// 0 = off, 1 = crop, 2 = scale inner, 3 = scale outer, 4 = letterbox scale, 5 = integer letterbox scale
		this.fullscreen_mode_set = pm[12];
		this.original_width = pm[10];
		this.original_height = pm[11];
		this.parallax_x_origin = this.original_width / 2;
		this.parallax_y_origin = this.original_height / 2;
		if (this.isDomFree && !this.isEjecta && (pm[12] >= 4 || pm[12] === 0))
		{
			cr.logexport("[Construct 2] Letterbox scale fullscreen modes are not supported on this platform - falling back to 'Scale outer'");
			this.fullscreen_mode = 3;
			this.fullscreen_mode_set = 3;
		}
		this.uses_loader_layout = pm[18];
		this.loaderstyle = pm[19];
		if (this.loaderstyle === 0)
		{
			var loaderImage = new Image();
			loaderImage.crossOrigin = "anonymous";
			this.setImageSrc(loaderImage, "loading-logo.png");
			this.loaderlogos = {
				logo: loaderImage
			};
		}
		else if (this.loaderstyle === 4)	// c2 splash
		{
			var loaderC2logo_1024 = new Image();
			loaderC2logo_1024.src = "";
			var loaderC2logo_512 = new Image();
			loaderC2logo_512.src = "";
			var loaderC2logo_256 = new Image();
			loaderC2logo_256.src = "";
			var loaderC2logo_128 = new Image();
			loaderC2logo_128.src = "";
			var loaderPowered_1024 = new Image();
			loaderPowered_1024.src = "";
			var loaderPowered_512 = new Image();
			loaderPowered_512.src = "";
			var loaderPowered_256 = new Image();
			loaderPowered_256.src = "";
			var loaderPowered_128 = new Image();
			loaderPowered_128.src = "";
			var loaderWebsite_1024 = new Image();
			loaderWebsite_1024.src = "";
			var loaderWebsite_512 = new Image();
			loaderWebsite_512.src = "";
			var loaderWebsite_256 = new Image();
			loaderWebsite_256.src = "";
			var loaderWebsite_128 = new Image();
			loaderWebsite_128.src = "";
			this.loaderlogos = {
				logo: [loaderC2logo_1024, loaderC2logo_512, loaderC2logo_256, loaderC2logo_128],
				powered: [loaderPowered_1024, loaderPowered_512, loaderPowered_256, loaderPowered_128],
				website: [loaderWebsite_1024, loaderWebsite_512, loaderWebsite_256, loaderWebsite_128]
			};
		}
		this.next_uid = pm[21];
		this.objectRefTable = cr.getObjectRefTable();
		this.system = new cr.system_object(this);
		var i, len, j, lenj, k, lenk, idstr, m, b, t, f, p;
		var plugin, plugin_ctor;
		for (i = 0, len = pm[2].length; i < len; i++)
		{
			m = pm[2][i];
			p = this.GetObjectReference(m[0]);
;
			cr.add_common_aces(m, p.prototype);
			plugin = new p(this);
			plugin.singleglobal = m[1];
			plugin.is_world = m[2];
			plugin.is_rotatable = m[5];
			plugin.must_predraw = m[9];
			if (plugin.onCreate)
				plugin.onCreate();  // opportunity to override default ACEs
			cr.seal(plugin);
			this.plugins.push(plugin);
		}
		this.objectRefTable = cr.getObjectRefTable();
		for (i = 0, len = pm[3].length; i < len; i++)
		{
			m = pm[3][i];
			plugin_ctor = this.GetObjectReference(m[1]);
;
			plugin = null;
			for (j = 0, lenj = this.plugins.length; j < lenj; j++)
			{
				if (this.plugins[j] instanceof plugin_ctor)
				{
					plugin = this.plugins[j];
					break;
				}
			}
;
;
			var type_inst = new plugin.Type(plugin);
;
			type_inst.name = m[0];
			type_inst.is_family = m[2];
			type_inst.instvar_sids = m[3].slice(0);
			type_inst.vars_count = m[3].length;
			type_inst.behs_count = m[4];
			type_inst.fx_count = m[5];
			type_inst.sid = m[11];
			if (type_inst.is_family)
			{
				type_inst.members = [];				// types in this family
				type_inst.family_index = this.family_count++;
				type_inst.families = null;
			}
			else
			{
				type_inst.members = null;
				type_inst.family_index = -1;
				type_inst.families = [];			// families this type belongs to
			}
			type_inst.family_var_map = null;
			type_inst.family_beh_map = null;
			type_inst.family_fx_map = null;
			type_inst.is_contained = false;
			type_inst.container = null;
			if (m[6])
			{
				type_inst.texture_file = m[6][0];
				type_inst.texture_filesize = m[6][1];
				type_inst.texture_pixelformat = m[6][2];
			}
			else
			{
				type_inst.texture_file = null;
				type_inst.texture_filesize = 0;
				type_inst.texture_pixelformat = 0;		// rgba8
			}
			if (m[7])
			{
				type_inst.animations = m[7];
			}
			else
			{
				type_inst.animations = null;
			}
			type_inst.index = i;                                // save index in to types array in type
			type_inst.instances = [];                           // all instances of this type
			type_inst.deadCache = [];							// destroyed instances to recycle next create
			type_inst.solstack = [new cr.selection(type_inst)]; // initialise SOL stack with one empty SOL
			type_inst.cur_sol = 0;
			type_inst.default_instance = null;
			type_inst.default_layerindex = 0;
			type_inst.stale_iids = true;
			type_inst.updateIIDs = cr.type_updateIIDs;
			type_inst.getFirstPicked = cr.type_getFirstPicked;
			type_inst.getPairedInstance = cr.type_getPairedInstance;
			type_inst.getCurrentSol = cr.type_getCurrentSol;
			type_inst.pushCleanSol = cr.type_pushCleanSol;
			type_inst.pushCopySol = cr.type_pushCopySol;
			type_inst.popSol = cr.type_popSol;
			type_inst.getBehaviorByName = cr.type_getBehaviorByName;
			type_inst.getBehaviorIndexByName = cr.type_getBehaviorIndexByName;
			type_inst.getEffectIndexByName = cr.type_getEffectIndexByName;
			type_inst.applySolToContainer = cr.type_applySolToContainer;
			type_inst.getInstanceByIID = cr.type_getInstanceByIID;
			type_inst.collision_grid = new cr.SparseGrid(this.original_width, this.original_height);
			type_inst.any_cell_changed = true;
			type_inst.any_instance_parallaxed = false;
			type_inst.extra = {};
			type_inst.toString = cr.type_toString;
			type_inst.behaviors = [];
			for (j = 0, lenj = m[8].length; j < lenj; j++)
			{
				b = m[8][j];
				var behavior_ctor = this.GetObjectReference(b[1]);
				var behavior_plugin = null;
				for (k = 0, lenk = this.behaviors.length; k < lenk; k++)
				{
					if (this.behaviors[k] instanceof behavior_ctor)
					{
						behavior_plugin = this.behaviors[k];
						break;
					}
				}
				if (!behavior_plugin)
				{
					behavior_plugin = new behavior_ctor(this);
					behavior_plugin.my_types = [];						// types using this behavior
					behavior_plugin.my_instances = new cr.ObjectSet(); 	// instances of this behavior
					if (behavior_plugin.onCreate)
						behavior_plugin.onCreate();
					cr.seal(behavior_plugin);
					this.behaviors.push(behavior_plugin);
					if (cr.behaviors.solid && behavior_plugin instanceof cr.behaviors.solid)
						this.solidBehavior = behavior_plugin;
					if (cr.behaviors.jumpthru && behavior_plugin instanceof cr.behaviors.jumpthru)
						this.jumpthruBehavior = behavior_plugin;
					if (cr.behaviors.shadowcaster && behavior_plugin instanceof cr.behaviors.shadowcaster)
						this.shadowcasterBehavior = behavior_plugin;
				}
				if (behavior_plugin.my_types.indexOf(type_inst) === -1)
					behavior_plugin.my_types.push(type_inst);
				var behavior_type = new behavior_plugin.Type(behavior_plugin, type_inst);
				behavior_type.name = b[0];
				behavior_type.sid = b[2];
				behavior_type.onCreate();
				cr.seal(behavior_type);
				type_inst.behaviors.push(behavior_type);
			}
			type_inst.global = m[9];
			type_inst.isOnLoaderLayout = m[10];
			type_inst.effect_types = [];
			for (j = 0, lenj = m[12].length; j < lenj; j++)
			{
				type_inst.effect_types.push({
					id: m[12][j][0],
					name: m[12][j][1],
					shaderindex: -1,
					preservesOpaqueness: false,
					active: true,
					index: j
				});
			}
			type_inst.tile_poly_data = m[13];
			if (!this.uses_loader_layout || type_inst.is_family || type_inst.isOnLoaderLayout || !plugin.is_world)
			{
				type_inst.onCreate();
				cr.seal(type_inst);
			}
			if (type_inst.name)
				this.types[type_inst.name] = type_inst;
			this.types_by_index.push(type_inst);
			if (plugin.singleglobal)
			{
				var instance = new plugin.Instance(type_inst);
				instance.uid = this.next_uid++;
				instance.puid = this.next_puid++;
				instance.iid = 0;
				instance.get_iid = cr.inst_get_iid;
				instance.toString = cr.inst_toString;
				instance.properties = m[14];
				instance.onCreate();
				cr.seal(instance);
				type_inst.instances.push(instance);
				this.objectsByUid[instance.uid.toString()] = instance;
			}
		}
		for (i = 0, len = pm[4].length; i < len; i++)
		{
			var familydata = pm[4][i];
			var familytype = this.types_by_index[familydata[0]];
			var familymember;
			for (j = 1, lenj = familydata.length; j < lenj; j++)
			{
				familymember = this.types_by_index[familydata[j]];
				familymember.families.push(familytype);
				familytype.members.push(familymember);
			}
		}
		for (i = 0, len = pm[28].length; i < len; i++)
		{
			var containerdata = pm[28][i];
			var containertypes = [];
			for (j = 0, lenj = containerdata.length; j < lenj; j++)
				containertypes.push(this.types_by_index[containerdata[j]]);
			for (j = 0, lenj = containertypes.length; j < lenj; j++)
			{
				containertypes[j].is_contained = true;
				containertypes[j].container = containertypes;
			}
		}
		if (this.family_count > 0)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (t.is_family || !t.families.length)
					continue;
				t.family_var_map = new Array(this.family_count);
				t.family_beh_map = new Array(this.family_count);
				t.family_fx_map = new Array(this.family_count);
				var all_fx = [];
				var varsum = 0;
				var behsum = 0;
				var fxsum = 0;
				for (j = 0, lenj = t.families.length; j < lenj; j++)
				{
					f = t.families[j];
					t.family_var_map[f.family_index] = varsum;
					varsum += f.vars_count;
					t.family_beh_map[f.family_index] = behsum;
					behsum += f.behs_count;
					t.family_fx_map[f.family_index] = fxsum;
					fxsum += f.fx_count;
					for (k = 0, lenk = f.effect_types.length; k < lenk; k++)
						all_fx.push(cr.shallowCopy({}, f.effect_types[k]));
				}
				t.effect_types = all_fx.concat(t.effect_types);
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
					t.effect_types[j].index = j;
			}
		}
		for (i = 0, len = pm[5].length; i < len; i++)
		{
			m = pm[5][i];
			var layout = new cr.layout(this, m);
			cr.seal(layout);
			this.layouts[layout.name] = layout;
			this.layouts_by_index.push(layout);
		}
		for (i = 0, len = pm[6].length; i < len; i++)
		{
			m = pm[6][i];
			var sheet = new cr.eventsheet(this, m);
			cr.seal(sheet);
			this.eventsheets[sheet.name] = sheet;
			this.eventsheets_by_index.push(sheet);
		}
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].postInit();
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].updateDeepIncludes();
		for (i = 0, len = this.triggers_to_postinit.length; i < len; i++)
			this.triggers_to_postinit[i].postInit();
		cr.clearArray(this.triggers_to_postinit)
		this.audio_to_preload = pm[7];
		this.files_subfolder = pm[8];
		this.pixel_rounding = pm[9];
		this.aspect_scale = 1.0;
		this.enableWebGL = pm[13];
		this.linearSampling = pm[14];
		this.clearBackground = pm[15];
		this.versionstr = pm[16];
		this.useHighDpi = pm[17];
		this.orientations = pm[20];		// 0 = any, 1 = portrait, 2 = landscape
		this.autoLockOrientation = (this.orientations > 0);
		this.pauseOnBlur = pm[22];
		this.wantFullscreenScalingQuality = pm[23];		// false = low quality, true = high quality
		this.fullscreenScalingQuality = this.wantFullscreenScalingQuality;
		this.downscalingQuality = pm[24];	// 0 = low (mips off), 1 = medium (mips on, dense spritesheet), 2 = high (mips on, sparse spritesheet)
		this.preloadSounds = pm[25];		// 0 = no, 1 = yes
		this.projectName = pm[26];
		this.enableFrontToBack = pm[27] && !this.isIE;		// front-to-back renderer disabled in IE (but not Edge)
		this.start_time = Date.now();
		cr.clearArray(this.objectRefTable);
		this.initRendererAndLoader();
	};
	var anyImageHadError = false;
	var MAX_PARALLEL_IMAGE_LOADS = 100;
	var currentlyActiveImageLoads = 0;
	var imageLoadQueue = [];		// array of [img, srcToSet]
	Runtime.prototype.queueImageLoad = function (img_, src_)
	{
		var self = this;
		var doneFunc = function ()
		{
			currentlyActiveImageLoads--;
			self.maybeLoadNextImages();
		};
		img_.addEventListener("load", doneFunc);
		img_.addEventListener("error", doneFunc);
		imageLoadQueue.push([img_, src_]);
		this.maybeLoadNextImages();
	};
	Runtime.prototype.maybeLoadNextImages = function ()
	{
		var next;
		while (imageLoadQueue.length && currentlyActiveImageLoads < MAX_PARALLEL_IMAGE_LOADS)
		{
			currentlyActiveImageLoads++;
			next = imageLoadQueue.shift();
			this.setImageSrc(next[0], next[1]);
		}
	};
	Runtime.prototype.waitForImageLoad = function (img_, src_)
	{
		img_["cocoonLazyLoad"] = true;
		img_.onerror = function (e)
		{
			img_.c2error = true;
			anyImageHadError = true;
			if (console && console.error)
				console.error("Error loading image '" + img_.src + "': ", e);
		};
		if (this.isEjecta)
		{
			img_.src = src_;
		}
		else if (!img_.src)
		{
			if (typeof XAPKReader !== "undefined")
			{
				XAPKReader.get(src_, function (expanded_url)
				{
					img_.src = expanded_url;
				}, function (e)
				{
					img_.c2error = true;
					anyImageHadError = true;
					if (console && console.error)
						console.error("Error extracting image '" + src_ + "' from expansion file: ", e);
				});
			}
			else
			{
				img_.crossOrigin = "anonymous";			// required for Arcade sandbox compatibility
				this.queueImageLoad(img_, src_);		// use a queue to avoid requesting all images simultaneously
			}
		}
		this.wait_for_textures.push(img_);
	};
	Runtime.prototype.findWaitingTexture = function (src_)
	{
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			if (this.wait_for_textures[i].cr_src === src_)
				return this.wait_for_textures[i];
		}
		return null;
	};
	var audio_preload_totalsize = 0;
	var audio_preload_started = false;
	Runtime.prototype.getready = function ()
	{
		if (!this.audioInstance)
			return;
		audio_preload_totalsize = this.audioInstance.setPreloadList(this.audio_to_preload);
	};
	Runtime.prototype.areAllTexturesAndSoundsLoaded = function ()
	{
		var totalsize = audio_preload_totalsize;
		var completedsize = 0;
		var audiocompletedsize = 0;
		var ret = true;
		var i, len, img;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			img = this.wait_for_textures[i];
			var filesize = img.cr_filesize;
			if (!filesize || filesize <= 0)
				filesize = 50000;
			totalsize += filesize;
			if (!!img.src && (img.complete || img["loaded"]) && !img.c2error)
				completedsize += filesize;
			else
				ret = false;    // not all textures loaded
		}
		if (ret && this.preloadSounds && this.audioInstance)
		{
			if (!audio_preload_started)
			{
				this.audioInstance.startPreloads();
				audio_preload_started = true;
			}
			audiocompletedsize = this.audioInstance.getPreloadedSize();
			completedsize += audiocompletedsize;
			if (audiocompletedsize < audio_preload_totalsize)
				ret = false;		// not done yet
		}
		if (totalsize == 0)
			this.progress = 1;		// indicate to C2 splash loader that it can finish now
		else
			this.progress = (completedsize / totalsize);
		return ret;
	};
	var isC2SplashDone = false;
	Runtime.prototype.go = function ()
	{
		if (!this.ctx && !this.glwrap)
			return;
		var ctx = this.ctx || this.overlay_ctx;
		if (this.overlay_canvas)
			this.positionOverlayCanvas();
		var curwidth = window.innerWidth;
		var curheight = window.innerHeight;
		if (this.lastWindowWidth !== curwidth || this.lastWindowHeight !== curheight)
		{
			this["setSize"](curwidth, curheight);
		}
		this.progress = 0;
		this.last_progress = -1;
		var self = this;
		if (this.areAllTexturesAndSoundsLoaded() && (this.loaderstyle !== 4 || isC2SplashDone))
		{
			this.go_loading_finished();
		}
		else
		{
			var ms_elapsed = Date.now() - this.start_time;
			if (ctx)
			{
				var overlay_width = this.width;
				var overlay_height = this.height;
				var dpr = this.devicePixelRatio;
				if (this.loaderstyle < 3 && (this.isCocoonJs || (ms_elapsed >= 500 && this.last_progress != this.progress)))
				{
					ctx.clearRect(0, 0, overlay_width, overlay_height);
					var mx = overlay_width / 2;
					var my = overlay_height / 2;
					var haslogo = (this.loaderstyle === 0 && this.loaderlogos.logo.complete);
					var hlw = 40 * dpr;
					var hlh = 0;
					var logowidth = 80 * dpr;
					var logoheight;
					if (haslogo)
					{
						var loaderLogoImage = this.loaderlogos.logo;
						logowidth = loaderLogoImage.width * dpr;
						logoheight = loaderLogoImage.height * dpr;
						hlw = logowidth / 2;
						hlh = logoheight / 2;
						ctx.drawImage(loaderLogoImage, cr.floor(mx - hlw), cr.floor(my - hlh), logowidth, logoheight);
					}
					if (this.loaderstyle <= 1)
					{
						my += hlh + (haslogo ? 12 * dpr : 0);
						mx -= hlw;
						mx = cr.floor(mx) + 0.5;
						my = cr.floor(my) + 0.5;
						ctx.fillStyle = anyImageHadError ? "red" : "DodgerBlue";
						ctx.fillRect(mx, my, Math.floor(logowidth * this.progress), 6 * dpr);
						ctx.strokeStyle = "black";
						ctx.strokeRect(mx, my, logowidth, 6 * dpr);
						ctx.strokeStyle = "white";
						ctx.strokeRect(mx - 1 * dpr, my - 1 * dpr, logowidth + 2 * dpr, 8 * dpr);
					}
					else if (this.loaderstyle === 2)
					{
						ctx.font = (this.isEjecta ? "12pt ArialMT" : "12pt Arial");
						ctx.fillStyle = anyImageHadError ? "#f00" : "#999";
						ctx.textBaseLine = "middle";
						var percent_text = Math.round(this.progress * 100) + "%";
						var text_dim = ctx.measureText ? ctx.measureText(percent_text) : null;
						var text_width = text_dim ? text_dim.width : 0;
						ctx.fillText(percent_text, mx - (text_width / 2), my);
					}
					this.last_progress = this.progress;
				}
				else if (this.loaderstyle === 4)
				{
					this.draw_c2_splash_loader(ctx);
					if (raf)
						raf(function() { self.go(); });
					else
						setTimeout(function() { self.go(); }, 16);
					return;
				}
			}
			setTimeout(function() { self.go(); }, (this.isCocoonJs ? 10 : 100));
		}
	};
	var splashStartTime = -1;
	var splashFadeInDuration = 300;
	var splashFadeOutDuration = 300;
	var splashAfterFadeOutWait = (typeof cr_is_preview === "undefined" ? 200 : 0);
	var splashIsFadeIn = true;
	var splashIsFadeOut = false;
	var splashFadeInFinish = 0;
	var splashFadeOutStart = 0;
	var splashMinDisplayTime = (typeof cr_is_preview === "undefined" ? 3000 : 0);
	var renderViaCanvas = null;
	var renderViaCtx = null;
	var splashFrameNumber = 0;
	function maybeCreateRenderViaCanvas(w, h)
	{
		if (!renderViaCanvas || renderViaCanvas.width !== w || renderViaCanvas.height !== h)
		{
			renderViaCanvas = document.createElement("canvas");
			renderViaCanvas.width = w;
			renderViaCanvas.height = h;
			renderViaCtx = renderViaCanvas.getContext("2d");
		}
	};
	function mipImage(arr, size)
	{
		if (size <= 128)
			return arr[3];
		else if (size <= 256)
			return arr[2];
		else if (size <= 512)
			return arr[1];
		else
			return arr[0];
	};
	Runtime.prototype.draw_c2_splash_loader = function(ctx)
	{
		if (isC2SplashDone)
			return;
		var w = Math.ceil(this.width);
		var h = Math.ceil(this.height);
		var dpr = this.devicePixelRatio;
		var logoimages = this.loaderlogos.logo;
		var poweredimages = this.loaderlogos.powered;
		var websiteimages = this.loaderlogos.website;
		for (var i = 0; i < 4; ++i)
		{
			if (!logoimages[i].complete || !poweredimages[i].complete || !websiteimages[i].complete)
				return;
		}
		if (splashFrameNumber === 0)
			splashStartTime = Date.now();
		var nowTime = Date.now();
		var isRenderingVia = false;
		var renderToCtx = ctx;
		var drawW, drawH;
		if (splashIsFadeIn || splashIsFadeOut)
		{
			ctx.clearRect(0, 0, w, h);
			maybeCreateRenderViaCanvas(w, h);
			renderToCtx = renderViaCtx;
			isRenderingVia = true;
			if (splashIsFadeIn && splashFrameNumber === 1)
				splashStartTime = Date.now();
		}
		else
		{
			ctx.globalAlpha = 1;
		}
		renderToCtx.fillStyle = "#333333";
		renderToCtx.fillRect(0, 0, w, h);
		if (this.cssHeight > 256)
		{
			drawW = cr.clamp(h * 0.22, 105, w * 0.6);
			drawH = drawW * 0.25;
			renderToCtx.drawImage(mipImage(poweredimages, drawW), w * 0.5 - drawW/2, h * 0.2 - drawH/2, drawW, drawH);
			drawW = Math.min(h * 0.395, w * 0.95);
			drawH = drawW;
			renderToCtx.drawImage(mipImage(logoimages, drawW), w * 0.5 - drawW/2, h * 0.485 - drawH/2, drawW, drawH);
			drawW = cr.clamp(h * 0.22, 105, w * 0.6);
			drawH = drawW * 0.25;
			renderToCtx.drawImage(mipImage(websiteimages, drawW), w * 0.5 - drawW/2, h * 0.868 - drawH/2, drawW, drawH);
			renderToCtx.fillStyle = "#3C3C3C";
			drawW = w;
			drawH = Math.max(h * 0.005, 2);
			renderToCtx.fillRect(0, h * 0.8 - drawH/2, drawW, drawH);
			renderToCtx.fillStyle = anyImageHadError ? "red" : "#E0FF65";
			drawW = w * this.progress;
			renderToCtx.fillRect(w * 0.5 - drawW/2, h * 0.8 - drawH/2, drawW, drawH);
		}
		else
		{
			drawW = h * 0.55;
			drawH = drawW;
			renderToCtx.drawImage(mipImage(logoimages, drawW), w * 0.5 - drawW/2, h * 0.45 - drawH/2, drawW, drawH);
			renderToCtx.fillStyle = "#3C3C3C";
			drawW = w;
			drawH = Math.max(h * 0.005, 2);
			renderToCtx.fillRect(0, h * 0.85 - drawH/2, drawW, drawH);
			renderToCtx.fillStyle = anyImageHadError ? "red" : "#E0FF65";
			drawW = w * this.progress;
			renderToCtx.fillRect(w * 0.5 - drawW/2, h * 0.85 - drawH/2, drawW, drawH);
		}
		if (isRenderingVia)
		{
			if (splashIsFadeIn)
			{
				if (splashFrameNumber === 0)
					ctx.globalAlpha = 0;
				else
					ctx.globalAlpha = Math.min((nowTime - splashStartTime) / splashFadeInDuration, 1);
			}
			else if (splashIsFadeOut)
			{
				ctx.globalAlpha = Math.max(1 - (nowTime - splashFadeOutStart) / splashFadeOutDuration, 0);
			}
			ctx.drawImage(renderViaCanvas, 0, 0, w, h);
		}
		if (splashIsFadeIn && nowTime - splashStartTime >= splashFadeInDuration && splashFrameNumber >= 2)
		{
			splashIsFadeIn = false;
			splashFadeInFinish = nowTime;
		}
		if (!splashIsFadeIn && nowTime - splashFadeInFinish >= splashMinDisplayTime && !splashIsFadeOut && this.progress >= 1)
		{
			splashIsFadeOut = true;
			splashFadeOutStart = nowTime;
		}
		if ((splashIsFadeOut && nowTime - splashFadeOutStart >= splashFadeOutDuration + splashAfterFadeOutWait) ||
			(typeof cr_is_preview !== "undefined" && this.progress >= 1 && Date.now() - splashStartTime < 500))
		{
			isC2SplashDone = true;
			splashIsFadeIn = false;
			splashIsFadeOut = false;
			renderViaCanvas = null;
			renderViaCtx = null;
			this.loaderlogos = null;
		}
		++splashFrameNumber;
	};
	Runtime.prototype.go_loading_finished = function ()
	{
		if (this.overlay_canvas)
		{
			this.canvas.parentNode.removeChild(this.overlay_canvas);
			this.overlay_ctx = null;
			this.overlay_canvas = null;
		}
		this.start_time = Date.now();
		this.last_fps_time = cr.performance_now();       // for counting framerate
		var i, len, t;
		if (this.uses_loader_layout)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (!t.is_family && !t.isOnLoaderLayout && t.plugin.is_world)
				{
					t.onCreate();
					cr.seal(t);
				}
			}
		}
		else
			this.isloading = false;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			this.layouts_by_index[i].createGlobalNonWorlds();
		}
		if (this.fullscreen_mode >= 2)
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
				this.aspect_scale = this.height / this.original_height;
			else
				this.aspect_scale = this.width / this.original_width;
		}
		if (this.first_layout)
			this.layouts[this.first_layout].startRunning();
		else
			this.layouts_by_index[0].startRunning();
;
		if (!this.uses_loader_layout)
		{
			this.loadingprogress = 1;
			this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
			if (window["C2_RegisterSW"])		// note not all platforms use SW
				window["C2_RegisterSW"]();
		}
		if (navigator["splashscreen"] && navigator["splashscreen"]["hide"])
			navigator["splashscreen"]["hide"]();
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onAppBegin)
				t.onAppBegin();
		}
		if (document["hidden"] || document["webkitHidden"] || document["mozHidden"] || document["msHidden"])
		{
			window["cr_setSuspended"](true);		// stop rendering
		}
		else
		{
			this.tick(false);
		}
		if (this.isDirectCanvas)
			AppMobi["webview"]["execute"]("onGameReady();");
	};
	Runtime.prototype.tick = function (background_wake, timestamp, debug_step)
	{
		if (!this.running_layout)
			return;
		var nowtime = cr.performance_now();
		var logic_start = nowtime;
		if (!debug_step && this.isSuspended && !background_wake)
			return;
		if (!background_wake)
		{
			if (raf)
				this.raf_id = raf(this.tickFunc);
			else
			{
				this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
			}
		}
		var raf_time = timestamp || nowtime;
		var fsmode = this.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"]) && !this.isCordova;
		if ((isfullscreen || this.isNodeFullscreen) && this.fullscreen_scaling > 0)
			fsmode = this.fullscreen_scaling;
		if (fsmode > 0)	// r222: experimentally enabling this workaround for all platforms
		{
			var curwidth = window.innerWidth;
			var curheight = window.innerHeight;
			if (this.lastWindowWidth !== curwidth || this.lastWindowHeight !== curheight)
			{
				this["setSize"](curwidth, curheight);
			}
		}
		if (!this.isDomFree)
		{
			if (isfullscreen)
			{
				if (!this.firstInFullscreen)
					this.firstInFullscreen = true;
			}
			else
			{
				if (this.firstInFullscreen)
				{
					this.firstInFullscreen = false;
					if (this.fullscreen_mode === 0)
					{
						this["setSize"](Math.round(this.oldWidth / this.devicePixelRatio), Math.round(this.oldHeight / this.devicePixelRatio), true);
					}
				}
				else
				{
					this.oldWidth = this.width;
					this.oldHeight = this.height;
				}
			}
		}
		if (this.isloading)
		{
			var done = this.areAllTexturesAndSoundsLoaded();		// updates this.progress
			this.loadingprogress = this.progress;
			if (done)
			{
				this.isloading = false;
				this.progress = 1;
				this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
				if (window["C2_RegisterSW"])
					window["C2_RegisterSW"]();
			}
		}
		this.logic(raf_time);
		if ((this.redraw || this.isCocoonJs) && !this.is_WebGL_context_lost && !this.suspendDrawing && !background_wake)
		{
			this.redraw = false;
			if (this.glwrap)
				this.drawGL();
			else
				this.draw();
			if (this.snapshotCanvas)
			{
				if (this.canvas && this.canvas.toDataURL)
				{
					this.snapshotData = this.canvas.toDataURL(this.snapshotCanvas[0], this.snapshotCanvas[1]);
					if (window["cr_onSnapshot"])
						window["cr_onSnapshot"](this.snapshotData);
					this.trigger(cr.system_object.prototype.cnds.OnCanvasSnapshot, null);
				}
				this.snapshotCanvas = null;
			}
		}
		if (!this.hit_breakpoint)
		{
			this.tickcount++;
			this.execcount++;
			this.framecount++;
		}
		this.logictime += cr.performance_now() - logic_start;
	};
	Runtime.prototype.logic = function (cur_time)
	{
		var i, leni, j, lenj, k, lenk, type, inst, binst;
		if (cur_time - this.last_fps_time >= 1000)  // every 1 second
		{
			this.last_fps_time += 1000;
			if (cur_time - this.last_fps_time >= 1000)
				this.last_fps_time = cur_time;
			this.fps = this.framecount;
			this.framecount = 0;
			this.cpuutilisation = this.logictime;
			this.logictime = 0;
		}
		var wallDt = 0;
		if (this.last_tick_time !== 0)
		{
			var ms_diff = cur_time - this.last_tick_time;
			if (ms_diff < 0)
				ms_diff = 0;
			wallDt = ms_diff / 1000.0; // dt measured in seconds
			this.dt1 = wallDt;
			if (this.dt1 > 0.5)
				this.dt1 = 0;
			else if (this.dt1 > 1 / this.minimumFramerate)
				this.dt1 = 1 / this.minimumFramerate;
		}
		this.last_tick_time = cur_time;
        this.dt = this.dt1 * this.timescale;
        this.kahanTime.add(this.dt);
		this.wallTime.add(wallDt);		// prevent min/max framerate affecting wall clock
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"] || this.isNodeFullscreen) && !this.isCordova;
		if (this.fullscreen_mode >= 2 /* scale */ || (isfullscreen && this.fullscreen_scaling > 0))
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			var mode = this.fullscreen_mode;
			if (isfullscreen && this.fullscreen_scaling > 0)
				mode = this.fullscreen_scaling;
			if ((mode !== 2 && cur_aspect > orig_aspect) || (mode === 2 && cur_aspect < orig_aspect))
			{
				this.aspect_scale = this.height / this.original_height;
			}
			else
			{
				this.aspect_scale = this.width / this.original_width;
			}
			if (this.running_layout)
			{
				this.running_layout.scrollToX(this.running_layout.scrollX);
				this.running_layout.scrollToY(this.running_layout.scrollY);
			}
		}
		else
			this.aspect_scale = (this.isRetina ? this.devicePixelRatio : 1);
		this.ClearDeathRow();
		this.isInOnDestroy++;
		this.system.runWaits();		// prevent instance list changing
		this.isInOnDestroy--;
		this.ClearDeathRow();		// allow instance list changing
		this.isInOnDestroy++;
        var tickarr = this.objects_to_pretick.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].pretick();
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					inst.behavior_insts[k].tick();
				}
			}
		}
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.posttick)
						binst.posttick();
				}
			}
		}
        tickarr = this.objects_to_tick.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
		this.handleSaveLoad();		// save/load now if queued
		i = 0;
		while (this.changelayout && i++ < 10)
		{
			this.doChangeLayout(this.changelayout);
		}
        for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
            this.eventsheets_by_index[i].hasRun = false;
		if (this.running_layout.event_sheet)
			this.running_layout.event_sheet.run();
		cr.clearArray(this.registered_collisions);
		this.layout_first_tick = false;
		this.isInOnDestroy++;		// prevent instance lists from being changed
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				var inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.tick2)
						binst.tick2();
				}
			}
		}
        tickarr = this.objects_to_tick2.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick2();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
	};
	Runtime.prototype.onWindowBlur = function ()
	{
		var i, leni, j, lenj, k, lenk, type, inst, binst;
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (inst.onWindowBlur)
					inst.onWindowBlur();
				if (!inst.behavior_insts)
					continue;	// single-globals don't have behavior_insts
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.onWindowBlur)
						binst.onWindowBlur();
				}
			}
		}
	};
	Runtime.prototype.doChangeLayout = function (changeToLayout)
	{
		var prev_layout = this.running_layout;
		this.running_layout.stopRunning();
		var i, len, j, lenj, k, lenk, type, inst, binst;
		if (this.glwrap)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				type = this.types_by_index[i];
				if (type.is_family)
					continue;
				if (type.unloadTextures && (!type.global || type.instances.length === 0) && changeToLayout.initial_types.indexOf(type) === -1)
				{
					type.unloadTextures();
				}
			}
		}
		if (prev_layout == changeToLayout)
			cr.clearArray(this.system.waits);
		cr.clearArray(this.registered_collisions);
		this.runLayoutChangeMethods(true);
		changeToLayout.startRunning();
		this.runLayoutChangeMethods(false);
		this.redraw = true;
		this.layout_first_tick = true;
		this.ClearDeathRow();
	};
	Runtime.prototype.runLayoutChangeMethods = function (isBeforeChange)
	{
		var i, len, beh, type, j, lenj, inst, k, lenk, binst;
		for (i = 0, len = this.behaviors.length; i < len; i++)
		{
			beh = this.behaviors[i];
			if (isBeforeChange)
			{
				if (beh.onBeforeLayoutChange)
					beh.onBeforeLayoutChange();
			}
			else
			{
				if (beh.onLayoutChange)
					beh.onLayoutChange();
			}
		}
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (!type.global && !type.plugin.singleglobal)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (isBeforeChange)
				{
					if (inst.onBeforeLayoutChange)
						inst.onBeforeLayoutChange();
				}
				else
				{
					if (inst.onLayoutChange)
						inst.onLayoutChange();
				}
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (isBeforeChange)
						{
							if (binst.onBeforeLayoutChange)
								binst.onBeforeLayoutChange();
						}
						else
						{
							if (binst.onLayoutChange)
								binst.onLayoutChange();
						}
					}
				}
			}
		}
	};
	Runtime.prototype.pretickMe = function (inst)
    {
        this.objects_to_pretick.add(inst);
    };
	Runtime.prototype.unpretickMe = function (inst)
	{
		this.objects_to_pretick.remove(inst);
	};
    Runtime.prototype.tickMe = function (inst)
    {
        this.objects_to_tick.add(inst);
    };
	Runtime.prototype.untickMe = function (inst)
	{
		this.objects_to_tick.remove(inst);
	};
	Runtime.prototype.tick2Me = function (inst)
    {
        this.objects_to_tick2.add(inst);
    };
	Runtime.prototype.untick2Me = function (inst)
	{
		this.objects_to_tick2.remove(inst);
	};
    Runtime.prototype.getDt = function (inst)
    {
        if (!inst || inst.my_timescale === -1.0)
            return this.dt;
        return this.dt1 * inst.my_timescale;
    };
	Runtime.prototype.draw = function ()
	{
		this.running_layout.draw(this.ctx);
		if (this.isDirectCanvas)
			this.ctx["present"]();
	};
	Runtime.prototype.drawGL = function ()
	{
		if (this.enableFrontToBack)
		{
			this.earlyz_index = 1;		// start from front, 1-based to avoid exactly equalling near plane Z value
			this.running_layout.drawGL_earlyZPass(this.glwrap);
		}
		this.running_layout.drawGL(this.glwrap);
		this.glwrap.present();
	};
	Runtime.prototype.addDestroyCallback = function (f)
	{
		if (f)
			this.destroycallbacks.push(f);
	};
	Runtime.prototype.removeDestroyCallback = function (f)
	{
		cr.arrayFindRemove(this.destroycallbacks, f);
	};
	Runtime.prototype.getObjectByUID = function (uid_)
	{
;
		var uidstr = uid_.toString();
		if (this.objectsByUid.hasOwnProperty(uidstr))
			return this.objectsByUid[uidstr];
		else
			return null;
	};
	var objectset_cache = [];
	function alloc_objectset()
	{
		if (objectset_cache.length)
			return objectset_cache.pop();
		else
			return new cr.ObjectSet();
	};
	function free_objectset(s)
	{
		s.clear();
		objectset_cache.push(s);
	};
	Runtime.prototype.DestroyInstance = function (inst)
	{
		var i, len;
		var type = inst.type;
		var typename = type.name;
		var has_typename = this.deathRow.hasOwnProperty(typename);
		var obj_set = null;
		if (has_typename)
		{
			obj_set = this.deathRow[typename];
			if (obj_set.contains(inst))
				return;		// already had DestroyInstance called
		}
		else
		{
			obj_set = alloc_objectset();
			this.deathRow[typename] = obj_set;
		}
		obj_set.add(inst);
		this.hasPendingInstances = true;
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				this.DestroyInstance(inst.siblings[i]);
			}
		}
		if (this.isInClearDeathRow)
			obj_set.values_cache.push(inst);
		if (!this.isEndingLayout)
		{
			this.isInOnDestroy++;		// support recursion
			this.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnDestroyed, inst);
			this.isInOnDestroy--;
		}
	};
	Runtime.prototype.ClearDeathRow = function ()
	{
		if (!this.hasPendingInstances)
			return;
		var inst, type, instances;
		var i, j, leni, lenj, obj_set;
		this.isInClearDeathRow = true;
		for (i = 0, leni = this.createRow.length; i < leni; ++i)
		{
			inst = this.createRow[i];
			type = inst.type;
			type.instances.push(inst);
			for (j = 0, lenj = type.families.length; j < lenj; ++j)
			{
				type.families[j].instances.push(inst);
				type.families[j].stale_iids = true;
			}
		}
		cr.clearArray(this.createRow);
		this.IterateDeathRow();		// moved to separate function so for-in performance doesn't hobble entire function
		cr.wipe(this.deathRow);		// all objectsets have already been recycled
		this.isInClearDeathRow = false;
		this.hasPendingInstances = false;
	};
	Runtime.prototype.IterateDeathRow = function ()
	{
		for (var p in this.deathRow)
		{
			if (this.deathRow.hasOwnProperty(p))
			{
				this.ClearDeathRowForType(this.deathRow[p]);
			}
		}
	};
	Runtime.prototype.ClearDeathRowForType = function (obj_set)
	{
		var arr = obj_set.valuesRef();			// get array of items from set
;
		var type = arr[0].type;
;
;
		var i, len, j, lenj, w, f, layer_instances, inst;
		cr.arrayRemoveAllFromObjectSet(type.instances, obj_set);
		type.stale_iids = true;
		if (type.instances.length === 0)
			type.any_instance_parallaxed = false;
		for (i = 0, len = type.families.length; i < len; ++i)
		{
			f = type.families[i];
			cr.arrayRemoveAllFromObjectSet(f.instances, obj_set);
			f.stale_iids = true;
		}
		for (i = 0, len = this.system.waits.length; i < len; ++i)
		{
			w = this.system.waits[i];
			if (w.sols.hasOwnProperty(type.index))
				cr.arrayRemoveAllFromObjectSet(w.sols[type.index].insts, obj_set);
			if (!type.is_family)
			{
				for (j = 0, lenj = type.families.length; j < lenj; ++j)
				{
					f = type.families[j];
					if (w.sols.hasOwnProperty(f.index))
						cr.arrayRemoveAllFromObjectSet(w.sols[f.index].insts, obj_set);
				}
			}
		}
		var first_layer = arr[0].layer;
		if (first_layer)
		{
			if (first_layer.useRenderCells)
			{
				layer_instances = first_layer.instances;
				for (i = 0, len = layer_instances.length; i < len; ++i)
				{
					inst = layer_instances[i];
					if (!obj_set.contains(inst))
						continue;		// not destroying this instance
					inst.update_bbox();
					first_layer.render_grid.update(inst, inst.rendercells, null);
					inst.rendercells.set(0, 0, -1, -1);
				}
			}
			cr.arrayRemoveAllFromObjectSet(first_layer.instances, obj_set);
			first_layer.setZIndicesStaleFrom(0);
		}
		for (i = 0; i < arr.length; ++i)		// check array length every time in case it changes
		{
			this.ClearDeathRowForSingleInstance(arr[i], type);
		}
		free_objectset(obj_set);
		this.redraw = true;
	};
	Runtime.prototype.ClearDeathRowForSingleInstance = function (inst, type)
	{
		var i, len, binst;
		for (i = 0, len = this.destroycallbacks.length; i < len; ++i)
			this.destroycallbacks[i](inst);
		if (inst.collcells)
		{
			type.collision_grid.update(inst, inst.collcells, null);
		}
		var layer = inst.layer;
		if (layer)
		{
			layer.removeFromInstanceList(inst, true);		// remove from both instance list and render grid
		}
		if (inst.behavior_insts)
		{
			for (i = 0, len = inst.behavior_insts.length; i < len; ++i)
			{
				binst = inst.behavior_insts[i];
				if (binst.onDestroy)
					binst.onDestroy();
				binst.behavior.my_instances.remove(inst);
			}
		}
		this.objects_to_pretick.remove(inst);
		this.objects_to_tick.remove(inst);
		this.objects_to_tick2.remove(inst);
		if (inst.onDestroy)
			inst.onDestroy();
		if (this.objectsByUid.hasOwnProperty(inst.uid.toString()))
			delete this.objectsByUid[inst.uid.toString()];
		this.objectcount--;
		if (type.deadCache.length < 100)
			type.deadCache.push(inst);
	};
	Runtime.prototype.createInstance = function (type, layer, sx, sy)
	{
		if (type.is_family)
		{
			var i = cr.floor(Math.random() * type.members.length);
			return this.createInstance(type.members[i], layer, sx, sy);
		}
		if (!type.default_instance)
		{
			return null;
		}
		return this.createInstanceFromInit(type.default_instance, layer, false, sx, sy, false);
	};
	var all_behaviors = [];
	Runtime.prototype.createInstanceFromInit = function (initial_inst, layer, is_startup_instance, sx, sy, skip_siblings)
	{
		var i, len, j, lenj, p, effect_fallback, x, y;
		if (!initial_inst)
			return null;
		var type = this.types_by_index[initial_inst[1]];
;
;
		var is_world = type.plugin.is_world;
;
		if (this.isloading && is_world && !type.isOnLoaderLayout)
			return null;
		if (is_world && !this.glwrap && initial_inst[0][11] === 11)
			return null;
		var original_layer = layer;
		if (!is_world)
			layer = null;
		var inst;
		if (type.deadCache.length)
		{
			inst = type.deadCache.pop();
			inst.recycled = true;
			type.plugin.Instance.call(inst, type);
		}
		else
		{
			inst = new type.plugin.Instance(type);
			inst.recycled = false;
		}
		if (is_startup_instance && !skip_siblings && !this.objectsByUid.hasOwnProperty(initial_inst[2].toString()))
			inst.uid = initial_inst[2];
		else
			inst.uid = this.next_uid++;
		this.objectsByUid[inst.uid.toString()] = inst;
		inst.puid = this.next_puid++;
		inst.iid = type.instances.length;
		for (i = 0, len = this.createRow.length; i < len; ++i)
		{
			if (this.createRow[i].type === type)
				inst.iid++;
		}
		inst.get_iid = cr.inst_get_iid;
		inst.toString = cr.inst_toString;
		var initial_vars = initial_inst[3];
		if (inst.recycled)
		{
			cr.wipe(inst.extra);
		}
		else
		{
			inst.extra = {};
			if (typeof cr_is_preview !== "undefined")
			{
				inst.instance_var_names = [];
				inst.instance_var_names.length = initial_vars.length;
				for (i = 0, len = initial_vars.length; i < len; i++)
					inst.instance_var_names[i] = initial_vars[i][1];
			}
			inst.instance_vars = [];
			inst.instance_vars.length = initial_vars.length;
		}
		for (i = 0, len = initial_vars.length; i < len; i++)
			inst.instance_vars[i] = initial_vars[i][0];
		if (is_world)
		{
			var wm = initial_inst[0];
;
			inst.x = cr.is_undefined(sx) ? wm[0] : sx;
			inst.y = cr.is_undefined(sy) ? wm[1] : sy;
			inst.z = wm[2];
			inst.width = wm[3];
			inst.height = wm[4];
			inst.depth = wm[5];
			inst.angle = wm[6];
			inst.opacity = wm[7];
			inst.hotspotX = wm[8];
			inst.hotspotY = wm[9];
			inst.blend_mode = wm[10];
			effect_fallback = wm[11];
			if (!this.glwrap && type.effect_types.length)	// no WebGL renderer and shaders used
				inst.blend_mode = effect_fallback;			// use fallback blend mode - destroy mode was handled above
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			if (inst.recycled)
			{
				for (i = 0, len = wm[12].length; i < len; i++)
				{
					for (j = 0, lenj = wm[12][i].length; j < lenj; j++)
						inst.effect_params[i][j] = wm[12][i][j];
				}
				inst.bbox.set(0, 0, 0, 0);
				inst.collcells.set(0, 0, -1, -1);
				inst.rendercells.set(0, 0, -1, -1);
				inst.bquad.set_from_rect(inst.bbox);
				cr.clearArray(inst.bbox_changed_callbacks);
			}
			else
			{
				inst.effect_params = wm[12].slice(0);
				for (i = 0, len = inst.effect_params.length; i < len; i++)
					inst.effect_params[i] = wm[12][i].slice(0);
				inst.active_effect_types = [];
				inst.active_effect_flags = [];
				inst.active_effect_flags.length = type.effect_types.length;
				inst.bbox = new cr.rect(0, 0, 0, 0);
				inst.collcells = new cr.rect(0, 0, -1, -1);
				inst.rendercells = new cr.rect(0, 0, -1, -1);
				inst.bquad = new cr.quad();
				inst.bbox_changed_callbacks = [];
				inst.set_bbox_changed = cr.set_bbox_changed;
				inst.add_bbox_changed_callback = cr.add_bbox_changed_callback;
				inst.contains_pt = cr.inst_contains_pt;
				inst.update_bbox = cr.update_bbox;
				inst.update_render_cell = cr.update_render_cell;
				inst.update_collision_cell = cr.update_collision_cell;
				inst.get_zindex = cr.inst_get_zindex;
			}
			inst.tilemap_exists = false;
			inst.tilemap_width = 0;
			inst.tilemap_height = 0;
			inst.tilemap_data = null;
			if (wm.length === 14)
			{
				inst.tilemap_exists = true;
				inst.tilemap_width = wm[13][0];
				inst.tilemap_height = wm[13][1];
				inst.tilemap_data = wm[13][2];
			}
			for (i = 0, len = type.effect_types.length; i < len; i++)
				inst.active_effect_flags[i] = true;
			inst.shaders_preserve_opaqueness = true;
			inst.updateActiveEffects = cr.inst_updateActiveEffects;
			inst.updateActiveEffects();
			inst.uses_shaders = !!inst.active_effect_types.length;
			inst.bbox_changed = true;
			inst.cell_changed = true;
			type.any_cell_changed = true;
			inst.visible = true;
            inst.my_timescale = -1.0;
			inst.layer = layer;
			inst.zindex = layer.instances.length;	// will be placed at top of current layer
			inst.earlyz_index = 0;
			if (typeof inst.collision_poly === "undefined")
				inst.collision_poly = null;
			inst.collisionsEnabled = true;
			this.redraw = true;
		}
		var initial_props, binst;
		cr.clearArray(all_behaviors);
		for (i = 0, len = type.families.length; i < len; i++)
		{
			all_behaviors.push.apply(all_behaviors, type.families[i].behaviors);
		}
		all_behaviors.push.apply(all_behaviors, type.behaviors);
		if (inst.recycled)
		{
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				binst = inst.behavior_insts[i];
				binst.recycled = true;
				btype.behavior.Instance.call(binst, btype, inst);
				initial_props = initial_inst[4][i];
				for (j = 0, lenj = initial_props.length; j < lenj; j++)
					binst.properties[j] = initial_props[j];
				binst.onCreate();
				btype.behavior.my_instances.add(inst);
			}
		}
		else
		{
			inst.behavior_insts = [];
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				var binst = new btype.behavior.Instance(btype, inst);
				binst.recycled = false;
				binst.properties = initial_inst[4][i].slice(0);
				binst.onCreate();
				cr.seal(binst);
				inst.behavior_insts.push(binst);
				btype.behavior.my_instances.add(inst);
			}
		}
		initial_props = initial_inst[5];
		if (inst.recycled)
		{
			for (i = 0, len = initial_props.length; i < len; i++)
				inst.properties[i] = initial_props[i];
		}
		else
			inst.properties = initial_props.slice(0);
		this.createRow.push(inst);
		this.hasPendingInstances = true;
		if (layer)
		{
;
			layer.appendToInstanceList(inst, true);
			if (layer.parallaxX !== 1 || layer.parallaxY !== 1)
				type.any_instance_parallaxed = true;
		}
		this.objectcount++;
		if (type.is_contained)
		{
			inst.is_contained = true;
			if (inst.recycled)
				cr.clearArray(inst.siblings);
			else
				inst.siblings = [];			// note: should not include self in siblings
			if (!is_startup_instance && !skip_siblings)	// layout links initial instances
			{
				for (i = 0, len = type.container.length; i < len; i++)
				{
					if (type.container[i] === type)
						continue;
					if (!type.container[i].default_instance)
					{
						return null;
					}
					inst.siblings.push(this.createInstanceFromInit(type.container[i].default_instance, original_layer, false, is_world ? inst.x : sx, is_world ? inst.y : sy, true));
				}
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					inst.siblings[i].siblings.push(inst);
					for (j = 0; j < len; j++)
					{
						if (i !== j)
							inst.siblings[i].siblings.push(inst.siblings[j]);
					}
				}
			}
		}
		else
		{
			inst.is_contained = false;
			inst.siblings = null;
		}
		inst.onCreate();
		if (!inst.recycled)
			cr.seal(inst);
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].postCreate)
				inst.behavior_insts[i].postCreate();
		}
		return inst;
	};
	Runtime.prototype.getLayerByName = function (layer_name)
	{
		var i, len;
		for (i = 0, len = this.running_layout.layers.length; i < len; i++)
		{
			var layer = this.running_layout.layers[i];
			if (cr.equals_nocase(layer.name, layer_name))
				return layer;
		}
		return null;
	};
	Runtime.prototype.getLayerByNumber = function (index)
	{
		index = cr.floor(index);
		if (index < 0)
			index = 0;
		if (index >= this.running_layout.layers.length)
			index = this.running_layout.layers.length - 1;
		return this.running_layout.layers[index];
	};
	Runtime.prototype.getLayer = function (l)
	{
		if (cr.is_number(l))
			return this.getLayerByNumber(l);
		else
			return this.getLayerByName(l.toString());
	};
	Runtime.prototype.clearSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].getCurrentSol().select_all = true;
		}
	};
	Runtime.prototype.pushCleanSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCleanSol();
		}
	};
	Runtime.prototype.pushCopySol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCopySol();
		}
	};
	Runtime.prototype.popSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].popSol();
		}
	};
	Runtime.prototype.updateAllCells = function (type)
	{
		if (!type.any_cell_changed)
			return;		// all instances must already be up-to-date
		var i, len, instances = type.instances;
		for (i = 0, len = instances.length; i < len; ++i)
		{
			instances[i].update_collision_cell();
		}
		var createRow = this.createRow;
		for (i = 0, len = createRow.length; i < len; ++i)
		{
			if (createRow[i].type === type)
				createRow[i].update_collision_cell();
		}
		type.any_cell_changed = false;
	};
	Runtime.prototype.getCollisionCandidates = function (layer, rtype, bbox, candidates)
	{
		var i, len, t;
		var is_parallaxed = (layer ? (layer.parallaxX !== 1 || layer.parallaxY !== 1) : false);
		if (rtype.is_family)
		{
			for (i = 0, len = rtype.members.length; i < len; ++i)
			{
				t = rtype.members[i];
				if (is_parallaxed || t.any_instance_parallaxed)
				{
					cr.appendArray(candidates, t.instances);
				}
				else
				{
					this.updateAllCells(t);
					t.collision_grid.queryRange(bbox, candidates);
				}
			}
		}
		else
		{
			if (is_parallaxed || rtype.any_instance_parallaxed)
			{
				cr.appendArray(candidates, rtype.instances);
			}
			else
			{
				this.updateAllCells(rtype);
				rtype.collision_grid.queryRange(bbox, candidates);
			}
		}
	};
	Runtime.prototype.getTypesCollisionCandidates = function (layer, types, bbox, candidates)
	{
		var i, len;
		for (i = 0, len = types.length; i < len; ++i)
		{
			this.getCollisionCandidates(layer, types[i], bbox, candidates);
		}
	};
	Runtime.prototype.getSolidCollisionCandidates = function (layer, bbox, candidates)
	{
		var solid = this.getSolidBehavior();
		if (!solid)
			return null;
		this.getTypesCollisionCandidates(layer, solid.my_types, bbox, candidates);
	};
	Runtime.prototype.getJumpthruCollisionCandidates = function (layer, bbox, candidates)
	{
		var jumpthru = this.getJumpthruBehavior();
		if (!jumpthru)
			return null;
		this.getTypesCollisionCandidates(layer, jumpthru.my_types, bbox, candidates);
	};
	Runtime.prototype.testAndSelectCanvasPointOverlap = function (type, ptx, pty, inverted)
	{
		var sol = type.getCurrentSol();
		var i, j, inst, len;
		var orblock = this.getCurrentEventStack().current_event.orblock;
		var lx, ly, arr;
		if (sol.select_all)
		{
			if (!inverted)
			{
				sol.select_all = false;
				cr.clearArray(sol.instances);   // clear contents
			}
			for (i = 0, len = type.instances.length; i < len; i++)
			{
				inst = type.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
						sol.instances.push(inst);
				}
				else if (orblock)
					sol.else_instances.push(inst);
			}
		}
		else
		{
			j = 0;
			arr = (orblock ? sol.else_instances : sol.instances);
			for (i = 0, len = arr.length; i < len; i++)
			{
				inst = arr[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else if (orblock)
						sol.instances.push(inst);
					else
					{
						sol.instances[j] = sol.instances[i];
						j++;
					}
				}
			}
			if (!inverted)
				arr.length = j;
		}
		type.applySolToContainer();
		if (inverted)
			return true;		// did not find anything overlapping
		else
			return sol.hasObjects();
	};
	Runtime.prototype.testOverlap = function (a, b)
	{
		if (!a || !b || a === b || !a.collisionsEnabled || !b.collisionsEnabled)
			return false;
		a.update_bbox();
		b.update_bbox();
		var layera = a.layer;
		var layerb = b.layer;
		var different_layers = (layera !== layerb && (layera.parallaxX !== layerb.parallaxX || layerb.parallaxY !== layerb.parallaxY || layera.scale !== layerb.scale || layera.angle !== layerb.angle || layera.zoomRate !== layerb.zoomRate));
		var i, len, i2, i21, x, y, haspolya, haspolyb, polya, polyb;
		if (!different_layers)	// same layers: easy check
		{
			if (!a.bbox.intersects_rect(b.bbox))
				return false;
			if (!a.bquad.intersects_quad(b.bquad))
				return false;
			if (a.tilemap_exists && b.tilemap_exists)
				return false;
			if (a.tilemap_exists)
				return this.testTilemapOverlap(a, b);
			if (b.tilemap_exists)
				return this.testTilemapOverlap(b, a);
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolya && !haspolyb)
				return true;
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				polya = a.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
				polya = this.temp_poly;
			}
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				polyb = b.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
				polyb = this.temp_poly;
			}
			return polya.intersects_poly(polyb, b.x - a.x, b.y - a.y);
		}
		else	// different layers: need to do full translated check
		{
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				this.temp_poly.set_from_poly(a.collision_poly);
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
			}
			polya = this.temp_poly;
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				this.temp_poly2.set_from_poly(b.collision_poly);
			}
			else
			{
				this.temp_poly2.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
			}
			polyb = this.temp_poly2;
			for (i = 0, len = polya.pts_count; i < len; i++)
			{
				i2 = i * 2;
				i21 = i2 + 1;
				x = polya.pts_cache[i2];
				y = polya.pts_cache[i21];
				polya.pts_cache[i2] = layera.layerToCanvas(x + a.x, y + a.y, true);
				polya.pts_cache[i21] = layera.layerToCanvas(x + a.x, y + a.y, false);
			}
			polya.update_bbox();
			for (i = 0, len = polyb.pts_count; i < len; i++)
			{
				i2 = i * 2;
				i21 = i2 + 1;
				x = polyb.pts_cache[i2];
				y = polyb.pts_cache[i21];
				polyb.pts_cache[i2] = layerb.layerToCanvas(x + b.x, y + b.y, true);
				polyb.pts_cache[i21] = layerb.layerToCanvas(x + b.x, y + b.y, false);
			}
			polyb.update_bbox();
			return polya.intersects_poly(polyb, 0, 0);
		}
	};
	var tmpQuad = new cr.quad();
	var tmpRect = new cr.rect(0, 0, 0, 0);
	var collrect_candidates = [];
	Runtime.prototype.testTilemapOverlap = function (tm, a)
	{
		var i, len, c, rc;
		var bbox = a.bbox;
		var tmx = tm.x;
		var tmy = tm.y;
		tm.getCollisionRectCandidates(bbox, collrect_candidates);
		var collrects = collrect_candidates;
		var haspolya = (a.collision_poly && !a.collision_poly.is_empty());
		for (i = 0, len = collrects.length; i < len; ++i)
		{
			c = collrects[i];
			rc = c.rc;
			if (bbox.intersects_rect_off(rc, tmx, tmy))
			{
				tmpQuad.set_from_rect(rc);
				tmpQuad.offset(tmx, tmy);
				if (tmpQuad.intersects_quad(a.bquad))
				{
					if (haspolya)
					{
						a.collision_poly.cache_poly(a.width, a.height, a.angle);
						if (c.poly)
						{
							if (c.poly.intersects_poly(a.collision_poly, a.x - (tmx + rc.left), a.y - (tmy + rc.top)))
							{
								cr.clearArray(collrect_candidates);
								return true;
							}
						}
						else
						{
							this.temp_poly.set_from_quad(tmpQuad, 0, 0, rc.right - rc.left, rc.bottom - rc.top);
							if (this.temp_poly.intersects_poly(a.collision_poly, a.x, a.y))
							{
								cr.clearArray(collrect_candidates);
								return true;
							}
						}
					}
					else
					{
						if (c.poly)
						{
							this.temp_poly.set_from_quad(a.bquad, 0, 0, a.width, a.height);
							if (c.poly.intersects_poly(this.temp_poly, -(tmx + rc.left), -(tmy + rc.top)))
							{
								cr.clearArray(collrect_candidates);
								return true;
							}
						}
						else
						{
							cr.clearArray(collrect_candidates);
							return true;
						}
					}
				}
			}
		}
		cr.clearArray(collrect_candidates);
		return false;
	};
	Runtime.prototype.testRectOverlap = function (r, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		if (!b.bbox.intersects_rect(r))
			return false;
		if (b.tilemap_exists)
		{
			b.getCollisionRectCandidates(r, collrect_candidates);
			var collrects = collrect_candidates;
			var i, len, c, tilerc;
			var tmx = b.x;
			var tmy = b.y;
			for (i = 0, len = collrects.length; i < len; ++i)
			{
				c = collrects[i];
				tilerc = c.rc;
				if (r.intersects_rect_off(tilerc, tmx, tmy))
				{
					if (c.poly)
					{
						this.temp_poly.set_from_rect(r, 0, 0);
						if (c.poly.intersects_poly(this.temp_poly, -(tmx + tilerc.left), -(tmy + tilerc.top)))
						{
							cr.clearArray(collrect_candidates);
							return true;
						}
					}
					else
					{
						cr.clearArray(collrect_candidates);
						return true;
					}
				}
			}
			cr.clearArray(collrect_candidates);
			return false;
		}
		else
		{
			tmpQuad.set_from_rect(r);
			if (!b.bquad.intersects_quad(tmpQuad))
				return false;
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolyb)
				return true;
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			tmpQuad.offset(-r.left, -r.top);
			this.temp_poly.set_from_quad(tmpQuad, 0, 0, 1, 1);
			return b.collision_poly.intersects_poly(this.temp_poly, r.left - b.x, r.top - b.y);
		}
	};
	Runtime.prototype.testSegmentOverlap = function (x1, y1, x2, y2, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		tmpRect.set(cr.min(x1, x2), cr.min(y1, y2), cr.max(x1, x2), cr.max(y1, y2));
		if (!b.bbox.intersects_rect(tmpRect))
			return false;
		if (b.tilemap_exists)
		{
			b.getCollisionRectCandidates(tmpRect, collrect_candidates);
			var collrects = collrect_candidates;
			var i, len, c, tilerc;
			var tmx = b.x;
			var tmy = b.y;
			for (i = 0, len = collrects.length; i < len; ++i)
			{
				c = collrects[i];
				tilerc = c.rc;
				if (tmpRect.intersects_rect_off(tilerc, tmx, tmy))
				{
					tmpQuad.set_from_rect(tilerc);
					tmpQuad.offset(tmx, tmy);
					if (tmpQuad.intersects_segment(x1, y1, x2, y2))
					{
						if (c.poly)
						{
							if (c.poly.intersects_segment(tmx + tilerc.left, tmy + tilerc.top, x1, y1, x2, y2))
							{
								cr.clearArray(collrect_candidates);
								return true;
							}
						}
						else
						{
							cr.clearArray(collrect_candidates);
							return true;
						}
					}
				}
			}
			cr.clearArray(collrect_candidates);
			return false;
		}
		else
		{
			if (!b.bquad.intersects_segment(x1, y1, x2, y2))
				return false;
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolyb)
				return true;
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			return b.collision_poly.intersects_segment(b.x, b.y, x1, y1, x2, y2);
		}
	};
	Runtime.prototype.typeHasBehavior = function (t, b)
	{
		if (!b)
			return false;
		var i, len, j, lenj, f;
		for (i = 0, len = t.behaviors.length; i < len; i++)
		{
			if (t.behaviors[i].behavior instanceof b)
				return true;
		}
		if (!t.is_family)
		{
			for (i = 0, len = t.families.length; i < len; i++)
			{
				f = t.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (f.behaviors[j].behavior instanceof b)
						return true;
				}
			}
		}
		return false;
	};
	Runtime.prototype.typeHasNoSaveBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.NoSave);
	};
	Runtime.prototype.typeHasPersistBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.Persist);
	};
	Runtime.prototype.getSolidBehavior = function ()
	{
		return this.solidBehavior;
	};
	Runtime.prototype.getJumpthruBehavior = function ()
	{
		return this.jumpthruBehavior;
	};
	var candidates = [];
	Runtime.prototype.testOverlapSolid = function (inst)
	{
		var i, len, s;
		inst.update_bbox();
		this.getSolidCollisionCandidates(inst.layer, inst.bbox, candidates);
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			s = candidates[i];
			if (!s.extra["solidEnabled"])
				continue;
			if (this.testOverlap(inst, s))
			{
				cr.clearArray(candidates);
				return s;
			}
		}
		cr.clearArray(candidates);
		return null;
	};
	Runtime.prototype.testRectOverlapSolid = function (r)
	{
		var i, len, s;
		this.getSolidCollisionCandidates(null, r, candidates);
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			s = candidates[i];
			if (!s.extra["solidEnabled"])
				continue;
			if (this.testRectOverlap(r, s))
			{
				cr.clearArray(candidates);
				return s;
			}
		}
		cr.clearArray(candidates);
		return null;
	};
	var jumpthru_array_ret = [];
	Runtime.prototype.testOverlapJumpThru = function (inst, all)
	{
		var ret = null;
		if (all)
		{
			ret = jumpthru_array_ret;
			cr.clearArray(ret);
		}
		inst.update_bbox();
		this.getJumpthruCollisionCandidates(inst.layer, inst.bbox, candidates);
		var i, len, j;
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			j = candidates[i];
			if (!j.extra["jumpthruEnabled"])
				continue;
			if (this.testOverlap(inst, j))
			{
				if (all)
					ret.push(j);
				else
				{
					cr.clearArray(candidates);
					return j;
				}
			}
		}
		cr.clearArray(candidates);
		return ret;
	};
	Runtime.prototype.pushOutSolid = function (inst, xdir, ydir, dist, include_jumpthrus, specific_jumpthru)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		var last_overlapped = null, secondlast_overlapped = null;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (last_overlapped)
					secondlast_overlapped = last_overlapped;
				if (!last_overlapped)
				{
					if (include_jumpthrus)
					{
						if (specific_jumpthru)
							last_overlapped = (this.testOverlap(inst, specific_jumpthru) ? specific_jumpthru : null);
						else
							last_overlapped = this.testOverlapJumpThru(inst);
						if (last_overlapped)
							secondlast_overlapped = last_overlapped;
					}
					if (!last_overlapped)
					{
						if (secondlast_overlapped)
							this.pushInFractional(inst, xdir, ydir, secondlast_overlapped, 16);
						return true;
					}
				}
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushOut = function (inst, xdir, ydir, dist, otherinst)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, otherinst))
				return true;
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushInFractional = function (inst, xdir, ydir, obj, limit)
	{
		var divisor = 2;
		var frac;
		var forward = false;
		var overlapping = false;
		var bestx = inst.x;
		var besty = inst.y;
		while (divisor <= limit)
		{
			frac = 1 / divisor;
			divisor *= 2;
			inst.x += xdir * frac * (forward ? 1 : -1);
			inst.y += ydir * frac * (forward ? 1 : -1);
			inst.set_bbox_changed();
			if (this.testOverlap(inst, obj))
			{
				forward = true;
				overlapping = true;
			}
			else
			{
				forward = false;
				overlapping = false;
				bestx = inst.x;
				besty = inst.y;
			}
		}
		if (overlapping)
		{
			inst.x = bestx;
			inst.y = besty;
			inst.set_bbox_changed();
		}
	};
	Runtime.prototype.pushOutSolidNearest = function (inst, max_dist_)
	{
		var max_dist = (cr.is_undefined(max_dist_) ? 100 : max_dist_);
		var dist = 0;
		var oldx = inst.x
		var oldy = inst.y;
		var dir = 0;
		var dx = 0, dy = 0;
		var last_overlapped = this.testOverlapSolid(inst);
		if (!last_overlapped)
			return true;		// already clear of solids
		while (dist <= max_dist)
		{
			switch (dir) {
			case 0:		dx = 0; dy = -1; dist++; break;
			case 1:		dx = 1; dy = -1; break;
			case 2:		dx = 1; dy = 0; break;
			case 3:		dx = 1; dy = 1; break;
			case 4:		dx = 0; dy = 1; break;
			case 5:		dx = -1; dy = 1; break;
			case 6:		dx = -1; dy = 0; break;
			case 7:		dx = -1; dy = -1; break;
			}
			dir = (dir + 1) % 8;
			inst.x = cr.floor(oldx + (dx * dist));
			inst.y = cr.floor(oldy + (dy * dist));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (!last_overlapped)
					return true;
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.registerCollision = function (a, b)
	{
		if (!a.collisionsEnabled || !b.collisionsEnabled)
			return;
		this.registered_collisions.push([a, b]);
	};
	Runtime.prototype.checkRegisteredCollision = function (a, b)
	{
		var i, len, x;
		for (i = 0, len = this.registered_collisions.length; i < len; i++)
		{
			x = this.registered_collisions[i];
			if ((x[0] == a && x[1] == b) || (x[0] == b && x[1] == a))
				return true;
		}
		return false;
	};
	Runtime.prototype.calculateSolidBounceAngle = function(inst, startx, starty, obj)
	{
		var objx = inst.x;
		var objy = inst.y;
		var radius = cr.max(10, cr.distanceTo(startx, starty, objx, objy));
		var startangle = cr.angleTo(startx, starty, objx, objy);
		var firstsolid = obj || this.testOverlapSolid(inst);
		if (!firstsolid)
			return cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		var i, curangle, anticlockwise_free_angle, clockwise_free_angle;
		var increment = cr.to_radians(5);	// 5 degree increments
		for (i = 1; i < 36; i++)
		{
			curangle = startangle - i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					anticlockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			anticlockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		for (i = 1; i < 36; i++)
		{
			curangle = startangle + i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					clockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			clockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		inst.x = objx;
		inst.y = objy;
		inst.set_bbox_changed();
		if (clockwise_free_angle === anticlockwise_free_angle)
			return clockwise_free_angle;
		var half_diff = cr.angleDiff(clockwise_free_angle, anticlockwise_free_angle) / 2;
		var normal;
		if (cr.angleClockwise(clockwise_free_angle, anticlockwise_free_angle))
		{
			normal = cr.clamp_angle(anticlockwise_free_angle + half_diff + cr.PI);
		}
		else
		{
			normal = cr.clamp_angle(clockwise_free_angle + half_diff);
		}
;
		var vx = Math.cos(startangle);
		var vy = Math.sin(startangle);
		var nx = Math.cos(normal);
		var ny = Math.sin(normal);
		var v_dot_n = vx * nx + vy * ny;
		var rx = vx - 2 * v_dot_n * nx;
		var ry = vy - 2 * v_dot_n * ny;
		return cr.angleTo(0, 0, rx, ry);
	};
	var triggerSheetIndex = -1;
	Runtime.prototype.trigger = function (method, inst, value /* for fast triggers */)
	{
;
		if (!this.running_layout)
			return false;
		var sheet = this.running_layout.event_sheet;
		if (!sheet)
			return false;     // no event sheet active; nothing to trigger
		var ret = false;
		var r, i, len;
		triggerSheetIndex++;
		var deep_includes = sheet.deep_includes;
		for (i = 0, len = deep_includes.length; i < len; ++i)
		{
			r = this.triggerOnSheet(method, inst, deep_includes[i], value);
			ret = ret || r;
		}
		r = this.triggerOnSheet(method, inst, sheet, value);
		ret = ret || r;
		triggerSheetIndex--;
		return ret;
    };
    Runtime.prototype.triggerOnSheet = function (method, inst, sheet, value)
    {
        var ret = false;
		var i, leni, r, families;
		if (!inst)
		{
			r = this.triggerOnSheetForTypeName(method, inst, "system", sheet, value);
			ret = ret || r;
		}
		else
		{
			r = this.triggerOnSheetForTypeName(method, inst, inst.type.name, sheet, value);
			ret = ret || r;
			families = inst.type.families;
			for (i = 0, leni = families.length; i < leni; ++i)
			{
				r = this.triggerOnSheetForTypeName(method, inst, families[i].name, sheet, value);
				ret = ret || r;
			}
		}
		return ret;             // true if anything got triggered
	};
	Runtime.prototype.triggerOnSheetForTypeName = function (method, inst, type_name, sheet, value)
	{
		var i, leni;
		var ret = false, ret2 = false;
		var trig, index;
		var fasttrigger = (typeof value !== "undefined");
		var triggers = (fasttrigger ? sheet.fasttriggers : sheet.triggers);
		var obj_entry = triggers[type_name];
		if (!obj_entry)
			return ret;
		var triggers_list = null;
		for (i = 0, leni = obj_entry.length; i < leni; ++i)
		{
			if (obj_entry[i].method == method)
			{
				triggers_list = obj_entry[i].evs;
				break;
			}
		}
		if (!triggers_list)
			return ret;
		var triggers_to_fire;
		if (fasttrigger)
		{
			triggers_to_fire = triggers_list[value];
		}
		else
		{
			triggers_to_fire = triggers_list;
		}
		if (!triggers_to_fire)
			return null;
		for (i = 0, leni = triggers_to_fire.length; i < leni; i++)
		{
			trig = triggers_to_fire[i][0];
			index = triggers_to_fire[i][1];
			ret2 = this.executeSingleTrigger(inst, type_name, trig, index);
			ret = ret || ret2;
		}
		return ret;
	};
	Runtime.prototype.executeSingleTrigger = function (inst, type_name, trig, index)
	{
		var i, leni;
		var ret = false;
		this.trigger_depth++;
		var current_event = this.getCurrentEventStack().current_event;
		if (current_event)
			this.pushCleanSol(current_event.solModifiersIncludingParents);
		var isrecursive = (this.trigger_depth > 1);		// calling trigger from inside another trigger
		this.pushCleanSol(trig.solModifiersIncludingParents);
		if (isrecursive)
			this.pushLocalVarStack();
		var event_stack = this.pushEventStack(trig);
		event_stack.current_event = trig;
		if (inst)
		{
			var sol = this.types[type_name].getCurrentSol();
			sol.select_all = false;
			cr.clearArray(sol.instances);
			sol.instances[0] = inst;
			this.types[type_name].applySolToContainer();
		}
		var ok_to_run = true;
		if (trig.parent)
		{
			var temp_parents_arr = event_stack.temp_parents_arr;
			var cur_parent = trig.parent;
			while (cur_parent)
			{
				temp_parents_arr.push(cur_parent);
				cur_parent = cur_parent.parent;
			}
			temp_parents_arr.reverse();
			for (i = 0, leni = temp_parents_arr.length; i < leni; i++)
			{
				if (!temp_parents_arr[i].run_pretrigger())   // parent event failed
				{
					ok_to_run = false;
					break;
				}
			}
		}
		if (ok_to_run)
		{
			this.execcount++;
			if (trig.orblock)
				trig.run_orblocktrigger(index);
			else
				trig.run();
			ret = ret || event_stack.last_event_true;
		}
		this.popEventStack();
		if (isrecursive)
			this.popLocalVarStack();
		this.popSol(trig.solModifiersIncludingParents);
		if (current_event)
			this.popSol(current_event.solModifiersIncludingParents);
		if (this.hasPendingInstances && this.isInOnDestroy === 0 && triggerSheetIndex === 0 && !this.isRunningEvents)
		{
			this.ClearDeathRow();
		}
		this.trigger_depth--;
		return ret;
	};
	Runtime.prototype.getCurrentCondition = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.conditions[evinfo.cndindex];
	};
	Runtime.prototype.getCurrentConditionObjectType = function ()
	{
		var cnd = this.getCurrentCondition();
		return cnd.type;
	};
	Runtime.prototype.isCurrentConditionFirst = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.cndindex === 0;
	};
	Runtime.prototype.getCurrentAction = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.actions[evinfo.actindex];
	};
	Runtime.prototype.pushLocalVarStack = function ()
	{
		this.localvar_stack_index++;
		if (this.localvar_stack_index >= this.localvar_stack.length)
			this.localvar_stack.push([]);
	};
	Runtime.prototype.popLocalVarStack = function ()
	{
;
		this.localvar_stack_index--;
	};
	Runtime.prototype.getCurrentLocalVarStack = function ()
	{
		return this.localvar_stack[this.localvar_stack_index];
	};
	Runtime.prototype.pushEventStack = function (cur_event)
	{
		this.event_stack_index++;
		if (this.event_stack_index >= this.event_stack.length)
			this.event_stack.push(new cr.eventStackFrame());
		var ret = this.getCurrentEventStack();
		ret.reset(cur_event);
		return ret;
	};
	Runtime.prototype.popEventStack = function ()
	{
;
		this.event_stack_index--;
	};
	Runtime.prototype.getCurrentEventStack = function ()
	{
		return this.event_stack[this.event_stack_index];
	};
	Runtime.prototype.pushLoopStack = function (name_)
	{
		this.loop_stack_index++;
		if (this.loop_stack_index >= this.loop_stack.length)
		{
			this.loop_stack.push(cr.seal({ name: name_, index: 0, stopped: false }));
		}
		var ret = this.getCurrentLoop();
		ret.name = name_;
		ret.index = 0;
		ret.stopped = false;
		return ret;
	};
	Runtime.prototype.popLoopStack = function ()
	{
;
		this.loop_stack_index--;
	};
	Runtime.prototype.getCurrentLoop = function ()
	{
		return this.loop_stack[this.loop_stack_index];
	};
	Runtime.prototype.getEventVariableByName = function (name, scope)
	{
		var i, leni, j, lenj, sheet, e;
		while (scope)
		{
			for (i = 0, leni = scope.subevents.length; i < leni; i++)
			{
				e = scope.subevents[i];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
			scope = scope.parent;
		}
		for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
		{
			sheet = this.eventsheets_by_index[i];
			for (j = 0, lenj = sheet.events.length; j < lenj; j++)
			{
				e = sheet.events[j];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
		}
		return null;
	};
	Runtime.prototype.getLayoutBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			if (this.layouts_by_index[i].sid === sid_)
				return this.layouts_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getObjectTypeBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			if (this.types_by_index[i].sid === sid_)
				return this.types_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getGroupBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			if (this.allGroups[i].sid === sid_)
				return this.allGroups[i];
		}
		return null;
	};
	Runtime.prototype.doCanvasSnapshot = function (format_, quality_)
	{
		this.snapshotCanvas = [format_, quality_];
		this.redraw = true;		// force redraw so snapshot is always taken
	};
	function IsIndexedDBAvailable()
	{
		try {
			return !!window.indexedDB;
		}
		catch (e)
		{
			return false;
		}
	};
	function makeSaveDb(e)
	{
		var db = e.target.result;
		db.createObjectStore("saves", { keyPath: "slot" });
	};
	function IndexedDB_WriteSlot(slot_, data_, oncomplete_, onerror_)
	{
		try {
			var request = indexedDB.open("_C2SaveStates");
			request.onupgradeneeded = makeSaveDb;
			request.onerror = onerror_;
			request.onsuccess = function (e)
			{
				var db = e.target.result;
				db.onerror = onerror_;
				var transaction = db.transaction(["saves"], "readwrite");
				var objectStore = transaction.objectStore("saves");
				var putReq = objectStore.put({"slot": slot_, "data": data_ });
				putReq.onsuccess = oncomplete_;
			};
		}
		catch (err)
		{
			onerror_(err);
		}
	};
	function IndexedDB_ReadSlot(slot_, oncomplete_, onerror_)
	{
		try {
			var request = indexedDB.open("_C2SaveStates");
			request.onupgradeneeded = makeSaveDb;
			request.onerror = onerror_;
			request.onsuccess = function (e)
			{
				var db = e.target.result;
				db.onerror = onerror_;
				var transaction = db.transaction(["saves"]);
				var objectStore = transaction.objectStore("saves");
				var readReq = objectStore.get(slot_);
				readReq.onsuccess = function (e)
				{
					if (readReq.result)
						oncomplete_(readReq.result["data"]);
					else
						oncomplete_(null);
				};
			};
		}
		catch (err)
		{
			onerror_(err);
		}
	};
	Runtime.prototype.signalContinuousPreview = function ()
	{
		this.signalledContinuousPreview = true;
	};
	function doContinuousPreviewReload()
	{
		cr.logexport("Reloading for continuous preview");
		if (!!window["c2cocoonjs"])
		{
			CocoonJS["App"]["reload"]();
		}
		else
		{
			if (window.location.search.indexOf("continuous") > -1)
				window.location.reload(true);
			else
				window.location = window.location + "?continuous";
		}
	};
	Runtime.prototype.handleSaveLoad = function ()
	{
		var self = this;
		var savingToSlot = this.saveToSlot;
		var savingJson = this.lastSaveJson;
		var loadingFromSlot = this.loadFromSlot;
		var continuous = false;
		if (this.signalledContinuousPreview)
		{
			continuous = true;
			savingToSlot = "__c2_continuouspreview";
			this.signalledContinuousPreview = false;
		}
		if (savingToSlot.length)
		{
			this.ClearDeathRow();
			savingJson = this.saveToJSONString();
			if (IsIndexedDBAvailable() && !this.isCocoonJs)
			{
				IndexedDB_WriteSlot(savingToSlot, savingJson, function ()
				{
					cr.logexport("Saved state to IndexedDB storage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}, function (e)
				{
					try {
						localStorage.setItem("__c2save_" + savingToSlot, savingJson);
						cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
						self.lastSaveJson = savingJson;
						self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
						self.lastSaveJson = "";
						if (continuous)
							doContinuousPreviewReload();
					}
					catch (f)
					{
						cr.logexport("Failed to save game state: " + e + "; " + f);
						self.trigger(cr.system_object.prototype.cnds.OnSaveFailed, null);
					}
				});
			}
			else
			{
				try {
					localStorage.setItem("__c2save_" + savingToSlot, savingJson);
					cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					this.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}
				catch (e)
				{
					cr.logexport("Error saving to WebStorage: " + e);
					self.trigger(cr.system_object.prototype.cnds.OnSaveFailed, null);
				}
			}
			this.saveToSlot = "";
			this.loadFromSlot = "";
			this.loadFromJson = null;
		}
		if (loadingFromSlot.length)
		{
			if (IsIndexedDBAvailable() && !this.isCocoonJs)
			{
				IndexedDB_ReadSlot(loadingFromSlot, function (result_)
				{
					if (result_)
					{
						self.loadFromJson = result_;
						cr.logexport("Loaded state from IndexedDB storage (" + self.loadFromJson.length + " bytes)");
					}
					else
					{
						self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
						cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					}
					self.suspendDrawing = false;
					if (!self.loadFromJson)
					{
						self.loadFromJson = null;
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
					}
				}, function (e)
				{
					self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
					cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					self.suspendDrawing = false;
					if (!self.loadFromJson)
					{
						self.loadFromJson = null;
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
					}
				});
			}
			else
			{
				try {
					this.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
					cr.logexport("Loaded state from WebStorage (" + this.loadFromJson.length + " bytes)");
				}
				catch (e)
				{
					this.loadFromJson = null;
				}
				this.suspendDrawing = false;
				if (!self.loadFromJson)
				{
					self.loadFromJson = null;
					self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				}
			}
			this.loadFromSlot = "";
			this.saveToSlot = "";
		}
		if (this.loadFromJson !== null)
		{
			this.ClearDeathRow();
			var ok = this.loadFromJSONString(this.loadFromJson);
			if (ok)
			{
				this.lastSaveJson = this.loadFromJson;
				this.trigger(cr.system_object.prototype.cnds.OnLoadComplete, null);
				this.lastSaveJson = "";
			}
			else
			{
				self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
			}
			this.loadFromJson = null;
		}
	};
	function CopyExtraObject(extra)
	{
		var p, ret = {};
		for (p in extra)
		{
			if (extra.hasOwnProperty(p))
			{
				if (extra[p] instanceof cr.ObjectSet)
					continue;
				if (extra[p] && typeof extra[p].c2userdata !== "undefined")
					continue;
				if (p === "spriteCreatedDestroyCallback")
					continue;
				ret[p] = extra[p];
			}
		}
		return ret;
	};
	Runtime.prototype.saveToJSONString = function()
	{
		var i, len, j, lenj, type, layout, typeobj, g, c, a, v, p;
		var o = {
			"c2save":				true,
			"version":				1,
			"rt": {
				"time":				this.kahanTime.sum,
				"walltime":			this.wallTime.sum,
				"timescale":		this.timescale,
				"tickcount":		this.tickcount,
				"execcount":		this.execcount,
				"next_uid":			this.next_uid,
				"running_layout":	this.running_layout.sid,
				"start_time_offset": (Date.now() - this.start_time)
			},
			"types": {},
			"layouts": {},
			"events": {
				"groups": {},
				"cnds": {},
				"acts": {},
				"vars": {}
			}
		};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || this.typeHasNoSaveBehavior(type))
				continue;
			typeobj = {
				"instances": []
			};
			if (cr.hasAnyOwnProperty(type.extra))
				typeobj["ex"] = CopyExtraObject(type.extra);
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				typeobj["instances"].push(this.saveInstanceToJSON(type.instances[j]));
			}
			o["types"][type.sid.toString()] = typeobj;
		}
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			layout = this.layouts_by_index[i];
			o["layouts"][layout.sid.toString()] = layout.saveToJSON();
		}
		var ogroups = o["events"]["groups"];
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			g = this.allGroups[i];
			ogroups[g.sid.toString()] = this.groups_by_name[g.group_name].group_active;
		}
		var ocnds = o["events"]["cnds"];
		for (p in this.cndsBySid)
		{
			if (this.cndsBySid.hasOwnProperty(p))
			{
				c = this.cndsBySid[p];
				if (cr.hasAnyOwnProperty(c.extra))
					ocnds[p] = { "ex": CopyExtraObject(c.extra) };
			}
		}
		var oacts = o["events"]["acts"];
		for (p in this.actsBySid)
		{
			if (this.actsBySid.hasOwnProperty(p))
			{
				a = this.actsBySid[p];
				if (cr.hasAnyOwnProperty(a.extra))
					oacts[p] = { "ex": CopyExtraObject(a.extra) };
			}
		}
		var ovars = o["events"]["vars"];
		for (p in this.varsBySid)
		{
			if (this.varsBySid.hasOwnProperty(p))
			{
				v = this.varsBySid[p];
				if (!v.is_constant && (!v.parent || v.is_static))
					ovars[p] = v.data;
			}
		}
		o["system"] = this.system.saveToJSON();
		return JSON.stringify(o);
	};
	Runtime.prototype.refreshUidMap = function ()
	{
		var i, len, type, j, lenj, inst;
		this.objectsByUid = {};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				this.objectsByUid[inst.uid.toString()] = inst;
			}
		}
	};
	Runtime.prototype.loadFromJSONString = function (str)
	{
		var o;
		try {
			o = JSON.parse(str);
		}
		catch (e) {
			return false;
		}
		if (!o["c2save"])
			return false;		// probably not a c2 save state
		if (o["version"] > 1)
			return false;		// from future version of c2; assume not compatible
		this.isLoadingState = true;
		var rt = o["rt"];
		this.kahanTime.reset();
		this.kahanTime.sum = rt["time"];
		this.wallTime.reset();
		this.wallTime.sum = rt["walltime"] || 0;
		this.timescale = rt["timescale"];
		this.tickcount = rt["tickcount"];
		this.execcount = rt["execcount"];
		this.start_time = Date.now() - rt["start_time_offset"];
		var layout_sid = rt["running_layout"];
		if (layout_sid !== this.running_layout.sid)
		{
			var changeToLayout = this.getLayoutBySid(layout_sid);
			if (changeToLayout)
				this.doChangeLayout(changeToLayout);
			else
				return;		// layout that was saved on has gone missing (deleted?)
		}
		var i, len, j, lenj, k, lenk, p, type, existing_insts, load_insts, inst, binst, layout, layer, g, iid, t;
		var otypes = o["types"];
		for (p in otypes)
		{
			if (otypes.hasOwnProperty(p))
			{
				type = this.getObjectTypeBySid(parseInt(p, 10));
				if (!type || type.is_family || this.typeHasNoSaveBehavior(type))
					continue;
				if (otypes[p]["ex"])
					type.extra = otypes[p]["ex"];
				else
					cr.wipe(type.extra);
				existing_insts = type.instances;
				load_insts = otypes[p]["instances"];
				for (i = 0, len = cr.min(existing_insts.length, load_insts.length); i < len; i++)
				{
					this.loadInstanceFromJSON(existing_insts[i], load_insts[i]);
				}
				for (i = load_insts.length, len = existing_insts.length; i < len; i++)
					this.DestroyInstance(existing_insts[i]);
				for (i = existing_insts.length, len = load_insts.length; i < len; i++)
				{
					layer = null;
					if (type.plugin.is_world)
					{
						layer = this.running_layout.getLayerBySid(load_insts[i]["w"]["l"]);
						if (!layer)
							continue;
					}
					inst = this.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
					this.loadInstanceFromJSON(inst, load_insts[i]);
				}
				type.stale_iids = true;
			}
		}
		this.ClearDeathRow();
		this.refreshUidMap();
		var olayouts = o["layouts"];
		for (p in olayouts)
		{
			if (olayouts.hasOwnProperty(p))
			{
				layout = this.getLayoutBySid(parseInt(p, 10));
				if (!layout)
					continue;		// must've gone missing
				layout.loadFromJSON(olayouts[p]);
			}
		}
		var ogroups = o["events"]["groups"];
		for (p in ogroups)
		{
			if (ogroups.hasOwnProperty(p))
			{
				g = this.getGroupBySid(parseInt(p, 10));
				if (g && this.groups_by_name[g.group_name])
					this.groups_by_name[g.group_name].setGroupActive(ogroups[p]);
			}
		}
		var ocnds = o["events"]["cnds"];
		for (p in this.cndsBySid)
		{
			if (this.cndsBySid.hasOwnProperty(p))
			{
				if (ocnds.hasOwnProperty(p))
				{
					this.cndsBySid[p].extra = ocnds[p]["ex"];
				}
				else
				{
					this.cndsBySid[p].extra = {};
				}
			}
		}
		var oacts = o["events"]["acts"];
		for (p in this.actsBySid)
		{
			if (this.actsBySid.hasOwnProperty(p))
			{
				if (oacts.hasOwnProperty(p))
				{
					this.actsBySid[p].extra = oacts[p]["ex"];
				}
				else
				{
					this.actsBySid[p].extra = {};
				}
			}
		}
		var ovars = o["events"]["vars"];
		for (p in ovars)
		{
			if (ovars.hasOwnProperty(p) && this.varsBySid.hasOwnProperty(p))
			{
				this.varsBySid[p].data = ovars[p];
			}
		}
		this.next_uid = rt["next_uid"];
		this.isLoadingState = false;
		for (i = 0, len = this.fireOnCreateAfterLoad.length; i < len; ++i)
		{
			inst = this.fireOnCreateAfterLoad[i];
			this.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnCreated, inst);
		}
		cr.clearArray(this.fireOnCreateAfterLoad);
		this.system.loadFromJSON(o["system"]);
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || this.typeHasNoSaveBehavior(type))
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (type.is_contained)
				{
					iid = inst.get_iid();
					cr.clearArray(inst.siblings);
					for (k = 0, lenk = type.container.length; k < lenk; k++)
					{
						t = type.container[k];
						if (type === t)
							continue;
;
						inst.siblings.push(t.instances[iid]);
					}
				}
				if (inst.afterLoad)
					inst.afterLoad();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.afterLoad)
							binst.afterLoad();
					}
				}
			}
		}
		this.redraw = true;
		return true;
	};
	Runtime.prototype.saveInstanceToJSON = function(inst, state_only)
	{
		var i, len, world, behinst, et;
		var type = inst.type;
		var plugin = type.plugin;
		var o = {};
		if (state_only)
			o["c2"] = true;		// mark as known json data from Construct 2
		else
			o["uid"] = inst.uid;
		if (cr.hasAnyOwnProperty(inst.extra))
			o["ex"] = CopyExtraObject(inst.extra);
		if (inst.instance_vars && inst.instance_vars.length)
		{
			o["ivs"] = {};
			for (i = 0, len = inst.instance_vars.length; i < len; i++)
			{
				o["ivs"][inst.type.instvar_sids[i].toString()] = inst.instance_vars[i];
			}
		}
		if (plugin.is_world)
		{
			world = {
				"x": inst.x,
				"y": inst.y,
				"w": inst.width,
				"h": inst.height,
				"l": inst.layer.sid,
				"zi": inst.get_zindex()
			};
			if (inst.angle !== 0)
				world["a"] = inst.angle;
			if (inst.opacity !== 1)
				world["o"] = inst.opacity;
			if (inst.hotspotX !== 0.5)
				world["hX"] = inst.hotspotX;
			if (inst.hotspotY !== 0.5)
				world["hY"] = inst.hotspotY;
			if (inst.blend_mode !== 0)
				world["bm"] = inst.blend_mode;
			if (!inst.visible)
				world["v"] = inst.visible;
			if (!inst.collisionsEnabled)
				world["ce"] = inst.collisionsEnabled;
			if (inst.my_timescale !== -1)
				world["mts"] = inst.my_timescale;
			if (type.effect_types.length)
			{
				world["fx"] = [];
				for (i = 0, len = type.effect_types.length; i < len; i++)
				{
					et = type.effect_types[i];
					world["fx"].push({"name": et.name,
									  "active": inst.active_effect_flags[et.index],
									  "params": inst.effect_params[et.index] });
				}
			}
			o["w"] = world;
		}
		if (inst.behavior_insts && inst.behavior_insts.length)
		{
			o["behs"] = {};
			for (i = 0, len = inst.behavior_insts.length; i < len; i++)
			{
				behinst = inst.behavior_insts[i];
				if (behinst.saveToJSON)
					o["behs"][behinst.type.sid.toString()] = behinst.saveToJSON();
			}
		}
		if (inst.saveToJSON)
			o["data"] = inst.saveToJSON();
		return o;
	};
	Runtime.prototype.getInstanceVarIndexBySid = function (type, sid_)
	{
		var i, len;
		for (i = 0, len = type.instvar_sids.length; i < len; i++)
		{
			if (type.instvar_sids[i] === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.getBehaviorIndexBySid = function (inst, sid_)
	{
		var i, len;
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].type.sid === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.loadInstanceFromJSON = function(inst, o, state_only)
	{
		var p, i, len, iv, oivs, world, fxindex, obehs, behindex;
		var oldlayer;
		var type = inst.type;
		var plugin = type.plugin;
		if (state_only)
		{
			if (!o["c2"])
				return;
		}
		else
			inst.uid = o["uid"];
		if (o["ex"])
			inst.extra = o["ex"];
		else
			cr.wipe(inst.extra);
		oivs = o["ivs"];
		if (oivs)
		{
			for (p in oivs)
			{
				if (oivs.hasOwnProperty(p))
				{
					iv = this.getInstanceVarIndexBySid(type, parseInt(p, 10));
					if (iv < 0 || iv >= inst.instance_vars.length)
						continue;		// must've gone missing
					inst.instance_vars[iv] = oivs[p];
				}
			}
		}
		if (plugin.is_world)
		{
			world = o["w"];
			if (inst.layer.sid !== world["l"])
			{
				oldlayer = inst.layer;
				inst.layer = this.running_layout.getLayerBySid(world["l"]);
				if (inst.layer)
				{
					oldlayer.removeFromInstanceList(inst, true);
					inst.layer.appendToInstanceList(inst, true);
					inst.set_bbox_changed();
					inst.layer.setZIndicesStaleFrom(0);
				}
				else
				{
					inst.layer = oldlayer;
					if (!state_only)
						this.DestroyInstance(inst);
				}
			}
			inst.x = world["x"];
			inst.y = world["y"];
			inst.width = world["w"];
			inst.height = world["h"];
			inst.zindex = world["zi"];
			inst.angle = world.hasOwnProperty("a") ? world["a"] : 0;
			inst.opacity = world.hasOwnProperty("o") ? world["o"] : 1;
			inst.hotspotX = world.hasOwnProperty("hX") ? world["hX"] : 0.5;
			inst.hotspotY = world.hasOwnProperty("hY") ? world["hY"] : 0.5;
			inst.visible = world.hasOwnProperty("v") ? world["v"] : true;
			inst.collisionsEnabled = world.hasOwnProperty("ce") ? world["ce"] : true;
			inst.my_timescale = world.hasOwnProperty("mts") ? world["mts"] : -1;
			inst.blend_mode = world.hasOwnProperty("bm") ? world["bm"] : 0;;
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			inst.set_bbox_changed();
			if (world.hasOwnProperty("fx"))
			{
				for (i = 0, len = world["fx"].length; i < len; i++)
				{
					fxindex = type.getEffectIndexByName(world["fx"][i]["name"]);
					if (fxindex < 0)
						continue;		// must've gone missing
					inst.active_effect_flags[fxindex] = world["fx"][i]["active"];
					inst.effect_params[fxindex] = world["fx"][i]["params"];
				}
			}
			inst.updateActiveEffects();
		}
		obehs = o["behs"];
		if (obehs)
		{
			for (p in obehs)
			{
				if (obehs.hasOwnProperty(p))
				{
					behindex = this.getBehaviorIndexBySid(inst, parseInt(p, 10));
					if (behindex < 0)
						continue;		// must've gone missing
					inst.behavior_insts[behindex].loadFromJSON(obehs[p]);
				}
			}
		}
		if (o["data"])
			inst.loadFromJSON(o["data"]);
	};
	Runtime.prototype.fetchLocalFileViaCordova = function (filename, successCallback, errorCallback)
	{
		var path = cordova["file"]["applicationDirectory"] + "www/" + filename;
		window["resolveLocalFileSystemURL"](path, function (entry)
		{
			entry.file(successCallback, errorCallback);
		}, errorCallback);
	};
	Runtime.prototype.fetchLocalFileViaCordovaAsText = function (filename, successCallback, errorCallback)
	{
		this.fetchLocalFileViaCordova(filename, function (file)
		{
			var reader = new FileReader();
			reader.onload = function (e)
			{
				successCallback(e.target.result);
			};
			reader.onerror = errorCallback;
			reader.readAsText(file);
		}, errorCallback);
	};
	var queuedArrayBufferReads = [];
	var activeArrayBufferReads = 0;
	var MAX_ARRAYBUFFER_READS = 8;
	Runtime.prototype.maybeStartNextArrayBufferRead = function()
	{
		if (!queuedArrayBufferReads.length)
			return;		// none left
		if (activeArrayBufferReads >= MAX_ARRAYBUFFER_READS)
			return;		// already got maximum number in-flight
		activeArrayBufferReads++;
		var job = queuedArrayBufferReads.shift();
		this.doFetchLocalFileViaCordovaAsArrayBuffer(job.filename, job.successCallback, job.errorCallback);
	};
	Runtime.prototype.fetchLocalFileViaCordovaAsArrayBuffer = function (filename, successCallback_, errorCallback_)
	{
		var self = this;
		queuedArrayBufferReads.push({
			filename: filename,
			successCallback: function (result)
			{
				activeArrayBufferReads--;
				self.maybeStartNextArrayBufferRead();
				successCallback_(result);
			},
			errorCallback: function (err)
			{
				activeArrayBufferReads--;
				self.maybeStartNextArrayBufferRead();
				errorCallback_(err);
			}
		});
		this.maybeStartNextArrayBufferRead();
	};
	Runtime.prototype.doFetchLocalFileViaCordovaAsArrayBuffer = function (filename, successCallback, errorCallback)
	{
		this.fetchLocalFileViaCordova(filename, function (file)
		{
			var reader = new FileReader();
			reader.onload = function (e)
			{
				successCallback(e.target.result);
			};
			reader.readAsArrayBuffer(file);
		}, errorCallback);
	};
	Runtime.prototype.fetchLocalFileViaCordovaAsURL = function (filename, successCallback, errorCallback)
	{
		var blobType = "";
		var lowername = filename.toLowerCase();
		var ext3 = lowername.substr(lowername.length - 4);
		var ext4 = lowername.substr(lowername.length - 5);
		if (ext3 === ".mp4")
			blobType = "video/mp4";
		else if (ext4 === ".webm")
			blobType = "video/webm";		// use video type but hopefully works with audio too
		else if (ext3 === ".m4a")
			blobType = "audio/mp4";
		else if (ext3 === ".mp3")
			blobType = "audio/mpeg";
		this.fetchLocalFileViaCordovaAsArrayBuffer(filename, function (arrayBuffer)
		{
			var blob = new Blob([arrayBuffer], { type: blobType });
			var url = URL.createObjectURL(blob);
			successCallback(url);
		}, errorCallback);
	};
	Runtime.prototype.isAbsoluteUrl = function (url)
	{
		return /^(?:[a-z]+:)?\/\//.test(url) || url.substr(0, 5) === "data:"  || url.substr(0, 5) === "blob:";
	};
	Runtime.prototype.setImageSrc = function (img, src)
	{
		if (this.isWKWebView && !this.isAbsoluteUrl(src))
		{
			this.fetchLocalFileViaCordovaAsURL(src, function (url)
			{
				img.src = url;
			}, function (err)
			{
				alert("Failed to load image: " + err);
			});
		}
		else
		{
			img.src = src;
		}
	};
	Runtime.prototype.setCtxImageSmoothingEnabled = function (ctx, e)
	{
		if (typeof ctx["imageSmoothingEnabled"] !== "undefined")
		{
			ctx["imageSmoothingEnabled"] = e;
		}
		else
		{
			ctx["webkitImageSmoothingEnabled"] = e;
			ctx["mozImageSmoothingEnabled"] = e;
			ctx["msImageSmoothingEnabled"] = e;
		}
	};
	cr.runtime = Runtime;
	cr.createRuntime = function (canvasid)
	{
		return new Runtime(document.getElementById(canvasid));
	};
	cr.createDCRuntime = function (w, h)
	{
		return new Runtime({ "dc": true, "width": w, "height": h });
	};
	window["cr_createRuntime"] = cr.createRuntime;
	window["cr_createDCRuntime"] = cr.createDCRuntime;
	window["createCocoonJSRuntime"] = function ()
	{
		window["c2cocoonjs"] = true;
		var canvas = document.createElement("screencanvas") || document.createElement("canvas");
		canvas.screencanvas = true;
		document.body.appendChild(canvas);
		var rt = new Runtime(canvas);
		window["c2runtime"] = rt;
		window.addEventListener("orientationchange", function () {
			window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		});
		window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		return rt;
	};
	window["createEjectaRuntime"] = function ()
	{
		var canvas = document.getElementById("canvas");
		var rt = new Runtime(canvas);
		window["c2runtime"] = rt;
		window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		return rt;
	};
}());
window["cr_getC2Runtime"] = function()
{
	var canvas = document.getElementById("c2canvas");
	if (canvas)
		return canvas["c2runtime"];
	else if (window["c2runtime"])
		return window["c2runtime"];
	else
		return null;
}
window["cr_getSnapshot"] = function (format_, quality_)
{
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime.doCanvasSnapshot(format_, quality_);
}
window["cr_sizeCanvas"] = function(w, h)
{
	if (w === 0 || h === 0)
		return;
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSize"](w, h);
}
window["cr_setSuspended"] = function(s)
{
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSuspended"](s);
}
;
(function()
{
	function Layout(runtime, m)
	{
		this.runtime = runtime;
		this.event_sheet = null;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		this.scale = 1.0;
		this.angle = 0;
		this.first_visit = true;
		this.name = m[0];
		this.originalWidth = m[1];
		this.originalHeight = m[2];
		this.width = m[1];
		this.height = m[2];
		this.unbounded_scrolling = m[3];
		this.sheetname = m[4];
		this.sid = m[5];
		var lm = m[6];
		var i, len;
		this.layers = [];
		this.initial_types = [];
		for (i = 0, len = lm.length; i < len; i++)
		{
			var layer = new cr.layer(this, lm[i]);
			layer.number = i;
			cr.seal(layer);
			this.layers.push(layer);
		}
		var im = m[7];
		this.initial_nonworld = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_nonworld.push(inst);
			if (this.initial_types.indexOf(type) === -1)
				this.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.shaders_preserve_opaqueness = true;
		this.effect_params = [];
		for (i = 0, len = m[8].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[8][i][0],
				name: m[8][i][1],
				shaderindex: -1,
				preservesOpaqueness: false,
				active: true,
				index: i
			});
			this.effect_params.push(m[8][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
		this.persist_data = {};
	};
	Layout.prototype.saveObjectToPersist = function (inst)
	{
		var sidStr = inst.type.sid.toString();
		if (!this.persist_data.hasOwnProperty(sidStr))
			this.persist_data[sidStr] = [];
		var type_persist = this.persist_data[sidStr];
		type_persist.push(this.runtime.saveInstanceToJSON(inst));
	};
	Layout.prototype.hasOpaqueBottomLayer = function ()
	{
		var layer = this.layers[0];
		return !layer.transparent && layer.opacity === 1.0 && !layer.forceOwnTexture && layer.visible;
	};
	Layout.prototype.updateActiveEffects = function ()
	{
		cr.clearArray(this.active_effect_types);
		this.shaders_preserve_opaqueness = true;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
			{
				this.active_effect_types.push(et);
				if (!et.preservesOpaqueness)
					this.shaders_preserve_opaqueness = false;
			}
		}
	};
	Layout.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	var created_instances = [];
	function sort_by_zindex(a, b)
	{
		return a.zindex - b.zindex;
	};
	var first_layout = true;
	Layout.prototype.startRunning = function ()
	{
		if (this.sheetname)
		{
			this.event_sheet = this.runtime.eventsheets[this.sheetname];
;
			this.event_sheet.updateDeepIncludes();
		}
		this.runtime.running_layout = this;
		this.width = this.originalWidth;
		this.height = this.originalHeight;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		var i, k, len, lenk, type, type_instances, initial_inst, inst, iid, t, s, p, q, type_data, layer;
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.is_family)
				continue;		// instances are only transferred for their real type
			type_instances = type.instances;
			for (k = 0, lenk = type_instances.length; k < lenk; k++)
			{
				inst = type_instances[k];
				if (inst.layer)
				{
					var num = inst.layer.number;
					if (num >= this.layers.length)
						num = this.layers.length - 1;
					inst.layer = this.layers[num];
					if (inst.layer.instances.indexOf(inst) === -1)
						inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
				}
			}
		}
		if (!first_layout)
		{
			for (i = 0, len = this.layers.length; i < len; ++i)
			{
				this.layers[i].instances.sort(sort_by_zindex);
			}
		}
		var layer;
		cr.clearArray(created_instances);
		this.boundScrolling();
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			layer.createInitialInstances();		// fills created_instances
			layer.updateViewport(null);
		}
		var uids_changed = false;
		if (!this.first_visit)
		{
			for (p in this.persist_data)
			{
				if (this.persist_data.hasOwnProperty(p))
				{
					type = this.runtime.getObjectTypeBySid(parseInt(p, 10));
					if (!type || type.is_family || !this.runtime.typeHasPersistBehavior(type))
						continue;
					type_data = this.persist_data[p];
					for (i = 0, len = type_data.length; i < len; i++)
					{
						layer = null;
						if (type.plugin.is_world)
						{
							layer = this.getLayerBySid(type_data[i]["w"]["l"]);
							if (!layer)
								continue;
						}
						inst = this.runtime.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
						this.runtime.loadInstanceFromJSON(inst, type_data[i]);
						uids_changed = true;
						created_instances.push(inst);
					}
					cr.clearArray(type_data);
				}
			}
			for (i = 0, len = this.layers.length; i < len; i++)
			{
				this.layers[i].instances.sort(sort_by_zindex);
				this.layers[i].zindices_stale = true;		// in case of duplicates/holes
			}
		}
		if (uids_changed)
		{
			this.runtime.ClearDeathRow();
			this.runtime.refreshUidMap();
		}
		for (i = 0; i < created_instances.length; i++)
		{
			inst = created_instances[i];
			if (!inst.type.is_contained)
				continue;
			iid = inst.get_iid();
			for (k = 0, lenk = inst.type.container.length; k < lenk; k++)
			{
				t = inst.type.container[k];
				if (inst.type === t)
					continue;
				if (t.instances.length > iid)
					inst.siblings.push(t.instances[iid]);
				else
				{
					if (!t.default_instance)
					{
					}
					else
					{
						s = this.runtime.createInstanceFromInit(t.default_instance, inst.layer, true, inst.x, inst.y, true);
						this.runtime.ClearDeathRow();
						t.updateIIDs();
						inst.siblings.push(s);
						created_instances.push(s);		// come back around and link up its own instances too
					}
				}
			}
		}
		for (i = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			initial_inst = this.initial_nonworld[i];
			type = this.runtime.types_by_index[initial_inst[1]];
			if (!type.is_contained)
			{
				inst = this.runtime.createInstanceFromInit(this.initial_nonworld[i], null, true);
			}
;
		}
		this.runtime.changelayout = null;
		this.runtime.ClearDeathRow();
		if (this.runtime.ctx && !this.runtime.isDomFree)
		{
			for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
			{
				t = this.runtime.types_by_index[i];
				if (t.is_family || !t.instances.length || !t.preloadCanvas2D)
					continue;
				t.preloadCanvas2D(this.runtime.ctx);
			}
		}
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout start: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		if (this.runtime.isLoadingState)
		{
			cr.shallowAssignArray(this.runtime.fireOnCreateAfterLoad, created_instances);
		}
		else
		{
			for (i = 0, len = created_instances.length; i < len; i++)
			{
				inst = created_instances[i];
				this.runtime.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnCreated, inst);
			}
		}
		cr.clearArray(created_instances);
		if (!this.runtime.isLoadingState)
		{
			this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutStart, null);
		}
		this.first_visit = false;
	};
	Layout.prototype.createGlobalNonWorlds = function ()
	{
		var i, k, len, initial_inst, inst, type;
		for (i = 0, k = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			initial_inst = this.initial_nonworld[i];
			type = this.runtime.types_by_index[initial_inst[1]];
			if (type.global)
			{
				if (!type.is_contained)
				{
					inst = this.runtime.createInstanceFromInit(initial_inst, null, true);
				}
			}
			else
			{
				this.initial_nonworld[k] = initial_inst;
				k++;
			}
		}
		cr.truncateArray(this.initial_nonworld, k);
	};
	Layout.prototype.stopRunning = function ()
	{
;
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout end: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		if (!this.runtime.isLoadingState)
		{
			this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutEnd, null);
		}
		this.runtime.isEndingLayout = true;
		cr.clearArray(this.runtime.system.waits);
		var i, leni, j, lenj;
		var layer_instances, inst, type;
		if (!this.first_visit)
		{
			for (i = 0, leni = this.layers.length; i < leni; i++)
			{
				this.layers[i].updateZIndices();
				layer_instances = this.layers[i].instances;
				for (j = 0, lenj = layer_instances.length; j < lenj; j++)
				{
					inst = layer_instances[j];
					if (!inst.type.global)
					{
						if (this.runtime.typeHasPersistBehavior(inst.type))
							this.saveObjectToPersist(inst);
					}
				}
			}
		}
		for (i = 0, leni = this.layers.length; i < leni; i++)
		{
			layer_instances = this.layers[i].instances;
			for (j = 0, lenj = layer_instances.length; j < lenj; j++)
			{
				inst = layer_instances[j];
				if (!inst.type.global)
				{
					this.runtime.DestroyInstance(inst);
				}
			}
			this.runtime.ClearDeathRow();
			cr.clearArray(layer_instances);
			this.layers[i].zindices_stale = true;
		}
		for (i = 0, leni = this.runtime.types_by_index.length; i < leni; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.global || type.plugin.is_world || type.plugin.singleglobal || type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
				this.runtime.DestroyInstance(type.instances[j]);
			this.runtime.ClearDeathRow();
		}
		first_layout = false;
		this.runtime.isEndingLayout = false;
	};
	var temp_rect = new cr.rect(0, 0, 0, 0);
	Layout.prototype.recreateInitialObjects = function (type, x1, y1, x2, y2)
	{
		temp_rect.set(x1, y1, x2, y2);
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			this.layers[i].recreateInitialObjects(type, temp_rect);
		}
	};
	Layout.prototype.draw = function (ctx)
	{
		var layout_canvas;
		var layout_ctx = ctx;
		var ctx_changed = false;
		var render_offscreen = !this.runtime.fullscreenScalingQuality;
		if (render_offscreen)
		{
			if (!this.runtime.layout_canvas)
			{
				this.runtime.layout_canvas = document.createElement("canvas");
				layout_canvas = this.runtime.layout_canvas;
				layout_canvas.width = this.runtime.draw_width;
				layout_canvas.height = this.runtime.draw_height;
				this.runtime.layout_ctx = layout_canvas.getContext("2d");
				ctx_changed = true;
			}
			layout_canvas = this.runtime.layout_canvas;
			layout_ctx = this.runtime.layout_ctx;
			if (layout_canvas.width !== this.runtime.draw_width)
			{
				layout_canvas.width = this.runtime.draw_width;
				ctx_changed = true;
			}
			if (layout_canvas.height !== this.runtime.draw_height)
			{
				layout_canvas.height = this.runtime.draw_height;
				ctx_changed = true;
			}
			if (ctx_changed)
			{
				this.runtime.setCtxImageSmoothingEnabled(layout_ctx, this.runtime.linearSampling);
			}
		}
		layout_ctx.globalAlpha = 1;
		layout_ctx.globalCompositeOperation = "source-over";
		if (this.runtime.clearBackground && !this.hasOpaqueBottomLayer())
			layout_ctx.clearRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		var i, len, l;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.visible && l.opacity > 0 && l.blend_mode !== 11 && (l.instances.length || !l.transparent))
				l.draw(layout_ctx);
			else
				l.updateViewport(null);		// even if not drawing, keep viewport up to date
		}
		if (render_offscreen)
		{
			ctx.drawImage(layout_canvas, 0, 0, this.runtime.width, this.runtime.height);
		}
	};
	Layout.prototype.drawGL_earlyZPass = function (glw)
	{
		glw.setEarlyZPass(true);
		if (!this.runtime.layout_tex)
		{
			this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
		}
		if (this.runtime.layout_tex.c2width !== this.runtime.draw_width || this.runtime.layout_tex.c2height !== this.runtime.draw_height)
		{
			glw.deleteTexture(this.runtime.layout_tex);
			this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
		}
		glw.setRenderingToTexture(this.runtime.layout_tex);
		if (!this.runtime.fullscreenScalingQuality)
		{
			glw.setSize(this.runtime.draw_width, this.runtime.draw_height);
		}
		var i, l;
		for (i = this.layers.length - 1; i >= 0; --i)
		{
			l = this.layers[i];
			if (l.visible && l.opacity === 1 && l.shaders_preserve_opaqueness &&
				l.blend_mode === 0 && (l.instances.length || !l.transparent))
			{
				l.drawGL_earlyZPass(glw);
			}
			else
			{
				l.updateViewport(null);		// even if not drawing, keep viewport up to date
			}
		}
		glw.setEarlyZPass(false);
	};
	Layout.prototype.drawGL = function (glw)
	{
		var render_to_texture = (this.active_effect_types.length > 0 ||
								 this.runtime.uses_background_blending ||
								 !this.runtime.fullscreenScalingQuality ||
								 this.runtime.enableFrontToBack);
		if (render_to_texture)
		{
			if (!this.runtime.layout_tex)
			{
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layout_tex.c2width !== this.runtime.draw_width || this.runtime.layout_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layout_tex);
			if (!this.runtime.fullscreenScalingQuality)
			{
				glw.setSize(this.runtime.draw_width, this.runtime.draw_height);
			}
		}
		else
		{
			if (this.runtime.layout_tex)
			{
				glw.setRenderingToTexture(null);
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = null;
			}
		}
		if (this.runtime.clearBackground && !this.hasOpaqueBottomLayer())
			glw.clear(0, 0, 0, 0);
		var i, len, l;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.visible && l.opacity > 0 && (l.instances.length || !l.transparent))
				l.drawGL(glw);
			else
				l.updateViewport(null);		// even if not drawing, keep viewport up to date
		}
		if (render_to_texture)
		{
			if (this.active_effect_types.length === 0 ||
				(this.active_effect_types.length === 1 && this.runtime.fullscreenScalingQuality))
			{
				if (this.active_effect_types.length === 1)
				{
					var etindex = this.active_effect_types[0].index;
					glw.switchProgram(this.active_effect_types[0].shaderindex);
					glw.setProgramParameters(null,								// backTex
											 1.0 / this.runtime.draw_width,		// pixelWidth
											 1.0 / this.runtime.draw_height,	// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.scale,						// layerScale
											 this.angle,						// layerAngle
											 0.0, 0.0,							// viewOrigin
											 this.runtime.draw_width / 2, this.runtime.draw_height / 2,	// scrollPos
											 this.runtime.kahanTime.sum,		// seconds
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(this.active_effect_types[0].shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				if (!this.runtime.fullscreenScalingQuality)
				{
					glw.setSize(this.runtime.width, this.runtime.height);
				}
				glw.setRenderingToTexture(null);				// to backbuffer
				glw.setDepthTestEnabled(false);					// ignore depth buffer, copy full texture
				glw.setOpacity(1);
				glw.setTexture(this.runtime.layout_tex);
				glw.setAlphaBlend();
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.width / 2;
				var halfh = this.runtime.height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
				glw.setDepthTestEnabled(true);					// turn depth test back on
			}
			else
			{
				this.renderEffectChain(glw, null, null, null);
			}
		}
	};
	Layout.prototype.getRenderTarget = function()
	{
		if (this.active_effect_types.length > 0 ||
				this.runtime.uses_background_blending ||
				!this.runtime.fullscreenScalingQuality ||
				this.runtime.enableFrontToBack)
		{
			return this.runtime.layout_tex;
		}
		else
		{
			return null;
		}
	};
	Layout.prototype.getMinLayerScale = function ()
	{
		var m = this.layers[0].getScale();
		var i, len, l;
		for (i = 1, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.parallaxX === 0 && l.parallaxY === 0)
				continue;
			if (l.getScale() < m)
				m = l.getScale();
		}
		return m;
	};
	Layout.prototype.scrollToX = function (x)
	{
		if (!this.unbounded_scrolling)
		{
			var widthBoundary = (this.runtime.draw_width * (1 / this.getMinLayerScale()) / 2);
			if (x > this.width - widthBoundary)
				x = this.width - widthBoundary;
			if (x < widthBoundary)
				x = widthBoundary;
		}
		if (this.scrollX !== x)
		{
			this.scrollX = x;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.scrollToY = function (y)
	{
		if (!this.unbounded_scrolling)
		{
			var heightBoundary = (this.runtime.draw_height * (1 / this.getMinLayerScale()) / 2);
			if (y > this.height - heightBoundary)
				y = this.height - heightBoundary;
			if (y < heightBoundary)
				y = heightBoundary;
		}
		if (this.scrollY !== y)
		{
			this.scrollY = y;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.boundScrolling = function ()
	{
		this.scrollToX(this.scrollX);
		this.scrollToY(this.scrollY);
	};
	Layout.prototype.renderEffectChain = function (glw, layer, inst, rendertarget)
	{
		var active_effect_types = inst ?
							inst.active_effect_types :
							layer ?
								layer.active_effect_types :
								this.active_effect_types;
		var layerScale = 1, layerAngle = 0, viewOriginLeft = 0, viewOriginTop = 0, viewOriginRight = this.runtime.draw_width, viewOriginBottom = this.runtime.draw_height;
		if (inst)
		{
			layerScale = inst.layer.getScale();
			layerAngle = inst.layer.getAngle();
			viewOriginLeft = inst.layer.viewLeft;
			viewOriginTop = inst.layer.viewTop;
			viewOriginRight = inst.layer.viewRight;
			viewOriginBottom = inst.layer.viewBottom;
		}
		else if (layer)
		{
			layerScale = layer.getScale();
			layerAngle = layer.getAngle();
			viewOriginLeft = layer.viewLeft;
			viewOriginTop = layer.viewTop;
			viewOriginRight = layer.viewRight;
			viewOriginBottom = layer.viewBottom;
		}
		var fx_tex = this.runtime.fx_tex;
		var i, len, last, temp, fx_index = 0, other_fx_index = 1;
		var y, h;
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var halfw = windowWidth / 2;
		var halfh = windowHeight / 2;
		var rcTex = layer ? layer.rcTex : this.rcTex;
		var rcTex2 = layer ? layer.rcTex2 : this.rcTex2;
		var screenleft = 0, clearleft = 0;
		var screentop = 0, cleartop = 0;
		var screenright = windowWidth, clearright = windowWidth;
		var screenbottom = windowHeight, clearbottom = windowHeight;
		var boxExtendHorizontal = 0;
		var boxExtendVertical = 0;
		var inst_layer_angle = inst ? inst.layer.getAngle() : 0;
		if (inst)
		{
			for (i = 0, len = active_effect_types.length; i < len; i++)
			{
				boxExtendHorizontal += glw.getProgramBoxExtendHorizontal(active_effect_types[i].shaderindex);
				boxExtendVertical += glw.getProgramBoxExtendVertical(active_effect_types[i].shaderindex);
			}
			var bbox = inst.bbox;
			screenleft = layer.layerToCanvas(bbox.left, bbox.top, true, true);
			screentop = layer.layerToCanvas(bbox.left, bbox.top, false, true);
			screenright = layer.layerToCanvas(bbox.right, bbox.bottom, true, true);
			screenbottom = layer.layerToCanvas(bbox.right, bbox.bottom, false, true);
			if (inst_layer_angle !== 0)
			{
				var screentrx = layer.layerToCanvas(bbox.right, bbox.top, true, true);
				var screentry = layer.layerToCanvas(bbox.right, bbox.top, false, true);
				var screenblx = layer.layerToCanvas(bbox.left, bbox.bottom, true, true);
				var screenbly = layer.layerToCanvas(bbox.left, bbox.bottom, false, true);
				temp = Math.min(screenleft, screenright, screentrx, screenblx);
				screenright = Math.max(screenleft, screenright, screentrx, screenblx);
				screenleft = temp;
				temp = Math.min(screentop, screenbottom, screentry, screenbly);
				screenbottom = Math.max(screentop, screenbottom, screentry, screenbly);
				screentop = temp;
			}
			screenleft -= boxExtendHorizontal;
			screentop -= boxExtendVertical;
			screenright += boxExtendHorizontal;
			screenbottom += boxExtendVertical;
			rcTex2.left = screenleft / windowWidth;
			rcTex2.top = 1 - screentop / windowHeight;
			rcTex2.right = screenright / windowWidth;
			rcTex2.bottom = 1 - screenbottom / windowHeight;
			clearleft = screenleft = cr.floor(screenleft);
			cleartop = screentop = cr.floor(screentop);
			clearright = screenright = cr.ceil(screenright);
			clearbottom = screenbottom = cr.ceil(screenbottom);
			clearleft -= boxExtendHorizontal;
			cleartop -= boxExtendVertical;
			clearright += boxExtendHorizontal;
			clearbottom += boxExtendVertical;
			if (screenleft < 0)					screenleft = 0;
			if (screentop < 0)					screentop = 0;
			if (screenright > windowWidth)		screenright = windowWidth;
			if (screenbottom > windowHeight)	screenbottom = windowHeight;
			if (clearleft < 0)					clearleft = 0;
			if (cleartop < 0)					cleartop = 0;
			if (clearright > windowWidth)		clearright = windowWidth;
			if (clearbottom > windowHeight)		clearbottom = windowHeight;
			rcTex.left = screenleft / windowWidth;
			rcTex.top = 1 - screentop / windowHeight;
			rcTex.right = screenright / windowWidth;
			rcTex.bottom = 1 - screenbottom / windowHeight;
		}
		else
		{
			rcTex.left = rcTex2.left = 0;
			rcTex.top = rcTex2.top = 0;
			rcTex.right = rcTex2.right = 1;
			rcTex.bottom = rcTex2.bottom = 1;
		}
		var pre_draw = (inst && (glw.programUsesDest(active_effect_types[0].shaderindex) || boxExtendHorizontal !== 0 || boxExtendVertical !== 0 || inst.opacity !== 1 || inst.type.plugin.must_predraw)) || (layer && !inst && layer.opacity !== 1);
		glw.setAlphaBlend();
		if (pre_draw)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(0);
			glw.setRenderingToTexture(fx_tex[fx_index]);
			h = clearbottom - cleartop;
			y = (windowHeight - cleartop) - h;
			glw.clearRect(clearleft, y, clearright - clearleft, h);
			if (inst)
			{
				inst.drawGL(glw);
			}
			else
			{
				glw.setTexture(this.runtime.layer_tex);
				glw.setOpacity(layer.opacity);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			}
			rcTex2.left = rcTex2.top = 0;
			rcTex2.right = rcTex2.bottom = 1;
			if (inst)
			{
				temp = rcTex.top;
				rcTex.top = rcTex.bottom;
				rcTex.bottom = temp;
			}
			fx_index = 1;
			other_fx_index = 0;
		}
		glw.setOpacity(1);
		var last = active_effect_types.length - 1;
		var post_draw = glw.programUsesCrossSampling(active_effect_types[last].shaderindex) ||
						(!layer && !inst && !this.runtime.fullscreenScalingQuality);
		var etindex = 0;
		for (i = 0, len = active_effect_types.length; i < len; i++)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(active_effect_types[i].shaderindex);
			etindex = active_effect_types[i].index;
			if (glw.programIsAnimated(active_effect_types[i].shaderindex))
				this.runtime.redraw = true;
			if (i == 0 && !pre_draw)
			{
				glw.setRenderingToTexture(fx_tex[fx_index]);
				h = clearbottom - cleartop;
				y = (windowHeight - cleartop) - h;
				glw.clearRect(clearleft, y, clearright - clearleft, h);
				if (inst)
				{
					var pixelWidth;
					var pixelHeight;
					if (inst.curFrame && inst.curFrame.texture_img)
					{
						var img = inst.curFrame.texture_img;
						pixelWidth = 1.0 / img.width;
						pixelHeight = 1.0 / img.height;
					}
					else
					{
						pixelWidth = 1.0 / inst.width;
						pixelHeight = 1.0 / inst.height;
					}
					glw.setProgramParameters(rendertarget,					// backTex
											 pixelWidth,
											 pixelHeight,
											 rcTex2.left, rcTex2.top,		// destStart
											 rcTex2.right, rcTex2.bottom,	// destEnd
											 layerScale,
											 layerAngle,
											 viewOriginLeft, viewOriginTop,
											 (viewOriginLeft + viewOriginRight) / 2, (viewOriginTop + viewOriginBottom) / 2,
											 this.runtime.kahanTime.sum,
											 inst.effect_params[etindex]);	// fx params
					inst.drawGL(glw);
				}
				else
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / windowWidth,				// pixelWidth
											 1.0 / windowHeight,			// pixelHeight
											 0.0, 0.0,						// destStart
											 1.0, 1.0,						// destEnd
											 layerScale,
											 layerAngle,
											 viewOriginLeft, viewOriginTop,
											 (viewOriginLeft + viewOriginRight) / 2, (viewOriginTop + viewOriginBottom) / 2,
											 this.runtime.kahanTime.sum,
											 layer ?						// fx params
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
					glw.setTexture(layer ? this.runtime.layer_tex : this.runtime.layout_tex);
					glw.resetModelView();
					glw.translate(-halfw, -halfh);
					glw.updateModelView();
					glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				}
				rcTex2.left = rcTex2.top = 0;
				rcTex2.right = rcTex2.bottom = 1;
				if (inst && !post_draw)
				{
					temp = screenbottom;
					screenbottom = screentop;
					screentop = temp;
				}
			}
			else
			{
				glw.setProgramParameters(rendertarget,						// backTex
										 1.0 / windowWidth,					// pixelWidth
										 1.0 / windowHeight,				// pixelHeight
										 rcTex2.left, rcTex2.top,			// destStart
										 rcTex2.right, rcTex2.bottom,		// destEnd
										 layerScale,
										 layerAngle,
										 viewOriginLeft, viewOriginTop,
										 (viewOriginLeft + viewOriginRight) / 2, (viewOriginTop + viewOriginBottom) / 2,
										 this.runtime.kahanTime.sum,
										 inst ?								// fx params
											inst.effect_params[etindex] :
											layer ?
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
				glw.setTexture(null);
				if (i === last && !post_draw)
				{
					if (inst)
						glw.setBlend(inst.srcBlend, inst.destBlend);
					else if (layer)
						glw.setBlend(layer.srcBlend, layer.destBlend);
					glw.setRenderingToTexture(rendertarget);
				}
				else
				{
					glw.setRenderingToTexture(fx_tex[fx_index]);
					h = clearbottom - cleartop;
					y = (windowHeight - cleartop) - h;
					glw.clearRect(clearleft, y, clearright - clearleft, h);
				}
				glw.setTexture(fx_tex[other_fx_index]);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				if (i === last && !post_draw)
					glw.setTexture(null);
			}
			fx_index = (fx_index === 0 ? 1 : 0);
			other_fx_index = (fx_index === 0 ? 1 : 0);		// will be opposite to fx_index since it was just assigned
		}
		if (post_draw)
		{
			glw.switchProgram(0);
			if (inst)
				glw.setBlend(inst.srcBlend, inst.destBlend);
			else if (layer)
				glw.setBlend(layer.srcBlend, layer.destBlend);
			else
			{
				if (!this.runtime.fullscreenScalingQuality)
				{
					glw.setSize(this.runtime.width, this.runtime.height);
					halfw = this.runtime.width / 2;
					halfh = this.runtime.height / 2;
					screenleft = 0;
					screentop = 0;
					screenright = this.runtime.width;
					screenbottom = this.runtime.height;
				}
			}
			glw.setRenderingToTexture(rendertarget);
			glw.setTexture(fx_tex[other_fx_index]);
			glw.resetModelView();
			glw.translate(-halfw, -halfh);
			glw.updateModelView();
			if (inst && active_effect_types.length === 1 && !pre_draw)
				glw.quadTex(screenleft, screentop, screenright, screentop, screenright, screenbottom, screenleft, screenbottom, rcTex);
			else
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			glw.setTexture(null);
		}
	};
	Layout.prototype.getLayerBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].sid === sid_)
				return this.layers[i];
		}
		return null;
	};
	Layout.prototype.saveToJSON = function ()
	{
		var i, len, layer, et;
		var o = {
			"sx": this.scrollX,
			"sy": this.scrollY,
			"s": this.scale,
			"a": this.angle,
			"w": this.width,
			"h": this.height,
			"fv": this.first_visit,			// added r127
			"persist": this.persist_data,
			"fx": [],
			"layers": {}
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			o["layers"][layer.sid.toString()] = layer.saveToJSON();
		}
		return o;
	};
	Layout.prototype.loadFromJSON = function (o)
	{
		var i, j, len, fx, p, layer;
		this.scrollX = o["sx"];
		this.scrollY = o["sy"];
		this.scale = o["s"];
		this.angle = o["a"];
		this.width = o["w"];
		this.height = o["h"];
		this.persist_data = o["persist"];
		if (typeof o["fv"] !== "undefined")
			this.first_visit = o["fv"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		var olayers = o["layers"];
		for (p in olayers)
		{
			if (olayers.hasOwnProperty(p))
			{
				layer = this.getLayerBySid(parseInt(p, 10));
				if (!layer)
					continue;		// must've gone missing
				layer.loadFromJSON(olayers[p]);
			}
		}
	};
	cr.layout = Layout;
	function Layer(layout, m)
	{
		this.layout = layout;
		this.runtime = layout.runtime;
		this.instances = [];        // running instances
		this.scale = 1.0;
		this.angle = 0;
		this.disableAngle = false;
		this.tmprect = new cr.rect(0, 0, 0, 0);
		this.tmpquad = new cr.quad();
		this.viewLeft = 0;
		this.viewRight = 0;
		this.viewTop = 0;
		this.viewBottom = 0;
		this.zindices_stale = false;
		this.zindices_stale_from = -1;		// first index that has changed, or -1 if no bound
		this.clear_earlyz_index = 0;
		this.name = m[0];
		this.index = m[1];
		this.sid = m[2];
		this.visible = m[3];		// initially visible
		this.background_color = m[4];
		this.transparent = m[5];
		this.parallaxX = m[6];
		this.parallaxY = m[7];
		this.opacity = m[8];
		this.forceOwnTexture = m[9];
		this.useRenderCells = m[10];
		this.zoomRate = m[11];
		this.blend_mode = m[12];
		this.effect_fallback = m[13];
		this.compositeOp = "source-over";
		this.srcBlend = 0;
		this.destBlend = 0;
		this.render_grid = null;
		this.last_render_list = alloc_arr();
		this.render_list_stale = true;
		this.last_render_cells = new cr.rect(0, 0, -1, -1);
		this.cur_render_cells = new cr.rect(0, 0, -1, -1);
		if (this.useRenderCells)
		{
			this.render_grid = new cr.RenderGrid(this.runtime.original_width, this.runtime.original_height);
		}
		this.render_offscreen = false;
		var im = m[14];
		var i, len;
		this.startup_initial_instances = [];		// for restoring initial_instances after load
		this.initial_instances = [];
		this.created_globals = [];		// global object UIDs already created - for save/load to avoid recreating
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
			{
				type.default_instance = inst;
				type.default_layerindex = this.index;
			}
			this.initial_instances.push(inst);
			if (this.layout.initial_types.indexOf(type) === -1)
				this.layout.initial_types.push(type);
		}
		cr.shallowAssignArray(this.startup_initial_instances, this.initial_instances);
		this.effect_types = [];
		this.active_effect_types = [];
		this.shaders_preserve_opaqueness = true;
		this.effect_params = [];
		for (i = 0, len = m[15].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[15][i][0],
				name: m[15][i][1],
				shaderindex: -1,
				preservesOpaqueness: false,
				active: true,
				index: i
			});
			this.effect_params.push(m[15][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
	};
	Layer.prototype.updateActiveEffects = function ()
	{
		cr.clearArray(this.active_effect_types);
		this.shaders_preserve_opaqueness = true;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
			{
				this.active_effect_types.push(et);
				if (!et.preservesOpaqueness)
					this.shaders_preserve_opaqueness = false;
			}
		}
	};
	Layer.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	Layer.prototype.createInitialInstances = function ()
	{
		var i, k, len, inst, initial_inst, type, keep, hasPersistBehavior;
		for (i = 0, k = 0, len = this.initial_instances.length; i < len; i++)
		{
			initial_inst = this.initial_instances[i];
			type = this.runtime.types_by_index[initial_inst[1]];
;
			hasPersistBehavior = this.runtime.typeHasPersistBehavior(type);
			keep = true;
			if (!hasPersistBehavior || this.layout.first_visit)
			{
				inst = this.runtime.createInstanceFromInit(initial_inst, this, true);
				if (!inst)
					continue;		// may have skipped creation due to fallback effect "destroy"
				created_instances.push(inst);
				if (inst.type.global)
				{
					keep = false;
					this.created_globals.push(inst.uid);
				}
			}
			if (keep)
			{
				this.initial_instances[k] = this.initial_instances[i];
				k++;
			}
		}
		this.initial_instances.length = k;
		this.runtime.ClearDeathRow();		// flushes creation row so IIDs will be correct
		if (!this.runtime.glwrap && this.effect_types.length)	// no WebGL renderer and shaders used
			this.blend_mode = this.effect_fallback;				// use fallback blend mode
		this.compositeOp = cr.effectToCompositeOp(this.blend_mode);
		if (this.runtime.gl)
			cr.setGLBlend(this, this.blend_mode, this.runtime.gl);
		this.render_list_stale = true;
	};
	Layer.prototype.recreateInitialObjects = function (only_type, rc)
	{
		var i, len, initial_inst, type, wm, x, y, inst, j, lenj, s;
		var types_by_index = this.runtime.types_by_index;
		var only_type_is_family = only_type.is_family;
		var only_type_members = only_type.members;
		for (i = 0, len = this.initial_instances.length; i < len; ++i)
		{
			initial_inst = this.initial_instances[i];
			wm = initial_inst[0];
			x = wm[0];
			y = wm[1];
			if (!rc.contains_pt(x, y))
				continue;		// not in the given area
			type = types_by_index[initial_inst[1]];
			if (type !== only_type)
			{
				if (only_type_is_family)
				{
					if (only_type_members.indexOf(type) < 0)
						continue;
				}
				else
					continue;		// only_type is not a family, and the initial inst type does not match
			}
			inst = this.runtime.createInstanceFromInit(initial_inst, this, false);
			this.runtime.isInOnDestroy++;
			this.runtime.trigger(Object.getPrototypeOf(type.plugin).cnds.OnCreated, inst);
			if (inst.is_contained)
			{
				for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
				{
					s = inst.siblings[i];
					this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
				}
			}
			this.runtime.isInOnDestroy--;
		}
	};
	Layer.prototype.removeFromInstanceList = function (inst, remove_from_grid)
	{
		var index = cr.fastIndexOf(this.instances, inst);
		if (index < 0)
			return;		// not found
		if (remove_from_grid && this.useRenderCells && inst.rendercells && inst.rendercells.right >= inst.rendercells.left)
		{
			inst.update_bbox();											// make sure actually in its current rendercells
			this.render_grid.update(inst, inst.rendercells, null);		// no new range provided - remove only
			inst.rendercells.set(0, 0, -1, -1);							// set to invalid state to indicate not inserted
		}
		if (index === this.instances.length - 1)
			this.instances.pop();
		else
		{
			cr.arrayRemove(this.instances, index);
			this.setZIndicesStaleFrom(index);
		}
		this.render_list_stale = true;
	};
	Layer.prototype.appendToInstanceList = function (inst, add_to_grid)
	{
;
		inst.zindex = this.instances.length;
		this.instances.push(inst);
		if (add_to_grid && this.useRenderCells && inst.rendercells)
		{
			inst.set_bbox_changed();		// will cause immediate update and new insertion to grid
		}
		this.render_list_stale = true;
	};
	Layer.prototype.prependToInstanceList = function (inst, add_to_grid)
	{
;
		this.instances.unshift(inst);
		this.setZIndicesStaleFrom(0);
		if (add_to_grid && this.useRenderCells && inst.rendercells)
		{
			inst.set_bbox_changed();		// will cause immediate update and new insertion to grid
		}
	};
	Layer.prototype.moveInstanceAdjacent = function (inst, other, isafter)
	{
;
		var myZ = inst.get_zindex();
		var insertZ = other.get_zindex();
		cr.arrayRemove(this.instances, myZ);
		if (myZ < insertZ)
			insertZ--;
		if (isafter)
			insertZ++;
		if (insertZ === this.instances.length)
			this.instances.push(inst);
		else
			this.instances.splice(insertZ, 0, inst);
		this.setZIndicesStaleFrom(myZ < insertZ ? myZ : insertZ);
	};
	Layer.prototype.setZIndicesStaleFrom = function (index)
	{
		if (this.zindices_stale_from === -1)			// not yet set
			this.zindices_stale_from = index;
		else if (index < this.zindices_stale_from)		// determine minimum z index affected
			this.zindices_stale_from = index;
		this.zindices_stale = true;
		this.render_list_stale = true;
	};
	Layer.prototype.updateZIndices = function ()
	{
		if (!this.zindices_stale)
			return;
		if (this.zindices_stale_from === -1)
			this.zindices_stale_from = 0;
		var i, len, inst;
		if (this.useRenderCells)
		{
			for (i = this.zindices_stale_from, len = this.instances.length; i < len; ++i)
			{
				inst = this.instances[i];
				inst.zindex = i;
				this.render_grid.markRangeChanged(inst.rendercells);
			}
		}
		else
		{
			for (i = this.zindices_stale_from, len = this.instances.length; i < len; ++i)
			{
				this.instances[i].zindex = i;
			}
		}
		this.zindices_stale = false;
		this.zindices_stale_from = -1;
	};
	Layer.prototype.getScale = function (include_aspect)
	{
		return this.getNormalScale() * (this.runtime.fullscreenScalingQuality || include_aspect ? this.runtime.aspect_scale : 1);
	};
	Layer.prototype.getNormalScale = function ()
	{
		return ((this.scale * this.layout.scale) - 1) * this.zoomRate + 1;
	};
	Layer.prototype.getAngle = function ()
	{
		if (this.disableAngle)
			return 0;
		return cr.clamp_angle(this.layout.angle + this.angle);
	};
	var arr_cache = [];
	function alloc_arr()
	{
		if (arr_cache.length)
			return arr_cache.pop();
		else
			return [];
	}
	function free_arr(a)
	{
		cr.clearArray(a);
		arr_cache.push(a);
	};
	function mergeSortedZArrays(a, b, out)
	{
		var i = 0, j = 0, k = 0, lena = a.length, lenb = b.length, ai, bj;
		out.length = lena + lenb;
		for ( ; i < lena && j < lenb; ++k)
		{
			ai = a[i];
			bj = b[j];
			if (ai.zindex < bj.zindex)
			{
				out[k] = ai;
				++i;
			}
			else
			{
				out[k] = bj;
				++j;
			}
		}
		for ( ; i < lena; ++i, ++k)
			out[k] = a[i];
		for ( ; j < lenb; ++j, ++k)
			out[k] = b[j];
	};
	var next_arr = [];
	function mergeAllSortedZArrays_pass(arr, first_pass)
	{
		var i, len, arr1, arr2, out;
		for (i = 0, len = arr.length; i < len - 1; i += 2)
		{
			arr1 = arr[i];
			arr2 = arr[i+1];
			out = alloc_arr();
			mergeSortedZArrays(arr1, arr2, out);
			if (!first_pass)
			{
				free_arr(arr1);
				free_arr(arr2);
			}
			next_arr.push(out);
		}
		if (len % 2 === 1)
		{
			if (first_pass)
			{
				arr1 = alloc_arr();
				cr.shallowAssignArray(arr1, arr[len - 1]);
				next_arr.push(arr1);
			}
			else
			{
				next_arr.push(arr[len - 1]);
			}
		}
		cr.shallowAssignArray(arr, next_arr);
		cr.clearArray(next_arr);
	};
	function mergeAllSortedZArrays(arr)
	{
		var first_pass = true;
		while (arr.length > 1)
		{
			mergeAllSortedZArrays_pass(arr, first_pass);
			first_pass = false;
		}
		return arr[0];
	};
	var render_arr = [];
	Layer.prototype.getRenderCellInstancesToDraw = function ()
	{
;
		this.updateZIndices();
		this.render_grid.queryRange(this.viewLeft, this.viewTop, this.viewRight, this.viewBottom, render_arr);
		if (!render_arr.length)
			return alloc_arr();
		if (render_arr.length === 1)
		{
			var a = alloc_arr();
			cr.shallowAssignArray(a, render_arr[0]);
			cr.clearArray(render_arr);
			return a;
		}
		var draw_list = mergeAllSortedZArrays(render_arr);
		cr.clearArray(render_arr);
		return draw_list;
	};
	Layer.prototype.draw = function (ctx)
	{
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.blend_mode !== 0);
		var layer_canvas = this.runtime.canvas;
		var layer_ctx = ctx;
		var ctx_changed = false;
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_canvas)
			{
				this.runtime.layer_canvas = document.createElement("canvas");
;
				layer_canvas = this.runtime.layer_canvas;
				layer_canvas.width = this.runtime.draw_width;
				layer_canvas.height = this.runtime.draw_height;
				this.runtime.layer_ctx = layer_canvas.getContext("2d");
;
				ctx_changed = true;
			}
			layer_canvas = this.runtime.layer_canvas;
			layer_ctx = this.runtime.layer_ctx;
			if (layer_canvas.width !== this.runtime.draw_width)
			{
				layer_canvas.width = this.runtime.draw_width;
				ctx_changed = true;
			}
			if (layer_canvas.height !== this.runtime.draw_height)
			{
				layer_canvas.height = this.runtime.draw_height;
				ctx_changed = true;
			}
			if (ctx_changed)
			{
				this.runtime.setCtxImageSmoothingEnabled(layer_ctx, this.runtime.linearSampling);
			}
			if (this.transparent)
				layer_ctx.clearRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		}
		layer_ctx.globalAlpha = 1;
		layer_ctx.globalCompositeOperation = "source-over";
		if (!this.transparent)
		{
			layer_ctx.fillStyle = "rgb(" + this.background_color[0] + "," + this.background_color[1] + "," + this.background_color[2] + ")";
			layer_ctx.fillRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		}
		layer_ctx.save();
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = Math.round(px);
			py = Math.round(py);
		}
		this.rotateViewport(px, py, layer_ctx);
		var myscale = this.getScale();
		layer_ctx.scale(myscale, myscale);
		layer_ctx.translate(-px, -py);
		var instances_to_draw;
		if (this.useRenderCells)
		{
			this.cur_render_cells.left = this.render_grid.XToCell(this.viewLeft);
			this.cur_render_cells.top = this.render_grid.YToCell(this.viewTop);
			this.cur_render_cells.right = this.render_grid.XToCell(this.viewRight);
			this.cur_render_cells.bottom = this.render_grid.YToCell(this.viewBottom);
			if (this.render_list_stale || !this.cur_render_cells.equals(this.last_render_cells))
			{
				free_arr(this.last_render_list);
				instances_to_draw = this.getRenderCellInstancesToDraw();
				this.render_list_stale = false;
				this.last_render_cells.copy(this.cur_render_cells);
			}
			else
				instances_to_draw = this.last_render_list;
		}
		else
			instances_to_draw = this.instances;
		var i, len, inst, last_inst = null;
		for (i = 0, len = instances_to_draw.length; i < len; ++i)
		{
			inst = instances_to_draw[i];
			if (inst === last_inst)
				continue;
			this.drawInstance(inst, layer_ctx);
			last_inst = inst;
		}
		if (this.useRenderCells)
			this.last_render_list = instances_to_draw;
		layer_ctx.restore();
		if (this.render_offscreen)
		{
			ctx.globalCompositeOperation = this.compositeOp;
			ctx.globalAlpha = this.opacity;
			ctx.drawImage(layer_canvas, 0, 0);
		}
	};
	Layer.prototype.drawInstance = function(inst, layer_ctx)
	{
		if (!inst.visible || inst.width === 0 || inst.height === 0)
			return;
		inst.update_bbox();
		var bbox = inst.bbox;
		if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
			return;
		layer_ctx.globalCompositeOperation = inst.compositeOp;
		inst.draw(layer_ctx);
	};
	Layer.prototype.updateViewport = function (ctx)
	{
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = Math.round(px);
			py = Math.round(py);
		}
		this.rotateViewport(px, py, ctx);
	};
	Layer.prototype.rotateViewport = function (px, py, ctx)
	{
		var myscale = this.getScale();
		this.viewLeft = px;
		this.viewTop = py;
		this.viewRight = px + (this.runtime.draw_width * (1 / myscale));
		this.viewBottom = py + (this.runtime.draw_height * (1 / myscale));
		var temp;
		if (this.viewLeft > this.viewRight)
		{
			temp = this.viewLeft;
			this.viewLeft = this.viewRight;
			this.viewRight = temp;
		}
		if (this.viewTop > this.viewBottom)
		{
			temp = this.viewTop;
			this.viewTop = this.viewBottom;
			this.viewBottom = temp;
		}
		var myAngle = this.getAngle();
		if (myAngle !== 0)
		{
			if (ctx)
			{
				ctx.translate(this.runtime.draw_width / 2, this.runtime.draw_height / 2);
				ctx.rotate(-myAngle);
				ctx.translate(this.runtime.draw_width / -2, this.runtime.draw_height / -2);
			}
			this.tmprect.set(this.viewLeft, this.viewTop, this.viewRight, this.viewBottom);
			this.tmprect.offset((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
			this.tmpquad.set_from_rotated_rect(this.tmprect, myAngle);
			this.tmpquad.bounding_box(this.tmprect);
			this.tmprect.offset((this.viewLeft + this.viewRight) / 2, (this.viewTop + this.viewBottom) / 2);
			this.viewLeft = this.tmprect.left;
			this.viewTop = this.tmprect.top;
			this.viewRight = this.tmprect.right;
			this.viewBottom = this.tmprect.bottom;
		}
	}
	Layer.prototype.drawGL_earlyZPass = function (glw)
	{
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var shaderindex = 0;
		var etindex = 0;
		this.render_offscreen = this.forceOwnTexture;
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_tex)
			{
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layer_tex.c2width !== this.runtime.draw_width || this.runtime.layer_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layer_tex);
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layer_tex);
		}
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = Math.round(px);
			py = Math.round(py);
		}
		this.rotateViewport(px, py, null);
		var myscale = this.getScale();
		glw.resetModelView();
		glw.scale(myscale, myscale);
		glw.rotateZ(-this.getAngle());
		glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
		glw.updateModelView();
		var instances_to_draw;
		if (this.useRenderCells)
		{
			this.cur_render_cells.left = this.render_grid.XToCell(this.viewLeft);
			this.cur_render_cells.top = this.render_grid.YToCell(this.viewTop);
			this.cur_render_cells.right = this.render_grid.XToCell(this.viewRight);
			this.cur_render_cells.bottom = this.render_grid.YToCell(this.viewBottom);
			if (this.render_list_stale || !this.cur_render_cells.equals(this.last_render_cells))
			{
				free_arr(this.last_render_list);
				instances_to_draw = this.getRenderCellInstancesToDraw();
				this.render_list_stale = false;
				this.last_render_cells.copy(this.cur_render_cells);
			}
			else
				instances_to_draw = this.last_render_list;
		}
		else
			instances_to_draw = this.instances;
		var i, inst, last_inst = null;
		for (i = instances_to_draw.length - 1; i >= 0; --i)
		{
			inst = instances_to_draw[i];
			if (inst === last_inst)
				continue;
			this.drawInstanceGL_earlyZPass(instances_to_draw[i], glw);
			last_inst = inst;
		}
		if (this.useRenderCells)
			this.last_render_list = instances_to_draw;
		if (!this.transparent)
		{
			this.clear_earlyz_index = this.runtime.earlyz_index++;
			glw.setEarlyZIndex(this.clear_earlyz_index);
			glw.setColorFillMode(1, 1, 1, 1);
			glw.fullscreenQuad();		// fill remaining space in depth buffer with current Z value
			glw.restoreEarlyZMode();
		}
	};
	Layer.prototype.drawGL = function (glw)
	{
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var shaderindex = 0;
		var etindex = 0;
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.active_effect_types.length > 0 || this.blend_mode !== 0);
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_tex)
			{
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layer_tex.c2width !== this.runtime.draw_width || this.runtime.layer_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layer_tex);
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layer_tex);
			if (this.transparent)
				glw.clear(0, 0, 0, 0);
		}
		if (!this.transparent)
		{
			if (this.runtime.enableFrontToBack)
			{
				glw.setEarlyZIndex(this.clear_earlyz_index);
				glw.setColorFillMode(this.background_color[0] / 255, this.background_color[1] / 255, this.background_color[2] / 255, 1);
				glw.fullscreenQuad();
				glw.setTextureFillMode();
			}
			else
			{
				glw.clear(this.background_color[0] / 255, this.background_color[1] / 255, this.background_color[2] / 255, 1);
			}
		}
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = Math.round(px);
			py = Math.round(py);
		}
		this.rotateViewport(px, py, null);
		var myscale = this.getScale();
		glw.resetModelView();
		glw.scale(myscale, myscale);
		glw.rotateZ(-this.getAngle());
		glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
		glw.updateModelView();
		var instances_to_draw;
		if (this.useRenderCells)
		{
			this.cur_render_cells.left = this.render_grid.XToCell(this.viewLeft);
			this.cur_render_cells.top = this.render_grid.YToCell(this.viewTop);
			this.cur_render_cells.right = this.render_grid.XToCell(this.viewRight);
			this.cur_render_cells.bottom = this.render_grid.YToCell(this.viewBottom);
			if (this.render_list_stale || !this.cur_render_cells.equals(this.last_render_cells))
			{
				free_arr(this.last_render_list);
				instances_to_draw = this.getRenderCellInstancesToDraw();
				this.render_list_stale = false;
				this.last_render_cells.copy(this.cur_render_cells);
			}
			else
				instances_to_draw = this.last_render_list;
		}
		else
			instances_to_draw = this.instances;
		var i, len, inst, last_inst = null;
		for (i = 0, len = instances_to_draw.length; i < len; ++i)
		{
			inst = instances_to_draw[i];
			if (inst === last_inst)
				continue;
			this.drawInstanceGL(instances_to_draw[i], glw);
			last_inst = inst;
		}
		if (this.useRenderCells)
			this.last_render_list = instances_to_draw;
		if (this.render_offscreen)
		{
			shaderindex = this.active_effect_types.length ? this.active_effect_types[0].shaderindex : 0;
			etindex = this.active_effect_types.length ? this.active_effect_types[0].index : 0;
			if (this.active_effect_types.length === 0 || (this.active_effect_types.length === 1 &&
				!glw.programUsesCrossSampling(shaderindex) && this.opacity === 1))
			{
				if (this.active_effect_types.length === 1)
				{
					glw.switchProgram(shaderindex);
					glw.setProgramParameters(this.layout.getRenderTarget(),		// backTex
											 1.0 / this.runtime.draw_width,		// pixelWidth
											 1.0 / this.runtime.draw_height,	// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 myscale,							// layerScale
											 this.getAngle(),
											 this.viewLeft, this.viewTop,
											 (this.viewLeft + this.viewRight) / 2, (this.viewTop + this.viewBottom) / 2,
											 this.runtime.kahanTime.sum,
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				glw.setRenderingToTexture(this.layout.getRenderTarget());
				glw.setOpacity(this.opacity);
				glw.setTexture(this.runtime.layer_tex);
				glw.setBlend(this.srcBlend, this.destBlend);
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.draw_width / 2;
				var halfh = this.runtime.draw_height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.layout.renderEffectChain(glw, this, null, this.layout.getRenderTarget());
			}
		}
	};
	Layer.prototype.drawInstanceGL = function (inst, glw)
	{
;
		if (!inst.visible || inst.width === 0 || inst.height === 0)
			return;
		inst.update_bbox();
		var bbox = inst.bbox;
		if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
			return;
		glw.setEarlyZIndex(inst.earlyz_index);
		if (inst.uses_shaders)
		{
			this.drawInstanceWithShadersGL(inst, glw);
		}
		else
		{
			glw.switchProgram(0);		// un-set any previously set shader
			glw.setBlend(inst.srcBlend, inst.destBlend);
			inst.drawGL(glw);
		}
	};
	Layer.prototype.drawInstanceGL_earlyZPass = function (inst, glw)
	{
;
		if (!inst.visible || inst.width === 0 || inst.height === 0)
			return;
		inst.update_bbox();
		var bbox = inst.bbox;
		if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
			return;
		inst.earlyz_index = this.runtime.earlyz_index++;
		if (inst.blend_mode !== 0 || inst.opacity !== 1 || !inst.shaders_preserve_opaqueness || !inst.drawGL_earlyZPass)
			return;
		glw.setEarlyZIndex(inst.earlyz_index);
		inst.drawGL_earlyZPass(glw);
	};
	Layer.prototype.drawInstanceWithShadersGL = function (inst, glw)
	{
		var shaderindex = inst.active_effect_types[0].shaderindex;
		var etindex = inst.active_effect_types[0].index;
		var myscale = this.getScale();
		if (inst.active_effect_types.length === 1 && !glw.programUsesCrossSampling(shaderindex) &&
			!glw.programExtendsBox(shaderindex) && ((!inst.angle && !inst.layer.getAngle()) || !glw.programUsesDest(shaderindex)) &&
			inst.opacity === 1 && !inst.type.plugin.must_predraw)
		{
			glw.switchProgram(shaderindex);
			glw.setBlend(inst.srcBlend, inst.destBlend);
			if (glw.programIsAnimated(shaderindex))
				this.runtime.redraw = true;
			var destStartX = 0, destStartY = 0, destEndX = 0, destEndY = 0;
			if (glw.programUsesDest(shaderindex))
			{
				var bbox = inst.bbox;
				var screenleft = this.layerToCanvas(bbox.left, bbox.top, true, true);
				var screentop = this.layerToCanvas(bbox.left, bbox.top, false, true);
				var screenright = this.layerToCanvas(bbox.right, bbox.bottom, true, true);
				var screenbottom = this.layerToCanvas(bbox.right, bbox.bottom, false, true);
				destStartX = screenleft / windowWidth;
				destStartY = 1 - screentop / windowHeight;
				destEndX = screenright / windowWidth;
				destEndY = 1 - screenbottom / windowHeight;
			}
			var pixelWidth;
			var pixelHeight;
			if (inst.curFrame && inst.curFrame.texture_img)
			{
				var img = inst.curFrame.texture_img;
				pixelWidth = 1.0 / img.width;
				pixelHeight = 1.0 / img.height;
			}
			else
			{
				pixelWidth = 1.0 / inst.width;
				pixelHeight = 1.0 / inst.height;
			}
			glw.setProgramParameters(this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget(), // backTex
									 pixelWidth,
									 pixelHeight,
									 destStartX, destStartY,
									 destEndX, destEndY,
									 myscale,
									 this.getAngle(),
									 this.viewLeft, this.viewTop,
									 (this.viewLeft + this.viewRight) / 2, (this.viewTop + this.viewBottom) / 2,
									 this.runtime.kahanTime.sum,
									 inst.effect_params[etindex]);
			inst.drawGL(glw);
		}
		else
		{
			this.layout.renderEffectChain(glw, this, inst, this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget());
			glw.resetModelView();
			glw.scale(myscale, myscale);
			glw.rotateZ(-this.getAngle());
			glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
			glw.updateModelView();
		}
	};
	Layer.prototype.canvasToLayer = function (ptx, pty, getx, using_draw_area)
	{
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina)
		{
			ptx *= multiplier;
			pty *= multiplier;
		}
		var ox = this.runtime.parallax_x_origin;
		var oy = this.runtime.parallax_y_origin;
		var par_x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var par_y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var x = par_x;
		var y = par_y;
		var invScale = 1 / this.getScale(!using_draw_area);
		if (using_draw_area)
		{
			x -= (this.runtime.draw_width * invScale) / 2;
			y -= (this.runtime.draw_height * invScale) / 2;
		}
		else
		{
			x -= (this.runtime.width * invScale) / 2;
			y -= (this.runtime.height * invScale) / 2;
		}
		x += ptx * invScale;
		y += pty * invScale;
		var a = this.getAngle();
		if (a !== 0)
		{
			x -= par_x;
			y -= par_y;
			var cosa = Math.cos(a);
			var sina = Math.sin(a);
			var x_temp = (x * cosa) - (y * sina);
			y = (y * cosa) + (x * sina);
			x = x_temp;
			x += par_x;
			y += par_y;
		}
		return getx ? x : y;
	};
	Layer.prototype.layerToCanvas = function (ptx, pty, getx, using_draw_area)
	{
		var ox = this.runtime.parallax_x_origin;
		var oy = this.runtime.parallax_y_origin;
		var par_x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var par_y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var x = par_x;
		var y = par_y;
		var a = this.getAngle();
		if (a !== 0)
		{
			ptx -= par_x;
			pty -= par_y;
			var cosa = Math.cos(-a);
			var sina = Math.sin(-a);
			var x_temp = (ptx * cosa) - (pty * sina);
			pty = (pty * cosa) + (ptx * sina);
			ptx = x_temp;
			ptx += par_x;
			pty += par_y;
		}
		var invScale = 1 / this.getScale(!using_draw_area);
		if (using_draw_area)
		{
			x -= (this.runtime.draw_width * invScale) / 2;
			y -= (this.runtime.draw_height * invScale) / 2;
		}
		else
		{
			x -= (this.runtime.width * invScale) / 2;
			y -= (this.runtime.height * invScale) / 2;
		}
		x = (ptx - x) / invScale;
		y = (pty - y) / invScale;
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina && !using_draw_area)
		{
			x /= multiplier;
			y /= multiplier;
		}
		return getx ? x : y;
	};
	Layer.prototype.rotatePt = function (x_, y_, getx)
	{
		if (this.getAngle() === 0)
			return getx ? x_ : y_;
		var nx = this.layerToCanvas(x_, y_, true);
		var ny = this.layerToCanvas(x_, y_, false);
		this.disableAngle = true;
		var px = this.canvasToLayer(nx, ny, true);
		var py = this.canvasToLayer(nx, ny, true);
		this.disableAngle = false;
		return getx ? px : py;
	};
	Layer.prototype.saveToJSON = function ()
	{
		var i, len, et;
		var o = {
			"s": this.scale,
			"a": this.angle,
			"vl": this.viewLeft,
			"vt": this.viewTop,
			"vr": this.viewRight,
			"vb": this.viewBottom,
			"v": this.visible,
			"bc": this.background_color,
			"t": this.transparent,
			"px": this.parallaxX,
			"py": this.parallaxY,
			"o": this.opacity,
			"zr": this.zoomRate,
			"fx": [],
			"cg": this.created_globals,		// added r197; list of global UIDs already created
			"instances": []
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		return o;
	};
	Layer.prototype.loadFromJSON = function (o)
	{
		var i, j, len, p, inst, fx;
		this.scale = o["s"];
		this.angle = o["a"];
		this.viewLeft = o["vl"];
		this.viewTop = o["vt"];
		this.viewRight = o["vr"];
		this.viewBottom = o["vb"];
		this.visible = o["v"];
		this.background_color = o["bc"];
		this.transparent = o["t"];
		this.parallaxX = o["px"];
		this.parallaxY = o["py"];
		this.opacity = o["o"];
		this.zoomRate = o["zr"];
		this.created_globals = o["cg"] || [];		// added r197
		cr.shallowAssignArray(this.initial_instances, this.startup_initial_instances);
		var temp_set = new cr.ObjectSet();
		for (i = 0, len = this.created_globals.length; i < len; ++i)
			temp_set.add(this.created_globals[i]);
		for (i = 0, j = 0, len = this.initial_instances.length; i < len; ++i)
		{
			if (!temp_set.contains(this.initial_instances[i][2]))		// UID in element 2
			{
				this.initial_instances[j] = this.initial_instances[i];
				++j;
			}
		}
		cr.truncateArray(this.initial_instances, j);
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		this.instances.sort(sort_by_zindex);
		this.zindices_stale = true;
	};
	cr.layer = Layer;
}());
;
(function()
{
	var allUniqueSolModifiers = [];
	function testSolsMatch(arr1, arr2)
	{
		var i, len = arr1.length;
		switch (len) {
		case 0:
			return true;
		case 1:
			return arr1[0] === arr2[0];
		case 2:
			return arr1[0] === arr2[0] && arr1[1] === arr2[1];
		default:
			for (i = 0; i < len; i++)
			{
				if (arr1[i] !== arr2[i])
					return false;
			}
			return true;
		}
	};
	function solArraySorter(t1, t2)
	{
		return t1.index - t2.index;
	};
	function findMatchingSolModifier(arr)
	{
		var i, len, u, temp, subarr;
		if (arr.length === 2)
		{
			if (arr[0].index > arr[1].index)
			{
				temp = arr[0];
				arr[0] = arr[1];
				arr[1] = temp;
			}
		}
		else if (arr.length > 2)
			arr.sort(solArraySorter);		// so testSolsMatch compares in same order
		if (arr.length >= allUniqueSolModifiers.length)
			allUniqueSolModifiers.length = arr.length + 1;
		if (!allUniqueSolModifiers[arr.length])
			allUniqueSolModifiers[arr.length] = [];
		subarr = allUniqueSolModifiers[arr.length];
		for (i = 0, len = subarr.length; i < len; i++)
		{
			u = subarr[i];
			if (testSolsMatch(arr, u))
				return u;
		}
		subarr.push(arr);
		return arr;
	};
	function EventSheet(runtime, m)
	{
		this.runtime = runtime;
		this.triggers = {};
		this.fasttriggers = {};
        this.hasRun = false;
        this.includes = new cr.ObjectSet(); 	// all event sheets included by this sheet, at first-level indirection only
		this.deep_includes = [];				// all includes from this sheet recursively, in trigger order
		this.already_included_sheets = [];		// used while building deep_includes
		this.name = m[0];
		var em = m[1];		// events model
		this.events = [];       // triggers won't make it to this array
		var i, len;
		for (i = 0, len = em.length; i < len; i++)
			this.init_event(em[i], null, this.events);
	};
    EventSheet.prototype.toString = function ()
    {
        return this.name;
    };
	EventSheet.prototype.init_event = function (m, parent, nontriggers)
	{
		switch (m[0]) {
		case 0:	// event block
		{
			var block = new cr.eventblock(this, parent, m);
			cr.seal(block);
			if (block.orblock)
			{
				nontriggers.push(block);
				var i, len;
				for (i = 0, len = block.conditions.length; i < len; i++)
				{
					if (block.conditions[i].trigger)
						this.init_trigger(block, i);
				}
			}
			else
			{
				if (block.is_trigger())
					this.init_trigger(block, 0);
				else
					nontriggers.push(block);
			}
			break;
		}
		case 1: // variable
		{
			var v = new cr.eventvariable(this, parent, m);
			cr.seal(v);
			nontriggers.push(v);
			break;
		}
        case 2:	// include
        {
            var inc = new cr.eventinclude(this, parent, m);
			cr.seal(inc);
            nontriggers.push(inc);
			break;
        }
		default:
;
		}
	};
	EventSheet.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			this.events[i].postInit(i < len - 1 && this.events[i + 1].is_else_block);
		}
	};
	EventSheet.prototype.updateDeepIncludes = function ()
	{
		cr.clearArray(this.deep_includes);
		cr.clearArray(this.already_included_sheets);
		this.addDeepIncludes(this);
		cr.clearArray(this.already_included_sheets);
	};
	EventSheet.prototype.addDeepIncludes = function (root_sheet)
	{
		var i, len, inc, sheet;
		var deep_includes = root_sheet.deep_includes;
		var already_included_sheets = root_sheet.already_included_sheets;
		var arr = this.includes.valuesRef();
		for (i = 0, len = arr.length; i < len; ++i)
		{
			inc = arr[i];
			sheet = inc.include_sheet;
			if (!inc.isActive() || root_sheet === sheet || already_included_sheets.indexOf(sheet) > -1)
				continue;
			already_included_sheets.push(sheet);
			sheet.addDeepIncludes(root_sheet);
			deep_includes.push(sheet);
		}
	};
	EventSheet.prototype.run = function (from_include)
	{
		if (!this.runtime.resuming_breakpoint)
		{
			this.hasRun = true;
			if (!from_include)
				this.runtime.isRunningEvents = true;
		}
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			var ev = this.events[i];
			ev.run();
				this.runtime.clearSol(ev.solModifiers);
				if (this.runtime.hasPendingInstances)
					this.runtime.ClearDeathRow();
		}
			if (!from_include)
				this.runtime.isRunningEvents = false;
	};
	function isPerformanceSensitiveTrigger(method)
	{
		if (cr.plugins_.Sprite && method === cr.plugins_.Sprite.prototype.cnds.OnFrameChanged)
		{
			return true;
		}
		return false;
	};
	EventSheet.prototype.init_trigger = function (trig, index)
	{
		if (!trig.orblock)
			this.runtime.triggers_to_postinit.push(trig);	// needs to be postInit'd later
		var i, len;
		var cnd = trig.conditions[index];
		var type_name;
		if (cnd.type)
			type_name = cnd.type.name;
		else
			type_name = "system";
		var fasttrigger = cnd.fasttrigger;
		var triggers = (fasttrigger ? this.fasttriggers : this.triggers);
		if (!triggers[type_name])
			triggers[type_name] = [];
		var obj_entry = triggers[type_name];
		var method = cnd.func;
		if (fasttrigger)
		{
			if (!cnd.parameters.length)				// no parameters
				return;
			var firstparam = cnd.parameters[0];
			if (firstparam.type !== 1 ||			// not a string param
				firstparam.expression.type !== 2)	// not a string literal node
			{
				return;
			}
			var fastevs;
			var firstvalue = firstparam.expression.value.toLowerCase();
			var i, len;
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					fastevs = obj_entry[i].evs;
					if (!fastevs[firstvalue])
						fastevs[firstvalue] = [[trig, index]];
					else
						fastevs[firstvalue].push([trig, index]);
					return;
				}
			}
			fastevs = {};
			fastevs[firstvalue] = [[trig, index]];
			obj_entry.push({ method: method, evs: fastevs });
		}
		else
		{
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					obj_entry[i].evs.push([trig, index]);
					return;
				}
			}
			if (isPerformanceSensitiveTrigger(method))
				obj_entry.unshift({ method: method, evs: [[trig, index]]});
			else
				obj_entry.push({ method: method, evs: [[trig, index]]});
		}
	};
	cr.eventsheet = EventSheet;
	function Selection(type)
	{
		this.type = type;
		this.instances = [];        // subset of picked instances
		this.else_instances = [];	// subset of unpicked instances
		this.select_all = true;
	};
	Selection.prototype.hasObjects = function ()
	{
		if (this.select_all)
			return this.type.instances.length;
		else
			return this.instances.length;
	};
	Selection.prototype.getObjects = function ()
	{
		if (this.select_all)
			return this.type.instances;
		else
			return this.instances;
	};
	/*
	Selection.prototype.ensure_picked = function (inst, skip_siblings)
	{
		var i, len;
		var orblock = inst.runtime.getCurrentEventStack().current_event.orblock;
		if (this.select_all)
		{
			this.select_all = false;
			if (orblock)
			{
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				cr.arrayFindRemove(this.else_instances, inst);
			}
			this.instances.length = 1;
			this.instances[0] = inst;
		}
		else
		{
			if (orblock)
			{
				i = this.else_instances.indexOf(inst);
				if (i !== -1)
				{
					this.instances.push(this.else_instances[i]);
					this.else_instances.splice(i, 1);
				}
			}
			else
			{
				if (this.instances.indexOf(inst) === -1)
					this.instances.push(inst);
			}
		}
		if (!skip_siblings)
		{
		}
	};
	*/
	Selection.prototype.pick_one = function (inst)
	{
		if (!inst)
			return;
		if (inst.runtime.getCurrentEventStack().current_event.orblock)
		{
			if (this.select_all)
			{
				cr.clearArray(this.instances);
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				this.select_all = false;
			}
			var i = this.else_instances.indexOf(inst);
			if (i !== -1)
			{
				this.instances.push(this.else_instances[i]);
				this.else_instances.splice(i, 1);
			}
		}
		else
		{
			this.select_all = false;
			cr.clearArray(this.instances);
			this.instances[0] = inst;
		}
	};
	cr.selection = Selection;
	function EventBlock(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.solModifiersIncludingParents = [];
		this.solWriterAfterCnds = false;	// block does not change SOL after running its conditions
		this.group = false;					// is group of events
		this.initially_activated = false;	// if a group, is active on startup
		this.toplevelevent = false;			// is an event block parented only by a top-level group
		this.toplevelgroup = false;			// is parented only by other groups or is top-level (i.e. not in a subevent)
		this.has_else_block = false;		// is followed by else
;
		this.conditions = [];
		this.actions = [];
		this.subevents = [];
		this.group_name = "";
		this.group = false;
		this.initially_activated = false;
		this.group_active = false;
		this.contained_includes = null;
        if (m[1])
        {
			this.group_name = m[1][1].toLowerCase();
			this.group = true;
			this.initially_activated = !!m[1][0];
			this.contained_includes = [];
			this.group_active = this.initially_activated;
			this.runtime.allGroups.push(this);
            this.runtime.groups_by_name[this.group_name] = this;
        }
		this.orblock = m[2];
		this.sid = m[4];
		if (!this.group)
			this.runtime.blocksBySid[this.sid.toString()] = this;
		var i, len;
		var cm = m[5];
		for (i = 0, len = cm.length; i < len; i++)
		{
			var cnd = new cr.condition(this, cm[i]);
			cnd.index = i;
			cr.seal(cnd);
			this.conditions.push(cnd);
			/*
			if (cnd.is_logical())
				this.is_logical = true;
			if (cnd.type && !cnd.type.plugin.singleglobal && this.cndReferences.indexOf(cnd.type) === -1)
				this.cndReferences.push(cnd.type);
			*/
			this.addSolModifier(cnd.type);
		}
		var am = m[6];
		for (i = 0, len = am.length; i < len; i++)
		{
			var act = new cr.action(this, am[i]);
			act.index = i;
			cr.seal(act);
			this.actions.push(act);
		}
		if (m.length === 8)
		{
			var em = m[7];
			for (i = 0, len = em.length; i < len; i++)
				this.sheet.init_event(em[i], this, this.subevents);
		}
		this.is_else_block = false;
		if (this.conditions.length)
		{
			this.is_else_block = (this.conditions[0].type == null && this.conditions[0].func == cr.system_object.prototype.cnds.Else);
		}
	};
	window["_c2hh_"] = "DA39A3EE5E6B4B0D3255BFEF95601890AFD80709";
	EventBlock.prototype.postInit = function (hasElse/*, prevBlock_*/)
	{
		var i, len;
		var p = this.parent;
		if (this.group)
		{
			this.toplevelgroup = true;
			while (p)
			{
				if (!p.group)
				{
					this.toplevelgroup = false;
					break;
				}
				p = p.parent;
			}
		}
		this.toplevelevent = !this.is_trigger() && (!this.parent || (this.parent.group && this.parent.toplevelgroup));
		this.has_else_block = !!hasElse;
		this.solModifiersIncludingParents = this.solModifiers.slice(0);
		p = this.parent;
		while (p)
		{
			for (i = 0, len = p.solModifiers.length; i < len; i++)
				this.addParentSolModifier(p.solModifiers[i]);
			p = p.parent;
		}
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
		this.solModifiersIncludingParents = findMatchingSolModifier(this.solModifiersIncludingParents);
		var i, len/*, s*/;
		for (i = 0, len = this.conditions.length; i < len; i++)
			this.conditions[i].postInit();
		for (i = 0, len = this.actions.length; i < len; i++)
			this.actions[i].postInit();
		for (i = 0, len = this.subevents.length; i < len; i++)
		{
			this.subevents[i].postInit(i < len - 1 && this.subevents[i + 1].is_else_block);
		}
		/*
		if (this.is_else_block && this.prev_block)
		{
			for (i = 0, len = this.prev_block.solModifiers.length; i < len; i++)
			{
				s = this.prev_block.solModifiers[i];
				if (this.solModifiers.indexOf(s) === -1)
					this.solModifiers.push(s);
			}
		}
		*/
	};
	EventBlock.prototype.setGroupActive = function (a)
	{
		if (this.group_active === !!a)
			return;		// same state
		this.group_active = !!a;
		var i, len;
		for (i = 0, len = this.contained_includes.length; i < len; ++i)
		{
			this.contained_includes[i].updateActive();
		}
		if (len > 0 && this.runtime.running_layout.event_sheet)
			this.runtime.running_layout.event_sheet.updateDeepIncludes();
	};
	function addSolModifierToList(type, arr)
	{
		var i, len, t;
		if (!type)
			return;
		if (arr.indexOf(type) === -1)
			arr.push(type);
		if (type.is_contained)
		{
			for (i = 0, len = type.container.length; i < len; i++)
			{
				t = type.container[i];
				if (type === t)
					continue;		// already handled
				if (arr.indexOf(t) === -1)
					arr.push(t);
			}
		}
	};
	EventBlock.prototype.addSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiers);
	};
	EventBlock.prototype.addParentSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiersIncludingParents);
	};
	EventBlock.prototype.setSolWriterAfterCnds = function ()
	{
		this.solWriterAfterCnds = true;
		if (this.parent)
			this.parent.setSolWriterAfterCnds();
	};
	EventBlock.prototype.is_trigger = function ()
	{
		if (!this.conditions.length)    // no conditions
			return false;
		else
			return this.conditions[0].trigger;
	};
	EventBlock.prototype.run = function ()
	{
		var i, len, c, any_true = false, cnd_result;
		var runtime = this.runtime;
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var conditions = this.conditions;
			if (!this.is_else_block)
				evinfo.else_branch_ran = false;
		if (this.orblock)
		{
			if (conditions.length === 0)
				any_true = true;		// be sure to run if empty block
				evinfo.cndindex = 0
			for (len = conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				c = conditions[evinfo.cndindex];
				if (c.trigger)		// skip triggers when running OR block
					continue;
				cnd_result = c.run();
				if (cnd_result)			// make sure all conditions run and run if any were true
					any_true = true;
			}
			evinfo.last_event_true = any_true;
			if (any_true)
				this.run_actions_and_subevents();
		}
		else
		{
				evinfo.cndindex = 0
			for (len = conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				cnd_result = conditions[evinfo.cndindex].run();
				if (!cnd_result)    // condition failed
				{
					evinfo.last_event_true = false;
					if (this.toplevelevent && runtime.hasPendingInstances)
						runtime.ClearDeathRow();
					return;		// bail out now
				}
			}
			evinfo.last_event_true = true;
			this.run_actions_and_subevents();
		}
		this.end_run(evinfo);
	};
	EventBlock.prototype.end_run = function (evinfo)
	{
		if (evinfo.last_event_true && this.has_else_block)
			evinfo.else_branch_ran = true;
		if (this.toplevelevent && this.runtime.hasPendingInstances)
			this.runtime.ClearDeathRow();
	};
	EventBlock.prototype.run_orblocktrigger = function (index)
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		if (this.conditions[index].run())
		{
			this.run_actions_and_subevents();
			this.runtime.getCurrentEventStack().last_event_true = true;
		}
	};
	EventBlock.prototype.run_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (evinfo.actindex = 0, len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.resume_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.run_subevents = function ()
	{
		if (!this.subevents.length)
			return;
		var i, len, subev, pushpop/*, skipped_pop = false, pop_modifiers = null*/;
		var last = this.subevents.length - 1;
			this.runtime.pushEventStack(this);
		if (this.solWriterAfterCnds)
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				subev = this.subevents[i];
					pushpop = (!this.toplevelgroup || (!this.group && i < last));
					if (pushpop)
						this.runtime.pushCopySol(subev.solModifiers);
				subev.run();
					if (pushpop)
						this.runtime.popSol(subev.solModifiers);
					else
						this.runtime.clearSol(subev.solModifiers);
			}
		}
		else
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				this.subevents[i].run();
			}
		}
			this.runtime.popEventStack();
	};
	EventBlock.prototype.run_pretrigger = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var any_true = false;
		var i, len;
		for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
		{
;
			if (this.conditions[evinfo.cndindex].run())
				any_true = true;
			else if (!this.orblock)			// condition failed (let OR blocks run all conditions anyway)
				return false;               // bail out
		}
		return this.orblock ? any_true : true;
	};
	EventBlock.prototype.retrigger = function ()
	{
		this.runtime.execcount++;
		var prevcndindex = this.runtime.getCurrentEventStack().cndindex;
		var len;
		var evinfo = this.runtime.pushEventStack(this);
		if (!this.orblock)
		{
			for (evinfo.cndindex = prevcndindex + 1, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (!this.conditions[evinfo.cndindex].run())    // condition failed
				{
					this.runtime.popEventStack();               // moving up level of recursion
					return false;                               // bail out
				}
			}
		}
		this.run_actions_and_subevents();
		this.runtime.popEventStack();
		return true;		// ran an iteration
	};
	EventBlock.prototype.isFirstConditionOfType = function (cnd)
	{
		var cndindex = cnd.index;
		if (cndindex === 0)
			return true;
		--cndindex;
		for ( ; cndindex >= 0; --cndindex)
		{
			if (this.conditions[cndindex].type === cnd.type)
				return false;
		}
		return true;
	};
	cr.eventblock = EventBlock;
	function Condition(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.index = -1;
		this.anyParamVariesPerInstance = false;
		this.func = this.runtime.GetObjectReference(m[1]);
;
		this.trigger = (m[3] > 0);
		this.fasttrigger = (m[3] === 2);
		this.looping = m[4];
		this.inverted = m[5];
		this.isstatic = m[6];
		this.sid = m[7];
		this.runtime.cndsBySid[this.sid.toString()] = this;
		if (m[0] === -1)		// system object
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			if (this.isstatic)
				this.run = this.run_static;
			else
				this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
			if (this.block.parent)
				this.block.parent.setSolWriterAfterCnds();
		}
		if (this.fasttrigger)
			this.run = this.run_true;
		if (m.length === 10)
		{
			var i, len;
			var em = m[9];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Condition.prototype.postInit = function ()
	{
		var i, len, p;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			p = this.parameters[i];
			p.postInit();
			if (p.variesPerInstance)
				this.anyParamVariesPerInstance = true;
		}
	};
	/*
	Condition.prototype.is_logical = function ()
	{
		return !this.type || this.type.plugin.singleglobal;
	};
	*/
	Condition.prototype.run_true = function ()
	{
		return true;
	};
	Condition.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return cr.xor(this.func.apply(this.runtime.system, this.results), this.inverted);
	};
	Condition.prototype.run_static = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		var ret = this.func.apply(this.behaviortype ? this.behaviortype : this.type, this.results);
		this.type.applySolToContainer();
		return ret;
	};
	Condition.prototype.run_object = function ()
	{
		var i, j, k, leni, lenj, p, ret, met, inst, s, sol2;
		var type = this.type;
		var sol = type.getCurrentSol();
		var is_orblock = this.block.orblock && !this.trigger;		// triggers in OR blocks need to work normally
		var offset = 0;
		var is_contained = type.is_contained;
		var is_family = type.is_family;
		var family_index = type.family_index;
		var beh_index = this.beh_index;
		var is_beh = (beh_index > -1);
		var params_vary = this.anyParamVariesPerInstance;
		var parameters = this.parameters;
		var results = this.results;
		var inverted = this.inverted;
		var func = this.func;
		var arr, container;
		if (params_vary)
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
			{
				p = parameters[j];
				if (!p.variesPerInstance)
					results[j] = p.get(0);
			}
		}
		else
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
				results[j] = parameters[j].get(0);
		}
		if (sol.select_all) {
			cr.clearArray(sol.instances);       // clear contents
			cr.clearArray(sol.else_instances);
			arr = type.instances;
			for (i = 0, leni = arr.length; i < leni; ++i)
			{
				inst = arr[i];
;
				if (params_vary)
				{
					for (j = 0, lenj = parameters.length; j < lenj; ++j)
					{
						p = parameters[j];
						if (p.variesPerInstance)
							results[j] = p.get(i);        // default SOL index is current object
					}
				}
				if (is_beh)
				{
					offset = 0;
					if (is_family)
					{
						offset = inst.type.family_beh_map[family_index];
					}
					ret = func.apply(inst.behavior_insts[beh_index + offset], results);
				}
				else
					ret = func.apply(inst, results);
				met = cr.xor(ret, inverted);
				if (met)
					sol.instances.push(inst);
				else if (is_orblock)					// in OR blocks, keep the instances not meeting the condition for subsequent testing
					sol.else_instances.push(inst);
			}
			if (type.finish)
				type.finish(true);
			sol.select_all = false;
			type.applySolToContainer();
			return sol.hasObjects();
		}
		else {
			k = 0;
			var using_else_instances = (is_orblock && !this.block.isFirstConditionOfType(this));
			arr = (using_else_instances ? sol.else_instances : sol.instances);
			var any_true = false;
			for (i = 0, leni = arr.length; i < leni; ++i)
			{
				inst = arr[i];
;
				if (params_vary)
				{
					for (j = 0, lenj = parameters.length; j < lenj; ++j)
					{
						p = parameters[j];
						if (p.variesPerInstance)
							results[j] = p.get(i);        // default SOL index is current object
					}
				}
				if (is_beh)
				{
					offset = 0;
					if (is_family)
					{
						offset = inst.type.family_beh_map[family_index];
					}
					ret = func.apply(inst.behavior_insts[beh_index + offset], results);
				}
				else
					ret = func.apply(inst, results);
				if (cr.xor(ret, inverted))
				{
					any_true = true;
					if (using_else_instances)
					{
						sol.instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances.push(s);
							}
						}
					}
					else
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances[k] = s;
							}
						}
						k++;
					}
				}
				else
				{
					if (using_else_instances)
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances[k] = s;
							}
						}
						k++;
					}
					else if (is_orblock)
					{
						sol.else_instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances.push(s);
							}
						}
					}
				}
			}
			cr.truncateArray(arr, k);
			if (is_contained)
			{
				container = type.container;
				for (i = 0, leni = container.length; i < leni; i++)
				{
					sol2 = container[i].getCurrentSol();
					if (using_else_instances)
						cr.truncateArray(sol2.else_instances, k);
					else
						cr.truncateArray(sol2.instances, k);
				}
			}
			var pick_in_finish = any_true;		// don't pick in finish() if we're only doing the logic test below
			if (using_else_instances && !any_true)
			{
				for (i = 0, leni = sol.instances.length; i < leni; i++)
				{
					inst = sol.instances[i];
					if (params_vary)
					{
						for (j = 0, lenj = parameters.length; j < lenj; j++)
						{
							p = parameters[j];
							if (p.variesPerInstance)
								results[j] = p.get(i);
						}
					}
					if (is_beh)
						ret = func.apply(inst.behavior_insts[beh_index], results);
					else
						ret = func.apply(inst, results);
					if (cr.xor(ret, inverted))
					{
						any_true = true;
						break;		// got our flag, don't need to test any more
					}
				}
			}
			if (type.finish)
				type.finish(pick_in_finish || is_orblock);
			return is_orblock ? any_true : sol.hasObjects();
		}
	};
	cr.condition = Condition;
	function Action(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.index = -1;
		this.anyParamVariesPerInstance = false;
		this.func = this.runtime.GetObjectReference(m[1]);
;
		if (m[0] === -1)	// system
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
		}
		this.sid = m[3];
		this.runtime.actsBySid[this.sid.toString()] = this;
		if (m.length === 6)
		{
			var i, len;
			var em = m[5];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Action.prototype.postInit = function ()
	{
		var i, len, p;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			p = this.parameters[i];
			p.postInit();
			if (p.variesPerInstance)
				this.anyParamVariesPerInstance = true;
		}
	};
	Action.prototype.run_system = function ()
	{
		var runtime = this.runtime;
		var i, len;
		var parameters = this.parameters;
		var results = this.results;
		for (i = 0, len = parameters.length; i < len; ++i)
			results[i] = parameters[i].get();
		return this.func.apply(runtime.system, results);
	};
	Action.prototype.run_object = function ()
	{
		var type = this.type;
		var beh_index = this.beh_index;
		var family_index = type.family_index;
		var params_vary = this.anyParamVariesPerInstance;
		var parameters = this.parameters;
		var results = this.results;
		var func = this.func;
		var instances = type.getCurrentSol().getObjects();
		var is_family = type.is_family;
		var is_beh = (beh_index > -1);
		var i, j, leni, lenj, p, inst, offset;
		if (params_vary)
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
			{
				p = parameters[j];
				if (!p.variesPerInstance)
					results[j] = p.get(0);
			}
		}
		else
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
				results[j] = parameters[j].get(0);
		}
		for (i = 0, leni = instances.length; i < leni; ++i)
		{
			inst = instances[i];
			if (params_vary)
			{
				for (j = 0, lenj = parameters.length; j < lenj; ++j)
				{
					p = parameters[j];
					if (p.variesPerInstance)
						results[j] = p.get(i);    // pass i to use as default SOL index
				}
			}
			if (is_beh)
			{
				offset = 0;
				if (is_family)
				{
					offset = inst.type.family_beh_map[family_index];
				}
				func.apply(inst.behavior_insts[beh_index + offset], results);
			}
			else
				func.apply(inst, results);
		}
		return false;
	};
	cr.action = Action;
	var tempValues = [];
	var tempValuesPtr = -1;
	function pushTempValue()
	{
		tempValuesPtr++;
		if (tempValues.length === tempValuesPtr)
			tempValues.push(new cr.expvalue());
		return tempValues[tempValuesPtr];
	};
	function popTempValue()
	{
		tempValuesPtr--;
	};
	function Parameter(owner, m)
	{
		this.owner = owner;
		this.block = owner.block;
		this.sheet = owner.sheet;
		this.runtime = owner.runtime;
		this.type = m[0];
		this.expression = null;
		this.solindex = 0;
		this.get = null;
		this.combosel = 0;
		this.layout = null;
		this.key = 0;
		this.object = null;
		this.index = 0;
		this.varname = null;
		this.eventvar = null;
		this.fileinfo = null;
		this.subparams = null;
		this.variadicret = null;
		this.subparams = null;
		this.variadicret = null;
		this.variesPerInstance = false;
		var i, len, param;
		switch (m[0])
		{
			case 0:		// number
			case 7:		// any
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp;
				break;
			case 1:		// string
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp_str;
				break;
			case 5:		// layer
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_layer;
				break;
			case 3:		// combo
			case 8:		// cmp
				this.combosel = m[1];
				this.get = this.get_combosel;
				break;
			case 6:		// layout
				this.layout = this.runtime.layouts[m[1]];
;
				this.get = this.get_layout;
				break;
			case 9:		// keyb
				this.key = m[1];
				this.get = this.get_key;
				break;
			case 4:		// object
				this.object = this.runtime.types_by_index[m[1]];
;
				this.get = this.get_object;
				this.block.addSolModifier(this.object);
				if (this.owner instanceof cr.action)
					this.block.setSolWriterAfterCnds();
				else if (this.block.parent)
					this.block.parent.setSolWriterAfterCnds();
				break;
			case 10:	// instvar
				this.index = m[1];
				if (owner.type && owner.type.is_family)
				{
					this.get = this.get_familyvar;
					this.variesPerInstance = true;
				}
				else
					this.get = this.get_instvar;
				break;
			case 11:	// eventvar
				this.varname = m[1];
				this.eventvar = null;
				this.get = this.get_eventvar;
				break;
			case 2:		// audiofile	["name", ismusic]
			case 12:	// fileinfo		"name"
				this.fileinfo = m[1];
				this.get = this.get_audiofile;
				break;
			case 13:	// variadic
				this.get = this.get_variadic;
				this.subparams = [];
				this.variadicret = [];
				for (i = 1, len = m.length; i < len; i++)
				{
					param = new cr.parameter(this.owner, m[i]);
					cr.seal(param);
					this.subparams.push(param);
					this.variadicret.push(0);
				}
				break;
			default:
;
		}
	};
	Parameter.prototype.postInit = function ()
	{
		var i, len;
		if (this.type === 11)		// eventvar
		{
			this.eventvar = this.runtime.getEventVariableByName(this.varname, this.block.parent);
;
		}
		else if (this.type === 13)	// variadic, postInit all sub-params
		{
			for (i = 0, len = this.subparams.length; i < len; i++)
				this.subparams[i].postInit();
		}
		if (this.expression)
			this.expression.postInit();
	};
	Parameter.prototype.maybeVaryForType = function (t)
	{
		if (this.variesPerInstance)
			return;				// already varies per instance, no need to check again
		if (!t)
			return;				// never vary for system type
		if (!t.plugin.singleglobal)
		{
			this.variesPerInstance = true;
			return;
		}
	};
	Parameter.prototype.setVaries = function ()
	{
		this.variesPerInstance = true;
	};
	Parameter.prototype.get_exp = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = pushTempValue();
		this.expression.get(temp);
		popTempValue();
		return temp.data;      			// return actual JS value, not expvalue
	};
	Parameter.prototype.get_exp_str = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = pushTempValue();
		this.expression.get(temp);
		popTempValue();
		if (cr.is_string(temp.data))
			return temp.data;
		else
			return "";
	};
	Parameter.prototype.get_object = function ()
	{
		return this.object;
	};
	Parameter.prototype.get_combosel = function ()
	{
		return this.combosel;
	};
	Parameter.prototype.get_layer = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = pushTempValue();
		this.expression.get(temp);
		popTempValue();
		if (temp.is_number())
			return this.runtime.getLayerByNumber(temp.data);
		else
			return this.runtime.getLayerByName(temp.data);
	}
	Parameter.prototype.get_layout = function ()
	{
		return this.layout;
	};
	Parameter.prototype.get_key = function ()
	{
		return this.key;
	};
	Parameter.prototype.get_instvar = function ()
	{
		return this.index;
	};
	Parameter.prototype.get_familyvar = function (solindex_)
	{
		var solindex = solindex_ || 0;
		var familytype = this.owner.type;
		var realtype = null;
		var sol = familytype.getCurrentSol();
		var objs = sol.getObjects();
		if (objs.length)
			realtype = objs[solindex % objs.length].type;
		else if (sol.else_instances.length)
			realtype = sol.else_instances[solindex % sol.else_instances.length].type;
		else if (familytype.instances.length)
			realtype = familytype.instances[solindex % familytype.instances.length].type;
		else
			return 0;
		return this.index + realtype.family_var_map[familytype.family_index];
	};
	Parameter.prototype.get_eventvar = function ()
	{
		return this.eventvar;
	};
	Parameter.prototype.get_audiofile = function ()
	{
		return this.fileinfo;
	};
	Parameter.prototype.get_variadic = function ()
	{
		var i, len;
		for (i = 0, len = this.subparams.length; i < len; i++)
		{
			this.variadicret[i] = this.subparams[i].get();
		}
		return this.variadicret;
	};
	cr.parameter = Parameter;
	function EventVariable(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.name = m[1];
		this.vartype = m[2];
		this.initial = m[3];
		this.is_static = !!m[4];
		this.is_constant = !!m[5];
		this.sid = m[6];
		this.runtime.varsBySid[this.sid.toString()] = this;
		this.data = this.initial;	// note: also stored in event stack frame for local nonstatic nonconst vars
		if (this.parent)			// local var
		{
			if (this.is_static || this.is_constant)
				this.localIndex = -1;
			else
				this.localIndex = this.runtime.stackLocalCount++;
			this.runtime.all_local_vars.push(this);
		}
		else						// global var
		{
			this.localIndex = -1;
			this.runtime.all_global_vars.push(this);
		}
	};
	EventVariable.prototype.postInit = function ()
	{
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
	};
	EventVariable.prototype.setValue = function (x)
	{
;
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs)
			this.data = x;
		else	// local nonstatic variable: use event stack to keep value at this level of recursion
		{
			if (this.localIndex >= lvs.length)
				lvs.length = this.localIndex + 1;
			lvs[this.localIndex] = x;
		}
	};
	EventVariable.prototype.getValue = function ()
	{
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs || this.is_constant)
			return this.data;
		else	// local nonstatic variable
		{
			if (this.localIndex >= lvs.length)
			{
				return this.initial;
			}
			if (typeof lvs[this.localIndex] === "undefined")
			{
				return this.initial;
			}
			return lvs[this.localIndex];
		}
	};
	EventVariable.prototype.run = function ()
	{
			if (this.parent && !this.is_static && !this.is_constant)
				this.setValue(this.initial);
	};
	cr.eventvariable = EventVariable;
	function EventInclude(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.include_sheet = null;		// determined in postInit
		this.include_sheet_name = m[1];
		this.active = true;
	};
	EventInclude.prototype.toString = function ()
	{
		return "include:" + this.include_sheet.toString();
	};
	EventInclude.prototype.postInit = function ()
	{
        this.include_sheet = this.runtime.eventsheets[this.include_sheet_name];
;
;
        this.sheet.includes.add(this);
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
		var p = this.parent;
		while (p)
		{
			if (p.group)
				p.contained_includes.push(this);
			p = p.parent;
		}
		this.updateActive();
	};
	EventInclude.prototype.run = function ()
	{
			if (this.parent)
				this.runtime.pushCleanSol(this.runtime.types_by_index);
        if (!this.include_sheet.hasRun)
            this.include_sheet.run(true);			// from include
			if (this.parent)
				this.runtime.popSol(this.runtime.types_by_index);
	};
	EventInclude.prototype.updateActive = function ()
	{
		var p = this.parent;
		while (p)
		{
			if (p.group && !p.group_active)
			{
				this.active = false;
				return;
			}
			p = p.parent;
		}
		this.active = true;
	};
	EventInclude.prototype.isActive = function ()
	{
		return this.active;
	};
	cr.eventinclude = EventInclude;
	function EventStackFrame()
	{
		this.temp_parents_arr = [];
		this.reset(null);
		cr.seal(this);
	};
	EventStackFrame.prototype.reset = function (cur_event)
	{
		this.current_event = cur_event;
		this.cndindex = 0;
		this.actindex = 0;
		cr.clearArray(this.temp_parents_arr);
		this.last_event_true = false;
		this.else_branch_ran = false;
		this.any_true_state = false;
	};
	EventStackFrame.prototype.isModifierAfterCnds = function ()
	{
		if (this.current_event.solWriterAfterCnds)
			return true;
		if (this.cndindex < this.current_event.conditions.length - 1)
			return !!this.current_event.solModifiers.length;
		return false;
	};
	cr.eventStackFrame = EventStackFrame;
}());
(function()
{
	function ExpNode(owner_, m)
	{
		this.owner = owner_;
		this.runtime = owner_.runtime;
		this.type = m[0];
;
		this.get = [this.eval_int,
					this.eval_float,
					this.eval_string,
					this.eval_unaryminus,
					this.eval_add,
					this.eval_subtract,
					this.eval_multiply,
					this.eval_divide,
					this.eval_mod,
					this.eval_power,
					this.eval_and,
					this.eval_or,
					this.eval_equal,
					this.eval_notequal,
					this.eval_less,
					this.eval_lessequal,
					this.eval_greater,
					this.eval_greaterequal,
					this.eval_conditional,
					this.eval_system_exp,
					this.eval_object_exp,
					this.eval_instvar_exp,
					this.eval_behavior_exp,
					this.eval_eventvar_exp][this.type];
		var paramsModel = null;
		this.value = null;
		this.first = null;
		this.second = null;
		this.third = null;
		this.func = null;
		this.results = null;
		this.parameters = null;
		this.object_type = null;
		this.beh_index = -1;
		this.instance_expr = null;
		this.varindex = -1;
		this.behavior_type = null;
		this.varname = null;
		this.eventvar = null;
		this.return_string = false;
		switch (this.type) {
		case 0:		// int
		case 1:		// float
		case 2:		// string
			this.value = m[1];
			break;
		case 3:		// unaryminus
			this.first = new cr.expNode(owner_, m[1]);
			break;
		case 18:	// conditional
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
			this.third = new cr.expNode(owner_, m[3]);
			break;
		case 19:	// system_exp
			this.func = this.runtime.GetObjectReference(m[1]);
;
			if (this.func === cr.system_object.prototype.exps.random
			 || this.func === cr.system_object.prototype.exps.choose)
			{
				this.owner.setVaries();
			}
			this.results = [];
			this.parameters = [];
			if (m.length === 3)
			{
				paramsModel = m[2];
				this.results.length = paramsModel.length + 1;	// must also fit 'ret'
			}
			else
				this.results.length = 1;      // to fit 'ret'
			break;
		case 20:	// object_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.beh_index = -1;
			this.func = this.runtime.GetObjectReference(m[2]);
			this.return_string = m[3];
			if (cr.plugins_.Function && this.func === cr.plugins_.Function.prototype.exps.Call)
			{
				this.owner.setVaries();
			}
			if (m[4])
				this.instance_expr = new cr.expNode(owner_, m[4]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 6)
			{
				paramsModel = m[5];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 21:		// instvar_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.return_string = m[2];
			if (m[3])
				this.instance_expr = new cr.expNode(owner_, m[3]);
			else
				this.instance_expr = null;
			this.varindex = m[4];
			break;
		case 22:		// behavior_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.behavior_type = this.object_type.getBehaviorByName(m[2]);
;
			this.beh_index = this.object_type.getBehaviorIndexByName(m[2]);
			this.func = this.runtime.GetObjectReference(m[3]);
			this.return_string = m[4];
			if (m[5])
				this.instance_expr = new cr.expNode(owner_, m[5]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 7)
			{
				paramsModel = m[6];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 23:		// eventvar_exp
			this.varname = m[1];
			this.eventvar = null;	// assigned in postInit
			break;
		}
		this.owner.maybeVaryForType(this.object_type);
		if (this.type >= 4 && this.type <= 17)
		{
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
		}
		if (paramsModel)
		{
			var i, len;
			for (i = 0, len = paramsModel.length; i < len; i++)
				this.parameters.push(new cr.expNode(owner_, paramsModel[i]));
		}
		cr.seal(this);
	};
	ExpNode.prototype.postInit = function ()
	{
		if (this.type === 23)	// eventvar_exp
		{
			this.eventvar = this.owner.runtime.getEventVariableByName(this.varname, this.owner.block.parent);
;
		}
		if (this.first)
			this.first.postInit();
		if (this.second)
			this.second.postInit();
		if (this.third)
			this.third.postInit();
		if (this.instance_expr)
			this.instance_expr.postInit();
		if (this.parameters)
		{
			var i, len;
			for (i = 0, len = this.parameters.length; i < len; i++)
				this.parameters[i].postInit();
		}
	};
	var tempValues = [];
	var tempValuesPtr = -1;
	function pushTempValue()
	{
		++tempValuesPtr;
		if (tempValues.length === tempValuesPtr)
			tempValues.push(new cr.expvalue());
		return tempValues[tempValuesPtr];
	};
	function popTempValue()
	{
		--tempValuesPtr;
	};
	function eval_params(parameters, results, temp)
	{
		var i, len;
		for (i = 0, len = parameters.length; i < len; ++i)
		{
			parameters[i].get(temp);
			results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
	}
	ExpNode.prototype.eval_system_exp = function (ret)
	{
		var parameters = this.parameters;
		var results = this.results;
		results[0] = ret;
		var temp = pushTempValue();
		eval_params(parameters, results, temp);
		popTempValue();
		this.func.apply(this.runtime.system, results);
	};
	ExpNode.prototype.eval_object_exp = function (ret)
	{
		var object_type = this.object_type;
		var results = this.results;
		var parameters = this.parameters;
		var instance_expr = this.instance_expr;
		var func = this.func;
		var index = this.owner.solindex;			// default to parameter's intended SOL index
		var sol = object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		results[0] = ret;
		ret.object_class = object_type;		// so expression can access family type if need be
		var temp = pushTempValue();
		eval_params(parameters, results, temp);
		if (instance_expr) {
			instance_expr.get(temp);
			if (temp.is_number()) {
				index = temp.data;
				instances = object_type.instances;    // pick from all instances, not SOL
			}
		}
		popTempValue();
		var len = instances.length;
		if (index >= len || index <= -len)
			index %= len;      // wraparound
		if (index < 0)
			index += len;
		var returned_val = func.apply(instances[index], results);
;
	};
	ExpNode.prototype.eval_behavior_exp = function (ret)
	{
		var object_type = this.object_type;
		var results = this.results;
		var parameters = this.parameters;
		var instance_expr = this.instance_expr;
		var beh_index = this.beh_index;
		var func = this.func;
		var index = this.owner.solindex;			// default to parameter's intended SOL index
		var sol = object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		results[0] = ret;
		ret.object_class = object_type;		// so expression can access family type if need be
		var temp = pushTempValue();
		eval_params(parameters, results, temp);
		if (instance_expr) {
			instance_expr.get(temp);
			if (temp.is_number()) {
				index = temp.data;
				instances = object_type.instances;    // pick from all instances, not SOL
			}
		}
		popTempValue();
		var len = instances.length;
		if (index >= len || index <= -len)
			index %= len;      // wraparound
		if (index < 0)
			index += len;
		var inst = instances[index];
		var offset = 0;
		if (object_type.is_family)
		{
			offset = inst.type.family_beh_map[object_type.family_index];
		}
		var returned_val = func.apply(inst.behavior_insts[beh_index + offset], results);
;
	};
	ExpNode.prototype.eval_instvar_exp = function (ret)
	{
		var instance_expr = this.instance_expr;
		var object_type = this.object_type;
		var varindex = this.varindex;
		var index = this.owner.solindex;		// default to parameter's intended SOL index
		var sol = object_type.getCurrentSol();
		var instances = sol.getObjects();
		var inst;
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		if (instance_expr)
		{
			var temp = pushTempValue();
			instance_expr.get(temp);
			if (temp.is_number())
			{
				index = temp.data;
				var type_instances = object_type.instances;
				if (type_instances.length !== 0)		// avoid NaN result with %
				{
					index %= type_instances.length;     // wraparound
					if (index < 0)                      // offset
						index += type_instances.length;
				}
				inst = object_type.getInstanceByIID(index);
				var to_ret = inst.instance_vars[varindex];
				if (cr.is_string(to_ret))
					ret.set_string(to_ret);
				else
					ret.set_float(to_ret);
				popTempValue();
				return;         // done
			}
			popTempValue();
		}
		var len = instances.length;
		if (index >= len || index <= -len)
			index %= len;		// wraparound
		if (index < 0)
			index += len;
		inst = instances[index];
		var offset = 0;
		if (object_type.is_family)
		{
			offset = inst.type.family_var_map[object_type.family_index];
		}
		var to_ret = inst.instance_vars[varindex + offset];
		if (cr.is_string(to_ret))
			ret.set_string(to_ret);
		else
			ret.set_float(to_ret);
	};
	ExpNode.prototype.eval_int = function (ret)
	{
		ret.type = cr.exptype.Integer;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_float = function (ret)
	{
		ret.type = cr.exptype.Float;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_string = function (ret)
	{
		ret.type = cr.exptype.String;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_unaryminus = function (ret)
	{
		this.first.get(ret);                // retrieve operand
		if (ret.is_number())
			ret.data = -ret.data;
	};
	ExpNode.prototype.eval_add = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data += temp.data;          // both operands numbers: add
			if (temp.is_float())
				ret.make_float();
		}
		popTempValue();
	};
	ExpNode.prototype.eval_subtract = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data -= temp.data;          // both operands numbers: subtract
			if (temp.is_float())
				ret.make_float();
		}
		popTempValue();
	};
	ExpNode.prototype.eval_multiply = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data *= temp.data;          // both operands numbers: multiply
			if (temp.is_float())
				ret.make_float();
		}
		popTempValue();
	};
	ExpNode.prototype.eval_divide = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data /= temp.data;          // both operands numbers: divide
			ret.make_float();
		}
		popTempValue();
	};
	ExpNode.prototype.eval_mod = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data %= temp.data;          // both operands numbers: modulo
			if (temp.is_float())
				ret.make_float();
		}
		popTempValue();
	};
	ExpNode.prototype.eval_power = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data = Math.pow(ret.data, temp.data);   // both operands numbers: raise to power
			if (temp.is_float())
				ret.make_float();
		}
		popTempValue();
	};
	ExpNode.prototype.eval_and = function (ret)
	{
		this.first.get(ret);			// left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		if (temp.is_string() || ret.is_string())
			this.eval_and_stringconcat(ret, temp);
		else
			this.eval_and_logical(ret, temp);
		popTempValue();
	};
	ExpNode.prototype.eval_and_stringconcat = function (ret, temp)
	{
		if (ret.is_string() && temp.is_string())
			this.eval_and_stringconcat_str_str(ret, temp);
		else
			this.eval_and_stringconcat_num(ret, temp);
	};
	ExpNode.prototype.eval_and_stringconcat_str_str = function (ret, temp)
	{
		ret.data += temp.data;
	};
	ExpNode.prototype.eval_and_stringconcat_num = function (ret, temp)
	{
		if (ret.is_string())
		{
			ret.data += (Math.round(temp.data * 1e10) / 1e10).toString();
		}
		else
		{
			ret.set_string(ret.data.toString() + temp.data);
		}
	};
	ExpNode.prototype.eval_and_logical = function (ret, temp)
	{
		ret.set_int(ret.data && temp.data ? 1 : 0);
	};
	ExpNode.prototype.eval_or = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			if (ret.data || temp.data)
				ret.set_int(1);
			else
				ret.set_int(0);
		}
		popTempValue();
	};
	ExpNode.prototype.eval_conditional = function (ret)
	{
		this.first.get(ret);                // condition operand
		if (ret.data)                       // is true
			this.second.get(ret);           // evaluate second operand to ret
		else
			this.third.get(ret);            // evaluate third operand to ret
	};
	ExpNode.prototype.eval_equal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data === temp.data ? 1 : 0);
		popTempValue();
	};
	ExpNode.prototype.eval_notequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data !== temp.data ? 1 : 0);
		popTempValue();
	};
	ExpNode.prototype.eval_less = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data < temp.data ? 1 : 0);
		popTempValue();
	};
	ExpNode.prototype.eval_lessequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data <= temp.data ? 1 : 0);
		popTempValue();
	};
	ExpNode.prototype.eval_greater = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data > temp.data ? 1 : 0);
		popTempValue();
	};
	ExpNode.prototype.eval_greaterequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data >= temp.data ? 1 : 0);
		popTempValue();
	};
	ExpNode.prototype.eval_eventvar_exp = function (ret)
	{
		var val = this.eventvar.getValue();
		if (cr.is_number(val))
			ret.set_float(val);
		else
			ret.set_string(val);
	};
	cr.expNode = ExpNode;
	function ExpValue(type, data)
	{
		this.type = type || cr.exptype.Integer;
		this.data = data || 0;
		this.object_class = null;
;
;
;
		if (this.type == cr.exptype.Integer)
			this.data = Math.floor(this.data);
		cr.seal(this);
	};
	ExpValue.prototype.is_int = function ()
	{
		return this.type === cr.exptype.Integer;
	};
	ExpValue.prototype.is_float = function ()
	{
		return this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_number = function ()
	{
		return this.type === cr.exptype.Integer || this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_string = function ()
	{
		return this.type === cr.exptype.String;
	};
	ExpValue.prototype.make_int = function ()
	{
		if (!this.is_int())
		{
			if (this.is_float())
				this.data = Math.floor(this.data);      // truncate float
			else if (this.is_string())
				this.data = parseInt(this.data, 10);
			this.type = cr.exptype.Integer;
		}
	};
	ExpValue.prototype.make_float = function ()
	{
		if (!this.is_float())
		{
			if (this.is_string())
				this.data = parseFloat(this.data);
			this.type = cr.exptype.Float;
		}
	};
	ExpValue.prototype.make_string = function ()
	{
		if (!this.is_string())
		{
			this.data = this.data.toString();
			this.type = cr.exptype.String;
		}
	};
	ExpValue.prototype.set_int = function (val)
	{
;
		this.type = cr.exptype.Integer;
		this.data = Math.floor(val);
	};
	ExpValue.prototype.set_float = function (val)
	{
;
		this.type = cr.exptype.Float;
		this.data = val;
	};
	ExpValue.prototype.set_string = function (val)
	{
;
		this.type = cr.exptype.String;
		this.data = val;
	};
	ExpValue.prototype.set_any = function (val)
	{
		if (cr.is_number(val))
		{
			this.type = cr.exptype.Float;
			this.data = val;
		}
		else if (cr.is_string(val))
		{
			this.type = cr.exptype.String;
			this.data = val.toString();
		}
		else
		{
			this.type = cr.exptype.Integer;
			this.data = 0;
		}
	};
	cr.expvalue = ExpValue;
	cr.exptype = {
		Integer: 0,     // emulated; no native integer support in javascript
		Float: 1,
		String: 2
	};
}());
;
cr.system_object = function (runtime)
{
    this.runtime = runtime;
	this.waits = [];
};
cr.system_object.prototype.saveToJSON = function ()
{
	var o = {};
	var i, len, j, lenj, p, w, t, sobj;
	o["waits"] = [];
	var owaits = o["waits"];
	var waitobj;
	for (i = 0, len = this.waits.length; i < len; i++)
	{
		w = this.waits[i];
		waitobj = {
			"t": w.time,
			"st": w.signaltag,
			"s": w.signalled,
			"ev": w.ev.sid,
			"sm": [],
			"sols": {}
		};
		if (w.ev.actions[w.actindex])
			waitobj["act"] = w.ev.actions[w.actindex].sid;
		for (j = 0, lenj = w.solModifiers.length; j < lenj; j++)
			waitobj["sm"].push(w.solModifiers[j].sid);
		for (p in w.sols)
		{
			if (w.sols.hasOwnProperty(p))
			{
				t = this.runtime.types_by_index[parseInt(p, 10)];
;
				sobj = {
					"sa": w.sols[p].sa,
					"insts": []
				};
				for (j = 0, lenj = w.sols[p].insts.length; j < lenj; j++)
					sobj["insts"].push(w.sols[p].insts[j].uid);
				waitobj["sols"][t.sid.toString()] = sobj;
			}
		}
		owaits.push(waitobj);
	}
	return o;
};
cr.system_object.prototype.loadFromJSON = function (o)
{
	var owaits = o["waits"];
	var i, len, j, lenj, p, w, addWait, e, aindex, t, savedsol, nusol, inst;
	cr.clearArray(this.waits);
	for (i = 0, len = owaits.length; i < len; i++)
	{
		w = owaits[i];
		e = this.runtime.blocksBySid[w["ev"].toString()];
		if (!e)
			continue;	// event must've gone missing
		aindex = -1;
		for (j = 0, lenj = e.actions.length; j < lenj; j++)
		{
			if (e.actions[j].sid === w["act"])
			{
				aindex = j;
				break;
			}
		}
		if (aindex === -1)
			continue;	// action must've gone missing
		addWait = {};
		addWait.sols = {};
		addWait.solModifiers = [];
		addWait.deleteme = false;
		addWait.time = w["t"];
		addWait.signaltag = w["st"] || "";
		addWait.signalled = !!w["s"];
		addWait.ev = e;
		addWait.actindex = aindex;
		for (j = 0, lenj = w["sm"].length; j < lenj; j++)
		{
			t = this.runtime.getObjectTypeBySid(w["sm"][j]);
			if (t)
				addWait.solModifiers.push(t);
		}
		for (p in w["sols"])
		{
			if (w["sols"].hasOwnProperty(p))
			{
				t = this.runtime.getObjectTypeBySid(parseInt(p, 10));
				if (!t)
					continue;		// type must've been deleted
				savedsol = w["sols"][p];
				nusol = {
					sa: savedsol["sa"],
					insts: []
				};
				for (j = 0, lenj = savedsol["insts"].length; j < lenj; j++)
				{
					inst = this.runtime.getObjectByUID(savedsol["insts"][j]);
					if (inst)
						nusol.insts.push(inst);
				}
				addWait.sols[t.index.toString()] = nusol;
			}
		}
		this.waits.push(addWait);
	}
};
(function ()
{
	var sysProto = cr.system_object.prototype;
	function SysCnds() {};
    SysCnds.prototype.EveryTick = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutStart = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutEnd = function()
    {
        return true;
    };
    SysCnds.prototype.Compare = function(x, cmp, y)
    {
        return cr.do_cmp(x, cmp, y);
    };
    SysCnds.prototype.CompareTime = function (cmp, t)
    {
        var elapsed = this.runtime.kahanTime.sum;
        if (cmp === 0)
        {
            var cnd = this.runtime.getCurrentCondition();
            if (!cnd.extra["CompareTime_executed"])
            {
                if (elapsed >= t)
                {
                    cnd.extra["CompareTime_executed"] = true;
                    return true;
                }
            }
            return false;
        }
        return cr.do_cmp(elapsed, cmp, t);
    };
    SysCnds.prototype.LayerVisible = function (layer)
    {
        if (!layer)
            return false;
        else
            return layer.visible;
    };
	SysCnds.prototype.LayerEmpty = function (layer)
    {
        if (!layer)
            return false;
        else
            return !layer.instances.length;
    };
	SysCnds.prototype.LayerCmpOpacity = function (layer, cmp, opacity_)
	{
		if (!layer)
			return false;
		return cr.do_cmp(layer.opacity * 100, cmp, opacity_);
	};
    SysCnds.prototype.Repeat = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	SysCnds.prototype.While = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				if (!current_event.retrigger())		// one of the other conditions returned false
					current_loop.stopped = true;	// break
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				current_loop.index = i;
				if (!current_event.retrigger())
					current_loop.stopped = true;
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
    SysCnds.prototype.For = function (name, start, end)
    {
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack(name);
        var i;
		if (end < start)
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
		else
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	var foreach_instancestack = [];
	var foreach_instanceptr = -1;
    SysCnds.prototype.ForEach = function (obj)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i, len, j, lenj, inst, s, sol2;
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				cr.clearArray(sol.instances);
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						cr.clearArray(sol2.instances);
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			cr.clearArray(sol.instances);
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						cr.clearArray(sol2.instances);
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		cr.clearArray(instances);
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	function foreach_sortinstances(a, b)
	{
		var va = a.extra["c2_feo_val"];
		var vb = b.extra["c2_feo_val"];
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			va = "" + va;
			vb = "" + vb;
			if (va < vb)
				return -1;
			else if (va > vb)
				return 1;
			else
				return 0;
		}
	};
	SysCnds.prototype.ForEachOrdered = function (obj, exp, order)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var current_condition = this.runtime.getCurrentCondition();
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
		var i, len, j, lenj, inst, s, sol2;
		for (i = 0, len = instances.length; i < len; i++)
		{
			instances[i].extra["c2_feo_val"] = current_condition.parameters[1].get(i);
		}
		instances.sort(foreach_sortinstances);
		if (order === 1)
			instances.reverse();
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				cr.clearArray(sol.instances);
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						cr.clearArray(sol2.instances);
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			cr.clearArray(sol.instances);
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						cr.clearArray(sol2.instances);
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		cr.clearArray(instances);
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	SysCnds.prototype.PickByComparison = function (obj_, exp_, cmp_, val_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			cr.clearArray(sol.else_instances);
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			val_ = current_condition.parameters[3].get(i);
			if (cr.do_cmp(exp_, cmp_, val_))
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		cr.truncateArray(tmp_instances, k);
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		cr.clearArray(tmp_instances);
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
	SysCnds.prototype.PickByEvaluate = function (obj_, exp_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			cr.clearArray(sol.else_instances);
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			if (exp_)
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		cr.truncateArray(tmp_instances, k);
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		cr.clearArray(tmp_instances);
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
    SysCnds.prototype.TriggerOnce = function ()
    {
        var cndextra = this.runtime.getCurrentCondition().extra;
		if (typeof cndextra["TriggerOnce_lastTick"] === "undefined")
			cndextra["TriggerOnce_lastTick"] = -1;
        var last_tick = cndextra["TriggerOnce_lastTick"];
        var cur_tick = this.runtime.tickcount;
        cndextra["TriggerOnce_lastTick"] = cur_tick;
        return this.runtime.layout_first_tick || last_tick !== cur_tick - 1;
    };
    SysCnds.prototype.Every = function (seconds)
    {
        var cnd = this.runtime.getCurrentCondition();
        var last_time = cnd.extra["Every_lastTime"] || 0;
        var cur_time = this.runtime.kahanTime.sum;
		if (typeof cnd.extra["Every_seconds"] === "undefined")
			cnd.extra["Every_seconds"] = seconds;
		var this_seconds = cnd.extra["Every_seconds"];
        if (cur_time >= last_time + this_seconds)
        {
            cnd.extra["Every_lastTime"] = last_time + this_seconds;
			if (cur_time >= cnd.extra["Every_lastTime"] + 0.04)
			{
				cnd.extra["Every_lastTime"] = cur_time;
			}
			cnd.extra["Every_seconds"] = seconds;
            return true;
        }
		else if (cur_time < last_time - 0.1)
		{
			cnd.extra["Every_lastTime"] = cur_time;
		}
		return false;
    };
    SysCnds.prototype.PickNth = function (obj, index)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		index = cr.floor(index);
        if (index < 0 || index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.PickRandom = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		var index = cr.floor(Math.random() * instances.length);
        if (index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.CompareVar = function (v, cmp, val)
    {
        return cr.do_cmp(v.getValue(), cmp, val);
    };
    SysCnds.prototype.IsGroupActive = function (group)
    {
		var g = this.runtime.groups_by_name[group.toLowerCase()];
        return g && g.group_active;
    };
	SysCnds.prototype.IsPreview = function ()
	{
		return typeof cr_is_preview !== "undefined";
	};
	SysCnds.prototype.PickAll = function (obj)
    {
        if (!obj)
            return false;
		if (!obj.instances.length)
			return false;
        var sol = obj.getCurrentSol();
        sol.select_all = true;
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.IsMobile = function ()
	{
		return this.runtime.isMobile;
	};
	SysCnds.prototype.CompareBetween = function (x, a, b)
	{
		return x >= a && x <= b;
	};
	SysCnds.prototype.Else = function ()
	{
		var current_frame = this.runtime.getCurrentEventStack();
		if (current_frame.else_branch_ran)
			return false;		// another event in this else-if chain has run
		else
			return !current_frame.last_event_true;
		/*
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var prev_event = current_event.prev_block;
		if (!prev_event)
			return false;
		if (prev_event.is_logical)
			return !this.runtime.last_event_true;
		var i, len, j, lenj, s, sol, temp, inst, any_picked = false;
		for (i = 0, len = prev_event.cndReferences.length; i < len; i++)
		{
			s = prev_event.cndReferences[i];
			sol = s.getCurrentSol();
			if (sol.select_all || sol.instances.length === s.instances.length)
			{
				sol.select_all = false;
				sol.instances.length = 0;
			}
			else
			{
				if (sol.instances.length === 1 && sol.else_instances.length === 0 && s.instances.length >= 2)
				{
					inst = sol.instances[0];
					sol.instances.length = 0;
					for (j = 0, lenj = s.instances.length; j < lenj; j++)
					{
						if (s.instances[j] != inst)
							sol.instances.push(s.instances[j]);
					}
					any_picked = true;
				}
				else
				{
					temp = sol.instances;
					sol.instances = sol.else_instances;
					sol.else_instances = temp;
					any_picked = true;
				}
			}
		}
		return any_picked;
		*/
	};
	SysCnds.prototype.OnLoadFinished = function ()
	{
		return true;
	};
	SysCnds.prototype.OnCanvasSnapshot = function ()
	{
		return true;
	};
	SysCnds.prototype.EffectsSupported = function ()
	{
		return !!this.runtime.glwrap;
	};
	SysCnds.prototype.OnSaveComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnSaveFailed = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadFailed = function ()
	{
		return true;
	};
	SysCnds.prototype.ObjectUIDExists = function (u)
	{
		return !!this.runtime.getObjectByUID(u);
	};
	SysCnds.prototype.IsOnPlatform = function (p)
	{
		var rt = this.runtime;
		switch (p) {
		case 0:		// HTML5 website
			return !rt.isDomFree && !rt.isNodeWebkit && !rt.isCordova && !rt.isWinJS && !rt.isWindowsPhone8 && !rt.isBlackberry10 && !rt.isAmazonWebApp;
		case 1:		// iOS
			return rt.isiOS;
		case 2:		// Android
			return rt.isAndroid;
		case 3:		// Windows 8
			return rt.isWindows8App;
		case 4:		// Windows Phone 8
			return rt.isWindowsPhone8;
		case 5:		// Blackberry 10
			return rt.isBlackberry10;
		case 6:		// Tizen
			return rt.isTizen;
		case 7:		// CocoonJS
			return rt.isCocoonJs;
		case 8:		// Cordova
			return rt.isCordova;
		case 9:	// Scirra Arcade
			return rt.isArcade;
		case 10:	// node-webkit
			return rt.isNodeWebkit;
		case 11:	// crosswalk
			return rt.isCrosswalk;
		case 12:	// amazon webapp
			return rt.isAmazonWebApp;
		case 13:	// windows 10 app
			return rt.isWindows10;
		default:	// should not be possible
			return false;
		}
	};
	var cacheRegex = null;
	var lastRegex = "";
	var lastFlags = "";
	function getRegex(regex_, flags_)
	{
		if (!cacheRegex || regex_ !== lastRegex || flags_ !== lastFlags)
		{
			cacheRegex = new RegExp(regex_, flags_);
			lastRegex = regex_;
			lastFlags = flags_;
		}
		cacheRegex.lastIndex = 0;		// reset
		return cacheRegex;
	};
	SysCnds.prototype.RegexTest = function (str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		return regex.test(str_);
	};
	var tmp_arr = [];
	SysCnds.prototype.PickOverlappingPoint = function (obj_, x_, y_)
	{
		if (!obj_)
            return false;
        var sol = obj_.getCurrentSol();
        var instances = sol.getObjects();
		var current_event = this.runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		var cnd = this.runtime.getCurrentCondition();
		var i, len, inst, pick;
		if (sol.select_all)
		{
			cr.shallowAssignArray(tmp_arr, instances);
			cr.clearArray(sol.else_instances);
			sol.select_all = false;
			cr.clearArray(sol.instances);
		}
		else
		{
			if (orblock)
			{
				cr.shallowAssignArray(tmp_arr, sol.else_instances);
				cr.clearArray(sol.else_instances);
			}
			else
			{
				cr.shallowAssignArray(tmp_arr, instances);
				cr.clearArray(sol.instances);
			}
		}
		for (i = 0, len = tmp_arr.length; i < len; ++i)
		{
			inst = tmp_arr[i];
			inst.update_bbox();
			pick = cr.xor(inst.contains_pt(x_, y_), cnd.inverted);
			if (pick)
				sol.instances.push(inst);
			else
				sol.else_instances.push(inst);
		}
		obj_.applySolToContainer();
		return cr.xor(!!sol.instances.length, cnd.inverted);
	};
	SysCnds.prototype.IsNaN = function (n)
	{
		return !!isNaN(n);
	};
	SysCnds.prototype.AngleWithin = function (a1, within, a2)
	{
		return cr.angleDiff(cr.to_radians(a1), cr.to_radians(a2)) <= cr.to_radians(within);
	};
	SysCnds.prototype.IsClockwiseFrom = function (a1, a2)
	{
		return cr.angleClockwise(cr.to_radians(a1), cr.to_radians(a2));
	};
	SysCnds.prototype.IsBetweenAngles = function (a, la, ua)
	{
		var angle = cr.to_clamped_radians(a);
		var lower = cr.to_clamped_radians(la);
		var upper = cr.to_clamped_radians(ua);
		var obtuse = (!cr.angleClockwise(upper, lower));
		if (obtuse)
			return !(!cr.angleClockwise(angle, lower) && cr.angleClockwise(angle, upper));
		else
			return cr.angleClockwise(angle, lower) && !cr.angleClockwise(angle, upper);
	};
	SysCnds.prototype.IsValueType = function (x, t)
	{
		if (typeof x === "number")
			return t === 0;
		else		// string
			return t === 1;
	};
	sysProto.cnds = new SysCnds();
    function SysActs() {};
    SysActs.prototype.GoToLayout = function (to)
    {
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
        this.runtime.changelayout = to;
    };
	SysActs.prototype.NextPrevLayout = function (prev)
    {
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
		var index = this.runtime.layouts_by_index.indexOf(this.runtime.running_layout);
		if (prev && index === 0)
			return;		// cannot go to previous layout from first layout
		if (!prev && index === this.runtime.layouts_by_index.length - 1)
			return;		// cannot go to next layout from last layout
		var to = this.runtime.layouts_by_index[index + (prev ? -1 : 1)];
;
        this.runtime.changelayout = to;
    };
    SysActs.prototype.CreateObject = function (obj, layer, x, y)
    {
        if (!layer || !obj)
            return;
        var inst = this.runtime.createInstance(obj, layer, x, y);
		if (!inst)
			return;
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
        var sol = obj.getCurrentSol();
        sol.select_all = false;
		cr.clearArray(sol.instances);
		sol.instances[0] = inst;
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				sol = s.type.getCurrentSol();
				sol.select_all = false;
				cr.clearArray(sol.instances);
				sol.instances[0] = s;
			}
		}
    };
    SysActs.prototype.SetLayerVisible = function (layer, visible_)
    {
        if (!layer)
            return;
		if (layer.visible !== visible_)
		{
			layer.visible = visible_;
			this.runtime.redraw = true;
		}
    };
	SysActs.prototype.SetLayerOpacity = function (layer, opacity_)
	{
		if (!layer)
			return;
		opacity_ = cr.clamp(opacity_ / 100, 0, 1);
		if (layer.opacity !== opacity_)
		{
			layer.opacity = opacity_;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayerScaleRate = function (layer, sr)
	{
		if (!layer)
			return;
		if (layer.zoomRate !== sr)
		{
			layer.zoomRate = sr;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayerForceOwnTexture = function (layer, f)
	{
		if (!layer)
			return;
		f = !!f;
		if (layer.forceOwnTexture !== f)
		{
			layer.forceOwnTexture = f;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayoutScale = function (s)
	{
		if (!this.runtime.running_layout)
			return;
		if (this.runtime.running_layout.scale !== s)
		{
			this.runtime.running_layout.scale = s;
			this.runtime.running_layout.boundScrolling();
			this.runtime.redraw = true;
		}
	};
    SysActs.prototype.ScrollX = function(x)
    {
        this.runtime.running_layout.scrollToX(x);
    };
    SysActs.prototype.ScrollY = function(y)
    {
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.Scroll = function(x, y)
    {
        this.runtime.running_layout.scrollToX(x);
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.ScrollToObject = function(obj)
    {
        var inst = obj.getFirstPicked();
        if (inst)
        {
            this.runtime.running_layout.scrollToX(inst.x);
            this.runtime.running_layout.scrollToY(inst.y);
        }
    };
	SysActs.prototype.SetVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(x);
			else
				v.setValue(parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(x.toString());
	};
	SysActs.prototype.AddVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() + x);
			else
				v.setValue(v.getValue() + parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(v.getValue() + x.toString());
	};
	SysActs.prototype.SubVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() - x);
			else
				v.setValue(v.getValue() - parseFloat(x));
		}
	};
    SysActs.prototype.SetGroupActive = function (group, active)
    {
		var g = this.runtime.groups_by_name[group.toLowerCase()];
		if (!g)
			return;
		switch (active) {
		case 0:
			g.setGroupActive(false);
			break;
		case 1:
			g.setGroupActive(true);
			break;
		case 2:
			g.setGroupActive(!g.group_active);
			break;
		}
    };
    SysActs.prototype.SetTimescale = function (ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        this.runtime.timescale = ts;
    };
    SysActs.prototype.SetObjectTimescale = function (obj, ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        if (!obj)
            return;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = ts;
        }
    };
    SysActs.prototype.RestoreObjectTimescale = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = -1.0;
        }
    };
	var waitobjrecycle = [];
	function allocWaitObject()
	{
		var w;
		if (waitobjrecycle.length)
			w = waitobjrecycle.pop();
		else
		{
			w = {};
			w.sols = {};
			w.solModifiers = [];
		}
		w.deleteme = false;
		return w;
	};
	function freeWaitObject(w)
	{
		cr.wipe(w.sols);
		cr.clearArray(w.solModifiers);
		waitobjrecycle.push(w);
	};
	var solstateobjects = [];
	function allocSolStateObject()
	{
		var s;
		if (solstateobjects.length)
			s = solstateobjects.pop();
		else
		{
			s = {};
			s.insts = [];
		}
		s.sa = false;
		return s;
	};
	function freeSolStateObject(s)
	{
		cr.clearArray(s.insts);
		solstateobjects.push(s);
	};
	SysActs.prototype.Wait = function (seconds)
	{
		if (seconds < 0)
			return;
		var i, len, s, t, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		var waitobj = allocWaitObject();
		waitobj.time = this.runtime.kahanTime.sum + seconds;
		waitobj.signaltag = "";
		waitobj.signalled = false;
		waitobj.ev = evinfo.current_event;
		waitobj.actindex = evinfo.actindex + 1;	// pointing at next action
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			t = this.runtime.types_by_index[i];
			s = t.getCurrentSol();
			if (s.select_all && evinfo.current_event.solModifiers.indexOf(t) === -1)
				continue;
			waitobj.solModifiers.push(t);
			ss = allocSolStateObject();
			ss.sa = s.select_all;
			cr.shallowAssignArray(ss.insts, s.instances);
			waitobj.sols[i.toString()] = ss;
		}
		this.waits.push(waitobj);
		return true;
	};
	SysActs.prototype.WaitForSignal = function (tag)
	{
		var i, len, s, t, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		var waitobj = allocWaitObject();
		waitobj.time = -1;
		waitobj.signaltag = tag.toLowerCase();
		waitobj.signalled = false;
		waitobj.ev = evinfo.current_event;
		waitobj.actindex = evinfo.actindex + 1;	// pointing at next action
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			t = this.runtime.types_by_index[i];
			s = t.getCurrentSol();
			if (s.select_all && evinfo.current_event.solModifiers.indexOf(t) === -1)
				continue;
			waitobj.solModifiers.push(t);
			ss = allocSolStateObject();
			ss.sa = s.select_all;
			cr.shallowAssignArray(ss.insts, s.instances);
			waitobj.sols[i.toString()] = ss;
		}
		this.waits.push(waitobj);
		return true;
	};
	SysActs.prototype.Signal = function (tag)
	{
		var lowertag = tag.toLowerCase();
		var i, len, w;
		for (i = 0, len = this.waits.length; i < len; ++i)
		{
			w = this.waits[i];
			if (w.time !== -1)
				continue;					// timer wait, ignore
			if (w.signaltag === lowertag)	// waiting for this signal
				w.signalled = true;			// will run on next check
		}
	};
	SysActs.prototype.SetLayerScale = function (layer, scale)
    {
        if (!layer)
            return;
		if (layer.scale === scale)
			return;
        layer.scale = scale;
        this.runtime.redraw = true;
    };
	SysActs.prototype.ResetGlobals = function ()
	{
		var i, len, g;
		for (i = 0, len = this.runtime.all_global_vars.length; i < len; i++)
		{
			g = this.runtime.all_global_vars[i];
			g.data = g.initial;
		}
	};
	SysActs.prototype.SetLayoutAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.runtime.running_layout)
		{
			if (this.runtime.running_layout.angle !== a)
			{
				this.runtime.running_layout.angle = a;
				this.runtime.redraw = true;
			}
		}
	};
	SysActs.prototype.SetLayerAngle = function (layer, a)
    {
        if (!layer)
            return;
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (layer.angle === a)
			return;
        layer.angle = a;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerParallax = function (layer, px, py)
    {
        if (!layer)
            return;
		if (layer.parallaxX === px / 100 && layer.parallaxY === py / 100)
			return;
        layer.parallaxX = px / 100;
		layer.parallaxY = py / 100;
		if (layer.parallaxX !== 1 || layer.parallaxY !== 1)
		{
			var i, len, instances = layer.instances;
			for (i = 0, len = instances.length; i < len; ++i)
			{
				instances[i].type.any_instance_parallaxed = true;
			}
		}
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerBackground = function (layer, c)
    {
        if (!layer)
            return;
		var r = cr.GetRValue(c);
		var g = cr.GetGValue(c);
		var b = cr.GetBValue(c);
		if (layer.background_color[0] === r && layer.background_color[1] === g && layer.background_color[2] === b)
			return;
        layer.background_color[0] = r;
		layer.background_color[1] = g;
		layer.background_color[2] = b;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerTransparent = function (layer, t)
    {
        if (!layer)
            return;
		if (!!t === !!layer.transparent)
			return;
		layer.transparent = !!t;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerBlendMode = function (layer, bm)
    {
        if (!layer)
            return;
		if (layer.blend_mode === bm)
			return;
		layer.blend_mode = bm;
		layer.compositeOp = cr.effectToCompositeOp(layer.blend_mode);
		if (this.runtime.gl)
			cr.setGLBlend(layer, layer.blend_mode, this.runtime.gl);
        this.runtime.redraw = true;
    };
	SysActs.prototype.StopLoop = function ()
	{
		if (this.runtime.loop_stack_index < 0)
			return;		// no loop currently running
		this.runtime.getCurrentLoop().stopped = true;
	};
	SysActs.prototype.GoToLayoutByName = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to different layout
;
		var l;
		for (l in this.runtime.layouts)
		{
			if (this.runtime.layouts.hasOwnProperty(l) && cr.equals_nocase(l, layoutname))
			{
				this.runtime.changelayout = this.runtime.layouts[l];
				return;
			}
		}
	};
	SysActs.prototype.RestartLayout = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot restart loader layouts
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
		if (!this.runtime.running_layout)
			return;
		this.runtime.changelayout = this.runtime.running_layout;
		var i, len, g;
		for (i = 0, len = this.runtime.allGroups.length; i < len; i++)
		{
			g = this.runtime.allGroups[i];
			g.setGroupActive(g.initially_activated);
		}
	};
	SysActs.prototype.SnapshotCanvas = function (format_, quality_)
	{
		this.runtime.doCanvasSnapshot(format_ === 0 ? "image/png" : "image/jpeg", quality_ / 100);
	};
	SysActs.prototype.SetCanvasSize = function (w, h)
	{
		if (w <= 0 || h <= 0)
			return;
		var mode = this.runtime.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.runtime.isNodeFullscreen);
		if (isfullscreen && this.runtime.fullscreen_scaling > 0)
			mode = this.runtime.fullscreen_scaling;
		if (mode === 0)
		{
			this.runtime["setSize"](w, h, true);
		}
		else
		{
			this.runtime.original_width = w;
			this.runtime.original_height = h;
			this.runtime["setSize"](this.runtime.lastWindowWidth, this.runtime.lastWindowHeight, true);
		}
	};
	SysActs.prototype.SetLayoutEffectEnabled = function (enable_, effectname_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		this.runtime.running_layout.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectEnabled = function (layer, enable_, effectname_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		layer.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayoutEffectParam = function (effectname_, index_, value_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = this.runtime.running_layout.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectParam = function (layer, effectname_, index_, value_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = layer.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SaveState = function (slot_)
	{
		this.runtime.saveToSlot = slot_;
	};
	SysActs.prototype.LoadState = function (slot_)
	{
		this.runtime.loadFromSlot = slot_;
	};
	SysActs.prototype.LoadStateJSON = function (jsonstr_)
	{
		this.runtime.loadFromJson = jsonstr_;
	};
	SysActs.prototype.SetHalfFramerateMode = function (set_)
	{
		this.runtime.halfFramerateMode = (set_ !== 0);
	};
	SysActs.prototype.SetFullscreenQuality = function (q)
	{
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.isNodeFullscreen);
		if (!isfullscreen && this.runtime.fullscreen_mode === 0)
			return;
		this.runtime.wantFullscreenScalingQuality = (q !== 0);
		this.runtime["setSize"](this.runtime.lastWindowWidth, this.runtime.lastWindowHeight, true);
	};
	SysActs.prototype.ResetPersisted = function ()
	{
		var i, len;
		for (i = 0, len = this.runtime.layouts_by_index.length; i < len; ++i)
		{
			this.runtime.layouts_by_index[i].persist_data = {};
			this.runtime.layouts_by_index[i].first_visit = true;
		}
	};
	SysActs.prototype.RecreateInitialObjects = function (obj, x1, y1, x2, y2)
	{
		if (!obj)
			return;
		this.runtime.running_layout.recreateInitialObjects(obj, x1, y1, x2, y2);
	};
	SysActs.prototype.SetPixelRounding = function (m)
	{
		this.runtime.pixel_rounding = (m !== 0);
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetMinimumFramerate = function (f)
	{
		if (f < 1)
			f = 1;
		if (f > 120)
			f = 120;
		this.runtime.minimumFramerate = f;
	};
	function SortZOrderList(a, b)
	{
		var layerA = a[0];
		var layerB = b[0];
		var diff = layerA - layerB;
		if (diff !== 0)
			return diff;
		var indexA = a[1];
		var indexB = b[1];
		return indexA - indexB;
	};
	function SortInstancesByValue(a, b)
	{
		return a[1] - b[1];
	};
	SysActs.prototype.SortZOrderByInstVar = function (obj, iv)
	{
		if (!obj)
			return;
		var i, len, inst, value, r, layer, toZ;
		var sol = obj.getCurrentSol();
		var pickedInstances = sol.getObjects();
		var zOrderList = [];
		var instValues = [];
		var layout = this.runtime.running_layout;
		var isFamily = obj.is_family;
		var familyIndex = obj.family_index;
		for (i = 0, len = pickedInstances.length; i < len; ++i)
		{
			inst = pickedInstances[i];
			if (!inst.layer)
				continue;		// not a world instance
			if (isFamily)
				value = inst.instance_vars[iv + inst.type.family_var_map[familyIndex]];
			else
				value = inst.instance_vars[iv];
			zOrderList.push([
				inst.layer.index,
				inst.get_zindex()
			]);
			instValues.push([
				inst,
				value
			]);
		}
		if (!zOrderList.length)
			return;				// no instances were world instances
		zOrderList.sort(SortZOrderList);
		instValues.sort(SortInstancesByValue);
		for (i = 0, len = zOrderList.length; i < len; ++i)
		{
			inst = instValues[i][0];					// instance in the order we want
			layer = layout.layers[zOrderList[i][0]];	// layer to put it on
			toZ = zOrderList[i][1];						// Z index on that layer to put it
			if (layer.instances[toZ] !== inst)			// not already got this instance there
			{
				layer.instances[toZ] = inst;			// update instance
				inst.layer = layer;						// update instance's layer reference (could have changed)
				layer.setZIndicesStaleFrom(toZ);		// mark Z indices stale from this point since they have changed
			}
		}
	};
	sysProto.acts = new SysActs();
    function SysExps() {};
    SysExps.prototype["int"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_int(parseInt(x, 10));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_int(x);
    };
    SysExps.prototype["float"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_float(parseFloat(x));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_float(x);
    };
    SysExps.prototype.str = function(ret, x)
    {
        if (cr.is_string(x))
            ret.set_string(x);
        else
            ret.set_string(x.toString());
    };
    SysExps.prototype.len = function(ret, x)
    {
        ret.set_int(x.length || 0);
    };
    SysExps.prototype.random = function (ret, a, b)
    {
        if (b === undefined)
        {
            ret.set_float(Math.random() * a);
        }
        else
        {
            ret.set_float(Math.random() * (b - a) + a);
        }
    };
    SysExps.prototype.sqrt = function(ret, x)
    {
        ret.set_float(Math.sqrt(x));
    };
    SysExps.prototype.abs = function(ret, x)
    {
        ret.set_float(Math.abs(x));
    };
    SysExps.prototype.round = function(ret, x)
    {
        ret.set_int(Math.round(x));
    };
    SysExps.prototype.floor = function(ret, x)
    {
        ret.set_int(Math.floor(x));
    };
    SysExps.prototype.ceil = function(ret, x)
    {
        ret.set_int(Math.ceil(x));
    };
    SysExps.prototype.sin = function(ret, x)
    {
        ret.set_float(Math.sin(cr.to_radians(x)));
    };
    SysExps.prototype.cos = function(ret, x)
    {
        ret.set_float(Math.cos(cr.to_radians(x)));
    };
    SysExps.prototype.tan = function(ret, x)
    {
        ret.set_float(Math.tan(cr.to_radians(x)));
    };
    SysExps.prototype.asin = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.asin(x)));
    };
    SysExps.prototype.acos = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.acos(x)));
    };
    SysExps.prototype.atan = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.atan(x)));
    };
    SysExps.prototype.exp = function(ret, x)
    {
        ret.set_float(Math.exp(x));
    };
    SysExps.prototype.ln = function(ret, x)
    {
        ret.set_float(Math.log(x));
    };
    SysExps.prototype.log10 = function(ret, x)
    {
        ret.set_float(Math.log(x) / Math.LN10);
    };
    SysExps.prototype.max = function(ret)
    {
		var max_ = arguments[1];
		if (typeof max_ !== "number")
			max_ = 0;
		var i, len, a;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			a = arguments[i];
			if (typeof a !== "number")
				continue;		// ignore non-numeric types
			if (max_ < a)
				max_ = a;
		}
		ret.set_float(max_);
    };
    SysExps.prototype.min = function(ret)
    {
        var min_ = arguments[1];
		if (typeof min_ !== "number")
			min_ = 0;
		var i, len, a;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			a = arguments[i];
			if (typeof a !== "number")
				continue;		// ignore non-numeric types
			if (min_ > a)
				min_ = a;
		}
		ret.set_float(min_);
    };
    SysExps.prototype.dt = function(ret)
    {
        ret.set_float(this.runtime.dt);
    };
    SysExps.prototype.timescale = function(ret)
    {
        ret.set_float(this.runtime.timescale);
    };
    SysExps.prototype.wallclocktime = function(ret)
    {
        ret.set_float((Date.now() - this.runtime.start_time) / 1000.0);
    };
    SysExps.prototype.time = function(ret)
    {
        ret.set_float(this.runtime.kahanTime.sum);
    };
    SysExps.prototype.tickcount = function(ret)
    {
        ret.set_int(this.runtime.tickcount);
    };
    SysExps.prototype.objectcount = function(ret)
    {
        ret.set_int(this.runtime.objectcount);
    };
    SysExps.prototype.fps = function(ret)
    {
        ret.set_int(this.runtime.fps);
    };
    SysExps.prototype.loopindex = function(ret, name_)
    {
		var loop, i, len;
        if (!this.runtime.loop_stack.length)
        {
            ret.set_int(0);
            return;
        }
        if (name_)
        {
            for (i = this.runtime.loop_stack_index; i >= 0; --i)
            {
                loop = this.runtime.loop_stack[i];
                if (loop.name === name_)
                {
                    ret.set_int(loop.index);
                    return;
                }
            }
            ret.set_int(0);
        }
        else
        {
			loop = this.runtime.getCurrentLoop();
			ret.set_int(loop ? loop.index : -1);
        }
    };
    SysExps.prototype.distance = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.distanceTo(x1, y1, x2, y2));
    };
    SysExps.prototype.angle = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.to_degrees(cr.angleTo(x1, y1, x2, y2)));
    };
    SysExps.prototype.scrollx = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollX);
    };
    SysExps.prototype.scrolly = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollY);
    };
    SysExps.prototype.newline = function(ret)
    {
        ret.set_string("\n");
    };
    SysExps.prototype.lerp = function(ret, a, b, x)
    {
        ret.set_float(cr.lerp(a, b, x));
    };
	SysExps.prototype.qarp = function(ret, a, b, c, x)
    {
        ret.set_float(cr.qarp(a, b, c, x));
    };
	SysExps.prototype.cubic = function(ret, a, b, c, d, x)
    {
        ret.set_float(cr.cubic(a, b, c, d, x));
    };
	SysExps.prototype.cosp = function(ret, a, b, x)
    {
        ret.set_float(cr.cosp(a, b, x));
    };
    SysExps.prototype.windowwidth = function(ret)
    {
        ret.set_int(this.runtime.width);
    };
    SysExps.prototype.windowheight = function(ret)
    {
        ret.set_int(this.runtime.height);
    };
	SysExps.prototype.uppercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toUpperCase() : "");
	};
	SysExps.prototype.lowercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toLowerCase() : "");
	};
	SysExps.prototype.clamp = function(ret, x, l, u)
	{
		if (x < l)
			ret.set_float(l);
		else if (x > u)
			ret.set_float(u);
		else
			ret.set_float(x);
	};
	SysExps.prototype.layerscale = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.scale);
	};
	SysExps.prototype.layeropacity = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.opacity * 100);
	};
	SysExps.prototype.layerscalerate = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.zoomRate);
	};
	SysExps.prototype.layerparallaxx = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxX * 100);
	};
	SysExps.prototype.layerparallaxy = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxY * 100);
	};
	SysExps.prototype.layerindex = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_int(-1);
		else
			ret.set_int(layer.index);
	};
	SysExps.prototype.layoutscale = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_float(this.runtime.running_layout.scale);
		else
			ret.set_float(0);
	};
	SysExps.prototype.layoutangle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.runtime.running_layout.angle));
	};
	SysExps.prototype.layerangle = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(cr.to_degrees(layer.angle));
	};
	SysExps.prototype.layoutwidth = function (ret)
	{
		ret.set_int(this.runtime.running_layout.width);
	};
	SysExps.prototype.layoutheight = function (ret)
	{
		ret.set_int(this.runtime.running_layout.height);
	};
	SysExps.prototype.find = function (ret, text, searchstr)
	{
		if (cr.is_string(text) && cr.is_string(searchstr))
			ret.set_int(text.search(new RegExp(cr.regexp_escape(searchstr), "i")));
		else
			ret.set_int(-1);
	};
	SysExps.prototype.findcase = function (ret, text, searchstr)
	{
		if (cr.is_string(text) && cr.is_string(searchstr))
			ret.set_int(text.search(new RegExp(cr.regexp_escape(searchstr), "")));
		else
			ret.set_int(-1);
	};
	SysExps.prototype.left = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(0, n) : "");
	};
	SysExps.prototype.right = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(text.length - n) : "");
	};
	SysExps.prototype.mid = function (ret, text, index_, length_)
	{
		ret.set_string(cr.is_string(text) ? text.substr(index_, length_) : "");
	};
	SysExps.prototype.tokenat = function (ret, text, index_, sep)
	{
		if (cr.is_string(text) && cr.is_string(sep))
		{
			var arr = text.split(sep);
			var i = cr.floor(index_);
			if (i < 0 || i >= arr.length)
				ret.set_string("");
			else
				ret.set_string(arr[i]);
		}
		else
			ret.set_string("");
	};
	SysExps.prototype.tokencount = function (ret, text, sep)
	{
		if (cr.is_string(text) && text.length)
			ret.set_int(text.split(sep).length);
		else
			ret.set_int(0);
	};
	SysExps.prototype.replace = function (ret, text, find_, replace_)
	{
		if (cr.is_string(text) && cr.is_string(find_) && cr.is_string(replace_))
			ret.set_string(text.replace(new RegExp(cr.regexp_escape(find_), "gi"), replace_));
		else
			ret.set_string(cr.is_string(text) ? text : "");
	};
	SysExps.prototype.trim = function (ret, text)
	{
		ret.set_string(cr.is_string(text) ? text.trim() : "");
	};
	SysExps.prototype.pi = function (ret)
	{
		ret.set_float(cr.PI);
	};
	SysExps.prototype.layoutname = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_string(this.runtime.running_layout.name);
		else
			ret.set_string("");
	};
	SysExps.prototype.renderer = function (ret)
	{
		ret.set_string(this.runtime.gl ? "webgl" : "canvas2d");
	};
	SysExps.prototype.rendererdetail = function (ret)
	{
		ret.set_string(this.runtime.glUnmaskedRenderer);
	};
	SysExps.prototype.anglediff = function (ret, a, b)
	{
		ret.set_float(cr.to_degrees(cr.angleDiff(cr.to_radians(a), cr.to_radians(b))));
	};
	SysExps.prototype.choose = function (ret)
	{
		var index = cr.floor(Math.random() * (arguments.length - 1));
		ret.set_any(arguments[index + 1]);
	};
	SysExps.prototype.rgb = function (ret, r, g, b)
	{
		ret.set_int(cr.RGB(r, g, b));
	};
	SysExps.prototype.projectversion = function (ret)
	{
		ret.set_string(this.runtime.versionstr);
	};
	SysExps.prototype.projectname = function (ret)
	{
		ret.set_string(this.runtime.projectName);
	};
	SysExps.prototype.anglelerp = function (ret, a, b, x)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			ret.set_float(cr.to_clamped_degrees(a + diff * x));
		}
		else
		{
			ret.set_float(cr.to_clamped_degrees(a - diff * x));
		}
	};
	SysExps.prototype.anglerotate = function (ret, a, b, c)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		c = cr.to_radians(c);
		ret.set_float(cr.to_clamped_degrees(cr.angleRotate(a, b, c)));
	};
	SysExps.prototype.zeropad = function (ret, n, d)
	{
		var s = (n < 0 ? "-" : "");
		if (n < 0) n = -n;
		var zeroes = d - n.toString().length;
		for (var i = 0; i < zeroes; i++)
			s += "0";
		ret.set_string(s + n.toString());
	};
	SysExps.prototype.cpuutilisation = function (ret)
	{
		ret.set_float(this.runtime.cpuutilisation / 1000);
	};
	SysExps.prototype.viewportleft = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewLeft : 0);
	};
	SysExps.prototype.viewporttop = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewTop : 0);
	};
	SysExps.prototype.viewportright = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewRight : 0);
	};
	SysExps.prototype.viewportbottom = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewBottom : 0);
	};
	SysExps.prototype.loadingprogress = function (ret)
	{
		ret.set_float(this.runtime.loadingprogress);
	};
	SysExps.prototype.unlerp = function(ret, a, b, y)
    {
        ret.set_float(cr.unlerp(a, b, y));
    };
	SysExps.prototype.canvassnapshot = function (ret)
	{
		ret.set_string(this.runtime.snapshotData);
	};
	SysExps.prototype.urlencode = function (ret, s)
	{
		ret.set_string(encodeURIComponent(s));
	};
	SysExps.prototype.urldecode = function (ret, s)
	{
		ret.set_string(decodeURIComponent(s));
	};
	SysExps.prototype.canvastolayerx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, true) : 0);
	};
	SysExps.prototype.canvastolayery = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, false) : 0);
	};
	SysExps.prototype.layertocanvasx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, true) : 0);
	};
	SysExps.prototype.layertocanvasy = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, false) : 0);
	};
	SysExps.prototype.savestatejson = function (ret)
	{
		ret.set_string(this.runtime.lastSaveJson);
	};
	SysExps.prototype.imagememoryusage = function (ret)
	{
		if (this.runtime.glwrap)
			ret.set_float(Math.round(100 * this.runtime.glwrap.estimateVRAM() / (1024 * 1024)) / 100);
		else
			ret.set_float(0);
	};
	SysExps.prototype.regexsearch = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_int(str_ ? str_.search(regex) : -1);
	};
	SysExps.prototype.regexreplace = function (ret, str_, regex_, flags_, replace_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_string(str_ ? str_.replace(regex, replace_) : "");
	};
	var regexMatches = [];
	var lastMatchesStr = "";
	var lastMatchesRegex = "";
	var lastMatchesFlags = "";
	function updateRegexMatches(str_, regex_, flags_)
	{
		if (str_ === lastMatchesStr && regex_ === lastMatchesRegex && flags_ === lastMatchesFlags)
			return;
		var regex = getRegex(regex_, flags_);
		regexMatches = str_.match(regex);
		lastMatchesStr = str_;
		lastMatchesRegex = regex_;
		lastMatchesFlags = flags_;
	};
	SysExps.prototype.regexmatchcount = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		ret.set_int(regexMatches ? regexMatches.length : 0);
	};
	SysExps.prototype.regexmatchat = function (ret, str_, regex_, flags_, index_)
	{
		index_ = Math.floor(index_);
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		if (!regexMatches || index_ < 0 || index_ >= regexMatches.length)
			ret.set_string("");
		else
			ret.set_string(regexMatches[index_]);
	};
	SysExps.prototype.infinity = function (ret)
	{
		ret.set_float(Infinity);
	};
	SysExps.prototype.setbit = function (ret, n, b, v)
	{
		n = n | 0;
		b = b | 0;
		v = (v !== 0 ? 1 : 0);
		ret.set_int((n & ~(1 << b)) | (v << b));
	};
	SysExps.prototype.togglebit = function (ret, n, b)
	{
		n = n | 0;
		b = b | 0;
		ret.set_int(n ^ (1 << b));
	};
	SysExps.prototype.getbit = function (ret, n, b)
	{
		n = n | 0;
		b = b | 0;
		ret.set_int((n & (1 << b)) ? 1 : 0);
	};
	SysExps.prototype.originalwindowwidth = function (ret)
	{
		ret.set_int(this.runtime.original_width);
	};
	SysExps.prototype.originalwindowheight = function (ret)
	{
		ret.set_int(this.runtime.original_height);
	};
	sysProto.exps = new SysExps();
	sysProto.runWaits = function ()
	{
		var i, j, len, w, k, s, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		for (i = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			if (w.time === -1)		// signalled wait
			{
				if (!w.signalled)
					continue;		// not yet signalled
			}
			else					// timer wait
			{
				if (w.time > this.runtime.kahanTime.sum)
					continue;		// timer not yet expired
			}
			evinfo.current_event = w.ev;
			evinfo.actindex = w.actindex;
			evinfo.cndindex = 0;
			for (k in w.sols)
			{
				if (w.sols.hasOwnProperty(k))
				{
					s = this.runtime.types_by_index[parseInt(k, 10)].getCurrentSol();
					ss = w.sols[k];
					s.select_all = ss.sa;
					cr.shallowAssignArray(s.instances, ss.insts);
					freeSolStateObject(ss);
				}
			}
			w.ev.resume_actions_and_subevents();
			this.runtime.clearSol(w.solModifiers);
			w.deleteme = true;
		}
		for (i = 0, j = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			this.waits[j] = w;
			if (w.deleteme)
				freeWaitObject(w);
			else
				j++;
		}
		cr.truncateArray(this.waits, j);
	};
}());
;
(function () {
	cr.add_common_aces = function (m, pluginProto)
	{
		var singleglobal_ = m[1];
		var position_aces = m[3];
		var size_aces = m[4];
		var angle_aces = m[5];
		var appearance_aces = m[6];
		var zorder_aces = m[7];
		var effects_aces = m[8];
		if (!pluginProto.cnds)
			pluginProto.cnds = {};
		if (!pluginProto.acts)
			pluginProto.acts = {};
		if (!pluginProto.exps)
			pluginProto.exps = {};
		var cnds = pluginProto.cnds;
		var acts = pluginProto.acts;
		var exps = pluginProto.exps;
		if (position_aces)
		{
			cnds.CompareX = function (cmp, x)
			{
				return cr.do_cmp(this.x, cmp, x);
			};
			cnds.CompareY = function (cmp, y)
			{
				return cr.do_cmp(this.y, cmp, y);
			};
			cnds.IsOnScreen = function ()
			{
				var layer = this.layer;
				this.update_bbox();
				var bbox = this.bbox;
				return !(bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom);
			};
			cnds.IsOutsideLayout = function ()
			{
				this.update_bbox();
				var bbox = this.bbox;
				var layout = this.runtime.running_layout;
				return (bbox.right < 0 || bbox.bottom < 0 || bbox.left > layout.width || bbox.top > layout.height);
			};
			cnds.PickDistance = function (which, x, y)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var dist = cr.distanceTo(inst.x, inst.y, x, y);
				var i, len, d;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					d = cr.distanceTo(inst.x, inst.y, x, y);
					if ((which === 0 && d < dist) || (which === 1 && d > dist))
					{
						dist = d;
						pickme = inst;
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			acts.SetX = function (x)
			{
				if (this.x !== x)
				{
					this.x = x;
					this.set_bbox_changed();
				}
			};
			acts.SetY = function (y)
			{
				if (this.y !== y)
				{
					this.y = y;
					this.set_bbox_changed();
				}
			};
			acts.SetPos = function (x, y)
			{
				if (this.x !== x || this.y !== y)
				{
					this.x = x;
					this.y = y;
					this.set_bbox_changed();
				}
			};
			acts.SetPosToObject = function (obj, imgpt)
			{
				var inst = obj.getPairedInstance(this);
				if (!inst)
					return;
				var newx, newy;
				if (inst.getImagePoint)
				{
					newx = inst.getImagePoint(imgpt, true);
					newy = inst.getImagePoint(imgpt, false);
				}
				else
				{
					newx = inst.x;
					newy = inst.y;
				}
				if (this.x !== newx || this.y !== newy)
				{
					this.x = newx;
					this.y = newy;
					this.set_bbox_changed();
				}
			};
			acts.MoveForward = function (dist)
			{
				if (dist !== 0)
				{
					this.x += Math.cos(this.angle) * dist;
					this.y += Math.sin(this.angle) * dist;
					this.set_bbox_changed();
				}
			};
			acts.MoveAtAngle = function (a, dist)
			{
				if (dist !== 0)
				{
					this.x += Math.cos(cr.to_radians(a)) * dist;
					this.y += Math.sin(cr.to_radians(a)) * dist;
					this.set_bbox_changed();
				}
			};
			exps.X = function (ret)
			{
				ret.set_float(this.x);
			};
			exps.Y = function (ret)
			{
				ret.set_float(this.y);
			};
			exps.dt = function (ret)
			{
				ret.set_float(this.runtime.getDt(this));
			};
		}
		if (size_aces)
		{
			cnds.CompareWidth = function (cmp, w)
			{
				return cr.do_cmp(this.width, cmp, w);
			};
			cnds.CompareHeight = function (cmp, h)
			{
				return cr.do_cmp(this.height, cmp, h);
			};
			acts.SetWidth = function (w)
			{
				if (this.width !== w)
				{
					this.width = w;
					this.set_bbox_changed();
				}
			};
			acts.SetHeight = function (h)
			{
				if (this.height !== h)
				{
					this.height = h;
					this.set_bbox_changed();
				}
			};
			acts.SetSize = function (w, h)
			{
				if (this.width !== w || this.height !== h)
				{
					this.width = w;
					this.height = h;
					this.set_bbox_changed();
				}
			};
			exps.Width = function (ret)
			{
				ret.set_float(this.width);
			};
			exps.Height = function (ret)
			{
				ret.set_float(this.height);
			};
			exps.BBoxLeft = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.left);
			};
			exps.BBoxTop = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.top);
			};
			exps.BBoxRight = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.right);
			};
			exps.BBoxBottom = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.bottom);
			};
		}
		if (angle_aces)
		{
			cnds.AngleWithin = function (within, a)
			{
				return cr.angleDiff(this.angle, cr.to_radians(a)) <= cr.to_radians(within);
			};
			cnds.IsClockwiseFrom = function (a)
			{
				return cr.angleClockwise(this.angle, cr.to_radians(a));
			};
			cnds.IsBetweenAngles = function (a, b)
			{
				var lower = cr.to_clamped_radians(a);
				var upper = cr.to_clamped_radians(b);
				var angle = cr.clamp_angle(this.angle);
				var obtuse = (!cr.angleClockwise(upper, lower));
				if (obtuse)
					return !(!cr.angleClockwise(angle, lower) && cr.angleClockwise(angle, upper));
				else
					return cr.angleClockwise(angle, lower) && !cr.angleClockwise(angle, upper);
			};
			acts.SetAngle = function (a)
			{
				var newangle = cr.to_radians(cr.clamp_angle_degrees(a));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.RotateClockwise = function (a)
			{
				if (a !== 0 && !isNaN(a))
				{
					this.angle += cr.to_radians(a);
					this.angle = cr.clamp_angle(this.angle);
					this.set_bbox_changed();
				}
			};
			acts.RotateCounterclockwise = function (a)
			{
				if (a !== 0 && !isNaN(a))
				{
					this.angle -= cr.to_radians(a);
					this.angle = cr.clamp_angle(this.angle);
					this.set_bbox_changed();
				}
			};
			acts.RotateTowardAngle = function (amt, target)
			{
				var newangle = cr.angleRotate(this.angle, cr.to_radians(target), cr.to_radians(amt));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.RotateTowardPosition = function (amt, x, y)
			{
				var dx = x - this.x;
				var dy = y - this.y;
				var target = Math.atan2(dy, dx);
				var newangle = cr.angleRotate(this.angle, target, cr.to_radians(amt));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.SetTowardPosition = function (x, y)
			{
				var dx = x - this.x;
				var dy = y - this.y;
				var newangle = Math.atan2(dy, dx);
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			exps.Angle = function (ret)
			{
				ret.set_float(cr.to_clamped_degrees(this.angle));
			};
		}
		if (!singleglobal_)
		{
			cnds.CompareInstanceVar = function (iv, cmp, val)
			{
				return cr.do_cmp(this.instance_vars[iv], cmp, val);
			};
			cnds.IsBoolInstanceVarSet = function (iv)
			{
				return this.instance_vars[iv];
			};
			cnds.PickInstVarHiLow = function (which, iv)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var val = inst.instance_vars[iv];
				var i, len, v;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					v = inst.instance_vars[iv];
					if ((which === 0 && v < val) || (which === 1 && v > val))
					{
						val = v;
						pickme = inst;
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			cnds.PickByUID = function (u)
			{
				var i, len, j, inst, families, instances, sol;
				var cnd = this.runtime.getCurrentCondition();
				if (cnd.inverted)
				{
					sol = this.getCurrentSol();
					if (sol.select_all)
					{
						sol.select_all = false;
						cr.clearArray(sol.instances);
						cr.clearArray(sol.else_instances);
						instances = this.instances;
						for (i = 0, len = instances.length; i < len; i++)
						{
							inst = instances[i];
							if (inst.uid === u)
								sol.else_instances.push(inst);
							else
								sol.instances.push(inst);
						}
						this.applySolToContainer();
						return !!sol.instances.length;
					}
					else
					{
						for (i = 0, j = 0, len = sol.instances.length; i < len; i++)
						{
							inst = sol.instances[i];
							sol.instances[j] = inst;
							if (inst.uid === u)
							{
								sol.else_instances.push(inst);
							}
							else
								j++;
						}
						cr.truncateArray(sol.instances, j);
						this.applySolToContainer();
						return !!sol.instances.length;
					}
				}
				else
				{
					inst = this.runtime.getObjectByUID(u);
					if (!inst)
						return false;
					sol = this.getCurrentSol();
					if (!sol.select_all && sol.instances.indexOf(inst) === -1)
						return false;		// not picked
					if (this.is_family)
					{
						families = inst.type.families;
						for (i = 0, len = families.length; i < len; i++)
						{
							if (families[i] === this)
							{
								sol.pick_one(inst);
								this.applySolToContainer();
								return true;
							}
						}
					}
					else if (inst.type === this)
					{
						sol.pick_one(inst);
						this.applySolToContainer();
						return true;
					}
					return false;
				}
			};
			cnds.OnCreated = function ()
			{
				return true;
			};
			cnds.OnDestroyed = function ()
			{
				return true;
			};
			acts.SetInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] = val;
					else
						myinstvars[iv] = parseFloat(val);
				}
				else if (cr.is_string(myinstvars[iv]))
				{
					if (cr.is_string(val))
						myinstvars[iv] = val;
					else
						myinstvars[iv] = val.toString();
				}
				else
;
			};
			acts.AddInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] += val;
					else
						myinstvars[iv] += parseFloat(val);
				}
				else if (cr.is_string(myinstvars[iv]))
				{
					if (cr.is_string(val))
						myinstvars[iv] += val;
					else
						myinstvars[iv] += val.toString();
				}
				else
;
			};
			acts.SubInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] -= val;
					else
						myinstvars[iv] -= parseFloat(val);
				}
				else
;
			};
			acts.SetBoolInstanceVar = function (iv, val)
			{
				this.instance_vars[iv] = val ? 1 : 0;
			};
			acts.ToggleBoolInstanceVar = function (iv)
			{
				this.instance_vars[iv] = 1 - this.instance_vars[iv];
			};
			acts.Destroy = function ()
			{
				this.runtime.DestroyInstance(this);
			};
			if (!acts.LoadFromJsonString)
			{
				acts.LoadFromJsonString = function (str_)
				{
					var o, i, len, binst;
					try {
						o = JSON.parse(str_);
					}
					catch (e) {
						return;
					}
					this.runtime.loadInstanceFromJSON(this, o, true);
					if (this.afterLoad)
						this.afterLoad();
					if (this.behavior_insts)
					{
						for (i = 0, len = this.behavior_insts.length; i < len; ++i)
						{
							binst = this.behavior_insts[i];
							if (binst.afterLoad)
								binst.afterLoad();
						}
					}
				};
			}
			exps.Count = function (ret)
			{
				var count = ret.object_class.instances.length;
				var i, len, inst;
				for (i = 0, len = this.runtime.createRow.length; i < len; i++)
				{
					inst = this.runtime.createRow[i];
					if (ret.object_class.is_family)
					{
						if (inst.type.families.indexOf(ret.object_class) >= 0)
							count++;
					}
					else
					{
						if (inst.type === ret.object_class)
							count++;
					}
				}
				ret.set_int(count);
			};
			exps.PickedCount = function (ret)
			{
				ret.set_int(ret.object_class.getCurrentSol().getObjects().length);
			};
			exps.UID = function (ret)
			{
				ret.set_int(this.uid);
			};
			exps.IID = function (ret)
			{
				ret.set_int(this.get_iid());
			};
			if (!exps.AsJSON)
			{
				exps.AsJSON = function (ret)
				{
					ret.set_string(JSON.stringify(this.runtime.saveInstanceToJSON(this, true)));
				};
			}
		}
		if (appearance_aces)
		{
			cnds.IsVisible = function ()
			{
				return this.visible;
			};
			acts.SetVisible = function (v)
			{
				if (!v !== !this.visible)
				{
					this.visible = !!v;
					this.runtime.redraw = true;
				}
			};
			cnds.CompareOpacity = function (cmp, x)
			{
				return cr.do_cmp(cr.round6dp(this.opacity * 100), cmp, x);
			};
			acts.SetOpacity = function (x)
			{
				var new_opacity = x / 100.0;
				if (new_opacity < 0)
					new_opacity = 0;
				else if (new_opacity > 1)
					new_opacity = 1;
				if (new_opacity !== this.opacity)
				{
					this.opacity = new_opacity;
					this.runtime.redraw = true;
				}
			};
			exps.Opacity = function (ret)
			{
				ret.set_float(cr.round6dp(this.opacity * 100.0));
			};
		}
		if (zorder_aces)
		{
			cnds.IsOnLayer = function (layer_)
			{
				if (!layer_)
					return false;
				return this.layer === layer_;
			};
			cnds.PickTopBottom = function (which_)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var i, len;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					if (which_ === 0)
					{
						if (inst.layer.index > pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() > pickme.get_zindex()))
						{
							pickme = inst;
						}
					}
					else
					{
						if (inst.layer.index < pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() < pickme.get_zindex()))
						{
							pickme = inst;
						}
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			acts.MoveToTop = function ()
			{
				var layer = this.layer;
				var layer_instances = layer.instances;
				if (layer_instances.length && layer_instances[layer_instances.length - 1] === this)
					return;		// is already at top
				layer.removeFromInstanceList(this, false);
				layer.appendToInstanceList(this, false);
				this.runtime.redraw = true;
			};
			acts.MoveToBottom = function ()
			{
				var layer = this.layer;
				var layer_instances = layer.instances;
				if (layer_instances.length && layer_instances[0] === this)
					return;		// is already at bottom
				layer.removeFromInstanceList(this, false);
				layer.prependToInstanceList(this, false);
				this.runtime.redraw = true;
			};
			acts.MoveToLayer = function (layerMove)
			{
				if (!layerMove || layerMove == this.layer)
					return;
				this.layer.removeFromInstanceList(this, true);
				this.layer = layerMove;
				layerMove.appendToInstanceList(this, true);
				this.runtime.redraw = true;
			};
			acts.ZMoveToObject = function (where_, obj_)
			{
				var isafter = (where_ === 0);
				if (!obj_)
					return;
				var other = obj_.getFirstPicked(this);
				if (!other || other.uid === this.uid)
					return;
				if (this.layer.index !== other.layer.index)
				{
					this.layer.removeFromInstanceList(this, true);
					this.layer = other.layer;
					other.layer.appendToInstanceList(this, true);
				}
				this.layer.moveInstanceAdjacent(this, other, isafter);
				this.runtime.redraw = true;
			};
			exps.LayerNumber = function (ret)
			{
				ret.set_int(this.layer.number);
			};
			exps.LayerName = function (ret)
			{
				ret.set_string(this.layer.name);
			};
			exps.ZIndex = function (ret)
			{
				ret.set_int(this.get_zindex());
			};
		}
		if (effects_aces)
		{
			acts.SetEffectEnabled = function (enable_, effectname_)
			{
				if (!this.runtime.glwrap)
					return;
				var i = this.type.getEffectIndexByName(effectname_);
				if (i < 0)
					return;		// effect name not found
				var enable = (enable_ === 1);
				if (this.active_effect_flags[i] === enable)
					return;		// no change
				this.active_effect_flags[i] = enable;
				this.updateActiveEffects();
				this.runtime.redraw = true;
			};
			acts.SetEffectParam = function (effectname_, index_, value_)
			{
				if (!this.runtime.glwrap)
					return;
				var i = this.type.getEffectIndexByName(effectname_);
				if (i < 0)
					return;		// effect name not found
				var et = this.type.effect_types[i];
				var params = this.effect_params[i];
				index_ = Math.floor(index_);
				if (index_ < 0 || index_ >= params.length)
					return;		// effect index out of bounds
				if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
					value_ /= 100.0;
				if (params[index_] === value_)
					return;		// no change
				params[index_] = value_;
				if (et.active)
					this.runtime.redraw = true;
			};
		}
	};
	cr.set_bbox_changed = function ()
	{
		this.bbox_changed = true;      		// will recreate next time box requested
		this.cell_changed = true;
		this.type.any_cell_changed = true;	// avoid unnecessary updateAllBBox() calls
		this.runtime.redraw = true;     	// assume runtime needs to redraw
		var i, len, callbacks = this.bbox_changed_callbacks;
		for (i = 0, len = callbacks.length; i < len; ++i)
		{
			callbacks[i](this);
		}
		if (this.layer.useRenderCells)
			this.update_bbox();
	};
	cr.add_bbox_changed_callback = function (f)
	{
		if (f)
		{
			this.bbox_changed_callbacks.push(f);
		}
	};
	cr.update_bbox = function ()
	{
		if (!this.bbox_changed)
			return;                 // bounding box not changed
		var bbox = this.bbox;
		var bquad = this.bquad;
		bbox.set(this.x, this.y, this.x + this.width, this.y + this.height);
		bbox.offset(-this.hotspotX * this.width, -this.hotspotY * this.height);
		if (!this.angle)
		{
			bquad.set_from_rect(bbox);    // make bounding quad from box
		}
		else
		{
			bbox.offset(-this.x, -this.y);       			// translate to origin
			bquad.set_from_rotated_rect(bbox, this.angle);	// rotate around origin
			bquad.offset(this.x, this.y);      				// translate back to original position
			bquad.bounding_box(bbox);
		}
		bbox.normalize();
		this.bbox_changed = false;  // bounding box up to date
		this.update_render_cell();
	};
	var tmprc = new cr.rect(0, 0, 0, 0);
	cr.update_render_cell = function ()
	{
		if (!this.layer.useRenderCells)
			return;
		var mygrid = this.layer.render_grid;
		var bbox = this.bbox;
		tmprc.set(mygrid.XToCell(bbox.left), mygrid.YToCell(bbox.top), mygrid.XToCell(bbox.right), mygrid.YToCell(bbox.bottom));
		if (this.rendercells.equals(tmprc))
			return;
		if (this.rendercells.right < this.rendercells.left)
			mygrid.update(this, null, tmprc);		// first insertion with invalid rect: don't provide old range
		else
			mygrid.update(this, this.rendercells, tmprc);
		this.rendercells.copy(tmprc);
		this.layer.render_list_stale = true;
	};
	cr.update_collision_cell = function ()
	{
		if (!this.cell_changed || !this.collisionsEnabled)
			return;
		this.update_bbox();
		var mygrid = this.type.collision_grid;
		var bbox = this.bbox;
		tmprc.set(mygrid.XToCell(bbox.left), mygrid.YToCell(bbox.top), mygrid.XToCell(bbox.right), mygrid.YToCell(bbox.bottom));
		if (this.collcells.equals(tmprc))
			return;
		if (this.collcells.right < this.collcells.left)
			mygrid.update(this, null, tmprc);		// first insertion with invalid rect: don't provide old range
		else
			mygrid.update(this, this.collcells, tmprc);
		this.collcells.copy(tmprc);
		this.cell_changed = false;
	};
	cr.inst_contains_pt = function (x, y)
	{
		if (!this.bbox.contains_pt(x, y))
			return false;
		if (!this.bquad.contains_pt(x, y))
			return false;
		if (this.tilemap_exists)
			return this.testPointOverlapTile(x, y);
		if (this.collision_poly && !this.collision_poly.is_empty())
		{
			this.collision_poly.cache_poly(this.width, this.height, this.angle);
			return this.collision_poly.contains_pt(x - this.x, y - this.y);
		}
		else
			return true;
	};
	cr.inst_get_iid = function ()
	{
		this.type.updateIIDs();
		return this.iid;
	};
	cr.inst_get_zindex = function ()
	{
		this.layer.updateZIndices();
		return this.zindex;
	};
	cr.inst_updateActiveEffects = function ()
	{
		cr.clearArray(this.active_effect_types);
		var i, len, et;
		var preserves_opaqueness = true;
		for (i = 0, len = this.active_effect_flags.length; i < len; i++)
		{
			if (this.active_effect_flags[i])
			{
				et = this.type.effect_types[i];
				this.active_effect_types.push(et);
				if (!et.preservesOpaqueness)
					preserves_opaqueness = false;
			}
		}
		this.uses_shaders = !!this.active_effect_types.length;
		this.shaders_preserve_opaqueness = preserves_opaqueness;
	};
	cr.inst_toString = function ()
	{
		return "Inst" + this.puid;
	};
	cr.type_getFirstPicked = function (frominst)
	{
		if (frominst && frominst.is_contained && frominst.type != this)
		{
			var i, len, s;
			for (i = 0, len = frominst.siblings.length; i < len; i++)
			{
				s = frominst.siblings[i];
				if (s.type == this)
					return s;
			}
		}
		var instances = this.getCurrentSol().getObjects();
		if (instances.length)
			return instances[0];
		else
			return null;
	};
	cr.type_getPairedInstance = function (inst)
	{
		var instances = this.getCurrentSol().getObjects();
		if (instances.length)
			return instances[inst.get_iid() % instances.length];
		else
			return null;
	};
	cr.type_updateIIDs = function ()
	{
		if (!this.stale_iids || this.is_family)
			return;		// up to date or is family - don't want family to overwrite IIDs
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].iid = i;
		var next_iid = i;
		var createRow = this.runtime.createRow;
		for (i = 0, len = createRow.length; i < len; ++i)
		{
			if (createRow[i].type === this)
				createRow[i].iid = next_iid++;
		}
		this.stale_iids = false;
	};
	cr.type_getInstanceByIID = function (i)
	{
		if (i < this.instances.length)
			return this.instances[i];
		i -= this.instances.length;
		var createRow = this.runtime.createRow;
		var j, lenj;
		for (j = 0, lenj = createRow.length; j < lenj; ++j)
		{
			if (createRow[j].type === this)
			{
				if (i === 0)
					return createRow[j];
				--i;
			}
		}
;
		return null;
	};
	cr.type_getCurrentSol = function ()
	{
		return this.solstack[this.cur_sol];
	};
	cr.type_pushCleanSol = function ()
	{
		this.cur_sol++;
		if (this.cur_sol === this.solstack.length)
		{
			this.solstack.push(new cr.selection(this));
		}
		else
		{
			this.solstack[this.cur_sol].select_all = true;  // else clear next SOL
			cr.clearArray(this.solstack[this.cur_sol].else_instances);
		}
	};
	cr.type_pushCopySol = function ()
	{
		this.cur_sol++;
		if (this.cur_sol === this.solstack.length)
			this.solstack.push(new cr.selection(this));
		var clonesol = this.solstack[this.cur_sol];
		var prevsol = this.solstack[this.cur_sol - 1];
		if (prevsol.select_all)
		{
			clonesol.select_all = true;
			cr.clearArray(clonesol.else_instances);
		}
		else
		{
			clonesol.select_all = false;
			cr.shallowAssignArray(clonesol.instances, prevsol.instances);
			cr.shallowAssignArray(clonesol.else_instances, prevsol.else_instances);
		}
	};
	cr.type_popSol = function ()
	{
;
		this.cur_sol--;
	};
	cr.type_getBehaviorByName = function (behname)
	{
		var i, len, j, lenj, f, index = 0;
		if (!this.is_family)
		{
			for (i = 0, len = this.families.length; i < len; i++)
			{
				f = this.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (behname === f.behaviors[j].name)
					{
						this.extra["lastBehIndex"] = index;
						return f.behaviors[j];
					}
					index++;
				}
			}
		}
		for (i = 0, len = this.behaviors.length; i < len; i++) {
			if (behname === this.behaviors[i].name)
			{
				this.extra["lastBehIndex"] = index;
				return this.behaviors[i];
			}
			index++;
		}
		return null;
	};
	cr.type_getBehaviorIndexByName = function (behname)
	{
		var b = this.getBehaviorByName(behname);
		if (b)
			return this.extra["lastBehIndex"];
		else
			return -1;
	};
	cr.type_getEffectIndexByName = function (name_)
	{
		var i, len;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			if (this.effect_types[i].name === name_)
				return i;
		}
		return -1;
	};
	cr.type_applySolToContainer = function ()
	{
		if (!this.is_contained || this.is_family)
			return;
		var i, len, j, lenj, t, sol, sol2;
		this.updateIIDs();
		sol = this.getCurrentSol();
		var select_all = sol.select_all;
		var es = this.runtime.getCurrentEventStack();
		var orblock = es && es.current_event && es.current_event.orblock;
		for (i = 0, len = this.container.length; i < len; i++)
		{
			t = this.container[i];
			if (t === this)
				continue;
			t.updateIIDs();
			sol2 = t.getCurrentSol();
			sol2.select_all = select_all;
			if (!select_all)
			{
				cr.clearArray(sol2.instances);
				for (j = 0, lenj = sol.instances.length; j < lenj; ++j)
					sol2.instances[j] = t.getInstanceByIID(sol.instances[j].iid);
				if (orblock)
				{
					cr.clearArray(sol2.else_instances);
					for (j = 0, lenj = sol.else_instances.length; j < lenj; ++j)
						sol2.else_instances[j] = t.getInstanceByIID(sol.else_instances[j].iid);
				}
			}
		}
	};
	cr.type_toString = function ()
	{
		return "Type" + this.sid;
	};
	cr.do_cmp = function (x, cmp, y)
	{
		if (typeof x === "undefined" || typeof y === "undefined")
			return false;
		switch (cmp)
		{
			case 0:     // equal
				return x === y;
			case 1:     // not equal
				return x !== y;
			case 2:     // less
				return x < y;
			case 3:     // less/equal
				return x <= y;
			case 4:     // greater
				return x > y;
			case 5:     // greater/equal
				return x >= y;
			default:
;
				return false;
		}
	};
})();
cr.shaders = {};
cr.shaders["tint"] = {src: ["varying mediump vec2 vTex;",
"uniform lowp sampler2D samplerFront;",
"uniform lowp float red;",
"uniform lowp float green;",
"uniform lowp float blue;",
"void main(void)",
"{",
"lowp vec4 front = texture2D(samplerFront, vTex);",
"gl_FragColor = front * vec4(red, green, blue, 1.0);",
"}"
].join("\n"),
	extendBoxHorizontal: 0,
	extendBoxVertical: 0,
	crossSampling: false,
	preservesOpaqueness: true,
	animated: false,
	parameters: [["red", 0, 1], ["green", 0, 1], ["blue", 0, 1]] }
;
;
cr.plugins_.AJAX = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var isNWjs = false;
	var path = null;
	var fs = null;
	var nw_appfolder = "";
	var pluginProto = cr.plugins_.AJAX.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.lastData = "";
		this.curTag = "";
		this.progress = 0;
		this.timeout = -1;
		isNWjs = this.runtime.isNWjs;
		if (isNWjs)
		{
			path = require("path");
			fs = require("fs");
			var process = window["process"] || nw["process"];
			nw_appfolder = path["dirname"](process["execPath"]) + "\\";
		}
	};
	var instanceProto = pluginProto.Instance.prototype;
	var theInstance = null;
	window["C2_AJAX_DCSide"] = function (event_, tag_, param_)
	{
		if (!theInstance)
			return;
		if (event_ === "success")
		{
			theInstance.curTag = tag_;
			theInstance.lastData = param_;
			theInstance.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyComplete, theInstance);
			theInstance.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnComplete, theInstance);
		}
		else if (event_ === "error")
		{
			theInstance.curTag = tag_;
			theInstance.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyError, theInstance);
			theInstance.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnError, theInstance);
		}
		else if (event_ === "progress")
		{
			theInstance.progress = param_;
			theInstance.curTag = tag_;
			theInstance.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnProgress, theInstance);
		}
	};
	instanceProto.onCreate = function()
	{
		theInstance = this;
	};
	instanceProto.saveToJSON = function ()
	{
		return { "lastData": this.lastData };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.lastData = o["lastData"];
		this.curTag = "";
		this.progress = 0;
	};
	var next_request_headers = {};
	var next_override_mime = "";
	instanceProto.doRequest = function (tag_, url_, method_, data_)
	{
		if (this.runtime.isDirectCanvas)
		{
			AppMobi["webview"]["execute"]('C2_AJAX_WebSide("' + tag_ + '", "' + url_ + '", "' + method_ + '", ' + (data_ ? '"' + data_ + '"' : "null") + ');');
			return;
		}
		var self = this;
		var request = null;
		var doErrorFunc = function ()
		{
			self.curTag = tag_;
			self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyError, self);
			self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnError, self);
		};
		var errorFunc = function ()
		{
			if (isNWjs)
			{
				var filepath = nw_appfolder + url_;
				if (fs["existsSync"](filepath))
				{
					fs["readFile"](filepath, {"encoding": "utf8"}, function (err, data) {
						if (err)
						{
							doErrorFunc();
							return;
						}
						self.curTag = tag_;
						self.lastData = data.replace(/\r\n/g, "\n")
						self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyComplete, self);
						self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnComplete, self);
					});
				}
				else
					doErrorFunc();
			}
			else
				doErrorFunc();
		};
		var progressFunc = function (e)
		{
			if (!e["lengthComputable"])
				return;
			self.progress = e.loaded / e.total;
			self.curTag = tag_;
			self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnProgress, self);
		};
		try
		{
			if (this.runtime.isWindowsPhone8)
				request = new ActiveXObject("Microsoft.XMLHTTP");
			else
				request = new XMLHttpRequest();
			request.onreadystatechange = function()
			{
				if (request.readyState === 4)
				{
					self.curTag = tag_;
					if (request.responseText)
						self.lastData = request.responseText.replace(/\r\n/g, "\n");		// fix windows style line endings
					else
						self.lastData = "";
					if (request.status >= 400)
					{
						self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyError, self);
						self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnError, self);
					}
					else
					{
						if ((!isNWjs || self.lastData.length) && !(!isNWjs && request.status === 0 && !self.lastData.length))
						{
							self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyComplete, self);
							self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnComplete, self);
						}
					}
				}
			};
			if (!this.runtime.isWindowsPhone8)
			{
				request.onerror = errorFunc;
				request.ontimeout = errorFunc;
				request.onabort = errorFunc;
				request["onprogress"] = progressFunc;
			}
			request.open(method_, url_);
			if (!this.runtime.isWindowsPhone8)
			{
				if (this.timeout >= 0 && typeof request["timeout"] !== "undefined")
					request["timeout"] = this.timeout;
			}
			try {
				request.responseType = "text";
			} catch (e) {}
			if (data_)
			{
				if (request["setRequestHeader"] && !next_request_headers.hasOwnProperty("Content-Type"))
				{
					request["setRequestHeader"]("Content-Type", "application/x-www-form-urlencoded");
				}
			}
			if (request["setRequestHeader"])
			{
				var p;
				for (p in next_request_headers)
				{
					if (next_request_headers.hasOwnProperty(p))
					{
						try {
							request["setRequestHeader"](p, next_request_headers[p]);
						}
						catch (e) {}
					}
				}
				next_request_headers = {};
			}
			if (next_override_mime && request["overrideMimeType"])
			{
				try {
					request["overrideMimeType"](next_override_mime);
				}
				catch (e) {}
				next_override_mime = "";
			}
			if (data_)
				request.send(data_);
			else
				request.send();
		}
		catch (e)
		{
			errorFunc();
		}
	};
	function Cnds() {};
	Cnds.prototype.OnComplete = function (tag)
	{
		return cr.equals_nocase(tag, this.curTag);
	};
	Cnds.prototype.OnAnyComplete = function (tag)
	{
		return true;
	};
	Cnds.prototype.OnError = function (tag)
	{
		return cr.equals_nocase(tag, this.curTag);
	};
	Cnds.prototype.OnAnyError = function (tag)
	{
		return true;
	};
	Cnds.prototype.OnProgress = function (tag)
	{
		return cr.equals_nocase(tag, this.curTag);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Request = function (tag_, url_)
	{
		var self = this;
		if (this.runtime.isWKWebView && !this.runtime.isAbsoluteUrl(url_))
		{
			this.runtime.fetchLocalFileViaCordovaAsText(url_,
			function (str)
			{
				self.curTag = tag_;
				self.lastData = str.replace(/\r\n/g, "\n");		// fix windows style line endings
				self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyComplete, self);
				self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnComplete, self);
			},
			function (err)
			{
				self.curTag = tag_;
				self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyError, self);
				self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnError, self);
			});
		}
		else
		{
			this.doRequest(tag_, url_, "GET");
		}
	};
	Acts.prototype.RequestFile = function (tag_, file_)
	{
		var self = this;
		if (this.runtime.isWKWebView)
		{
			this.runtime.fetchLocalFileViaCordovaAsText(file_,
			function (str)
			{
				self.curTag = tag_;
				self.lastData = str.replace(/\r\n/g, "\n");		// fix windows style line endings
				self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyComplete, self);
				self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnComplete, self);
			},
			function (err)
			{
				self.curTag = tag_;
				self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnAnyError, self);
				self.runtime.trigger(cr.plugins_.AJAX.prototype.cnds.OnError, self);
			});
		}
		else
		{
			this.doRequest(tag_, file_, "GET");
		}
	};
	Acts.prototype.Post = function (tag_, url_, data_, method_)
	{
		this.doRequest(tag_, url_, method_, data_);
	};
	Acts.prototype.SetTimeout = function (t)
	{
		this.timeout = t * 1000;
	};
	Acts.prototype.SetHeader = function (n, v)
	{
		next_request_headers[n] = v;
	};
	Acts.prototype.OverrideMIMEType = function (m)
	{
		next_override_mime = m;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LastData = function (ret)
	{
		ret.set_string(this.lastData);
	};
	Exps.prototype.Progress = function (ret)
	{
		ret.set_float(this.progress);
	};
	Exps.prototype.Tag = function (ret)
	{
		ret.set_string(this.curTag);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Arr = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Arr.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var arrCache = [];
	function allocArray()
	{
		if (arrCache.length)
			return arrCache.pop();
		else
			return [];
	};
	if (!Array.isArray)
	{
		Array.isArray = function (vArg) {
			return Object.prototype.toString.call(vArg) === "[object Array]";
		};
	}
	function freeArray(a)
	{
		var i, len;
		for (i = 0, len = a.length; i < len; i++)
		{
			if (Array.isArray(a[i]))
				freeArray(a[i]);
		}
		cr.clearArray(a);
		arrCache.push(a);
	};
	instanceProto.onCreate = function()
	{
		this.cx = this.properties[0];
		this.cy = this.properties[1];
		this.cz = this.properties[2];
		if (!this.recycled)
			this.arr = allocArray();
		var a = this.arr;
		a.length = this.cx;
		var x, y, z;
		for (x = 0; x < this.cx; x++)
		{
			if (!a[x])
				a[x] = allocArray();
			a[x].length = this.cy;
			for (y = 0; y < this.cy; y++)
			{
				if (!a[x][y])
					a[x][y] = allocArray();
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = 0;
			}
		}
		this.forX = [];
		this.forY = [];
		this.forZ = [];
		this.forDepth = -1;
	};
	instanceProto.onDestroy = function ()
	{
		var x;
		for (x = 0; x < this.cx; x++)
			freeArray(this.arr[x]);		// will recurse down and recycle other arrays
		cr.clearArray(this.arr);
	};
	instanceProto.at = function (x, y, z)
	{
		x = Math.floor(x);
		y = Math.floor(y);
		z = Math.floor(z);
		if (isNaN(x) || x < 0 || x > this.cx - 1)
			return 0;
		if (isNaN(y) || y < 0 || y > this.cy - 1)
			return 0;
		if (isNaN(z) || z < 0 || z > this.cz - 1)
			return 0;
		return this.arr[x][y][z];
	};
	instanceProto.set = function (x, y, z, val)
	{
		x = Math.floor(x);
		y = Math.floor(y);
		z = Math.floor(z);
		if (isNaN(x) || x < 0 || x > this.cx - 1)
			return;
		if (isNaN(y) || y < 0 || y > this.cy - 1)
			return;
		if (isNaN(z) || z < 0 || z > this.cz - 1)
			return;
		this.arr[x][y][z] = val;
	};
	instanceProto.getAsJSON = function ()
	{
		return JSON.stringify({
			"c2array": true,
			"size": [this.cx, this.cy, this.cz],
			"data": this.arr
		});
	};
	instanceProto.saveToJSON = function ()
	{
		return {
			"size": [this.cx, this.cy, this.cz],
			"data": this.arr
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
		var sz = o["size"];
		this.cx = sz[0];
		this.cy = sz[1];
		this.cz = sz[2];
		this.arr = o["data"];
	};
	instanceProto.setSize = function (w, h, d)
	{
		if (w < 0) w = 0;
		if (h < 0) h = 0;
		if (d < 0) d = 0;
		if (this.cx === w && this.cy === h && this.cz === d)
			return;		// no change
		this.cx = w;
		this.cy = h;
		this.cz = d;
		var x, y, z;
		var a = this.arr;
		a.length = w;
		for (x = 0; x < this.cx; x++)
		{
			if (cr.is_undefined(a[x]))
				a[x] = allocArray();
			a[x].length = h;
			for (y = 0; y < this.cy; y++)
			{
				if (cr.is_undefined(a[x][y]))
					a[x][y] = allocArray();
				a[x][y].length = d;
				for (z = 0; z < this.cz; z++)
				{
					if (cr.is_undefined(a[x][y][z]))
						a[x][y][z] = 0;
				}
			}
		}
	};
	instanceProto.getForX = function ()
	{
		if (this.forDepth >= 0 && this.forDepth < this.forX.length)
			return this.forX[this.forDepth];
		else
			return 0;
	};
	instanceProto.getForY = function ()
	{
		if (this.forDepth >= 0 && this.forDepth < this.forY.length)
			return this.forY[this.forDepth];
		else
			return 0;
	};
	instanceProto.getForZ = function ()
	{
		if (this.forDepth >= 0 && this.forDepth < this.forZ.length)
			return this.forZ[this.forDepth];
		else
			return 0;
	};
	function Cnds() {};
	Cnds.prototype.CompareX = function (x, cmp, val)
	{
		return cr.do_cmp(this.at(x, 0, 0), cmp, val);
	};
	Cnds.prototype.CompareXY = function (x, y, cmp, val)
	{
		return cr.do_cmp(this.at(x, y, 0), cmp, val);
	};
	Cnds.prototype.CompareXYZ = function (x, y, z, cmp, val)
	{
		return cr.do_cmp(this.at(x, y, z), cmp, val);
	};
	instanceProto.doForEachTrigger = function (current_event)
	{
		this.runtime.pushCopySol(current_event.solModifiers);
		current_event.retrigger();
		this.runtime.popSol(current_event.solModifiers);
	};
	Cnds.prototype.ArrForEach = function (dims)
	{
        var current_event = this.runtime.getCurrentEventStack().current_event;
		this.forDepth++;
		var forDepth = this.forDepth;
		if (forDepth === this.forX.length)
		{
			this.forX.push(0);
			this.forY.push(0);
			this.forZ.push(0);
		}
		else
		{
			this.forX[forDepth] = 0;
			this.forY[forDepth] = 0;
			this.forZ[forDepth] = 0;
		}
		switch (dims) {
		case 0:
			for (this.forX[forDepth] = 0; this.forX[forDepth] < this.cx; this.forX[forDepth]++)
			{
				for (this.forY[forDepth] = 0; this.forY[forDepth] < this.cy; this.forY[forDepth]++)
				{
					for (this.forZ[forDepth] = 0; this.forZ[forDepth] < this.cz; this.forZ[forDepth]++)
					{
						this.doForEachTrigger(current_event);
					}
				}
			}
			break;
		case 1:
			for (this.forX[forDepth] = 0; this.forX[forDepth] < this.cx; this.forX[forDepth]++)
			{
				for (this.forY[forDepth] = 0; this.forY[forDepth] < this.cy; this.forY[forDepth]++)
				{
					this.doForEachTrigger(current_event);
				}
			}
			break;
		case 2:
			for (this.forX[forDepth] = 0; this.forX[forDepth] < this.cx; this.forX[forDepth]++)
			{
				this.doForEachTrigger(current_event);
			}
			break;
		}
		this.forDepth--;
		return false;
	};
	Cnds.prototype.CompareCurrent = function (cmp, val)
	{
		return cr.do_cmp(this.at(this.getForX(), this.getForY(), this.getForZ()), cmp, val);
	};
	Cnds.prototype.Contains = function(val)
	{
		var x, y, z;
		for (x = 0; x < this.cx; x++)
		{
			for (y = 0; y < this.cy; y++)
			{
				for (z = 0; z < this.cz; z++)
				{
					if (this.arr[x][y][z] === val)
						return true;
				}
			}
		}
		return false;
	};
	Cnds.prototype.IsEmpty = function ()
	{
		return this.cx === 0 || this.cy === 0 || this.cz === 0;
	};
	Cnds.prototype.CompareSize = function (axis, cmp, value)
	{
		var s = 0;
		switch (axis) {
		case 0:
			s = this.cx;
			break;
		case 1:
			s = this.cy;
			break;
		case 2:
			s = this.cz;
			break;
		}
		return cr.do_cmp(s, cmp, value);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Clear = function ()
	{
		var x, y, z;
		for (x = 0; x < this.cx; x++)
			for (y = 0; y < this.cy; y++)
				for (z = 0; z < this.cz; z++)
					this.arr[x][y][z] = 0;
	};
	Acts.prototype.SetSize = function (w, h, d)
	{
		this.setSize(w, h, d);
	};
	Acts.prototype.SetX = function (x, val)
	{
		this.set(x, 0, 0, val);
	};
	Acts.prototype.SetXY = function (x, y, val)
	{
		this.set(x, y, 0, val);
	};
	Acts.prototype.SetXYZ = function (x, y, z, val)
	{
		this.set(x, y, z, val);
	};
	Acts.prototype.Push = function (where, value, axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		switch (axis) {
		case 0:	// X axis
			if (where === 0)	// back
			{
				x = a.length;
				a.push(allocArray());
			}
			else				// front
			{
				x = 0;
				a.unshift(allocArray());
			}
			a[x].length = this.cy;
			for ( ; y < this.cy; y++)
			{
				a[x][y] = allocArray();
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cx++;
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
			{
				if (where === 0)	// back
				{
					y = a[x].length;
					a[x].push(allocArray());
				}
				else				// front
				{
					y = 0;
					a[x].unshift(allocArray());
				}
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cy++;
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					if (where === 0)	// back
					{
						a[x][y].push(value);
					}
					else				// front
					{
						a[x][y].unshift(value);
					}
				}
			}
			this.cz++;
			break;
		}
	};
	Acts.prototype.Pop = function (where, axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		switch (axis) {
		case 0:	// X axis
			if (this.cx === 0)
				break;
			if (where === 0)	// back
			{
				freeArray(a.pop());
			}
			else				// front
			{
				freeArray(a.shift());
			}
			this.cx--;
			break;
		case 1: // Y axis
			if (this.cy === 0)
				break;
			for ( ; x < this.cx; x++)
			{
				if (where === 0)	// back
				{
					freeArray(a[x].pop());
				}
				else				// front
				{
					freeArray(a[x].shift());
				}
			}
			this.cy--;
			break;
		case 2:	// Z axis
			if (this.cz === 0)
				break;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					if (where === 0)	// back
					{
						a[x][y].pop();
					}
					else				// front
					{
						a[x][y].shift();
					}
				}
			}
			this.cz--;
			break;
		}
	};
	Acts.prototype.Reverse = function (axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		if (this.cx === 0 || this.cy === 0 || this.cz === 0)
			return;		// no point reversing empty array
		switch (axis) {
		case 0:	// X axis
			a.reverse();
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
				a[x].reverse();
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
				for (y = 0; y < this.cy; y++)
					a[x][y].reverse();
			this.cz--;
			break;
		}
	};
	function compareValues(va, vb)
	{
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			var sa = "" + va;
			var sb = "" + vb;
			if (sa < sb)
				return -1;
			else if (sa > sb)
				return 1;
			else
				return 0;
		}
	}
	Acts.prototype.Sort = function (axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		if (this.cx === 0 || this.cy === 0 || this.cz === 0)
			return;		// no point sorting empty array
		switch (axis) {
		case 0:	// X axis
			a.sort(function (a, b) {
				return compareValues(a[0][0], b[0][0]);
			});
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
			{
				a[x].sort(function (a, b) {
					return compareValues(a[0], b[0]);
				});
			}
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].sort(compareValues);
				}
			}
			break;
		}
	};
	Acts.prototype.Delete = function (index, axis)
	{
		var x = 0, y = 0, z = 0;
		index = Math.floor(index);
		var a = this.arr;
		if (index < 0)
			return;
		switch (axis) {
		case 0:	// X axis
			if (index >= this.cx)
				break;
			freeArray(a[index]);
			a.splice(index, 1);
			this.cx--;
			break;
		case 1: // Y axis
			if (index >= this.cy)
				break;
			for ( ; x < this.cx; x++)
			{
				freeArray(a[x][index]);
				a[x].splice(index, 1);
			}
			this.cy--;
			break;
		case 2:	// Z axis
			if (index >= this.cz)
				break;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].splice(index, 1);
				}
			}
			this.cz--;
			break;
		}
	};
	Acts.prototype.Insert = function (value, index, axis)
	{
		var x = 0, y = 0, z = 0;
		index = Math.floor(index);
		var a = this.arr;
		if (index < 0)
			return;
		switch (axis) {
		case 0:	// X axis
			if (index > this.cx)
				return;
			x = index;
			a.splice(x, 0, allocArray());
			a[x].length = this.cy;
			for ( ; y < this.cy; y++)
			{
				a[x][y] = allocArray();
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cx++;
			break;
		case 1: // Y axis
			if (index > this.cy)
				return;
			for ( ; x < this.cx; x++)
			{
				y = index;
				a[x].splice(y, 0, allocArray());
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cy++;
			break;
		case 2:	// Z axis
			if (index > this.cz)
				return;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].splice(index, 0, value);
				}
			}
			this.cz++;
			break;
		}
	};
	Acts.prototype.JSONLoad = function (json_)
	{
		var o;
		try {
			o = JSON.parse(json_);
		}
		catch(e) { return; }
		if (!o["c2array"])		// presumably not a c2array object
			return;
		var sz = o["size"];
		this.cx = sz[0];
		this.cy = sz[1];
		this.cz = sz[2];
		this.arr = o["data"];
	};
	Acts.prototype.JSONDownload = function (filename)
	{
		var a = document.createElement("a");
		if (typeof a.download === "undefined")
		{
			var str = 'data:text/html,' + encodeURIComponent("<p><a download='" + filename + "' href=\"data:application/json,"
				+ encodeURIComponent(this.getAsJSON())
				+ "\">Download link</a></p>");
			window.open(str);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename;
			a.href = "data:application/json," + encodeURIComponent(this.getAsJSON());
			a.download = filename;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.At = function (ret, x, y_, z_)
	{
		var y = y_ || 0;
		var z = z_ || 0;
		ret.set_any(this.at(x, y, z));
	};
	Exps.prototype.Width = function (ret)
	{
		ret.set_int(this.cx);
	};
	Exps.prototype.Height = function (ret)
	{
		ret.set_int(this.cy);
	};
	Exps.prototype.Depth = function (ret)
	{
		ret.set_int(this.cz);
	};
	Exps.prototype.CurX = function (ret)
	{
		ret.set_int(this.getForX());
	};
	Exps.prototype.CurY = function (ret)
	{
		ret.set_int(this.getForY());
	};
	Exps.prototype.CurZ = function (ret)
	{
		ret.set_int(this.getForZ());
	};
	Exps.prototype.CurValue = function (ret)
	{
		ret.set_any(this.at(this.getForX(), this.getForY(), this.getForZ()));
	};
	Exps.prototype.Front = function (ret)
	{
		ret.set_any(this.at(0, 0, 0));
	};
	Exps.prototype.Back = function (ret)
	{
		ret.set_any(this.at(this.cx - 1, 0, 0));
	};
	Exps.prototype.IndexOf = function (ret, v)
	{
		for (var i = 0; i < this.cx; i++)
		{
			if (this.arr[i][0][0] === v)
			{
				ret.set_int(i);
				return;
			}
		}
		ret.set_int(-1);
	};
	Exps.prototype.LastIndexOf = function (ret, v)
	{
		for (var i = this.cx - 1; i >= 0; i--)
		{
			if (this.arr[i][0][0] === v)
			{
				ret.set_int(i);
				return;
			}
		}
		ret.set_int(-1);
	};
	Exps.prototype.AsJSON = function (ret)
	{
		ret.set_string(this.getAsJSON());
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Audio = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Audio.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	var audRuntime = null;
	var audInst = null;
	var audTag = "";
	var appPath = "";			// for Cordova only
	var API_HTML5 = 0;
	var API_WEBAUDIO = 1;
	var API_CORDOVA = 2;
	var API_APPMOBI = 3;
	var api = API_HTML5;
	var context = null;
	var audioBuffers = [];		// cache of buffers
	var audioInstances = [];	// cache of instances
	var lastAudio = null;
	var useOgg = false;			// determined at create time
	var timescale_mode = 0;
	var silent = false;
	var masterVolume = 1;
	var listenerX = 0;
	var listenerY = 0;
	var isContextSuspended = false;
	var panningModel = 1;		// HRTF
	var distanceModel = 1;		// Inverse
	var refDistance = 10;
	var maxDistance = 10000;
	var rolloffFactor = 1;
	var micSource = null;
	var micTag = "";
	var isMusicWorkaround = false;
	var musicPlayNextTouch = [];
	var playMusicAsSoundWorkaround = false;		// play music tracks with Web Audio API
	function dbToLinear(x)
	{
		var v = dbToLinear_nocap(x);
		if (!isFinite(v))	// accidentally passing a string can result in NaN; set volume to 0 if so
			v = 0;
		if (v < 0)
			v = 0;
		if (v > 1)
			v = 1;
		return v;
	};
	function linearToDb(x)
	{
		if (x < 0)
			x = 0;
		if (x > 1)
			x = 1;
		return linearToDb_nocap(x);
	};
	function dbToLinear_nocap(x)
	{
		return Math.pow(10, x / 20);
	};
	function linearToDb_nocap(x)
	{
		return (Math.log(x) / Math.log(10)) * 20;
	};
	var effects = {};
	function getDestinationForTag(tag)
	{
		tag = tag.toLowerCase();
		if (effects.hasOwnProperty(tag))
		{
			if (effects[tag].length)
				return effects[tag][0].getInputNode();
		}
		return context["destination"];
	};
	function createGain()
	{
		if (context["createGain"])
			return context["createGain"]();
		else
			return context["createGainNode"]();
	};
	function createDelay(d)
	{
		if (context["createDelay"])
			return context["createDelay"](d);
		else
			return context["createDelayNode"](d);
	};
	function startSource(s, scheduledTime)
	{
		if (s["start"])
			s["start"](scheduledTime || 0);
		else
			s["noteOn"](scheduledTime || 0);
	};
	function startSourceAt(s, x, d, scheduledTime)
	{
		if (s["start"])
			s["start"](scheduledTime || 0, x);
		else
			s["noteGrainOn"](scheduledTime || 0, x, d - x);
	};
	function stopSource(s)
	{
		try {
			if (s["stop"])
				s["stop"](0);
			else
				s["noteOff"](0);
		}
		catch (e) {}
	};
	function setAudioParam(ap, value, ramp, time)
	{
		if (!ap)
			return;		// iOS is missing some parameters
		ap["cancelScheduledValues"](0);
		if (time === 0)
		{
			ap["value"] = value;
			return;
		}
		var curTime = context["currentTime"];
		time += curTime;
		switch (ramp) {
		case 0:		// step
			ap["setValueAtTime"](value, time);
			break;
		case 1:		// linear
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["linearRampToValueAtTime"](value, time);
			break;
		case 2:		// exponential
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["exponentialRampToValueAtTime"](value, time);
			break;
		}
	};
	var filterTypes = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"];
	function FilterEffect(type, freq, detune, q, gain, mix)
	{
		this.type = "filter";
		this.params = [type, freq, detune, q, gain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = type;
		else
			this.filterNode["type"] = filterTypes[type];
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.filterNode["gain"]["value"] = gain;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
	};
	FilterEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	FilterEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	FilterEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FilterEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 1:		// filter frequency
			this.params[1] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[2] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[3] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is in dB here)
			this.params[4] = value;
			setAudioParam(this.filterNode["gain"], value, ramp, time);
			break;
		}
	};
	function DelayEffect(delayTime, delayGain, mix)
	{
		this.type = "delay";
		this.params = [delayTime, delayGain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.mainNode = createGain();
		this.delayNode = createDelay(delayTime);
		this.delayNode["delayTime"]["value"] = delayTime;
		this.delayGainNode = createGain();
		this.delayGainNode["gain"]["value"] = delayGain;
		this.inputNode["connect"](this.mainNode);
		this.inputNode["connect"](this.dryNode);
		this.mainNode["connect"](this.wetNode);
		this.mainNode["connect"](this.delayNode);
		this.delayNode["connect"](this.delayGainNode);
		this.delayGainNode["connect"](this.mainNode);
	};
	DelayEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DelayEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.mainNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.delayGainNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DelayEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DelayEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[2] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is passed in dB but needs to be linear here)
			this.params[1] = dbToLinear(value);
			setAudioParam(this.delayGainNode["gain"], dbToLinear(value), ramp, time);
			break;
		case 5:		// delay time
			this.params[0] = value;
			setAudioParam(this.delayNode["delayTime"], value, ramp, time);
			break;
		}
	};
	function ConvolveEffect(buffer, normalize, mix, src)
	{
		this.type = "convolve";
		this.params = [normalize, mix, src];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.convolveNode = context["createConvolver"]();
		if (buffer)
		{
			this.convolveNode["normalize"] = normalize;
			this.convolveNode["buffer"] = buffer;
		}
		this.inputNode["connect"](this.convolveNode);
		this.inputNode["connect"](this.dryNode);
		this.convolveNode["connect"](this.wetNode);
	};
	ConvolveEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	ConvolveEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.convolveNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	ConvolveEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	ConvolveEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function FlangerEffect(delay, modulation, freq, feedback, mix)
	{
		this.type = "flanger";
		this.params = [delay, modulation, freq, feedback, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.feedbackNode = createGain();
		this.feedbackNode["gain"]["value"] = feedback;
		this.delayNode = createDelay(delay + modulation);
		this.delayNode["delayTime"]["value"] = delay;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.delayNode);
		this.inputNode["connect"](this.dryNode);
		this.delayNode["connect"](this.wetNode);
		this.delayNode["connect"](this.feedbackNode);
		this.feedbackNode["connect"](this.delayNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.delayNode["delayTime"]);
		startSource(this.oscNode);
	};
	FlangerEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	FlangerEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.feedbackNode["disconnect"]();
	};
	FlangerEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FlangerEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 6:		// modulation
			this.params[1] = value / 1000;
			setAudioParam(this.oscGainNode["gain"], value / 1000, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[2] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		case 8:		// feedback
			this.params[3] = value / 100;
			setAudioParam(this.feedbackNode["gain"], value / 100, ramp, time);
			break;
		}
	};
	function PhaserEffect(freq, detune, q, modulation, modfreq, mix)
	{
		this.type = "phaser";
		this.params = [freq, detune, q, modulation, modfreq, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = 7;	// all-pass
		else
			this.filterNode["type"] = "allpass";
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = modfreq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.filterNode["frequency"]);
		startSource(this.oscNode);
	};
	PhaserEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	PhaserEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
	};
	PhaserEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	PhaserEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 1:		// filter frequency
			this.params[0] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[1] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[2] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 6:		// modulation
			this.params[3] = value;
			setAudioParam(this.oscGainNode["gain"], value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[4] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function GainEffect(g)
	{
		this.type = "gain";
		this.params = [g];
		this.node = createGain();
		this.node["gain"]["value"] = g;
	};
	GainEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	GainEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	GainEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	GainEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 4:		// gain
			this.params[0] = dbToLinear(value);
			setAudioParam(this.node["gain"], dbToLinear(value), ramp, time);
			break;
		}
	};
	function TremoloEffect(freq, mix)
	{
		this.type = "tremolo";
		this.params = [freq, mix];
		this.node = createGain();
		this.node["gain"]["value"] = 1 - (mix / 2);
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = mix / 2;
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.node["gain"]);
		startSource(this.oscNode);
	};
	TremoloEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	TremoloEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.node["disconnect"]();
	};
	TremoloEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	TremoloEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.node["gain"]["value"], 1 - (value / 2), ramp, time);
			setAudioParam(this.oscGainNode["gain"]["value"], value / 2, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function RingModulatorEffect(freq, mix)
	{
		this.type = "ringmod";
		this.params = [freq, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.ringNode = createGain();
		this.ringNode["gain"]["value"] = 0;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscNode["connect"](this.ringNode["gain"]);
		startSource(this.oscNode);
		this.inputNode["connect"](this.ringNode);
		this.inputNode["connect"](this.dryNode);
		this.ringNode["connect"](this.wetNode);
	};
	RingModulatorEffect.prototype.connectTo = function (node_)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node_);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node_);
	};
	RingModulatorEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.ringNode["disconnect"]();
		this.inputNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	RingModulatorEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	RingModulatorEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function DistortionEffect(threshold, headroom, drive, makeupgain, mix)
	{
		this.type = "distortion";
		this.params = [threshold, headroom, drive, makeupgain, mix];
		this.inputNode = createGain();
		this.preGain = createGain();
		this.postGain = createGain();
		this.setDrive(drive, dbToLinear_nocap(makeupgain));
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.waveShaper = context["createWaveShaper"]();
		this.curve = new Float32Array(65536);
		this.generateColortouchCurve(threshold, headroom);
		this.waveShaper.curve = this.curve;
		this.inputNode["connect"](this.preGain);
		this.inputNode["connect"](this.dryNode);
		this.preGain["connect"](this.waveShaper);
		this.waveShaper["connect"](this.postGain);
		this.postGain["connect"](this.wetNode);
	};
	DistortionEffect.prototype.setDrive = function (drive, makeupgain)
	{
		if (drive < 0.01)
			drive = 0.01;
		this.preGain["gain"]["value"] = drive;
		this.postGain["gain"]["value"] = Math.pow(1 / drive, 0.6) * makeupgain;
	};
	function e4(x, k)
	{
		return 1.0 - Math.exp(-k * x);
	}
	DistortionEffect.prototype.shape = function (x, linearThreshold, linearHeadroom)
	{
		var maximum = 1.05 * linearHeadroom * linearThreshold;
		var kk = (maximum - linearThreshold);
		var sign = x < 0 ? -1 : +1;
		var absx = x < 0 ? -x : x;
		var shapedInput = absx < linearThreshold ? absx : linearThreshold + kk * e4(absx - linearThreshold, 1.0 / kk);
		shapedInput *= sign;
		return shapedInput;
	};
	DistortionEffect.prototype.generateColortouchCurve = function (threshold, headroom)
	{
		var linearThreshold = dbToLinear_nocap(threshold);
		var linearHeadroom = dbToLinear_nocap(headroom);
		var n = 65536;
		var n2 = n / 2;
		var x = 0;
		for (var i = 0; i < n2; ++i) {
			x = i / n2;
			x = this.shape(x, linearThreshold, linearHeadroom);
			this.curve[n2 + i] = x;
			this.curve[n2 - i - 1] = -x;
		}
	};
	DistortionEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DistortionEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.preGain["disconnect"]();
		this.waveShaper["disconnect"]();
		this.postGain["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DistortionEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DistortionEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function CompressorEffect(threshold, knee, ratio, attack, release)
	{
		this.type = "compressor";
		this.params = [threshold, knee, ratio, attack, release];
		this.node = context["createDynamicsCompressor"]();
		try {
			this.node["threshold"]["value"] = threshold;
			this.node["knee"]["value"] = knee;
			this.node["ratio"]["value"] = ratio;
			this.node["attack"]["value"] = attack;
			this.node["release"]["value"] = release;
		}
		catch (e) {}
	};
	CompressorEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	CompressorEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	CompressorEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	CompressorEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	function AnalyserEffect(fftSize, smoothing)
	{
		this.type = "analyser";
		this.params = [fftSize, smoothing];
		this.node = context["createAnalyser"]();
		this.node["fftSize"] = fftSize;
		this.node["smoothingTimeConstant"] = smoothing;
		this.freqBins = new Float32Array(this.node["frequencyBinCount"]);
		this.signal = new Uint8Array(fftSize);
		this.peak = 0;
		this.rms = 0;
	};
	AnalyserEffect.prototype.tick = function ()
	{
		this.node["getFloatFrequencyData"](this.freqBins);
		this.node["getByteTimeDomainData"](this.signal);
		var fftSize = this.node["fftSize"];
		var i = 0;
		this.peak = 0;
		var rmsSquaredSum = 0;
		var s = 0;
		for ( ; i < fftSize; i++)
		{
			s = (this.signal[i] - 128) / 128;
			if (s < 0)
				s = -s;
			if (this.peak < s)
				this.peak = s;
			rmsSquaredSum += s * s;
		}
		this.peak = linearToDb(this.peak);
		this.rms = linearToDb(Math.sqrt(rmsSquaredSum / fftSize));
	};
	AnalyserEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	AnalyserEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	AnalyserEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	AnalyserEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	function ObjectTracker()
	{
		this.obj = null;
		this.loadUid = 0;
	};
	ObjectTracker.prototype.setObject = function (obj_)
	{
		this.obj = obj_;
	};
	ObjectTracker.prototype.hasObject = function ()
	{
		return !!this.obj;
	};
	ObjectTracker.prototype.tick = function (dt)
	{
	};
	var iOShadtouchstart = false;	// has had touch start input on iOS <=8 to work around web audio API muting
	var iOShadtouchend = false;		// has had touch end input on iOS 9+ to work around web audio API muting
	function C2AudioBuffer(src_, is_music)
	{
		this.src = src_;
		this.myapi = api;
		this.is_music = is_music;
		this.added_end_listener = false;
		var self = this;
		this.outNode = null;
		this.mediaSourceNode = null;
		this.panWhenReady = [];		// for web audio API positioned sounds
		this.seekWhenReady = 0;
		this.pauseWhenReady = false;
		this.supportWebAudioAPI = false;
		this.failedToLoad = false;
		this.wasEverReady = false;	// if a buffer is ever marked as ready, it's permanently considered ready after then.
		if (api === API_WEBAUDIO && is_music && !playMusicAsSoundWorkaround)
		{
			this.myapi = API_HTML5;
			this.outNode = createGain();
		}
		this.bufferObject = null;			// actual audio object
		this.audioData = null;				// web audio api: ajax request result (compressed audio that needs decoding)
		var request;
		switch (this.myapi) {
		case API_HTML5:
			this.bufferObject = new Audio();
			this.bufferObject.crossOrigin = "anonymous";
			this.bufferObject.addEventListener("canplaythrough", function () {
				self.wasEverReady = true;	// update loaded state so preload is considered complete
			});
			if (api === API_WEBAUDIO && context["createMediaElementSource"] && !/wiiu/i.test(navigator.userAgent))
			{
				this.supportWebAudioAPI = true;		// can be routed through web audio api
				this.bufferObject.addEventListener("canplay", function ()
				{
					if (!self.mediaSourceNode && self.bufferObject)
					{
						self.mediaSourceNode = context["createMediaElementSource"](self.bufferObject);
						self.mediaSourceNode["connect"](self.outNode);
					}
				});
			}
			this.bufferObject.autoplay = false;	// this is only a source buffer, not an instance
			this.bufferObject.preload = "auto";
			this.bufferObject.src = src_;
			break;
		case API_WEBAUDIO:
			if (audRuntime.isWKWebView)
			{
				audRuntime.fetchLocalFileViaCordovaAsArrayBuffer(src_, function (arrayBuffer)
				{
					self.audioData = arrayBuffer;
					self.decodeAudioBuffer();
				}, function (err)
				{
					self.failedToLoad = true;
				});
			}
			else
			{
				request = new XMLHttpRequest();
				request.open("GET", src_, true);
				request.responseType = "arraybuffer";
				request.onload = function () {
					self.audioData = request.response;
					self.decodeAudioBuffer();
				};
				request.onerror = function () {
					self.failedToLoad = true;
				};
				request.send();
			}
			break;
		case API_CORDOVA:
			this.bufferObject = true;
			break;
		case API_APPMOBI:
			this.bufferObject = true;
			break;
		}
	};
	C2AudioBuffer.prototype.release = function ()
	{
		var i, len, j, a;
		for (i = 0, j = 0, len = audioInstances.length; i < len; ++i)
		{
			a = audioInstances[i];
			audioInstances[j] = a;
			if (a.buffer === this)
				a.stop();
			else
				++j;		// keep
		}
		audioInstances.length = j;
		if (this.mediaSourceNode)
		{
			this.mediaSourceNode["disconnect"]();
			this.mediaSourceNode = null;
		}
		if (this.outNode)
		{
			this.outNode["disconnect"]();
			this.outNode = null;
		}
		this.bufferObject = null;
		this.audioData = null;
	};
	C2AudioBuffer.prototype.decodeAudioBuffer = function ()
	{
		if (this.bufferObject || !this.audioData)
			return;		// audio already decoded or AJAX request not yet complete
		var self = this;
		if (context["decodeAudioData"])
		{
			context["decodeAudioData"](this.audioData, function (buffer) {
					self.bufferObject = buffer;
					self.audioData = null;		// clear AJAX response to allow GC and save memory, only need the bufferObject now
					var p, i, len, a;
					if (!cr.is_undefined(self.playTagWhenReady) && !silent)
					{
						if (self.panWhenReady.length)
						{
							for (i = 0, len = self.panWhenReady.length; i < len; i++)
							{
								p = self.panWhenReady[i];
								a = new C2AudioInstance(self, p.thistag);
								a.setPannerEnabled(true);
								if (typeof p.objUid !== "undefined")
								{
									p.obj = audRuntime.getObjectByUID(p.objUid);
									if (!p.obj)
										continue;
								}
								if (p.obj)
								{
									var px = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, true);
									var py = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, false);
									a.setPan(px, py, cr.to_degrees(p.obj.angle - p.obj.layer.getAngle()), p.ia, p.oa, p.og);
									a.setObject(p.obj);
								}
								else
								{
									a.setPan(p.x, p.y, p.a, p.ia, p.oa, p.og);
								}
								a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
								if (self.pauseWhenReady)
									a.pause();
								audioInstances.push(a);
							}
							cr.clearArray(self.panWhenReady);
						}
						else
						{
							a = new C2AudioInstance(self, self.playTagWhenReady || "");		// sometimes playTagWhenReady is not set - TODO: why?
							a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
							if (self.pauseWhenReady)
								a.pause();
							audioInstances.push(a);
						}
					}
					else if (!cr.is_undefined(self.convolveWhenReady))
					{
						var convolveNode = self.convolveWhenReady.convolveNode;
						convolveNode["normalize"] = self.normalizeWhenReady;
						convolveNode["buffer"] = buffer;
					}
			}, function (e) {
				self.failedToLoad = true;
			});
		}
		else
		{
			this.bufferObject = context["createBuffer"](this.audioData, false);
			this.audioData = null;		// clear AJAX response to allow GC and save memory, only need the bufferObject now
			if (!cr.is_undefined(this.playTagWhenReady) && !silent)
			{
				var a = new C2AudioInstance(this, this.playTagWhenReady);
				a.play(this.loopWhenReady, this.volumeWhenReady, this.seekWhenReady);
				if (this.pauseWhenReady)
					a.pause();
				audioInstances.push(a);
			}
			else if (!cr.is_undefined(this.convolveWhenReady))
			{
				var convolveNode = this.convolveWhenReady.convolveNode;
				convolveNode["normalize"] = this.normalizeWhenReady;
				convolveNode["buffer"] = this.bufferObject;
			}
		}
	};
	C2AudioBuffer.prototype.isLoaded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			var ret = this.bufferObject["readyState"] >= 4;	// HAVE_ENOUGH_DATA
			if (ret)
				this.wasEverReady = true;
			return ret || this.wasEverReady;
		case API_WEBAUDIO:
			return !!this.audioData || !!this.bufferObject;
		case API_CORDOVA:
			return true;
		case API_APPMOBI:
			return true;
		}
		return false;
	};
	C2AudioBuffer.prototype.isLoadedAndDecoded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.isLoaded();		// no distinction between loaded and decoded in HTML5 audio, just rely on ready state
		case API_WEBAUDIO:
			return !!this.bufferObject;
		case API_CORDOVA:
			return true;
		case API_APPMOBI:
			return true;
		}
		return false;
	};
	C2AudioBuffer.prototype.hasFailedToLoad = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return !!this.bufferObject["error"];
		case API_WEBAUDIO:
			return this.failedToLoad;
		}
		return false;
	};
	function C2AudioInstance(buffer_, tag_)
	{
		var self = this;
		this.tag = tag_;
		this.fresh = true;
		this.stopped = true;
		this.src = buffer_.src;
		this.buffer = buffer_;
		this.myapi = api;
		this.is_music = buffer_.is_music;
		this.playbackRate = 1;
		this.hasPlaybackEnded = true;	// ended flag
		this.resume_me = false;			// make sure resumes when leaving suspend
		this.is_paused = false;
		this.resume_position = 0;		// for web audio api to resume from correct playback position
		this.looping = false;
		this.is_muted = false;
		this.is_silent = false;
		this.volume = 1;
		this.onended_handler = function (e)
		{
			if (self.is_paused || self.resume_me)
				return;
			var bufferThatEnded = this;
			if (!bufferThatEnded)
				bufferThatEnded = e.target;
			if (bufferThatEnded !== self.active_buffer)
				return;
			self.hasPlaybackEnded = true;
			self.stopped = true;
			audTag = self.tag;
			audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
		};
		this.active_buffer = null;
		this.isTimescaled = ((timescale_mode === 1 && !this.is_music) || timescale_mode === 2);
		this.mutevol = 1;
		this.startTime = (this.isTimescaled ? audRuntime.kahanTime.sum : audRuntime.wallTime.sum);
		this.gainNode = null;
		this.pannerNode = null;
		this.pannerEnabled = false;
		this.objectTracker = null;
		this.panX = 0;
		this.panY = 0;
		this.panAngle = 0;
		this.panConeInner = 0;
		this.panConeOuter = 0;
		this.panConeOuterGain = 0;
		this.instanceObject = null;
		var add_end_listener = false;
		if (this.myapi === API_WEBAUDIO && this.buffer.myapi === API_HTML5 && !this.buffer.supportWebAudioAPI)
			this.myapi = API_HTML5;
		switch (this.myapi) {
		case API_HTML5:
			if (this.is_music)
			{
				this.instanceObject = buffer_.bufferObject;
				add_end_listener = !buffer_.added_end_listener;
				buffer_.added_end_listener = true;
			}
			else
			{
				this.instanceObject = new Audio();
				this.instanceObject.crossOrigin = "anonymous";
				this.instanceObject.autoplay = false;
				this.instanceObject.src = buffer_.bufferObject.src;
				add_end_listener = true;
			}
			if (add_end_listener)
			{
				this.instanceObject.addEventListener('ended', function () {
						audTag = self.tag;
						self.stopped = true;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				});
			}
			break;
		case API_WEBAUDIO:
			this.gainNode = createGain();
			this.gainNode["connect"](getDestinationForTag(tag_));
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (buffer_.bufferObject)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = buffer_.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
			}
			else
			{
				this.instanceObject = this.buffer.bufferObject;		// reference the audio element
				this.buffer.outNode["connect"](this.gainNode);
				if (!this.buffer.added_end_listener)
				{
					this.buffer.added_end_listener = true;
					this.buffer.bufferObject.addEventListener('ended', function () {
							audTag = self.tag;
							self.stopped = true;
							audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
					});
				}
			}
			break;
		case API_CORDOVA:
			this.instanceObject = new window["Media"](appPath + this.src, null, null, function (status) {
					if (status === window["Media"]["MEDIA_STOPPED"])
					{
						self.hasPlaybackEnded = true;
						self.stopped = true;
						audTag = self.tag;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
					}
			});
			break;
		case API_APPMOBI:
			this.instanceObject = true;
			break;
		}
	};
	C2AudioInstance.prototype.hasEnded = function ()
	{
		var time;
		switch (this.myapi) {
		case API_HTML5:
			return this.instanceObject.ended;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh && !this.stopped && this.instanceObject["loop"])
					return false;
				if (this.is_paused)
					return false;
				return this.hasPlaybackEnded;
			}
			else
				return this.instanceObject.ended;
		case API_CORDOVA:
			return this.hasPlaybackEnded;
		case API_APPMOBI:
			true;	// recycling an AppMobi sound does not matter because it will just do another throwaway playSound
		}
		return true;
	};
	C2AudioInstance.prototype.canBeRecycled = function ()
	{
		if (this.fresh || this.stopped)
			return true;		// not yet used or is not playing
		return this.hasEnded();
	};
	C2AudioInstance.prototype.setPannerEnabled = function (enable_)
	{
		if (api !== API_WEBAUDIO)
			return;
		if (!this.pannerEnabled && enable_)
		{
			if (!this.gainNode)
				return;
			if (!this.pannerNode)
			{
				this.pannerNode = context["createPanner"]();
				if (typeof this.pannerNode["panningModel"] === "number")
					this.pannerNode["panningModel"] = panningModel;
				else
					this.pannerNode["panningModel"] = ["equalpower", "HRTF", "soundfield"][panningModel];
				if (typeof this.pannerNode["distanceModel"] === "number")
					this.pannerNode["distanceModel"] = distanceModel;
				else
					this.pannerNode["distanceModel"] = ["linear", "inverse", "exponential"][distanceModel];
				this.pannerNode["refDistance"] = refDistance;
				this.pannerNode["maxDistance"] = maxDistance;
				this.pannerNode["rolloffFactor"] = rolloffFactor;
			}
			this.gainNode["disconnect"]();
			this.gainNode["connect"](this.pannerNode);
			this.pannerNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = true;
		}
		else if (this.pannerEnabled && !enable_)
		{
			if (!this.gainNode)
				return;
			this.pannerNode["disconnect"]();
			this.gainNode["disconnect"]();
			this.gainNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = false;
		}
	};
	C2AudioInstance.prototype.setPan = function (x, y, angle, innerangle, outerangle, outergain)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		this.pannerNode["setPosition"](x, y, 0);
		this.pannerNode["setOrientation"](Math.cos(cr.to_radians(angle)), Math.sin(cr.to_radians(angle)), 0);
		this.pannerNode["coneInnerAngle"] = innerangle;
		this.pannerNode["coneOuterAngle"] = outerangle;
		this.pannerNode["coneOuterGain"] = outergain;
		this.panX = x;
		this.panY = y;
		this.panAngle = angle;
		this.panConeInner = innerangle;
		this.panConeOuter = outerangle;
		this.panConeOuterGain = outergain;
	};
	C2AudioInstance.prototype.setObject = function (o)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		if (!this.objectTracker)
			this.objectTracker = new ObjectTracker();
		this.objectTracker.setObject(o);
	};
	C2AudioInstance.prototype.tick = function (dt)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO || !this.objectTracker || !this.objectTracker.hasObject() || !this.isPlaying())
		{
			return;
		}
		this.objectTracker.tick(dt);
		var inst = this.objectTracker.obj;
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		this.pannerNode["setPosition"](px, py, 0);
		var a = 0;
		if (typeof this.objectTracker.obj.angle !== "undefined")
		{
			a = inst.angle - inst.layer.getAngle();
			this.pannerNode["setOrientation"](Math.cos(a), Math.sin(a), 0);
		}
	};
	C2AudioInstance.prototype.play = function (looping, vol, fromPosition, scheduledTime)
	{
		var instobj = this.instanceObject;
		this.looping = looping;
		this.volume = vol;
		var seekPos = fromPosition || 0;
		scheduledTime = scheduledTime || 0;
		switch (this.myapi) {
		case API_HTML5:
			if (instobj.playbackRate !== 1.0)
				instobj.playbackRate = 1.0;
			if (instobj.volume !== vol * masterVolume)
				instobj.volume = vol * masterVolume;
			if (instobj.loop !== looping)
				instobj.loop = looping;
			if (instobj.muted)
				instobj.muted = false;
			if (instobj.currentTime !== seekPos)
			{
				try {
					instobj.currentTime = seekPos;
				}
				catch (err)
				{
;
				}
			}
			if (this.is_music && isMusicWorkaround && !audRuntime.isInUserInputEvent)
				musicPlayNextTouch.push(this);
			else
			{
				try {
					this.instanceObject.play();
				}
				catch (e) {		// sometimes throws on WP8.1... try not to kill the app
					if (console && console.log)
						console.log("[C2] WARNING: exception trying to play audio '" + this.buffer.src + "': ", e);
				}
			}
			break;
		case API_WEBAUDIO:
			this.muted = false;
			this.mutevol = 1;
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (!this.fresh)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = this.buffer.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
				this.instanceObject["onended"] = this.onended_handler;
				this.active_buffer = this.instanceObject;
				this.instanceObject.loop = looping;
				this.hasPlaybackEnded = false;
				if (seekPos === 0)
					startSource(this.instanceObject, scheduledTime);
				else
					startSourceAt(this.instanceObject, seekPos, this.getDuration(), scheduledTime);
			}
			else
			{
				if (instobj.playbackRate !== 1.0)
					instobj.playbackRate = 1.0;
				if (instobj.loop !== looping)
					instobj.loop = looping;
				instobj.volume = vol * masterVolume;
				if (instobj.currentTime !== seekPos)
				{
					try {
						instobj.currentTime = seekPos;
					}
					catch (err)
					{
;
					}
				}
				if (this.is_music && isMusicWorkaround && !audRuntime.isInUserInputEvent)
					musicPlayNextTouch.push(this);
				else
					instobj.play();
			}
			break;
		case API_CORDOVA:
			if ((!this.fresh && this.stopped) || seekPos !== 0)
				instobj["seekTo"](seekPos);
			instobj["play"]();
			this.hasPlaybackEnded = false;
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["playSound"](this.src, looping);
			else
				AppMobi["player"]["playSound"](this.src, looping);
			break;
		}
		this.playbackRate = 1;
		this.startTime = (this.isTimescaled ? audRuntime.kahanTime.sum : audRuntime.wallTime.sum) - seekPos;
		this.fresh = false;
		this.stopped = false;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.stop = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
				stopSource(this.instanceObject);
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_CORDOVA:
			this.instanceObject["stop"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["stopSound"](this.src);
			break;
		}
		this.stopped = true;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.pause = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.resume_position = this.getPlaybackTime(true);
				if (this.looping)
					this.resume_position = this.resume_position % this.getDuration();
				this.is_paused = true;
				stopSource(this.instanceObject);
			}
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_CORDOVA:
			this.instanceObject["pause"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["stopSound"](this.src);
			break;
		}
		this.is_paused = true;
	};
	C2AudioInstance.prototype.resume = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || !this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			this.instanceObject.play();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.instanceObject = context["createBufferSource"]();
				this.instanceObject["buffer"] = this.buffer.bufferObject;
				this.instanceObject["connect"](this.gainNode);
				this.instanceObject["onended"] = this.onended_handler;
				this.active_buffer = this.instanceObject;
				this.instanceObject.loop = this.looping;
				this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
				this.updatePlaybackRate();
				this.startTime = (this.isTimescaled ? audRuntime.kahanTime.sum : audRuntime.wallTime.sum) - (this.resume_position / (this.playbackRate || 0.001));
				startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
			}
			else
			{
				this.instanceObject.play();
			}
			break;
		case API_CORDOVA:
			this.instanceObject["play"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["resumeSound"](this.src);
			break;
		}
		this.is_paused = false;
	};
	C2AudioInstance.prototype.seek = function (pos)
	{
		if (this.fresh || this.stopped || this.hasEnded())
			return;
		switch (this.myapi) {
		case API_HTML5:
			try {
				this.instanceObject.currentTime = pos;
			}
			catch (e) {}
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					this.resume_position = pos;
				else
				{
					this.pause();
					this.resume_position = pos;
					this.resume();
				}
			}
			else
			{
				try {
					this.instanceObject.currentTime = pos;
				}
				catch (e) {}
			}
			break;
		case API_CORDOVA:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["seekSound"](this.src, pos);
			break;
		}
	};
	C2AudioInstance.prototype.reconnect = function (toNode)
	{
		if (this.myapi !== API_WEBAUDIO)
			return;
		if (this.pannerEnabled)
		{
			this.pannerNode["disconnect"]();
			this.pannerNode["connect"](toNode);
		}
		else
		{
			this.gainNode["disconnect"]();
			this.gainNode["connect"](toNode);
		}
	};
	C2AudioInstance.prototype.getDuration = function (applyPlaybackRate)
	{
		var ret = 0;
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.duration !== "undefined")
				ret = this.instanceObject.duration;
			break;
		case API_WEBAUDIO:
			ret = this.buffer.bufferObject["duration"];
			break;
		case API_CORDOVA:
			ret = this.instanceObject["getDuration"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				ret = AppMobi["context"]["getDurationSound"](this.src);
			break;
		}
		if (applyPlaybackRate)
			ret /= (this.playbackRate || 0.001);		// avoid divide-by-zero
		return ret;
	};
	C2AudioInstance.prototype.getPlaybackTime = function (applyPlaybackRate)
	{
		var duration = this.getDuration();
		var ret = 0;
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					return this.resume_position;
				else
					ret = (this.isTimescaled ? audRuntime.kahanTime.sum : audRuntime.wallTime.sum) - this.startTime;
			}
			else if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_CORDOVA:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				ret = AppMobi["context"]["getPlaybackTimeSound"](this.src);
			break;
		}
		if (applyPlaybackRate)
			ret *= this.playbackRate;
		if (!this.looping && ret > duration)
			ret = duration;
		return ret;
	};
	C2AudioInstance.prototype.isPlaying = function ()
	{
		return !this.is_paused && !this.fresh && !this.stopped && !this.hasEnded();
	};
	C2AudioInstance.prototype.shouldSave = function ()
	{
		return !this.fresh && !this.stopped && !this.hasEnded();
	};
	C2AudioInstance.prototype.setVolume = function (v)
	{
		this.volume = v;
		this.updateVolume();
	};
	C2AudioInstance.prototype.updateVolume = function ()
	{
		var volToSet = this.volume * masterVolume;
		if (!isFinite(volToSet))
			volToSet = 0;		// HTMLMediaElement throws if setting non-finite volume
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.volume !== "undefined" && this.instanceObject.volume !== volToSet)
				this.instanceObject.volume = volToSet;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.gainNode["gain"]["value"] = volToSet * this.mutevol;
			}
			else
			{
				if (typeof this.instanceObject.volume !== "undefined" && this.instanceObject.volume !== volToSet)
					this.instanceObject.volume = volToSet;
			}
			break;
		case API_CORDOVA:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.getVolume = function ()
	{
		return this.volume;
	};
	C2AudioInstance.prototype.doSetMuted = function (m)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.muted !== !!m)
				this.instanceObject.muted = !!m;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.mutevol = (m ? 0 : 1);
				this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
			}
			else
			{
				if (this.instanceObject.muted !== !!m)
					this.instanceObject.muted = !!m;
			}
			break;
		case API_CORDOVA:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setMuted = function (m)
	{
		this.is_muted = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setSilent = function (m)
	{
		this.is_silent = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setLooping = function (l)
	{
		this.looping = l;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_WEBAUDIO:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_CORDOVA:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["setLoopingSound"](this.src, l);
			break;
		}
	};
	C2AudioInstance.prototype.setPlaybackRate = function (r)
	{
		this.playbackRate = r;
		this.updatePlaybackRate();
	};
	C2AudioInstance.prototype.updatePlaybackRate = function ()
	{
		var r = this.playbackRate;
		if (this.isTimescaled)
			r *= audRuntime.timescale;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.playbackRate !== r)
				this.instanceObject.playbackRate = r;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.instanceObject["playbackRate"]["value"] !== r)
					this.instanceObject["playbackRate"]["value"] = r;
			}
			else
			{
				if (this.instanceObject.playbackRate !== r)
					this.instanceObject.playbackRate = r;
			}
			break;
		case API_CORDOVA:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setSuspended = function (s)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (s)
			{
				if (this.isPlaying())
				{
					this.resume_me = true;
					this.instanceObject["pause"]();
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
				{
					this.instanceObject["play"]();
					this.resume_me = false;
				}
			}
			break;
		case API_WEBAUDIO:
			if (s)
			{
				if (this.isPlaying())
				{
					this.resume_me = true;
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.resume_position = this.getPlaybackTime(true);
						if (this.looping)
							this.resume_position = this.resume_position % this.getDuration();
						stopSource(this.instanceObject);
					}
					else
						this.instanceObject["pause"]();
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.instanceObject = context["createBufferSource"]();
						this.instanceObject["buffer"] = this.buffer.bufferObject;
						this.instanceObject["connect"](this.gainNode);
						this.instanceObject["onended"] = this.onended_handler;
						this.active_buffer = this.instanceObject;
						this.instanceObject.loop = this.looping;
						this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
						this.updatePlaybackRate();
						this.startTime = (this.isTimescaled ? audRuntime.kahanTime.sum : audRuntime.wallTime.sum) - (this.resume_position / (this.playbackRate || 0.001));
						startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
					}
					else
					{
						this.instanceObject["play"]();
					}
					this.resume_me = false;
				}
			}
			break;
		case API_CORDOVA:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
				{
					this.resume_me = false;
					this.instanceObject["play"]();
				}
			}
			break;
		case API_APPMOBI:
			break;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		audRuntime = this.runtime;
		audInst = this;
		this.listenerTracker = null;
		this.listenerZ = -600;
		if (this.runtime.isWKWebView)
			playMusicAsSoundWorkaround = true;
		if ((this.runtime.isiOS || (this.runtime.isAndroid && (this.runtime.isChrome || this.runtime.isAndroidStockBrowser))) && !this.runtime.isCrosswalk && !this.runtime.isDomFree && !this.runtime.isAmazonWebApp && !playMusicAsSoundWorkaround)
		{
			isMusicWorkaround = true;
		}
		context = null;
		if (typeof AudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new AudioContext();
		}
		else if (typeof webkitAudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new webkitAudioContext();
		}
		if (this.runtime.isiOS && context)
		{
			if (context.close)
				context.close();
			if (typeof AudioContext !== "undefined")
				context = new AudioContext();
			else if (typeof webkitAudioContext !== "undefined")
				context = new webkitAudioContext();
		}
		var isAndroid = this.runtime.isAndroid;
		var playDummyBuffer = function ()
		{
			if (context["state"] === "suspended" && context["resume"])
				context["resume"]();
			if (isContextSuspended || !context["createBuffer"])
				return;
			var buffer = context["createBuffer"](1, 220, 22050);
			var source = context["createBufferSource"]();
			source["buffer"] = buffer;
			source["connect"](context["destination"]);
			startSource(source);
		};
		if (isMusicWorkaround)
		{
			var playQueuedMusic = function ()
			{
				var i, len, m;
				if (isMusicWorkaround)
				{
					if (!silent)
					{
						for (i = 0, len = musicPlayNextTouch.length; i < len; ++i)
						{
							m = musicPlayNextTouch[i];
							if (!m.stopped && !m.is_paused)
								m.instanceObject.play();
						}
					}
					cr.clearArray(musicPlayNextTouch);
				}
			};
			document.addEventListener("touchend", function ()
			{
				if (!iOShadtouchend && context)
				{
					playDummyBuffer();
					iOShadtouchend = true;
				}
				playQueuedMusic();
			}, true);
		}
		else if (playMusicAsSoundWorkaround)
		{
			document.addEventListener("touchend", function ()
			{
				if (!iOShadtouchend && context)
				{
					playDummyBuffer();
					iOShadtouchend = true;
				}
			}, true);
		}
		if (api !== API_WEBAUDIO)
		{
			if (this.runtime.isCordova && typeof window["Media"] !== "undefined")
				api = API_CORDOVA;
			else if (this.runtime.isAppMobi)
				api = API_APPMOBI;
		}
		if (api === API_CORDOVA)
		{
			appPath = location.href;
			var i = appPath.lastIndexOf("/");
			if (i > -1)
				appPath = appPath.substr(0, i + 1);
			appPath = appPath.replace("file://", "");
		}
		if (this.runtime.isSafari && this.runtime.isWindows && typeof Audio === "undefined")
		{
			alert("It looks like you're using Safari for Windows without Quicktime.  Audio cannot be played until Quicktime is installed.");
			this.runtime.DestroyInstance(this);
		}
		else
		{
			if (this.runtime.isDirectCanvas)
				useOgg = this.runtime.isAndroid;		// AAC on iOS, OGG on Android
			else
			{
				try {
					useOgg = !!(new Audio().canPlayType('audio/ogg; codecs="vorbis"'));
				}
				catch (e)
				{
					useOgg = false;
				}
			}
			switch (api) {
			case API_HTML5:
;
				break;
			case API_WEBAUDIO:
;
				break;
			case API_CORDOVA:
;
				break;
			case API_APPMOBI:
;
				break;
			default:
;
			}
			this.runtime.tickMe(this);
		}
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function ()
	{
		this.runtime.audioInstance = this;
		timescale_mode = this.properties[0];	// 0 = off, 1 = sounds only, 2 = all
		this.saveload = this.properties[1];		// 0 = all, 1 = sounds only, 2 = music only, 3 = none
		this.playinbackground = (this.properties[2] !== 0);
		this.nextPlayTime = 0;
		panningModel = this.properties[3];		// 0 = equalpower, 1 = hrtf, 3 = soundfield
		distanceModel = this.properties[4];		// 0 = linear, 1 = inverse, 2 = exponential
		this.listenerZ = -this.properties[5];
		refDistance = this.properties[6];
		maxDistance = this.properties[7];
		rolloffFactor = this.properties[8];
		this.listenerTracker = new ObjectTracker();
		var draw_width = (this.runtime.draw_width || this.runtime.width);
		var draw_height = (this.runtime.draw_height || this.runtime.height);
		if (api === API_WEBAUDIO)
		{
			context["listener"]["setPosition"](draw_width / 2, draw_height / 2, this.listenerZ);
			context["listener"]["setOrientation"](0, 0, 1, 0, -1, 0);
			window["c2OnAudioMicStream"] = function (localMediaStream, tag)
			{
				if (micSource)
					micSource["disconnect"]();
				micTag = tag.toLowerCase();
				micSource = context["createMediaStreamSource"](localMediaStream);
				micSource["connect"](getDestinationForTag(micTag));
			};
		}
		this.runtime.addSuspendCallback(function(s)
		{
			audInst.onSuspend(s);
		});
		var self = this;
		this.runtime.addDestroyCallback(function (inst)
		{
			self.onInstanceDestroyed(inst);
		});
	};
	instanceProto.onInstanceDestroyed = function (inst)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.objectTracker)
			{
				if (a.objectTracker.obj === inst)
				{
					a.objectTracker.obj = null;
					if (a.pannerEnabled && a.isPlaying() && a.looping)
						a.stop();
				}
			}
		}
		if (this.listenerTracker.obj === inst)
			this.listenerTracker.obj = null;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"silent": silent,
			"masterVolume": masterVolume,
			"listenerZ": this.listenerZ,
			"listenerUid": this.listenerTracker.hasObject() ? this.listenerTracker.obj.uid : -1,
			"playing": [],
			"effects": {}
		};
		var playingarr = o["playing"];
		var i, len, a, d, p, panobj, playbackTime;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (!a.shouldSave())
				continue;				// no need to save stopped sounds
			if (this.saveload === 3)	// not saving/loading any sounds/music
				continue;
			if (a.is_music && this.saveload === 1)	// not saving/loading music
				continue;
			if (!a.is_music && this.saveload === 2)	// not saving/loading sound
				continue;
			playbackTime = a.getPlaybackTime();
			if (a.looping)
				playbackTime = playbackTime % a.getDuration();
			d = {
				"tag": a.tag,
				"buffersrc": a.buffer.src,
				"is_music": a.is_music,
				"playbackTime": playbackTime,
				"volume": a.volume,
				"looping": a.looping,
				"muted": a.is_muted,
				"playbackRate": a.playbackRate,
				"paused": a.is_paused,
				"resume_position": a.resume_position
			};
			if (a.pannerEnabled)
			{
				d["pan"] = {};
				panobj = d["pan"];
				if (a.objectTracker && a.objectTracker.hasObject())
				{
					panobj["objUid"] = a.objectTracker.obj.uid;
				}
				else
				{
					panobj["x"] = a.panX;
					panobj["y"] = a.panY;
					panobj["a"] = a.panAngle;
				}
				panobj["ia"] = a.panConeInner;
				panobj["oa"] = a.panConeOuter;
				panobj["og"] = a.panConeOuterGain;
			}
			playingarr.push(d);
		}
		var fxobj = o["effects"];
		var fxarr;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				fxarr = [];
				for (i = 0, len = effects[p].length; i < len; i++)
				{
					fxarr.push({ "type": effects[p][i].type, "params": effects[p][i].params });
				}
				fxobj[p] = fxarr;
			}
		}
		return o;
	};
	var objectTrackerUidsToLoad = [];
	instanceProto.loadFromJSON = function (o)
	{
		var setSilent = o["silent"];
		masterVolume = o["masterVolume"];
		this.listenerZ = o["listenerZ"];
		this.listenerTracker.setObject(null);
		var listenerUid = o["listenerUid"];
		if (listenerUid !== -1)
		{
			this.listenerTracker.loadUid = listenerUid;
			objectTrackerUidsToLoad.push(this.listenerTracker);
		}
		var playingarr = o["playing"];
		var i, len, d, src, is_music, tag, playbackTime, looping, vol, b, a, p, pan, panObjUid;
		if (this.saveload !== 3)
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
			{
				a = audioInstances[i];
				if (a.is_music && this.saveload === 1)
					continue;		// only saving/loading sound: leave music playing
				if (!a.is_music && this.saveload === 2)
					continue;		// only saving/loading music: leave sound playing
				a.stop();
			}
		}
		var fxarr, fxtype, fxparams, fx;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				for (i = 0, len = effects[p].length; i < len; i++)
					effects[p][i].remove();
			}
		}
		cr.wipe(effects);
		for (p in o["effects"])
		{
			if (o["effects"].hasOwnProperty(p))
			{
				fxarr = o["effects"][p];
				for (i = 0, len = fxarr.length; i < len; i++)
				{
					fxtype = fxarr[i]["type"];
					fxparams = fxarr[i]["params"];
					switch (fxtype) {
					case "filter":
						addEffectForTag(p, new FilterEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "delay":
						addEffectForTag(p, new DelayEffect(fxparams[0], fxparams[1], fxparams[2]));
						break;
					case "convolve":
						src = fxparams[2];
						b = this.getAudioBuffer(src, false);
						if (b.bufferObject)
						{
							fx = new ConvolveEffect(b.bufferObject, fxparams[0], fxparams[1], src);
						}
						else
						{
							fx = new ConvolveEffect(null, fxparams[0], fxparams[1], src);
							b.normalizeWhenReady = fxparams[0];
							b.convolveWhenReady = fx;
						}
						addEffectForTag(p, fx);
						break;
					case "flanger":
						addEffectForTag(p, new FlangerEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "phaser":
						addEffectForTag(p, new PhaserEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "gain":
						addEffectForTag(p, new GainEffect(fxparams[0]));
						break;
					case "tremolo":
						addEffectForTag(p, new TremoloEffect(fxparams[0], fxparams[1]));
						break;
					case "ringmod":
						addEffectForTag(p, new RingModulatorEffect(fxparams[0], fxparams[1]));
						break;
					case "distortion":
						addEffectForTag(p, new DistortionEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "compressor":
						addEffectForTag(p, new CompressorEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "analyser":
						addEffectForTag(p, new AnalyserEffect(fxparams[0], fxparams[1]));
						break;
					}
				}
			}
		}
		for (i = 0, len = playingarr.length; i < len; i++)
		{
			if (this.saveload === 3)	// not saving/loading any sounds/music
				continue;
			d = playingarr[i];
			src = d["buffersrc"];
			is_music = d["is_music"];
			tag = d["tag"];
			playbackTime = d["playbackTime"];
			looping = d["looping"];
			vol = d["volume"];
			pan = d["pan"];
			panObjUid = (pan && pan.hasOwnProperty("objUid")) ? pan["objUid"] : -1;
			if (is_music && this.saveload === 1)	// not saving/loading music
				continue;
			if (!is_music && this.saveload === 2)	// not saving/loading sound
				continue;
			a = this.getAudioInstance(src, tag, is_music, looping, vol);
			if (!a)
			{
				b = this.getAudioBuffer(src, is_music);
				b.seekWhenReady = playbackTime;
				b.pauseWhenReady = d["paused"];
				if (pan)
				{
					if (panObjUid !== -1)
					{
						b.panWhenReady.push({ objUid: panObjUid, ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
					else
					{
						b.panWhenReady.push({ x: pan["x"], y: pan["y"], a: pan["a"], ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
				}
				continue;
			}
			a.resume_position = d["resume_position"];
			a.setPannerEnabled(!!pan);
			a.play(looping, vol, playbackTime);
			a.updatePlaybackRate();
			a.updateVolume();
			a.doSetMuted(a.is_muted || a.is_silent);
			if (d["paused"])
				a.pause();
			if (d["muted"])
				a.setMuted(true);
			a.doSetMuted(a.is_muted || a.is_silent);
			if (pan)
			{
				if (panObjUid !== -1)
				{
					a.objectTracker = a.objectTracker || new ObjectTracker();
					a.objectTracker.loadUid = panObjUid;
					objectTrackerUidsToLoad.push(a.objectTracker);
				}
				else
				{
					a.setPan(pan["x"], pan["y"], pan["a"], pan["ia"], pan["oa"], pan["og"]);
				}
			}
		}
		if (setSilent && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (!setSilent && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	instanceProto.afterLoad = function ()
	{
		var i, len, ot, inst;
		for (i = 0, len = objectTrackerUidsToLoad.length; i < len; i++)
		{
			ot = objectTrackerUidsToLoad[i];
			inst = this.runtime.getObjectByUID(ot.loadUid);
			ot.setObject(inst);
			ot.loadUid = -1;
			if (inst)
			{
				listenerX = inst.x;
				listenerY = inst.y;
			}
		}
		cr.clearArray(objectTrackerUidsToLoad);
	};
	instanceProto.onSuspend = function (s)
	{
		if (this.playinbackground)
			return;
		if (!s && context && context["resume"])
		{
			context["resume"]();
			isContextSuspended = false;
		}
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].setSuspended(s);
		if (s && context && context["suspend"])
		{
			context["suspend"]();
			isContextSuspended = true;
		}
	};
	instanceProto.tick = function ()
	{
		var dt = this.runtime.dt;
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			a.tick(dt);
			if (timescale_mode !== 0)
				a.updatePlaybackRate();
		}
		var p, arr, f;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				arr = effects[p];
				for (i = 0, len = arr.length; i < len; i++)
				{
					f = arr[i];
					if (f.tick)
						f.tick();
				}
			}
		}
		if (api === API_WEBAUDIO && this.listenerTracker.hasObject())
		{
			this.listenerTracker.tick(dt);
			listenerX = this.listenerTracker.obj.x;
			listenerY = this.listenerTracker.obj.y;
			context["listener"]["setPosition"](this.listenerTracker.obj.x, this.listenerTracker.obj.y, this.listenerZ);
		}
	};
	var preload_list = [];
	instanceProto.setPreloadList = function (arr)
	{
		var i, len, p, filename, size, isOgg;
		var total_size = 0;
		for (i = 0, len = arr.length; i < len; ++i)
		{
			p = arr[i];
			filename = p[0];
			size = p[1] * 2;
			isOgg = (filename.length > 4 && filename.substr(filename.length - 4) === ".ogg");
			if ((isOgg && useOgg) || (!isOgg && !useOgg))
			{
				preload_list.push({
					filename: filename,
					size: size,
					obj: null
				});
				total_size += size;
			}
		}
		return total_size;
	};
	instanceProto.startPreloads = function ()
	{
		var i, len, p, src;
		for (i = 0, len = preload_list.length; i < len; ++i)
		{
			p = preload_list[i];
			src = this.runtime.files_subfolder + p.filename;
			p.obj = this.getAudioBuffer(src, false);
		}
	};
	instanceProto.getPreloadedSize = function ()
	{
		var completed = 0;
		var i, len, p;
		for (i = 0, len = preload_list.length; i < len; ++i)
		{
			p = preload_list[i];
			if (p.obj.isLoadedAndDecoded() || p.obj.hasFailedToLoad() || this.runtime.isDomFree || this.runtime.isAndroidStockBrowser)
			{
				completed += p.size;
			}
			else if (p.obj.isLoaded())	// downloaded but not decoded: only happens in Web Audio API, count as half-way progress
			{
				completed += Math.floor(p.size / 2);
			}
		};
		return completed;
	};
	instanceProto.releaseAllMusicBuffers = function ()
	{
		var i, len, j, b;
		for (i = 0, j = 0, len = audioBuffers.length; i < len; ++i)
		{
			b = audioBuffers[i];
			audioBuffers[j] = b;
			if (b.is_music)
				b.release();
			else
				++j;		// keep
		}
		audioBuffers.length = j;
	};
	instanceProto.getAudioBuffer = function (src_, is_music, dont_create)
	{
		var i, len, a, ret = null, j, k, lenj, ai;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			a = audioBuffers[i];
			if (a.src === src_)
			{
				ret = a;
				break;
			}
		}
		if (!ret && !dont_create)
		{
			if (playMusicAsSoundWorkaround && is_music)
				this.releaseAllMusicBuffers();
			ret = new C2AudioBuffer(src_, is_music);
			audioBuffers.push(ret);
		}
		return ret;
	};
	instanceProto.getAudioInstance = function (src_, tag, is_music, looping, vol)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.src === src_ && (a.canBeRecycled() || is_music))
			{
				a.tag = tag;
				return a;
			}
		}
		var b = this.getAudioBuffer(src_, is_music);
		if (!b.bufferObject)
		{
			if (tag !== "<preload>")
			{
				b.playTagWhenReady = tag;
				b.loopWhenReady = looping;
				b.volumeWhenReady = vol;
			}
			return null;
		}
		a = new C2AudioInstance(b, tag);
		audioInstances.push(a);
		return a;
	};
	var taggedAudio = [];
	function SortByIsPlaying(a, b)
	{
		var an = a.isPlaying() ? 1 : 0;
		var bn = b.isPlaying() ? 1 : 0;
		if (an === bn)
			return 0;
		else if (an < bn)
			return 1;
		else
			return -1;
	};
	function getAudioByTag(tag, sort_by_playing)
	{
		cr.clearArray(taggedAudio);
		if (!tag.length)
		{
			if (!lastAudio || lastAudio.hasEnded())
				return;
			else
			{
				cr.clearArray(taggedAudio);
				taggedAudio[0] = lastAudio;
				return;
			}
		}
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (cr.equals_nocase(tag, a.tag))
				taggedAudio.push(a);
		}
		if (sort_by_playing)
			taggedAudio.sort(SortByIsPlaying);
	};
	function reconnectEffects(tag)
	{
		var i, len, arr, n, toNode = context["destination"];
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				toNode = arr[0].getInputNode();
				for (i = 0, len = arr.length; i < len; i++)
				{
					n = arr[i];
					if (i + 1 === len)
						n.connectTo(context["destination"]);
					else
						n.connectTo(arr[i + 1].getInputNode());
				}
			}
		}
		getAudioByTag(tag);
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].reconnect(toNode);
		if (micSource && micTag === tag)
		{
			micSource["disconnect"]();
			micSource["connect"](toNode);
		}
	};
	function addEffectForTag(tag, fx)
	{
		if (!effects.hasOwnProperty(tag))
			effects[tag] = [fx];
		else
			effects[tag].push(fx);
		reconnectEffects(tag);
	};
	function Cnds() {};
	Cnds.prototype.OnEnded = function (t)
	{
		return cr.equals_nocase(audTag, t);
	};
	Cnds.prototype.PreloadsComplete = function ()
	{
		var i, len;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			if (!audioBuffers[i].isLoadedAndDecoded() && !audioBuffers[i].hasFailedToLoad())
				return false;
		}
		return true;
	};
	Cnds.prototype.AdvancedAudioSupported = function ()
	{
		return api === API_WEBAUDIO;
	};
	Cnds.prototype.IsSilent = function ()
	{
		return silent;
	};
	Cnds.prototype.IsAnyPlaying = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			if (audioInstances[i].isPlaying())
				return true;
		}
		return false;
	};
	Cnds.prototype.IsTagPlaying = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (taggedAudio[i].isPlaying())
				return true;
		}
		return false;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Play = function (file, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v, 0, this.nextPlayTime);
		this.nextPlayTime = 0;
	};
	Acts.prototype.PlayAtPosition = function (file, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v, 0, this.nextPlayTime);
		this.nextPlayTime = 0;
	};
	Acts.prototype.PlayAtObject = function (file, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v, 0, this.nextPlayTime);
		this.nextPlayTime = 0;
	};
	Acts.prototype.PlayByName = function (folder, filename, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v, 0, this.nextPlayTime);
		this.nextPlayTime = 0;
	};
	Acts.prototype.PlayAtPositionByName = function (folder, filename, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v, 0, this.nextPlayTime);
		this.nextPlayTime = 0;
	};
	Acts.prototype.PlayAtObjectByName = function (folder, filename, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v, 0, this.nextPlayTime);
		this.nextPlayTime = 0;
	};
	Acts.prototype.SetLooping = function (tag, looping)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setLooping(looping === 0);
	};
	Acts.prototype.SetMuted = function (tag, muted)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setMuted(muted === 0);
	};
	Acts.prototype.SetVolume = function (tag, vol)
	{
		getAudioByTag(tag);
		var v = dbToLinear(vol);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setVolume(v);
	};
	Acts.prototype.Preload = function (file)
	{
		if (silent)
			return;
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_CORDOVA)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.PreloadByName = function (folder, filename)
	{
		if (silent)
			return;
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_CORDOVA)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.SetPlaybackRate = function (tag, rate)
	{
		getAudioByTag(tag);
		if (rate < 0.0)
			rate = 0;
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setPlaybackRate(rate);
	};
	Acts.prototype.Stop = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].stop();
	};
	Acts.prototype.StopAll = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].stop();
	};
	Acts.prototype.SetPaused = function (tag, state)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (state === 0)
				taggedAudio[i].pause();
			else
				taggedAudio[i].resume();
		}
	};
	Acts.prototype.Seek = function (tag, pos)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			taggedAudio[i].seek(pos);
		}
	};
	Acts.prototype.SetSilent = function (s)
	{
		var i, len;
		if (s === 2)					// toggling
			s = (silent ? 1 : 0);		// choose opposite state
		if (s === 0 && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (s === 1 && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	Acts.prototype.SetMasterVolume = function (vol)
	{
		masterVolume = dbToLinear(vol);
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].updateVolume();
	};
	Acts.prototype.AddFilterEffect = function (tag, type, freq, detune, q, gain, mix)
	{
		if (api !== API_WEBAUDIO || type < 0 || type >= filterTypes.length || !context["createBiquadFilter"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FilterEffect(type, freq, detune, q, gain, mix));
	};
	Acts.prototype.AddDelayEffect = function (tag, delay, gain, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DelayEffect(delay, dbToLinear(gain), mix));
	};
	Acts.prototype.AddFlangerEffect = function (tag, delay, modulation, freq, feedback, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FlangerEffect(delay / 1000, modulation / 1000, freq, feedback / 100, mix));
	};
	Acts.prototype.AddPhaserEffect = function (tag, freq, detune, q, mod, modfreq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new PhaserEffect(freq, detune, q, mod, modfreq, mix));
	};
	Acts.prototype.AddConvolutionEffect = function (tag, file, norm, mix)
	{
		if (api !== API_WEBAUDIO || !context["createConvolver"])
			return;
		var doNormalize = (norm === 0);
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		var b = this.getAudioBuffer(src, false);
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		var fx;
		if (b.bufferObject)
		{
			fx = new ConvolveEffect(b.bufferObject, doNormalize, mix, src);
		}
		else
		{
			fx = new ConvolveEffect(null, doNormalize, mix, src);
			b.normalizeWhenReady = doNormalize;
			b.convolveWhenReady = fx;
		}
		addEffectForTag(tag, fx);
	};
	Acts.prototype.AddGainEffect = function (tag, g)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(dbToLinear(g)));
	};
	Acts.prototype.AddMuteEffect = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(0));	// re-use gain effect with 0 gain
	};
	Acts.prototype.AddTremoloEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new TremoloEffect(freq, mix));
	};
	Acts.prototype.AddRingModEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new RingModulatorEffect(freq, mix));
	};
	Acts.prototype.AddDistortionEffect = function (tag, threshold, headroom, drive, makeupgain, mix)
	{
		if (api !== API_WEBAUDIO || !context["createWaveShaper"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DistortionEffect(threshold, headroom, drive, makeupgain, mix));
	};
	Acts.prototype.AddCompressorEffect = function (tag, threshold, knee, ratio, attack, release)
	{
		if (api !== API_WEBAUDIO || !context["createDynamicsCompressor"])
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new CompressorEffect(threshold, knee, ratio, attack / 1000, release / 1000));
	};
	Acts.prototype.AddAnalyserEffect = function (tag, fftSize, smoothing)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new AnalyserEffect(fftSize, smoothing));
	};
	Acts.prototype.RemoveEffects = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		var i, len, arr;
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				for (i = 0, len = arr.length; i < len; i++)
					arr[i].remove();
				cr.clearArray(arr);
				reconnectEffects(tag);
			}
		}
	};
	Acts.prototype.SetEffectParameter = function (tag, index, param, value, ramp, time)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var arr;
		if (!effects.hasOwnProperty(tag))
			return;
		arr = effects[tag];
		if (index < 0 || index >= arr.length)
			return;
		arr[index].setParam(param, value, ramp, time);
	};
	Acts.prototype.SetListenerObject = function (obj_)
	{
		if (!obj_ || api !== API_WEBAUDIO)
			return;
		var inst = obj_.getFirstPicked();
		if (!inst)
			return;
		this.listenerTracker.setObject(inst);
		listenerX = inst.x;
		listenerY = inst.y;
	};
	Acts.prototype.SetListenerZ = function (z)
	{
		this.listenerZ = z;
	};
	Acts.prototype.ScheduleNextPlay = function (t)
	{
		if (!context)
			return;		// needs Web Audio API
		this.nextPlayTime = t;
	};
	Acts.prototype.UnloadAudio = function (file)
	{
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		var b = this.getAudioBuffer(src, is_music, true /* don't create if missing */);
		if (!b)
			return;		// not loaded
		b.release();
		cr.arrayFindRemove(audioBuffers, b);
	};
	Acts.prototype.UnloadAudioByName = function (folder, filename)
	{
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		var b = this.getAudioBuffer(src, is_music, true /* don't create if missing */);
		if (!b)
			return;		// not loaded
		b.release();
		cr.arrayFindRemove(audioBuffers, b);
	};
	Acts.prototype.UnloadAll = function ()
	{
		var i, len;
		for (i = 0, len = audioBuffers.length; i < len; ++i)
		{
			audioBuffers[i].release();
		};
		cr.clearArray(audioBuffers);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Duration = function (ret, tag)
	{
		getAudioByTag(tag, true);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getDuration());
		else
			ret.set_float(0);
	};
	Exps.prototype.PlaybackTime = function (ret, tag)
	{
		getAudioByTag(tag, true);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getPlaybackTime(true));
		else
			ret.set_float(0);
	};
	Exps.prototype.Volume = function (ret, tag)
	{
		getAudioByTag(tag, true);
		if (taggedAudio.length)
		{
			var v = taggedAudio[0].getVolume();
			ret.set_float(linearToDb(v));
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.MasterVolume = function (ret)
	{
		ret.set_float(linearToDb(masterVolume));
	};
	Exps.prototype.EffectCount = function (ret, tag)
	{
		tag = tag.toLowerCase();
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		ret.set_int(arr ? arr.length : 0);
	};
	function getAnalyser(tag, index)
	{
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		if (arr && index >= 0 && index < arr.length && arr[index].freqBins)
			return arr[index];
		else
			return null;
	};
	Exps.prototype.AnalyserFreqBinCount = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		ret.set_int(analyser ? analyser.node["frequencyBinCount"] : 0);
	};
	Exps.prototype.AnalyserFreqBinAt = function (ret, tag, index, bin)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		bin = Math.floor(bin);
		var analyser = getAnalyser(tag, index);
		if (!analyser)
			ret.set_float(0);
		else if (bin < 0 || bin >= analyser.node["frequencyBinCount"])
			ret.set_float(0);
		else
			ret.set_float(analyser.freqBins[bin]);
	};
	Exps.prototype.AnalyserPeakLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.peak);
		else
			ret.set_float(0);
	};
	Exps.prototype.AnalyserRMSLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.rms);
		else
			ret.set_float(0);
	};
	Exps.prototype.SampleRate = function (ret)
	{
		ret.set_int(context ? context.sampleRate : 0);
	};
	Exps.prototype.CurrentTime = function (ret)
	{
		ret.set_float(context ? context.currentTime : cr.performance_now());
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Browser = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Browser.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	var offlineScriptReady = false;
	var browserPluginReady = false;
	document.addEventListener("DOMContentLoaded", function ()
	{
		if (window["C2_RegisterSW"] && navigator.serviceWorker)
		{
			var offlineClientScript = document.createElement("script");
			offlineClientScript.onload = function ()
			{
				offlineScriptReady = true;
				checkReady()
			};
			offlineClientScript.src = "offlineClient.js";
			document.head.appendChild(offlineClientScript);
		}
	});
	var browserInstance = null;
	typeProto.onAppBegin = function ()
	{
		browserPluginReady = true;
		checkReady();
	};
	function checkReady()
	{
		if (offlineScriptReady && browserPluginReady && window["OfflineClientInfo"])
		{
			window["OfflineClientInfo"]["SetMessageCallback"](function (e)
			{
				browserInstance.onSWMessage(e);
			});
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		window.addEventListener("resize", function () {
			self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnResize, self);
		});
		browserInstance = this;
		if (typeof navigator.onLine !== "undefined")
		{
			window.addEventListener("online", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOnline, self);
			});
			window.addEventListener("offline", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOffline, self);
			});
		}
		if (typeof window.applicationCache !== "undefined")
		{
			window.applicationCache.addEventListener('updateready', function() {
				self.runtime.loadingprogress = 1;
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, self);
			});
			window.applicationCache.addEventListener('progress', function(e) {
				self.runtime.loadingprogress = (e["loaded"] / e["total"]) || 0;
			});
		}
		if (!this.runtime.isDirectCanvas)
		{
			document.addEventListener("appMobi.device.update.available", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, self);
			});
			document.addEventListener("backbutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
			});
			document.addEventListener("menubutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnMenuButton, self);
			});
			document.addEventListener("searchbutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnSearchButton, self);
			});
			document.addEventListener("tizenhwkey", function (e) {
				var ret;
				switch (e["keyName"]) {
				case "back":
					ret = self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
					if (!ret)
					{
						if (window["tizen"])
							window["tizen"]["application"]["getCurrentApplication"]()["exit"]();
					}
					break;
				case "menu":
					ret = self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnMenuButton, self);
					if (!ret)
						e.preventDefault();
					break;
				}
			});
		}
		if (this.runtime.isWindows10 && typeof Windows !== "undefined")
		{
			Windows["UI"]["Core"]["SystemNavigationManager"]["getForCurrentView"]().addEventListener("backrequested", function (e)
			{
				var ret = self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
				if (ret)
					e["handled"] = true;
		    });
		}
		else if (this.runtime.isWinJS && WinJS["Application"])
		{
			WinJS["Application"]["onbackclick"] = function (e)
			{
				return !!self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
			};
		}
		this.runtime.addSuspendCallback(function(s) {
			if (s)
			{
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnPageHidden, self);
			}
			else
			{
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnPageVisible, self);
			}
		});
		this.is_arcade = (typeof window["is_scirra_arcade"] !== "undefined");
	};
	instanceProto.onSWMessage = function (e)
	{
		var messageType = e.data.type;
		if (messageType === "downloading-update")
			this.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateFound, this);
		else if (messageType === "update-ready" || messageType === "update-pending")
			this.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, this);
		else if (messageType === "offline-ready")
			this.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOfflineReady, this);
	};
	var batteryManager = null;
	var loadedBatteryManager = false;
	function maybeLoadBatteryManager()
	{
		if (loadedBatteryManager)
			return;
		if (!navigator["getBattery"])
			return;
		var promise = navigator["getBattery"]();
		loadedBatteryManager = true;
		if (promise)
		{
			promise.then(function (manager) {
				batteryManager = manager;
			});
		}
	};
	function Cnds() {};
	Cnds.prototype.CookiesEnabled = function()
	{
		return navigator ? navigator.cookieEnabled : false;
	};
	Cnds.prototype.IsOnline = function()
	{
		return navigator ? navigator.onLine : false;
	};
	Cnds.prototype.HasJava = function()
	{
		return navigator ? navigator.javaEnabled() : false;
	};
	Cnds.prototype.OnOnline = function()
	{
		return true;
	};
	Cnds.prototype.OnOffline = function()
	{
		return true;
	};
	Cnds.prototype.IsDownloadingUpdate = function ()
	{
		if (typeof window["applicationCache"] === "undefined")
			return false;
		else
			return window["applicationCache"]["status"] === window["applicationCache"]["DOWNLOADING"];
	};
	Cnds.prototype.OnUpdateReady = function ()
	{
		return true;
	};
	Cnds.prototype.PageVisible = function ()
	{
		return !this.runtime.isSuspended;
	};
	Cnds.prototype.OnPageVisible = function ()
	{
		return true;
	};
	Cnds.prototype.OnPageHidden = function ()
	{
		return true;
	};
	Cnds.prototype.OnResize = function ()
	{
		return true;
	};
	Cnds.prototype.IsFullscreen = function ()
	{
		return !!(document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || this.runtime.isNodeFullscreen);
	};
	Cnds.prototype.OnBackButton = function ()
	{
		return true;
	};
	Cnds.prototype.OnMenuButton = function ()
	{
		return true;
	};
	Cnds.prototype.OnSearchButton = function ()
	{
		return true;
	};
	Cnds.prototype.IsMetered = function ()
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			return false;
		return !!connection["metered"];
	};
	Cnds.prototype.IsCharging = function ()
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (battery)
		{
			return !!battery["charging"]
		}
		else
		{
			maybeLoadBatteryManager();
			if (batteryManager)
			{
				return !!batteryManager["charging"];
			}
			else
			{
				return true;		// if unknown, default to charging (powered)
			}
		}
	};
	Cnds.prototype.IsPortraitLandscape = function (p)
	{
		var current = (window.innerWidth <= window.innerHeight ? 0 : 1);
		return current === p;
	};
	Cnds.prototype.SupportsFullscreen = function ()
	{
		if (this.runtime.isNodeWebkit)
			return true;
		var elem = this.runtime.canvasdiv || this.runtime.canvas;
		return !!(elem["requestFullscreen"] || elem["mozRequestFullScreen"] || elem["msRequestFullscreen"] || elem["webkitRequestFullScreen"]);
	};
	Cnds.prototype.OnUpdateFound = function ()
	{
		return true;
	};
	Cnds.prototype.OnUpdateReady = function ()
	{
		return true;
	};
	Cnds.prototype.OnOfflineReady = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Alert = function (msg)
	{
		if (!this.runtime.isDomFree)
			alert(msg.toString());
	};
	Acts.prototype.Close = function ()
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["forceToFinish"]();
		else if (window["tizen"])
			window["tizen"]["application"]["getCurrentApplication"]()["exit"]();
		else if (navigator["app"] && navigator["app"]["exitApp"])
			navigator["app"]["exitApp"]();
		else if (navigator["device"] && navigator["device"]["exitApp"])
			navigator["device"]["exitApp"]();
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.close();
	};
	Acts.prototype.Focus = function ()
	{
		if (this.runtime.isNodeWebkit)
		{
			var win = window["nwgui"]["Window"]["get"]();
			win["focus"]();
		}
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.focus();
	};
	Acts.prototype.Blur = function ()
	{
		if (this.runtime.isNodeWebkit)
		{
			var win = window["nwgui"]["Window"]["get"]();
			win["blur"]();
		}
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.blur();
	};
	Acts.prototype.GoBack = function ()
	{
		if (navigator["app"] && navigator["app"]["backHistory"])
			navigator["app"]["backHistory"]();
		else if (!this.is_arcade && !this.runtime.isDomFree && window.back)
			window.back();
	};
	Acts.prototype.GoForward = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.forward)
			window.forward();
	};
	Acts.prototype.GoHome = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.home)
			window.home();
	};
	Acts.prototype.GoToURL = function (url, target)
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["openURL"](url);
		else if (this.runtime.isEjecta)
			ejecta["openURL"](url);
		else if (this.runtime.isWinJS)
			Windows["System"]["Launcher"]["launchUriAsync"](new Windows["Foundation"]["Uri"](url));
		else if (navigator["app"] && navigator["app"]["loadUrl"])
			navigator["app"]["loadUrl"](url, { "openExternal": true });
		else if (this.runtime.isCordova)
			window.open(url, "_system");
		else if (!this.is_arcade && !this.runtime.isDomFree)
		{
			if (target === 2 && !this.is_arcade)		// top
				window.top.location = url;
			else if (target === 1 && !this.is_arcade)	// parent
				window.parent.location = url;
			else					// self
				window.location = url;
		}
	};
	Acts.prototype.GoToURLWindow = function (url, tag)
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["openURL"](url);
		else if (this.runtime.isEjecta)
			ejecta["openURL"](url);
		else if (this.runtime.isWinJS)
			Windows["System"]["Launcher"]["launchUriAsync"](new Windows["Foundation"]["Uri"](url));
		else if (navigator["app"] && navigator["app"]["loadUrl"])
			navigator["app"]["loadUrl"](url, { "openExternal": true });
		else if (this.runtime.isCordova)
			window.open(url, "_system");
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.open(url, tag);
	};
	Acts.prototype.Reload = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree)
			window.location.reload();
	};
	var firstRequestFullscreen = true;
	var crruntime = null;
	function onFullscreenError(e)
	{
		if (console && console.warn)
			console.warn("Fullscreen request failed: ", e);
		crruntime["setSize"](window.innerWidth, window.innerHeight);
	};
	Acts.prototype.RequestFullScreen = function (stretchmode)
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Requesting fullscreen is not supported on this platform - the request has been ignored");
			return;
		}
		if (stretchmode >= 2)
			stretchmode += 1;
		if (stretchmode === 6)
			stretchmode = 2;
		if (this.runtime.isNodeWebkit)
		{
			if (this.runtime.isDebug)
			{
				debuggerFullscreen(true);
			}
			else if (!this.runtime.isNodeFullscreen && window["nwgui"])
			{
				window["nwgui"]["Window"]["get"]()["enterFullscreen"]();
				this.runtime.isNodeFullscreen = true;
				this.runtime.fullscreen_scaling = (stretchmode >= 2 ? stretchmode : 0);
			}
		}
		else
		{
			if (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || document["fullScreenElement"])
			{
				return;
			}
			this.runtime.fullscreen_scaling = (stretchmode >= 2 ? stretchmode : 0);
			var elem = document.documentElement;
			if (firstRequestFullscreen)
			{
				firstRequestFullscreen = false;
				crruntime = this.runtime;
				elem.addEventListener("mozfullscreenerror", onFullscreenError);
				elem.addEventListener("webkitfullscreenerror", onFullscreenError);
				elem.addEventListener("MSFullscreenError", onFullscreenError);
				elem.addEventListener("fullscreenerror", onFullscreenError);
			}
			if (elem["requestFullscreen"])
				elem["requestFullscreen"]();
			else if (elem["mozRequestFullScreen"])
				elem["mozRequestFullScreen"]();
			else if (elem["msRequestFullscreen"])
				elem["msRequestFullscreen"]();
			else if (elem["webkitRequestFullScreen"])
			{
				if (typeof Element !== "undefined" && typeof Element["ALLOW_KEYBOARD_INPUT"] !== "undefined")
					elem["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
				else
					elem["webkitRequestFullScreen"]();
			}
		}
	};
	Acts.prototype.CancelFullScreen = function ()
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Exiting fullscreen is not supported on this platform - the request has been ignored");
			return;
		}
		if (this.runtime.isNodeWebkit)
		{
			if (this.runtime.isDebug)
			{
				debuggerFullscreen(false);
			}
			else if (this.runtime.isNodeFullscreen && window["nwgui"])
			{
				window["nwgui"]["Window"]["get"]()["leaveFullscreen"]();
				this.runtime.isNodeFullscreen = false;
			}
		}
		else
		{
			if (document["exitFullscreen"])
				document["exitFullscreen"]();
			else if (document["mozCancelFullScreen"])
				document["mozCancelFullScreen"]();
			else if (document["msExitFullscreen"])
				document["msExitFullscreen"]();
			else if (document["webkitCancelFullScreen"])
				document["webkitCancelFullScreen"]();
		}
	};
	Acts.prototype.Vibrate = function (pattern_)
	{
		try {
			var arr = pattern_.split(",");
			var i, len;
			for (i = 0, len = arr.length; i < len; i++)
			{
				arr[i] = parseInt(arr[i], 10);
			}
			if (navigator["vibrate"])
				navigator["vibrate"](arr);
			else if (navigator["mozVibrate"])
				navigator["mozVibrate"](arr);
			else if (navigator["webkitVibrate"])
				navigator["webkitVibrate"](arr);
			else if (navigator["msVibrate"])
				navigator["msVibrate"](arr);
		}
		catch (e) {}
	};
	Acts.prototype.InvokeDownload = function (url_, filename_)
	{
		var a = document.createElement("a");
		if (typeof a["download"] === "undefined")
		{
			window.open(url_);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename_;
			a.href = url_;
			a["download"] = filename_;
			body.appendChild(a);
			var clickEvent = new MouseEvent("click");
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	Acts.prototype.InvokeDownloadString = function (str_, mimetype_, filename_)
	{
		var datauri = "data:" + mimetype_ + "," + encodeURIComponent(str_);
		var a = document.createElement("a");
		if (typeof a["download"] === "undefined")
		{
			window.open(datauri);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename_;
			a.href = datauri;
			a["download"] = filename_;
			body.appendChild(a);
			var clickEvent = new MouseEvent("click");
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	Acts.prototype.ConsoleLog = function (type_, msg_)
	{
		if (typeof console === "undefined")
			return;
		if (type_ === 0 && console.log)
			console.log(msg_.toString());
		if (type_ === 1 && console.warn)
			console.warn(msg_.toString());
		if (type_ === 2 && console.error)
			console.error(msg_.toString());
	};
	Acts.prototype.ConsoleGroup = function (name_)
	{
		if (console && console.group)
			console.group(name_);
	};
	Acts.prototype.ConsoleGroupEnd = function ()
	{
		if (console && console.groupEnd)
			console.groupEnd();
	};
	Acts.prototype.ExecJs = function (js_)
	{
		try {
			if (eval)
				eval(js_);
		}
		catch (e)
		{
			if (console && console.error)
				console.error("Error executing Javascript: ", e);
		}
	};
	var orientations = [
		"portrait",
		"landscape",
		"portrait-primary",
		"portrait-secondary",
		"landscape-primary",
		"landscape-secondary"
	];
	Acts.prototype.LockOrientation = function (o)
	{
		o = Math.floor(o);
		if (o < 0 || o >= orientations.length)
			return;
		this.runtime.autoLockOrientation = false;
		var orientation = orientations[o];
		if (screen["orientation"] && screen["orientation"]["lock"])
			screen["orientation"]["lock"](orientation);
		else if (screen["lockOrientation"])
			screen["lockOrientation"](orientation);
		else if (screen["webkitLockOrientation"])
			screen["webkitLockOrientation"](orientation);
		else if (screen["mozLockOrientation"])
			screen["mozLockOrientation"](orientation);
		else if (screen["msLockOrientation"])
			screen["msLockOrientation"](orientation);
	};
	Acts.prototype.UnlockOrientation = function ()
	{
		this.runtime.autoLockOrientation = false;
		if (screen["orientation"] && screen["orientation"]["unlock"])
			screen["orientation"]["unlock"]();
		else if (screen["unlockOrientation"])
			screen["unlockOrientation"]();
		else if (screen["webkitUnlockOrientation"])
			screen["webkitUnlockOrientation"]();
		else if (screen["mozUnlockOrientation"])
			screen["mozUnlockOrientation"]();
		else if (screen["msUnlockOrientation"])
			screen["msUnlockOrientation"]();
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.URL = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.toString());
	};
	Exps.prototype.Protocol = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.protocol);
	};
	Exps.prototype.Domain = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.hostname);
	};
	Exps.prototype.PathName = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.pathname);
	};
	Exps.prototype.Hash = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.hash);
	};
	Exps.prototype.Referrer = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : document.referrer);
	};
	Exps.prototype.Title = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : document.title);
	};
	Exps.prototype.Name = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.appName);
	};
	Exps.prototype.Version = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.appVersion);
	};
	Exps.prototype.Language = function (ret)
	{
		if (navigator && navigator.language)
			ret.set_string(navigator.language);
		else
			ret.set_string("");
	};
	Exps.prototype.Platform = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.platform);
	};
	Exps.prototype.Product = function (ret)
	{
		if (navigator && navigator.product)
			ret.set_string(navigator.product);
		else
			ret.set_string("");
	};
	Exps.prototype.Vendor = function (ret)
	{
		if (navigator && navigator.vendor)
			ret.set_string(navigator.vendor);
		else
			ret.set_string("");
	};
	Exps.prototype.UserAgent = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.userAgent);
	};
	Exps.prototype.QueryString = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.search);
	};
	Exps.prototype.QueryParam = function (ret, paramname)
	{
		if (this.runtime.isDomFree)
		{
			ret.set_string("");
			return;
		}
		var match = RegExp('[?&]' + paramname + '=([^&]*)').exec(window.location.search);
		if (match)
			ret.set_string(decodeURIComponent(match[1].replace(/\+/g, ' ')));
		else
			ret.set_string("");
	};
	Exps.prototype.Bandwidth = function (ret)
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			ret.set_float(Number.POSITIVE_INFINITY);
		else
		{
			if (typeof connection["bandwidth"] !== "undefined")
				ret.set_float(connection["bandwidth"]);
			else if (typeof connection["downlinkMax"] !== "undefined")
				ret.set_float(connection["downlinkMax"]);
			else
				ret.set_float(Number.POSITIVE_INFINITY);
		}
	};
	Exps.prototype.ConnectionType = function (ret)
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			ret.set_string("unknown");
		else
		{
			ret.set_string(connection["type"] || "unknown");
		}
	};
	Exps.prototype.BatteryLevel = function (ret)
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (battery)
		{
			ret.set_float(battery["level"]);
		}
		else
		{
			maybeLoadBatteryManager();
			if (batteryManager)
			{
				ret.set_float(batteryManager["level"]);
			}
			else
			{
				ret.set_float(1);		// not supported/unknown: assume charged
			}
		}
	};
	Exps.prototype.BatteryTimeLeft = function (ret)
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (battery)
		{
			ret.set_float(battery["dischargingTime"]);
		}
		else
		{
			maybeLoadBatteryManager();
			if (batteryManager)
			{
				ret.set_float(batteryManager["dischargingTime"]);
			}
			else
			{
				ret.set_float(Number.POSITIVE_INFINITY);		// not supported/unknown: assume infinite time left
			}
		}
	};
	Exps.prototype.ExecJS = function (ret, js_)
	{
		if (!eval)
		{
			ret.set_any(0);
			return;
		}
		var result = 0;
		try {
			result = eval(js_);
		}
		catch (e)
		{
			if (console && console.error)
				console.error("Error executing Javascript: ", e);
		}
		if (typeof result === "number")
			ret.set_any(result);
		else if (typeof result === "string")
			ret.set_any(result);
		else if (typeof result === "boolean")
			ret.set_any(result ? 1 : 0);
		else
			ret.set_any(0);
	};
	Exps.prototype.ScreenWidth = function (ret)
	{
		ret.set_int(screen.width);
	};
	Exps.prototype.ScreenHeight = function (ret)
	{
		ret.set_int(screen.height);
	};
	Exps.prototype.DevicePixelRatio = function (ret)
	{
		ret.set_float(this.runtime.devicePixelRatio);
	};
	Exps.prototype.WindowInnerWidth = function (ret)
	{
		ret.set_int(window.innerWidth);
	};
	Exps.prototype.WindowInnerHeight = function (ret)
	{
		ret.set_int(window.innerHeight);
	};
	Exps.prototype.WindowOuterWidth = function (ret)
	{
		ret.set_int(window.outerWidth);
	};
	Exps.prototype.WindowOuterHeight = function (ret)
	{
		ret.set_int(window.outerHeight);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Button = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Button.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Button plugin not supported on this platform - the object will not be created");
			return;
		}
		this.isCheckbox = (this.properties[0] === 1);
		this.inputElem = document.createElement("input");
		if (this.isCheckbox)
			this.elem = document.createElement("label");
		else
			this.elem = this.inputElem;
		this.labelText = null;
		this.inputElem.type = (this.isCheckbox ? "checkbox" : "button");
		this.inputElem.id = this.properties[6];
		jQuery(this.elem).appendTo(this.runtime.canvasdiv ? this.runtime.canvasdiv : "body");
		if (this.isCheckbox)
		{
			jQuery(this.inputElem).appendTo(this.elem);
			this.labelText = document.createTextNode(this.properties[1]);
			jQuery(this.elem).append(this.labelText);
			this.inputElem.checked = (this.properties[7] !== 0);
			jQuery(this.elem).css("font-family", "sans-serif");
			jQuery(this.elem).css("display", "inline-block");
			jQuery(this.elem).css("color", "black");
		}
		else
			this.inputElem.value = this.properties[1];
		this.elem.title = this.properties[2];
		this.inputElem.disabled = (this.properties[4] === 0);
		this.autoFontSize = (this.properties[5] !== 0);
		this.element_hidden = false;
		if (this.properties[3] === 0)
		{
			jQuery(this.elem).hide();
			this.visible = false;
			this.element_hidden = true;
		}
		this.inputElem.onclick = (function (self) {
			return function(e) {
				e.stopPropagation();
				self.runtime.isInUserInputEvent = true;
				self.runtime.trigger(cr.plugins_.Button.prototype.cnds.OnClicked, self);
				self.runtime.isInUserInputEvent = false;
			};
		})(this);
		this.elem.addEventListener("touchstart", function (e) {
			e.stopPropagation();
		}, false);
		this.elem.addEventListener("touchmove", function (e) {
			e.stopPropagation();
		}, false);
		this.elem.addEventListener("touchend", function (e) {
			e.stopPropagation();
		}, false);
		jQuery(this.elem).mousedown(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).mouseup(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).keydown(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).keyup(function (e) {
			e.stopPropagation();
		});
		this.lastLeft = 0;
		this.lastTop = 0;
		this.lastRight = 0;
		this.lastBottom = 0;
		this.lastWinWidth = 0;
		this.lastWinHeight = 0;
		this.updatePosition(true);
		this.runtime.tickMe(this);
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"tooltip": this.elem.title,
			"disabled": !!this.inputElem.disabled
		};
		if (this.isCheckbox)
		{
			o["checked"] = !!this.inputElem.checked;
			o["text"] = this.labelText.nodeValue;
		}
		else
		{
			o["text"] = this.elem.value;
		}
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.elem.title = o["tooltip"];
		this.inputElem.disabled = o["disabled"];
		if (this.isCheckbox)
		{
			this.inputElem.checked = o["checked"];
			this.labelText.nodeValue = o["text"];
		}
		else
		{
			this.elem.value = o["text"];
		}
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.isDomFree)
			return;
		jQuery(this.elem).remove();
		this.elem = null;
	};
	instanceProto.tick = function ()
	{
		this.updatePosition();
	};
	var last_canvas_offset = null;
	var last_checked_tick = -1;
	instanceProto.updatePosition = function (first)
	{
		if (this.runtime.isDomFree)
			return;
		var left = this.layer.layerToCanvas(this.x, this.y, true);
		var top = this.layer.layerToCanvas(this.x, this.y, false);
		var right = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, true);
		var bottom = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, false);
		var rightEdge = this.runtime.width / this.runtime.devicePixelRatio;
		var bottomEdge = this.runtime.height / this.runtime.devicePixelRatio;
		if (!this.visible || !this.layer.visible || right <= 0 || bottom <= 0 || left >= rightEdge || top >= bottomEdge)
		{
			if (!this.element_hidden)
				jQuery(this.elem).hide();
			this.element_hidden = true;
			return;
		}
		if (left < 1)
			left = 1;
		if (top < 1)
			top = 1;
		if (right >= rightEdge)
			right = rightEdge - 1;
		if (bottom >= bottomEdge)
			bottom = bottomEdge - 1;
		var curWinWidth = window.innerWidth;
		var curWinHeight = window.innerHeight;
		if (!first && this.lastLeft === left && this.lastTop === top && this.lastRight === right && this.lastBottom === bottom && this.lastWinWidth === curWinWidth && this.lastWinHeight === curWinHeight)
		{
			if (this.element_hidden)
			{
				jQuery(this.elem).show();
				this.element_hidden = false;
			}
			return;
		}
		this.lastLeft = left;
		this.lastTop = top;
		this.lastRight = right;
		this.lastBottom = bottom;
		this.lastWinWidth = curWinWidth;
		this.lastWinHeight = curWinHeight;
		if (this.element_hidden)
		{
			jQuery(this.elem).show();
			this.element_hidden = false;
		}
		var offx = Math.round(left) + jQuery(this.runtime.canvas).offset().left;
		var offy = Math.round(top) + jQuery(this.runtime.canvas).offset().top;
		jQuery(this.elem).css("position", "absolute");
		jQuery(this.elem).offset({left: offx, top: offy});
		jQuery(this.elem).width(Math.round(right - left));
		jQuery(this.elem).height(Math.round(bottom - top));
		if (this.autoFontSize)
			jQuery(this.elem).css("font-size", ((this.layer.getScale(true) / this.runtime.devicePixelRatio) - 0.2) + "em");
	};
	instanceProto.draw = function(ctx)
	{
	};
	instanceProto.drawGL = function(glw)
	{
	};
	function Cnds() {};
	Cnds.prototype.OnClicked = function ()
	{
		return true;
	};
	Cnds.prototype.IsChecked = function ()
	{
		return this.isCheckbox && this.inputElem.checked;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetText = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		if (this.isCheckbox)
			this.labelText.nodeValue = text;
		else
			this.elem.value = text;
	};
	Acts.prototype.SetTooltip = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.title = text;
	};
	Acts.prototype.SetVisible = function (vis)
	{
		if (this.runtime.isDomFree)
			return;
		this.visible = (vis !== 0);
	};
	Acts.prototype.SetEnabled = function (en)
	{
		if (this.runtime.isDomFree)
			return;
		this.inputElem.disabled = (en === 0);
	};
	Acts.prototype.SetFocus = function ()
	{
		if (this.runtime.isDomFree)
			return;
		this.inputElem.focus();
	};
	Acts.prototype.SetBlur = function ()
	{
		if (this.runtime.isDomFree)
			return;
		this.inputElem.blur();
	};
	Acts.prototype.SetCSSStyle = function (p, v)
	{
		if (this.runtime.isDomFree)
			return;
		jQuery(this.elem).css(p, v);
	};
	Acts.prototype.SetChecked = function (c)
	{
		if (this.runtime.isDomFree || !this.isCheckbox)
			return;
		this.inputElem.checked = (c === 1);
	};
	Acts.prototype.ToggleChecked = function ()
	{
		if (this.runtime.isDomFree || !this.isCheckbox)
			return;
		this.inputElem.checked = !this.inputElem.checked;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Dictionary = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Dictionary.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.dictionary = {};
		this.cur_key = "";		// current key in for-each loop
		this.key_count = 0;
	};
	instanceProto.saveToJSON = function ()
	{
		return this.dictionary;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.dictionary = o;
		this.key_count = 0;
		for (var p in this.dictionary)
		{
			if (this.dictionary.hasOwnProperty(p))
				this.key_count++;
		}
	};
	function Cnds() {};
	Cnds.prototype.CompareValue = function (key_, cmp_, value_)
	{
		return cr.do_cmp(this.dictionary[key_], cmp_, value_);
	};
	Cnds.prototype.ForEachKey = function ()
	{
		var current_event = this.runtime.getCurrentEventStack().current_event;
		for (var p in this.dictionary)
		{
			if (this.dictionary.hasOwnProperty(p))
			{
				this.cur_key = p;
				this.runtime.pushCopySol(current_event.solModifiers);
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		this.cur_key = "";
		return false;
	};
	Cnds.prototype.CompareCurrentValue = function (cmp_, value_)
	{
		return cr.do_cmp(this.dictionary[this.cur_key], cmp_, value_);
	};
	Cnds.prototype.HasKey = function (key_)
	{
		return this.dictionary.hasOwnProperty(key_);
	};
	Cnds.prototype.IsEmpty = function ()
	{
		return this.key_count === 0;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.AddKey = function (key_, value_)
	{
		if (!this.dictionary.hasOwnProperty(key_))
			this.key_count++;
		this.dictionary[key_] = value_;
	};
	Acts.prototype.SetKey = function (key_, value_)
	{
		if (this.dictionary.hasOwnProperty(key_))
			this.dictionary[key_] = value_;
	};
	Acts.prototype.DeleteKey = function (key_)
	{
		if (this.dictionary.hasOwnProperty(key_))
		{
			delete this.dictionary[key_];
			this.key_count--;
		}
	};
	Acts.prototype.Clear = function ()
	{
		cr.wipe(this.dictionary);		// avoid garbaging
		this.key_count = 0;
	};
	Acts.prototype.JSONLoad = function (json_)
	{
		var o;
		try {
			o = JSON.parse(json_);
		}
		catch(e) { return; }
		if (!o["c2dictionary"])		// presumably not a c2dictionary object
			return;
		this.dictionary = o["data"];
		this.key_count = 0;
		for (var p in this.dictionary)
		{
			if (this.dictionary.hasOwnProperty(p))
				this.key_count++;
		}
	};
	Acts.prototype.JSONDownload = function (filename)
	{
		var a = document.createElement("a");
		if (typeof a.download === "undefined")
		{
			var str = 'data:text/html,' + encodeURIComponent("<p><a download='data.json' href=\"data:application/json,"
				+ encodeURIComponent(JSON.stringify({
						"c2dictionary": true,
						"data": this.dictionary
					}))
				+ "\">Download link</a></p>");
			window.open(str);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename;
			a.href = "data:application/json," + encodeURIComponent(JSON.stringify({
						"c2dictionary": true,
						"data": this.dictionary
					}));
			a.download = filename;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Get = function (ret, key_)
	{
		if (this.dictionary.hasOwnProperty(key_))
			ret.set_any(this.dictionary[key_]);
		else
			ret.set_int(0);
	};
	Exps.prototype.KeyCount = function (ret)
	{
		ret.set_int(this.key_count);
	};
	Exps.prototype.CurrentKey = function (ret)
	{
		ret.set_string(this.cur_key);
	};
	Exps.prototype.CurrentValue = function (ret)
	{
		if (this.dictionary.hasOwnProperty(this.cur_key))
			ret.set_any(this.dictionary[this.cur_key]);
		else
			ret.set_int(0);
	};
	Exps.prototype.AsJSON = function (ret)
	{
		ret.set_string(JSON.stringify({
			"c2dictionary": true,
			"data": this.dictionary
		}));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Function = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Function.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var funcStack = [];
	var funcStackPtr = -1;
	var isInPreview = false;	// set in onCreate
	function FuncStackEntry()
	{
		this.name = "";
		this.retVal = 0;
		this.params = [];
	};
	function pushFuncStack()
	{
		funcStackPtr++;
		if (funcStackPtr === funcStack.length)
			funcStack.push(new FuncStackEntry());
		return funcStack[funcStackPtr];
	};
	function getCurrentFuncStack()
	{
		if (funcStackPtr < 0)
			return null;
		return funcStack[funcStackPtr];
	};
	function getOneAboveFuncStack()
	{
		if (!funcStack.length)
			return null;
		var i = funcStackPtr + 1;
		if (i >= funcStack.length)
			i = funcStack.length - 1;
		return funcStack[i];
	};
	function popFuncStack()
	{
;
		funcStackPtr--;
	};
	instanceProto.onCreate = function()
	{
		isInPreview = (typeof cr_is_preview !== "undefined");
		var self = this;
		window["c2_callFunction"] = function (name_, params_)
		{
			var i, len, v;
			var fs = pushFuncStack();
			fs.name = name_.toLowerCase();
			fs.retVal = 0;
			if (params_)
			{
				fs.params.length = params_.length;
				for (i = 0, len = params_.length; i < len; ++i)
				{
					v = params_[i];
					if (typeof v === "number" || typeof v === "string")
						fs.params[i] = v;
					else if (typeof v === "boolean")
						fs.params[i] = (v ? 1 : 0);
					else
						fs.params[i] = 0;
				}
			}
			else
			{
				cr.clearArray(fs.params);
			}
			self.runtime.trigger(cr.plugins_.Function.prototype.cnds.OnFunction, self, fs.name);
			popFuncStack();
			return fs.retVal;
		};
	};
	function Cnds() {};
	Cnds.prototype.OnFunction = function (name_)
	{
		var fs = getCurrentFuncStack();
		if (!fs)
			return false;
		return cr.equals_nocase(name_, fs.name);
	};
	Cnds.prototype.CompareParam = function (index_, cmp_, value_)
	{
		var fs = getCurrentFuncStack();
		if (!fs)
			return false;
		index_ = cr.floor(index_);
		if (index_ < 0 || index_ >= fs.params.length)
			return false;
		return cr.do_cmp(fs.params[index_], cmp_, value_);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.CallFunction = function (name_, params_)
	{
		var fs = pushFuncStack();
		fs.name = name_.toLowerCase();
		fs.retVal = 0;
		cr.shallowAssignArray(fs.params, params_);
		var ran = this.runtime.trigger(cr.plugins_.Function.prototype.cnds.OnFunction, this, fs.name);
		if (isInPreview && !ran)
		{
;
		}
		popFuncStack();
	};
	Acts.prototype.SetReturnValue = function (value_)
	{
		var fs = getCurrentFuncStack();
		if (fs)
			fs.retVal = value_;
		else
;
	};
	Acts.prototype.CallExpression = function (unused)
	{
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ReturnValue = function (ret)
	{
		var fs = getOneAboveFuncStack();
		if (fs)
			ret.set_any(fs.retVal);
		else
			ret.set_int(0);
	};
	Exps.prototype.ParamCount = function (ret)
	{
		var fs = getCurrentFuncStack();
		if (fs)
			ret.set_int(fs.params.length);
		else
		{
;
			ret.set_int(0);
		}
	};
	Exps.prototype.Param = function (ret, index_)
	{
		index_ = cr.floor(index_);
		var fs = getCurrentFuncStack();
		if (fs)
		{
			if (index_ >= 0 && index_ < fs.params.length)
			{
				ret.set_any(fs.params[index_]);
			}
			else
			{
;
				ret.set_int(0);
			}
		}
		else
		{
;
			ret.set_int(0);
		}
	};
	Exps.prototype.Call = function (ret, name_)
	{
		var fs = pushFuncStack();
		fs.name = name_.toLowerCase();
		fs.retVal = 0;
		cr.clearArray(fs.params);
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
			fs.params.push(arguments[i]);
		var ran = this.runtime.trigger(cr.plugins_.Function.prototype.cnds.OnFunction, this, fs.name);
		if (isInPreview && !ran)
		{
;
		}
		popFuncStack();
		ret.set_any(fs.retVal);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Keyboard = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Keyboard.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.keyMap = new Array(256);	// stores key up/down state
		this.usedKeys = new Array(256);
		this.triggerKey = 0;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).keydown(
				function(info) {
					self.onKeyDown(info);
				}
			);
			jQuery(document).keyup(
				function(info) {
					self.onKeyUp(info);
				}
			);
		}
	};
	var keysToBlockWhenFramed = [32, 33, 34, 35, 36, 37, 38, 39, 40, 44];
	instanceProto.onKeyDown = function (info)
	{
		var alreadyPreventedDefault = false;
		if (window != window.top && keysToBlockWhenFramed.indexOf(info.which) > -1)
		{
			info.preventDefault();
			alreadyPreventedDefault = true;
			info.stopPropagation();
		}
		if (this.keyMap[info.which])
		{
			if (this.usedKeys[info.which] && !alreadyPreventedDefault)
				info.preventDefault();
			return;
		}
		this.keyMap[info.which] = true;
		this.triggerKey = info.which;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKey, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKey, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCode, this);
		this.runtime.isInUserInputEvent = false;
		if (eventRan || eventRan2)
		{
			this.usedKeys[info.which] = true;
			if (!alreadyPreventedDefault)
				info.preventDefault();
		}
	};
	instanceProto.onKeyUp = function (info)
	{
		this.keyMap[info.which] = false;
		this.triggerKey = info.which;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKeyReleased, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCodeReleased, this);
		this.runtime.isInUserInputEvent = false;
		if (eventRan || eventRan2 || this.usedKeys[info.which])
		{
			this.usedKeys[info.which] = true;
			info.preventDefault();
		}
	};
	instanceProto.onWindowBlur = function ()
	{
		var i;
		for (i = 0; i < 256; ++i)
		{
			if (!this.keyMap[i])
				continue;		// key already up
			this.keyMap[i] = false;
			this.triggerKey = i;
			this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKeyReleased, this);
			var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, this);
			var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCodeReleased, this);
			if (eventRan || eventRan2)
				this.usedKeys[i] = true;
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return { "triggerKey": this.triggerKey };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.triggerKey = o["triggerKey"];
	};
	function Cnds() {};
	Cnds.prototype.IsKeyDown = function(key)
	{
		return this.keyMap[key];
	};
	Cnds.prototype.OnKey = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnAnyKey = function(key)
	{
		return true;
	};
	Cnds.prototype.OnAnyKeyReleased = function(key)
	{
		return true;
	};
	Cnds.prototype.OnKeyReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.IsKeyCodeDown = function(key)
	{
		key = Math.floor(key);
		if (key < 0 || key >= this.keyMap.length)
			return false;
		return this.keyMap[key];
	};
	Cnds.prototype.OnKeyCode = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnKeyCodeReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LastKeyCode = function (ret)
	{
		ret.set_int(this.triggerKey);
	};
	function fixedStringFromCharCode(kc)
	{
		kc = Math.floor(kc);
		switch (kc) {
		case 8:		return "backspace";
		case 9:		return "tab";
		case 13:	return "enter";
		case 16:	return "shift";
		case 17:	return "control";
		case 18:	return "alt";
		case 19:	return "pause";
		case 20:	return "capslock";
		case 27:	return "esc";
		case 33:	return "pageup";
		case 34:	return "pagedown";
		case 35:	return "end";
		case 36:	return "home";
		case 37:	return "←";
		case 38:	return "↑";
		case 39:	return "→";
		case 40:	return "↓";
		case 45:	return "insert";
		case 46:	return "del";
		case 91:	return "left window key";
		case 92:	return "right window key";
		case 93:	return "select";
		case 96:	return "numpad 0";
		case 97:	return "numpad 1";
		case 98:	return "numpad 2";
		case 99:	return "numpad 3";
		case 100:	return "numpad 4";
		case 101:	return "numpad 5";
		case 102:	return "numpad 6";
		case 103:	return "numpad 7";
		case 104:	return "numpad 8";
		case 105:	return "numpad 9";
		case 106:	return "numpad *";
		case 107:	return "numpad +";
		case 109:	return "numpad -";
		case 110:	return "numpad .";
		case 111:	return "numpad /";
		case 112:	return "F1";
		case 113:	return "F2";
		case 114:	return "F3";
		case 115:	return "F4";
		case 116:	return "F5";
		case 117:	return "F6";
		case 118:	return "F7";
		case 119:	return "F8";
		case 120:	return "F9";
		case 121:	return "F10";
		case 122:	return "F11";
		case 123:	return "F12";
		case 144:	return "numlock";
		case 145:	return "scroll lock";
		case 186:	return ";";
		case 187:	return "=";
		case 188:	return ",";
		case 189:	return "-";
		case 190:	return ".";
		case 191:	return "/";
		case 192:	return "'";
		case 219:	return "[";
		case 220:	return "\\";
		case 221:	return "]";
		case 222:	return "#";
		case 223:	return "`";
		default:	return String.fromCharCode(kc);
		}
	};
	Exps.prototype.StringFromKeyCode = function (ret, kc)
	{
		ret.set_string(fixedStringFromCharCode(kc));
	};
	pluginProto.exps = new Exps();
}());
;
;
var localForageInitFailed = false;
try {
/*!
    localForage -- Offline Storage, Improved
    Version 1.4.0
    https://mozilla.github.io/localForage
    (c) 2013-2015 Mozilla, Apache License 2.0
*/
!function(){var a,b,c,d;!function(){var e={},f={};a=function(a,b,c){e[a]={deps:b,callback:c}},d=c=b=function(a){function c(b){if("."!==b.charAt(0))return b;for(var c=b.split("/"),d=a.split("/").slice(0,-1),e=0,f=c.length;f>e;e++){var g=c[e];if(".."===g)d.pop();else{if("."===g)continue;d.push(g)}}return d.join("/")}if(d._eak_seen=e,f[a])return f[a];if(f[a]={},!e[a])throw new Error("Could not find module "+a);for(var g,h=e[a],i=h.deps,j=h.callback,k=[],l=0,m=i.length;m>l;l++)"exports"===i[l]?k.push(g={}):k.push(b(c(i[l])));var n=j.apply(this,k);return f[a]=g||n}}(),a("promise/all",["./utils","exports"],function(a,b){"use strict";function c(a){var b=this;if(!d(a))throw new TypeError("You must pass an array to all.");return new b(function(b,c){function d(a){return function(b){f(a,b)}}function f(a,c){h[a]=c,0===--i&&b(h)}var g,h=[],i=a.length;0===i&&b([]);for(var j=0;j<a.length;j++)g=a[j],g&&e(g.then)?g.then(d(j),c):f(j,g)})}var d=a.isArray,e=a.isFunction;b.all=c}),a("promise/asap",["exports"],function(a){"use strict";function b(){return function(){process.nextTick(e)}}function c(){var a=0,b=new i(e),c=document.createTextNode("");return b.observe(c,{characterData:!0}),function(){c.data=a=++a%2}}function d(){return function(){j.setTimeout(e,1)}}function e(){for(var a=0;a<k.length;a++){var b=k[a],c=b[0],d=b[1];c(d)}k=[]}function f(a,b){var c=k.push([a,b]);1===c&&g()}var g,h="undefined"!=typeof window?window:{},i=h.MutationObserver||h.WebKitMutationObserver,j="undefined"!=typeof global?global:void 0===this?window:this,k=[];g="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?b():i?c():d(),a.asap=f}),a("promise/config",["exports"],function(a){"use strict";function b(a,b){return 2!==arguments.length?c[a]:void(c[a]=b)}var c={instrument:!1};a.config=c,a.configure=b}),a("promise/polyfill",["./promise","./utils","exports"],function(a,b,c){"use strict";function d(){var a;a="undefined"!=typeof global?global:"undefined"!=typeof window&&window.document?window:self;var b="Promise"in a&&"resolve"in a.Promise&&"reject"in a.Promise&&"all"in a.Promise&&"race"in a.Promise&&function(){var b;return new a.Promise(function(a){b=a}),f(b)}();b||(a.Promise=e)}var e=a.Promise,f=b.isFunction;c.polyfill=d}),a("promise/promise",["./config","./utils","./all","./race","./resolve","./reject","./asap","exports"],function(a,b,c,d,e,f,g,h){"use strict";function i(a){if(!v(a))throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");if(!(this instanceof i))throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");this._subscribers=[],j(a,this)}function j(a,b){function c(a){o(b,a)}function d(a){q(b,a)}try{a(c,d)}catch(e){d(e)}}function k(a,b,c,d){var e,f,g,h,i=v(c);if(i)try{e=c(d),g=!0}catch(j){h=!0,f=j}else e=d,g=!0;n(b,e)||(i&&g?o(b,e):h?q(b,f):a===D?o(b,e):a===E&&q(b,e))}function l(a,b,c,d){var e=a._subscribers,f=e.length;e[f]=b,e[f+D]=c,e[f+E]=d}function m(a,b){for(var c,d,e=a._subscribers,f=a._detail,g=0;g<e.length;g+=3)c=e[g],d=e[g+b],k(b,c,d,f);a._subscribers=null}function n(a,b){var c,d=null;try{if(a===b)throw new TypeError("A promises callback cannot return that same promise.");if(u(b)&&(d=b.then,v(d)))return d.call(b,function(d){return c?!0:(c=!0,void(b!==d?o(a,d):p(a,d)))},function(b){return c?!0:(c=!0,void q(a,b))}),!0}catch(e){return c?!0:(q(a,e),!0)}return!1}function o(a,b){a===b?p(a,b):n(a,b)||p(a,b)}function p(a,b){a._state===B&&(a._state=C,a._detail=b,t.async(r,a))}function q(a,b){a._state===B&&(a._state=C,a._detail=b,t.async(s,a))}function r(a){m(a,a._state=D)}function s(a){m(a,a._state=E)}var t=a.config,u=(a.configure,b.objectOrFunction),v=b.isFunction,w=(b.now,c.all),x=d.race,y=e.resolve,z=f.reject,A=g.asap;t.async=A;var B=void 0,C=0,D=1,E=2;i.prototype={constructor:i,_state:void 0,_detail:void 0,_subscribers:void 0,then:function(a,b){var c=this,d=new this.constructor(function(){});if(this._state){var e=arguments;t.async(function(){k(c._state,d,e[c._state-1],c._detail)})}else l(this,d,a,b);return d},"catch":function(a){return this.then(null,a)}},i.all=w,i.race=x,i.resolve=y,i.reject=z,h.Promise=i}),a("promise/race",["./utils","exports"],function(a,b){"use strict";function c(a){var b=this;if(!d(a))throw new TypeError("You must pass an array to race.");return new b(function(b,c){for(var d,e=0;e<a.length;e++)d=a[e],d&&"function"==typeof d.then?d.then(b,c):b(d)})}var d=a.isArray;b.race=c}),a("promise/reject",["exports"],function(a){"use strict";function b(a){var b=this;return new b(function(b,c){c(a)})}a.reject=b}),a("promise/resolve",["exports"],function(a){"use strict";function b(a){if(a&&"object"==typeof a&&a.constructor===this)return a;var b=this;return new b(function(b){b(a)})}a.resolve=b}),a("promise/utils",["exports"],function(a){"use strict";function b(a){return c(a)||"object"==typeof a&&null!==a}function c(a){return"function"==typeof a}function d(a){return"[object Array]"===Object.prototype.toString.call(a)}var e=Date.now||function(){return(new Date).getTime()};a.objectOrFunction=b,a.isFunction=c,a.isArray=d,a.now=e}),b("promise/polyfill").polyfill()}(),function(a,b){"object"==typeof exports&&"object"==typeof module?module.exports=b():"function"==typeof define&&define.amd?define([],b):"object"==typeof exports?exports.localforage=b():a.localforage=b()}(this,function(){return function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={exports:{},id:d,loaded:!1};return a[d].call(e.exports,e,e.exports,b),e.loaded=!0,e.exports}var c={};return b.m=a,b.c=c,b.p="",b(0)}([function(a,b,c){"use strict";function d(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}b.__esModule=!0;var e=function(a){function b(a,b){a[b]=function(){var c=arguments;return a.ready().then(function(){return a[b].apply(a,c)})}}function e(){for(var a=1;a<arguments.length;a++){var b=arguments[a];if(b)for(var c in b)b.hasOwnProperty(c)&&(m(b[c])?arguments[0][c]=b[c].slice():arguments[0][c]=b[c])}return arguments[0]}function f(a){for(var b in h)if(h.hasOwnProperty(b)&&h[b]===a)return!0;return!1}var g={},h={INDEXEDDB:"asyncStorage",LOCALSTORAGE:"localStorageWrapper",WEBSQL:"webSQLStorage"},i=[h.INDEXEDDB,h.WEBSQL,h.LOCALSTORAGE],j=["clear","getItem","iterate","key","keys","length","removeItem","setItem"],k={description:"",driver:i.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1},l=function(a){var b={};return b[h.INDEXEDDB]=!!function(){try{var b=b||a.indexedDB||a.webkitIndexedDB||a.mozIndexedDB||a.OIndexedDB||a.msIndexedDB;return"undefined"!=typeof a.openDatabase&&a.navigator&&a.navigator.userAgent&&/Safari/.test(a.navigator.userAgent)&&!/Chrome/.test(a.navigator.userAgent)?!1:b&&"function"==typeof b.open&&"undefined"!=typeof a.IDBKeyRange}catch(c){return!1}}(),b[h.WEBSQL]=!!function(){try{return a.openDatabase}catch(b){return!1}}(),b[h.LOCALSTORAGE]=!!function(){try{return a.localStorage&&"setItem"in a.localStorage&&a.localStorage.setItem}catch(b){return!1}}(),b}(a),m=Array.isArray||function(a){return"[object Array]"===Object.prototype.toString.call(a)},n=function(){function a(b){d(this,a),this.INDEXEDDB=h.INDEXEDDB,this.LOCALSTORAGE=h.LOCALSTORAGE,this.WEBSQL=h.WEBSQL,this._defaultConfig=e({},k),this._config=e({},this._defaultConfig,b),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver)}return a.prototype.config=function(a){if("object"==typeof a){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var b in a)"storeName"===b&&(a[b]=a[b].replace(/\W/g,"_")),this._config[b]=a[b];return"driver"in a&&a.driver&&this.setDriver(this._config.driver),!0}return"string"==typeof a?this._config[a]:this._config},a.prototype.defineDriver=function(a,b,c){var d=new Promise(function(b,c){try{var d=a._driver,e=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver"),h=new Error("Custom driver name already in use: "+a._driver);if(!a._driver)return void c(e);if(f(a._driver))return void c(h);for(var i=j.concat("_initStorage"),k=0;k<i.length;k++){var m=i[k];if(!m||!a[m]||"function"!=typeof a[m])return void c(e)}var n=Promise.resolve(!0);"_support"in a&&(n=a._support&&"function"==typeof a._support?a._support():Promise.resolve(!!a._support)),n.then(function(c){l[d]=c,g[d]=a,b()},c)}catch(o){c(o)}});return d.then(b,c),d},a.prototype.driver=function(){return this._driver||null},a.prototype.getDriver=function(a,b,d){var e=this,h=function(){if(f(a))switch(a){case e.INDEXEDDB:return new Promise(function(a,b){a(c(1))});case e.LOCALSTORAGE:return new Promise(function(a,b){a(c(2))});case e.WEBSQL:return new Promise(function(a,b){a(c(4))})}else if(g[a])return Promise.resolve(g[a]);return Promise.reject(new Error("Driver not found."))}();return h.then(b,d),h},a.prototype.getSerializer=function(a){var b=new Promise(function(a,b){a(c(3))});return a&&"function"==typeof a&&b.then(function(b){a(b)}),b},a.prototype.ready=function(a){var b=this,c=b._driverSet.then(function(){return null===b._ready&&(b._ready=b._initDriver()),b._ready});return c.then(a,a),c},a.prototype.setDriver=function(a,b,c){function d(){f._config.driver=f.driver()}function e(a){return function(){function b(){for(;c<a.length;){var e=a[c];return c++,f._dbInfo=null,f._ready=null,f.getDriver(e).then(function(a){return f._extend(a),d(),f._ready=f._initStorage(f._config),f._ready})["catch"](b)}d();var g=new Error("No available storage method found.");return f._driverSet=Promise.reject(g),f._driverSet}var c=0;return b()}}var f=this;m(a)||(a=[a]);var g=this._getSupportedDrivers(a),h=null!==this._driverSet?this._driverSet["catch"](function(){return Promise.resolve()}):Promise.resolve();return this._driverSet=h.then(function(){var a=g[0];return f._dbInfo=null,f._ready=null,f.getDriver(a).then(function(a){f._driver=a._driver,d(),f._wrapLibraryMethodsWithReady(),f._initDriver=e(g)})})["catch"](function(){d();var a=new Error("No available storage method found.");return f._driverSet=Promise.reject(a),f._driverSet}),this._driverSet.then(b,c),this._driverSet},a.prototype.supports=function(a){return!!l[a]},a.prototype._extend=function(a){e(this,a)},a.prototype._getSupportedDrivers=function(a){for(var b=[],c=0,d=a.length;d>c;c++){var e=a[c];this.supports(e)&&b.push(e)}return b},a.prototype._wrapLibraryMethodsWithReady=function(){for(var a=0;a<j.length;a++)b(this,j[a])},a.prototype.createInstance=function(b){return new a(b)},a}();return new n}("undefined"!=typeof window?window:self);b["default"]=e,a.exports=b["default"]},function(a,b){"use strict";b.__esModule=!0;var c=function(a){function b(b,c){b=b||[],c=c||{};try{return new Blob(b,c)}catch(d){if("TypeError"!==d.name)throw d;for(var e=a.BlobBuilder||a.MSBlobBuilder||a.MozBlobBuilder||a.WebKitBlobBuilder,f=new e,g=0;g<b.length;g+=1)f.append(b[g]);return f.getBlob(c.type)}}function c(a){for(var b=a.length,c=new ArrayBuffer(b),d=new Uint8Array(c),e=0;b>e;e++)d[e]=a.charCodeAt(e);return c}function d(a){return new Promise(function(b,c){var d=new XMLHttpRequest;d.open("GET",a),d.withCredentials=!0,d.responseType="arraybuffer",d.onreadystatechange=function(){return 4===d.readyState?200===d.status?b({response:d.response,type:d.getResponseHeader("Content-Type")}):void c({status:d.status,response:d.response}):void 0},d.send()})}function e(a){return new Promise(function(c,e){var f=b([""],{type:"image/png"}),g=a.transaction([D],"readwrite");g.objectStore(D).put(f,"key"),g.oncomplete=function(){var b=a.transaction([D],"readwrite"),f=b.objectStore(D).get("key");f.onerror=e,f.onsuccess=function(a){var b=a.target.result,e=URL.createObjectURL(b);d(e).then(function(a){c(!(!a||"image/png"!==a.type))},function(){c(!1)}).then(function(){URL.revokeObjectURL(e)})}},g.onerror=g.onabort=e})["catch"](function(){return!1})}function f(a){return"boolean"==typeof B?Promise.resolve(B):e(a).then(function(a){return B=a})}function g(a){return new Promise(function(b,c){var d=new FileReader;d.onerror=c,d.onloadend=function(c){var d=btoa(c.target.result||"");b({__local_forage_encoded_blob:!0,data:d,type:a.type})},d.readAsBinaryString(a)})}function h(a){var d=c(atob(a.data));return b([d],{type:a.type})}function i(a){return a&&a.__local_forage_encoded_blob}function j(a){var b=this,c=b._initReady().then(function(){var a=C[b._dbInfo.name];return a&&a.dbReady?a.dbReady:void 0});return c.then(a,a),c}function k(a){var b=C[a.name],c={};c.promise=new Promise(function(a){c.resolve=a}),b.deferredOperations.push(c),b.dbReady?b.dbReady=b.dbReady.then(function(){return c.promise}):b.dbReady=c.promise}function l(a){var b=C[a.name],c=b.deferredOperations.pop();c&&c.resolve()}function m(a){function b(){return Promise.resolve()}var c=this,d={db:null};if(a)for(var e in a)d[e]=a[e];C||(C={});var f=C[d.name];f||(f={forages:[],db:null,dbReady:null,deferredOperations:[]},C[d.name]=f),f.forages.push(c),c._initReady||(c._initReady=c.ready,c.ready=j);for(var g=[],h=0;h<f.forages.length;h++){var i=f.forages[h];i!==c&&g.push(i._initReady()["catch"](b))}var k=f.forages.slice(0);return Promise.all(g).then(function(){return d.db=f.db,n(d)}).then(function(a){return d.db=a,q(d,c._defaultConfig.version)?o(d):a}).then(function(a){d.db=f.db=a,c._dbInfo=d;for(var b=0;b<k.length;b++){var e=k[b];e!==c&&(e._dbInfo.db=d.db,e._dbInfo.version=d.version)}})}function n(a){return p(a,!1)}function o(a){return p(a,!0)}function p(b,c){return new Promise(function(d,e){if(b.db){if(!c)return d(b.db);k(b),b.db.close()}var f=[b.name];c&&f.push(b.version);var g=A.open.apply(A,f);c&&(g.onupgradeneeded=function(c){var d=g.result;try{d.createObjectStore(b.storeName),c.oldVersion<=1&&d.createObjectStore(D)}catch(e){if("ConstraintError"!==e.name)throw e;a.console.warn('The database "'+b.name+'" has been upgraded from version '+c.oldVersion+" to version "+c.newVersion+', but the storage "'+b.storeName+'" already exists.')}}),g.onerror=function(){e(g.error)},g.onsuccess=function(){d(g.result),l(b)}})}function q(b,c){if(!b.db)return!0;var d=!b.db.objectStoreNames.contains(b.storeName),e=b.version<b.db.version,f=b.version>b.db.version;if(e&&(b.version!==c&&a.console.warn('The database "'+b.name+"\" can't be downgraded from version "+b.db.version+" to version "+b.version+"."),b.version=b.db.version),f||d){if(d){var g=b.db.version+1;g>b.version&&(b.version=g)}return!0}return!1}function r(b,c){var d=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var e=new Promise(function(a,c){d.ready().then(function(){var e=d._dbInfo,f=e.db.transaction(e.storeName,"readonly").objectStore(e.storeName),g=f.get(b);g.onsuccess=function(){var b=g.result;void 0===b&&(b=null),i(b)&&(b=h(b)),a(b)},g.onerror=function(){c(g.error)}})["catch"](c)});return z(e,c),e}function s(a,b){var c=this,d=new Promise(function(b,d){c.ready().then(function(){var e=c._dbInfo,f=e.db.transaction(e.storeName,"readonly").objectStore(e.storeName),g=f.openCursor(),j=1;g.onsuccess=function(){var c=g.result;if(c){var d=c.value;i(d)&&(d=h(d));var e=a(d,c.key,j++);void 0!==e?b(e):c["continue"]()}else b()},g.onerror=function(){d(g.error)}})["catch"](d)});return z(d,b),d}function t(b,c,d){var e=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var h=new Promise(function(a,d){var h;e.ready().then(function(){return h=e._dbInfo,c instanceof Blob?f(h.db).then(function(a){return a?c:g(c)}):c}).then(function(c){var e=h.db.transaction(h.storeName,"readwrite"),f=e.objectStore(h.storeName);null===c&&(c=void 0),e.oncomplete=function(){void 0===c&&(c=null),a(c)},e.onabort=e.onerror=function(){var a=g.error?g.error:g.transaction.error;d(a)};var g=f.put(c,b)})["catch"](d)});return z(h,d),h}function u(b,c){var d=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var e=new Promise(function(a,c){d.ready().then(function(){var e=d._dbInfo,f=e.db.transaction(e.storeName,"readwrite"),g=f.objectStore(e.storeName),h=g["delete"](b);f.oncomplete=function(){a()},f.onerror=function(){c(h.error)},f.onabort=function(){var a=h.error?h.error:h.transaction.error;c(a)}})["catch"](c)});return z(e,c),e}function v(a){var b=this,c=new Promise(function(a,c){b.ready().then(function(){var d=b._dbInfo,e=d.db.transaction(d.storeName,"readwrite"),f=e.objectStore(d.storeName),g=f.clear();e.oncomplete=function(){a()},e.onabort=e.onerror=function(){var a=g.error?g.error:g.transaction.error;c(a)}})["catch"](c)});return z(c,a),c}function w(a){var b=this,c=new Promise(function(a,c){b.ready().then(function(){var d=b._dbInfo,e=d.db.transaction(d.storeName,"readonly").objectStore(d.storeName),f=e.count();f.onsuccess=function(){a(f.result)},f.onerror=function(){c(f.error)}})["catch"](c)});return z(c,a),c}function x(a,b){var c=this,d=new Promise(function(b,d){return 0>a?void b(null):void c.ready().then(function(){var e=c._dbInfo,f=e.db.transaction(e.storeName,"readonly").objectStore(e.storeName),g=!1,h=f.openCursor();h.onsuccess=function(){var c=h.result;return c?void(0===a?b(c.key):g?b(c.key):(g=!0,c.advance(a))):void b(null)},h.onerror=function(){d(h.error)}})["catch"](d)});return z(d,b),d}function y(a){var b=this,c=new Promise(function(a,c){b.ready().then(function(){var d=b._dbInfo,e=d.db.transaction(d.storeName,"readonly").objectStore(d.storeName),f=e.openCursor(),g=[];f.onsuccess=function(){var b=f.result;return b?(g.push(b.key),void b["continue"]()):void a(g)},f.onerror=function(){c(f.error)}})["catch"](c)});return z(c,a),c}function z(a,b){b&&a.then(function(a){b(null,a)},function(a){b(a)})}var A=A||a.indexedDB||a.webkitIndexedDB||a.mozIndexedDB||a.OIndexedDB||a.msIndexedDB;if(A){var B,C,D="local-forage-detect-blob-support",E={_driver:"asyncStorage",_initStorage:m,iterate:s,getItem:r,setItem:t,removeItem:u,clear:v,length:w,key:x,keys:y};return E}}("undefined"!=typeof window?window:self);b["default"]=c,a.exports=b["default"]},function(a,b,c){"use strict";b.__esModule=!0;var d=function(a){function b(a){var b=this,d={};if(a)for(var e in a)d[e]=a[e];return d.keyPrefix=d.name+"/",d.storeName!==b._defaultConfig.storeName&&(d.keyPrefix+=d.storeName+"/"),b._dbInfo=d,new Promise(function(a,b){a(c(3))}).then(function(a){return d.serializer=a,Promise.resolve()})}function d(a){var b=this,c=b.ready().then(function(){for(var a=b._dbInfo.keyPrefix,c=m.length-1;c>=0;c--){var d=m.key(c);0===d.indexOf(a)&&m.removeItem(d)}});return l(c,a),c}function e(b,c){var d=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var e=d.ready().then(function(){var a=d._dbInfo,c=m.getItem(a.keyPrefix+b);return c&&(c=a.serializer.deserialize(c)),c});return l(e,c),e}function f(a,b){var c=this,d=c.ready().then(function(){for(var b=c._dbInfo,d=b.keyPrefix,e=d.length,f=m.length,g=1,h=0;f>h;h++){var i=m.key(h);if(0===i.indexOf(d)){var j=m.getItem(i);if(j&&(j=b.serializer.deserialize(j)),j=a(j,i.substring(e),g++),void 0!==j)return j}}});return l(d,b),d}function g(a,b){var c=this,d=c.ready().then(function(){var b,d=c._dbInfo;try{b=m.key(a)}catch(e){b=null}return b&&(b=b.substring(d.keyPrefix.length)),b});return l(d,b),d}function h(a){var b=this,c=b.ready().then(function(){for(var a=b._dbInfo,c=m.length,d=[],e=0;c>e;e++)0===m.key(e).indexOf(a.keyPrefix)&&d.push(m.key(e).substring(a.keyPrefix.length));return d});return l(c,a),c}function i(a){var b=this,c=b.keys().then(function(a){return a.length});return l(c,a),c}function j(b,c){var d=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var e=d.ready().then(function(){var a=d._dbInfo;m.removeItem(a.keyPrefix+b)});return l(e,c),e}function k(b,c,d){var e=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var f=e.ready().then(function(){void 0===c&&(c=null);var a=c;return new Promise(function(d,f){var g=e._dbInfo;g.serializer.serialize(c,function(c,e){if(e)f(e);else try{m.setItem(g.keyPrefix+b,c),d(a)}catch(h){("QuotaExceededError"===h.name||"NS_ERROR_DOM_QUOTA_REACHED"===h.name)&&f(h),f(h)}})})});return l(f,d),f}function l(a,b){b&&a.then(function(a){b(null,a)},function(a){b(a)})}var m=null;try{if(!(a.localStorage&&"setItem"in a.localStorage))return;m=a.localStorage}catch(n){return}var o={_driver:"localStorageWrapper",_initStorage:b,iterate:f,getItem:e,setItem:k,removeItem:j,clear:d,length:i,key:g,keys:h};return o}("undefined"!=typeof window?window:self);b["default"]=d,a.exports=b["default"]},function(a,b){"use strict";b.__esModule=!0;var c=function(a){function b(b,c){b=b||[],c=c||{};try{return new Blob(b,c)}catch(d){if("TypeError"!==d.name)throw d;for(var e=a.BlobBuilder||a.MSBlobBuilder||a.MozBlobBuilder||a.WebKitBlobBuilder,f=new e,g=0;g<b.length;g+=1)f.append(b[g]);return f.getBlob(c.type)}}function c(a,b){var c="";if(a&&(c=a.toString()),a&&("[object ArrayBuffer]"===a.toString()||a.buffer&&"[object ArrayBuffer]"===a.buffer.toString())){var d,e=j;a instanceof ArrayBuffer?(d=a,e+=l):(d=a.buffer,"[object Int8Array]"===c?e+=n:"[object Uint8Array]"===c?e+=o:"[object Uint8ClampedArray]"===c?e+=p:"[object Int16Array]"===c?e+=q:"[object Uint16Array]"===c?e+=s:"[object Int32Array]"===c?e+=r:"[object Uint32Array]"===c?e+=t:"[object Float32Array]"===c?e+=u:"[object Float64Array]"===c?e+=v:b(new Error("Failed to get type for BinaryArray"))),b(e+f(d))}else if("[object Blob]"===c){var g=new FileReader;g.onload=function(){var c=h+a.type+"~"+f(this.result);b(j+m+c)},g.readAsArrayBuffer(a)}else try{b(JSON.stringify(a))}catch(i){console.error("Couldn't convert value into a JSON string: ",a),b(null,i)}}function d(a){if(a.substring(0,k)!==j)return JSON.parse(a);var c,d=a.substring(w),f=a.substring(k,w);if(f===m&&i.test(d)){var g=d.match(i);c=g[1],d=d.substring(g[0].length)}var h=e(d);switch(f){case l:return h;case m:return b([h],{type:c});case n:return new Int8Array(h);case o:return new Uint8Array(h);case p:return new Uint8ClampedArray(h);case q:return new Int16Array(h);case s:return new Uint16Array(h);case r:return new Int32Array(h);case t:return new Uint32Array(h);case u:return new Float32Array(h);case v:return new Float64Array(h);default:throw new Error("Unkown type: "+f)}}function e(a){var b,c,d,e,f,h=.75*a.length,i=a.length,j=0;"="===a[a.length-1]&&(h--,"="===a[a.length-2]&&h--);var k=new ArrayBuffer(h),l=new Uint8Array(k);for(b=0;i>b;b+=4)c=g.indexOf(a[b]),d=g.indexOf(a[b+1]),e=g.indexOf(a[b+2]),f=g.indexOf(a[b+3]),l[j++]=c<<2|d>>4,l[j++]=(15&d)<<4|e>>2,l[j++]=(3&e)<<6|63&f;return k}function f(a){var b,c=new Uint8Array(a),d="";for(b=0;b<c.length;b+=3)d+=g[c[b]>>2],d+=g[(3&c[b])<<4|c[b+1]>>4],d+=g[(15&c[b+1])<<2|c[b+2]>>6],d+=g[63&c[b+2]];return c.length%3===2?d=d.substring(0,d.length-1)+"=":c.length%3===1&&(d=d.substring(0,d.length-2)+"=="),d}var g="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",h="~~local_forage_type~",i=/^~~local_forage_type~([^~]+)~/,j="__lfsc__:",k=j.length,l="arbf",m="blob",n="si08",o="ui08",p="uic8",q="si16",r="si32",s="ur16",t="ui32",u="fl32",v="fl64",w=k+l.length,x={serialize:c,deserialize:d,stringToBuffer:e,bufferToString:f};return x}("undefined"!=typeof window?window:self);b["default"]=c,a.exports=b["default"]},function(a,b,c){"use strict";b.__esModule=!0;var d=function(a){function b(a){var b=this,d={db:null};if(a)for(var e in a)d[e]="string"!=typeof a[e]?a[e].toString():a[e];var f=new Promise(function(a,c){try{d.db=m(d.name,String(d.version),d.description,d.size)}catch(e){return c(e)}d.db.transaction(function(e){e.executeSql("CREATE TABLE IF NOT EXISTS "+d.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],function(){b._dbInfo=d,a()},function(a,b){c(b)})})});return new Promise(function(a,b){a(c(3))}).then(function(a){return d.serializer=a,f})}function d(b,c){var d=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var e=new Promise(function(a,c){d.ready().then(function(){var e=d._dbInfo;e.db.transaction(function(d){d.executeSql("SELECT * FROM "+e.storeName+" WHERE key = ? LIMIT 1",[b],function(b,c){var d=c.rows.length?c.rows.item(0).value:null;d&&(d=e.serializer.deserialize(d)),a(d)},function(a,b){c(b)})})})["catch"](c)});return l(e,c),e}function e(a,b){var c=this,d=new Promise(function(b,d){c.ready().then(function(){var e=c._dbInfo;e.db.transaction(function(c){c.executeSql("SELECT * FROM "+e.storeName,[],function(c,d){for(var f=d.rows,g=f.length,h=0;g>h;h++){var i=f.item(h),j=i.value;if(j&&(j=e.serializer.deserialize(j)),j=a(j,i.key,h+1),void 0!==j)return void b(j)}b()},function(a,b){d(b)})})})["catch"](d)});return l(d,b),d}function f(b,c,d){var e=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var f=new Promise(function(a,d){e.ready().then(function(){void 0===c&&(c=null);var f=c,g=e._dbInfo;g.serializer.serialize(c,function(c,e){e?d(e):g.db.transaction(function(e){e.executeSql("INSERT OR REPLACE INTO "+g.storeName+" (key, value) VALUES (?, ?)",[b,c],function(){a(f)},function(a,b){d(b)})},function(a){a.code===a.QUOTA_ERR&&d(a)})})})["catch"](d)});return l(f,d),f}function g(b,c){var d=this;"string"!=typeof b&&(a.console.warn(b+" used as a key, but it is not a string."),b=String(b));var e=new Promise(function(a,c){d.ready().then(function(){var e=d._dbInfo;e.db.transaction(function(d){d.executeSql("DELETE FROM "+e.storeName+" WHERE key = ?",[b],function(){a()},function(a,b){c(b)})})})["catch"](c)});return l(e,c),e}function h(a){var b=this,c=new Promise(function(a,c){b.ready().then(function(){var d=b._dbInfo;d.db.transaction(function(b){b.executeSql("DELETE FROM "+d.storeName,[],function(){a()},function(a,b){c(b)})})})["catch"](c)});return l(c,a),c}function i(a){var b=this,c=new Promise(function(a,c){b.ready().then(function(){var d=b._dbInfo;d.db.transaction(function(b){b.executeSql("SELECT COUNT(key) as c FROM "+d.storeName,[],function(b,c){var d=c.rows.item(0).c;a(d)},function(a,b){c(b)})})})["catch"](c)});return l(c,a),c}function j(a,b){var c=this,d=new Promise(function(b,d){c.ready().then(function(){var e=c._dbInfo;e.db.transaction(function(c){c.executeSql("SELECT key FROM "+e.storeName+" WHERE id = ? LIMIT 1",[a+1],function(a,c){var d=c.rows.length?c.rows.item(0).key:null;b(d)},function(a,b){d(b)})})})["catch"](d)});return l(d,b),d}function k(a){var b=this,c=new Promise(function(a,c){b.ready().then(function(){var d=b._dbInfo;d.db.transaction(function(b){b.executeSql("SELECT key FROM "+d.storeName,[],function(b,c){for(var d=[],e=0;e<c.rows.length;e++)d.push(c.rows.item(e).key);a(d)},function(a,b){c(b)})})})["catch"](c)});return l(c,a),c}function l(a,b){b&&a.then(function(a){b(null,a)},function(a){b(a)})}var m=a.openDatabase;if(m){var n={_driver:"webSQLStorage",_initStorage:b,iterate:e,getItem:d,setItem:f,removeItem:g,clear:h,length:i,key:j,keys:k};return n}}("undefined"!=typeof window?window:self);b["default"]=d,a.exports=b["default"]}])});
}
catch (e)
{
	localForageInitFailed = true;
}
cr.plugins_.LocalStorage = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var currentKey = "";
	var lastValue = "";
	var keyNamesList = [];
	var errorMessage = "";
	function getErrorString(err)
	{
		if (!err)
			return "unknown error";
		else if (typeof err === "string")
			return err;
		else if (typeof err.message === "string")
			return err.message;
		else if (typeof err.name === "string")
			return err.name;
		else if (typeof err.data === "string")
			return err.data;
		else
			return "unknown error";
	};
	function TriggerStorageError(self, msg)
	{
		errorMessage = msg;
		self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnError, self);
	};
	var prefix = "";
	var is_arcade = (typeof window["is_scirra_arcade"] !== "undefined");
	if (is_arcade)
		prefix = "sa" + window["scirra_arcade_id"] + "_";
	function hasRequiredPrefix(key)
	{
		if (!prefix)
			return true;
		return key.substr(0, prefix.length) === prefix;
	};
	function removePrefix(key)
	{
		if (!prefix)
			return key;
		if (hasRequiredPrefix(key))
			return key.substr(prefix.length);
	};
	var pluginProto = cr.plugins_.LocalStorage.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.pendingSets = 0;		// number of pending 'Set item' actions
		this.pendingGets = 0;		// number of pending 'Get item' actions
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.saveToJSON = function ()
	{
		return {
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
	};
	var debugDataChanged = true;
	function Cnds() {};
	Cnds.prototype.OnItemSet = function (key)
	{
		return currentKey === key;
	};
	Cnds.prototype.OnAnyItemSet = function ()
	{
		return true;
	};
	Cnds.prototype.OnItemGet = function (key)
	{
		return currentKey === key;
	};
	Cnds.prototype.OnAnyItemGet = function ()
	{
		return true;
	};
	Cnds.prototype.OnItemRemoved = function (key)
	{
		return currentKey === key;
	};
	Cnds.prototype.OnAnyItemRemoved = function ()
	{
		return true;
	};
	Cnds.prototype.OnCleared = function ()
	{
		return true;
	};
	Cnds.prototype.OnAllKeyNamesLoaded = function ()
	{
		return true;
	};
	Cnds.prototype.OnError = function ()
	{
		return true;
	};
	Cnds.prototype.OnItemExists = function (key)
	{
		return currentKey === key;
	};
	Cnds.prototype.OnItemMissing = function (key)
	{
		return currentKey === key;
	};
	Cnds.prototype.CompareKey = function (cmp, key)
	{
		return cr.do_cmp(currentKey, cmp, key);
	};
	Cnds.prototype.CompareValue = function (cmp, v)
	{
		return cr.do_cmp(lastValue, cmp, v);
	};
	Cnds.prototype.IsProcessingSets = function ()
	{
		return this.pendingSets > 0;
	};
	Cnds.prototype.IsProcessingGets = function ()
	{
		return this.pendingGets > 0;
	};
	Cnds.prototype.OnAllSetsComplete = function ()
	{
		return true;
	};
	Cnds.prototype.OnAllGetsComplete = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetItem = function (keyNoPrefix, value)
	{
		if (localForageInitFailed)
		{
			TriggerStorageError(this, "storage failed to initialise - may be disabled in browser settings");
			return;
		}
		var keyPrefix = prefix + keyNoPrefix;
		this.pendingSets++;
		var self = this;
		localforage["setItem"](keyPrefix, value, function (err, valueSet)
		{
			debugDataChanged = true;
			self.pendingSets--;
			if (err)
			{
				errorMessage = getErrorString(err);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnError, self);
			}
			else
			{
				currentKey = keyNoPrefix;
				lastValue = valueSet;
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnAnyItemSet, self);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnItemSet, self);
				currentKey = "";
				lastValue = "";
			}
			if (self.pendingSets === 0)
			{
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnAllSetsComplete, self);
			}
		});
	};
	Acts.prototype.GetItem = function (keyNoPrefix)
	{
		if (localForageInitFailed)
		{
			TriggerStorageError(this, "storage failed to initialise - may be disabled in browser settings");
			return;
		}
		var keyPrefix = prefix + keyNoPrefix;
		this.pendingGets++;
		var self = this;
		localforage["getItem"](keyPrefix, function (err, value)
		{
			self.pendingGets--;
			if (err)
			{
				errorMessage = getErrorString(err);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnError, self);
			}
			else
			{
				currentKey = keyNoPrefix;
				lastValue = value;
				if (typeof lastValue === "undefined" || lastValue === null)
					lastValue = "";
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnAnyItemGet, self);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnItemGet, self);
				currentKey = "";
				lastValue = "";
			}
			if (self.pendingGets === 0)
			{
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnAllGetsComplete, self);
			}
		});
	};
	Acts.prototype.CheckItemExists = function (keyNoPrefix)
	{
		if (localForageInitFailed)
		{
			TriggerStorageError(this, "storage failed to initialise - may be disabled in browser settings");
			return;
		}
		var keyPrefix = prefix + keyNoPrefix;
		var self = this;
		localforage["getItem"](keyPrefix, function (err, value)
		{
			if (err)
			{
				errorMessage = getErrorString(err);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnError, self);
			}
			else
			{
				currentKey = keyNoPrefix;
				if (value === null)		// null value indicates key missing
				{
					lastValue = "";		// prevent ItemValue meaning anything
					self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnItemMissing, self);
				}
				else
				{
					lastValue = value;	// make available to ItemValue expression
					self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnItemExists, self);
				}
				currentKey = "";
				lastValue = "";
			}
		});
	};
	Acts.prototype.RemoveItem = function (keyNoPrefix)
	{
		if (localForageInitFailed)
		{
			TriggerStorageError(this, "storage failed to initialise - may be disabled in browser settings");
			return;
		}
		var keyPrefix = prefix + keyNoPrefix;
		var self = this;
		localforage["removeItem"](keyPrefix, function (err)
		{
			debugDataChanged = true;
			if (err)
			{
				errorMessage = getErrorString(err);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnError, self);
			}
			else
			{
				currentKey = keyNoPrefix;
				lastValue = "";
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnAnyItemRemoved, self);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnItemRemoved, self);
				currentKey = "";
			}
		});
	};
	Acts.prototype.ClearStorage = function ()
	{
		if (localForageInitFailed)
		{
			TriggerStorageError(this, "storage failed to initialise - may be disabled in browser settings");
			return;
		}
		if (is_arcade)
			return;
		var self = this;
		localforage["clear"](function (err)
		{
			debugDataChanged = true;
			if (err)
			{
				errorMessage = getErrorString(err);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnError, self);
			}
			else
			{
				currentKey = "";
				lastValue = "";
				cr.clearArray(keyNamesList);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnCleared, self);
			}
		});
	};
	Acts.prototype.GetAllKeyNames = function ()
	{
		if (localForageInitFailed)
		{
			TriggerStorageError(this, "storage failed to initialise - may be disabled in browser settings");
			return;
		}
		var self = this;
		localforage["keys"](function (err, keyList)
		{
			var i, len, k;
			if (err)
			{
				errorMessage = getErrorString(err);
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnError, self);
			}
			else
			{
				cr.clearArray(keyNamesList);
				for (i = 0, len = keyList.length; i < len; ++i)
				{
					k = keyList[i];
					if (!hasRequiredPrefix(k))
						continue;
					keyNamesList.push(removePrefix(k));
				}
				self.runtime.trigger(cr.plugins_.LocalStorage.prototype.cnds.OnAllKeyNamesLoaded, self);
			}
		});
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ItemValue = function (ret)
	{
		ret.set_any(lastValue);
	};
	Exps.prototype.Key = function (ret)
	{
		ret.set_string(currentKey);
	};
	Exps.prototype.KeyCount = function (ret)
	{
		ret.set_int(keyNamesList.length);
	};
	Exps.prototype.KeyAt = function (ret, i)
	{
		i = Math.floor(i);
		if (i < 0 || i >= keyNamesList.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(keyNamesList[i]);
	};
	Exps.prototype.ErrorMessage = function (ret)
	{
		ret.set_string(errorMessage);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Mouse = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Mouse.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.buttonMap = new Array(4);		// mouse down states
		this.mouseXcanvas = 0;				// mouse position relative to canvas
		this.mouseYcanvas = 0;
		this.triggerButton = 0;
		this.triggerType = 0;
		this.triggerDir = 0;
		this.handled = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
			jQuery(document).dblclick(
				function(info) {
					self.onDoubleClick(info);
				}
			);
			var wheelevent = function(info) {
								self.onWheel(info);
							};
			document.addEventListener("mousewheel", wheelevent, false);
			document.addEventListener("DOMMouseScroll", wheelevent, false);
		}
	};
	var dummyoffset = {left: 0, top: 0};
	instanceProto.onMouseMove = function(info)
	{
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		this.mouseXcanvas = info.pageX - offset.left;
		this.mouseYcanvas = info.pageY - offset.top;
	};
	instanceProto.mouseInGame = function ()
	{
		if (this.runtime.fullscreen_mode > 0)
			return true;
		return this.mouseXcanvas >= 0 && this.mouseYcanvas >= 0
		    && this.mouseXcanvas < this.runtime.width && this.mouseYcanvas < this.runtime.height;
	};
	instanceProto.onMouseDown = function(info)
	{
		if (!this.mouseInGame())
			return;
		this.buttonMap[info.which] = true;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnAnyClick, this);
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 0;					// single click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onMouseUp = function(info)
	{
		if (!this.buttonMap[info.which])
			return;
		if (this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.runtime.had_a_click = true;
		this.buttonMap[info.which] = false;
		this.runtime.isInUserInputEvent = true;
		this.triggerButton = info.which - 1;	// 1-based
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnRelease, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onDoubleClick = function(info)
	{
		if (!this.mouseInGame())
			return;
		info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 1;					// double click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onWheel = function (info)
	{
		var delta = info.wheelDelta ? info.wheelDelta : info.detail ? -info.detail : 0;
		this.triggerDir = (delta < 0 ? 0 : 1);
		this.handled = false;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnWheel, this);
		this.runtime.isInUserInputEvent = false;
		if (this.handled && cr.isCanvasInputEvent(info))
			info.preventDefault();
	};
	instanceProto.onWindowBlur = function ()
	{
		var i, len;
		for (i = 0, len = this.buttonMap.length; i < len; ++i)
		{
			if (!this.buttonMap[i])
				continue;
			this.buttonMap[i] = false;
			this.triggerButton = i - 1;
			this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnRelease, this);
		}
	};
	function Cnds() {};
	Cnds.prototype.OnClick = function (button, type)
	{
		return button === this.triggerButton && type === this.triggerType;
	};
	Cnds.prototype.OnAnyClick = function ()
	{
		return true;
	};
	Cnds.prototype.IsButtonDown = function (button)
	{
		return this.buttonMap[button + 1];	// jQuery uses 1-based buttons for some reason
	};
	Cnds.prototype.OnRelease = function (button)
	{
		return button === this.triggerButton;
	};
	Cnds.prototype.IsOverObject = function (obj)
	{
		var cnd = this.runtime.getCurrentCondition();
		var mx = this.mouseXcanvas;
		var my = this.mouseYcanvas;
		return cr.xor(this.runtime.testAndSelectCanvasPointOverlap(obj, mx, my, cnd.inverted), cnd.inverted);
	};
	Cnds.prototype.OnObjectClicked = function (button, type, obj)
	{
		if (button !== this.triggerButton || type !== this.triggerType)
			return false;	// wrong click type
		return this.runtime.testAndSelectCanvasPointOverlap(obj, this.mouseXcanvas, this.mouseYcanvas, false);
	};
	Cnds.prototype.OnWheel = function (dir)
	{
		this.handled = true;
		return dir === this.triggerDir;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	var lastSetCursor = null;
	Acts.prototype.SetCursor = function (c)
	{
		if (this.runtime.isDomFree)
			return;
		var cursor_style = ["auto", "pointer", "text", "crosshair", "move", "help", "wait", "none"][c];
		if (lastSetCursor === cursor_style)
			return;		// redundant
		lastSetCursor = cursor_style;
		document.body.style.cursor = cursor_style;
	};
	Acts.prototype.SetCursorSprite = function (obj)
	{
		if (this.runtime.isDomFree || this.runtime.isMobile || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst || !inst.curFrame)
			return;
		var frame = inst.curFrame;
		if (lastSetCursor === frame)
			return;		// already set this frame
		lastSetCursor = frame;
		var datauri = frame.getDataUri();
		var cursor_style = "url(" + datauri + ") " + Math.round(frame.hotspotX * frame.width) + " " + Math.round(frame.hotspotY * frame.height) + ", auto";
		document.body.style.cursor = "";
		document.body.style.cursor = cursor_style;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.X = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		ret.set_float(this.mouseXcanvas);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		ret.set_float(this.mouseYcanvas);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.NinePatch = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.NinePatch.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img.cr_filesize = this.texture_filesize;
		this.runtime.waitForImageLoad(this.texture_img, this.texture_file);
		this.fillPattern = null;
		this.leftPattern = null;
		this.rightPattern = null;
		this.topPattern = null;
		this.bottomPattern = null;
		this.webGL_texture = null;
		this.webGL_fillTexture = null;
		this.webGL_leftTexture = null;
		this.webGL_rightTexture = null;
		this.webGL_topTexture = null;
		this.webGL_bottomTexture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
		this.webGL_fillTexture = null;
		this.webGL_leftTexture = null;
		this.webGL_rightTexture = null;
		this.webGL_topTexture = null;
		this.webGL_bottomTexture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length)
			return;
		if (this.runtime.glwrap)
		{
			this.runtime.glwrap.deleteTexture(this.webGL_texture);
			this.runtime.glwrap.deleteTexture(this.webGL_fillTexture);
			this.runtime.glwrap.deleteTexture(this.webGL_leftTexture);
			this.runtime.glwrap.deleteTexture(this.webGL_rightTexture);
			this.runtime.glwrap.deleteTexture(this.webGL_topTexture);
			this.runtime.glwrap.deleteTexture(this.webGL_bottomTexture);
			this.webGL_texture = null;
			this.webGL_fillTexture = null;
			this.webGL_leftTexture = null;
			this.webGL_rightTexture = null;
			this.webGL_topTexture = null;
			this.webGL_bottomTexture = null;
		}
	};
	typeProto.slicePatch = function (x1, y1, x2, y2)
	{
		var tmpcanvas = document.createElement("canvas");
		var w = x2 - x1;
		var h = y2 - y1;
		tmpcanvas.width = w;
		tmpcanvas.height = h;
		var tmpctx = tmpcanvas.getContext("2d");
		tmpctx.drawImage(this.texture_img, x1, y1, w, h, 0, 0, w, h);
		return tmpcanvas;
	};
	typeProto.createPatch = function (lm, rm, tm, bm)
	{
		var iw = this.texture_img.width;
		var ih = this.texture_img.height;
		var re = iw - rm;
		var be = ih - bm;
		if (this.runtime.glwrap)
		{
			if (this.webGL_fillTexture)
				return;		// already created
			var glwrap = this.runtime.glwrap;
			var ls = this.runtime.linearSampling;
			var tf = this.texture_pixelformat;
			if (re > lm && be > tm)
				this.webGL_fillTexture = glwrap.loadTexture(this.slicePatch(lm, tm, re, be), true, ls, tf);
			if (lm > 0 && be > tm)
				this.webGL_leftTexture = glwrap.loadTexture(this.slicePatch(0, tm, lm, be), true, ls, tf, "repeat-y");
			if (rm > 0 && be > tm)
				this.webGL_rightTexture = glwrap.loadTexture(this.slicePatch(re, tm, iw, be), true, ls, tf, "repeat-y");
			if (tm > 0 && re > lm)
				this.webGL_topTexture = glwrap.loadTexture(this.slicePatch(lm, 0, re, tm), true, ls, tf, "repeat-x");
			if (bm > 0 && re > lm)
				this.webGL_bottomTexture = glwrap.loadTexture(this.slicePatch(lm, be, re, ih), true, ls, tf, "repeat-x");
		}
		else
		{
			if (this.fillPattern)
				return;		// already created
			var ctx = this.runtime.ctx;
			if (re > lm && be > tm)
				this.fillPattern = ctx.createPattern(this.slicePatch(lm, tm, re, be), "repeat");
			if (lm > 0 && be > tm)
				this.leftPattern = ctx.createPattern(this.slicePatch(0, tm, lm, be), "repeat");
			if (rm > 0 && be > tm)
				this.rightPattern = ctx.createPattern(this.slicePatch(re, tm, iw, be), "repeat");
			if (tm > 0 && re > lm)
				this.topPattern = ctx.createPattern(this.slicePatch(lm, 0, re, tm), "repeat");
			if (bm > 0 && re > lm)
				this.bottomPattern = ctx.createPattern(this.slicePatch(lm, be, re, ih), "repeat");
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.leftMargin = this.properties[0];
		this.rightMargin = this.properties[1];
		this.topMargin = this.properties[2];
		this.bottomMargin = this.properties[3];
		this.edges = this.properties[4];					// 0=tile, 1=stretch
		this.fill = this.properties[5];						// 0=tile, 1=stretch, 2=transparent
		this.visible = (this.properties[6] === 0);			// 0=visible, 1=invisible
		this.seamless = (this.properties[8] !== 0);			// 1px overdraw to hide seams
		if (this.recycled)
			this.rcTex.set(0, 0, 0, 0);
		else
			this.rcTex = new cr.rect(0, 0, 0, 0);
		if (this.runtime.glwrap)
		{
			if (!this.type.webGL_texture)
			{
				this.type.webGL_texture = this.runtime.glwrap.loadTexture(this.type.texture_img, false, this.runtime.linearSampling, this.type.texture_pixelformat);
			}
		}
		this.type.createPatch(this.leftMargin, this.rightMargin, this.topMargin, this.bottomMargin);
	};
	function drawPatternProperly(ctx, pattern, pw, ph, drawX, drawY, w, h, ox, oy)
	{
		ctx.save();
		ctx.fillStyle = pattern;
		var offX = drawX % pw;
		var offY = drawY % ph;
		if (offX < 0)
			offX += pw;
		if (offY < 0)
			offY += ph;
		ctx.translate(offX + ox, offY + oy);
		ctx.fillRect(drawX - offX - ox, drawY - offY - oy, w, h);
		ctx.restore();
	};
	instanceProto.draw = function(ctx)
	{
		var img = this.type.texture_img;
		var lm = this.leftMargin;
		var rm = this.rightMargin;
		var tm = this.topMargin;
		var bm = this.bottomMargin;
		var iw = img.width;
		var ih = img.height;
		var re = iw - rm;
		var be = ih - bm;
		ctx.globalAlpha = this.opacity;
		ctx.save();
		var myx = this.x;
		var myy = this.y;
		var myw = this.width;
		var myh = this.height;
		if (this.runtime.pixel_rounding)
		{
			myx = Math.round(myx);
			myy = Math.round(myy);
		}
		var drawX = -(this.hotspotX * this.width);
		var drawY = -(this.hotspotY * this.height);
		var offX = drawX % iw;
		var offY = drawY % ih;
		if (offX < 0)
			offX += iw;
		if (offY < 0)
			offY += ih;
		ctx.translate(myx + offX, myy + offY);
		var x = drawX - offX;
		var y = drawY - offY;
		var s = (this.seamless ? 1 : 0);
		if (lm > 0 && tm > 0)
			ctx.drawImage(img, 0, 0, lm + s, tm + s, x, y, lm + s, tm + s);
		if (rm > 0 && tm > 0)
			ctx.drawImage(img, re - s, 0, rm + s, tm + s, x + myw - rm - s, y, rm + s, tm + s);
		if (rm > 0 && bm > 0)
			ctx.drawImage(img, re - s, be - s, rm + s, bm + s, x + myw - rm - s, y + myh - bm - s, rm + s, bm + s);
		if (lm > 0 && bm > 0)
			ctx.drawImage(img, 0, be - s, lm + s, bm + s, x, y + myh - bm - s, lm + s, bm + s);
		if (this.edges === 0)		// tile edges
		{
			var off = (this.fill === 2 ? 0 : s);
			if (lm > 0 && be > tm)
				drawPatternProperly(ctx, this.type.leftPattern, lm, be - tm, x, y + tm, lm + off, myh - tm - bm, 0, 0);
			if (rm > 0 && be > tm)
				drawPatternProperly(ctx, this.type.rightPattern, rm, be - tm, x + myw - rm - off, y + tm, rm + off, myh - tm - bm, off, 0);
			if (tm > 0 && re > lm)
				drawPatternProperly(ctx, this.type.topPattern, re - lm, tm, x + lm, y, myw - lm - rm, tm + off, 0, 0);
			if (bm > 0 && re > lm)
				drawPatternProperly(ctx, this.type.bottomPattern, re - lm, bm, x + lm, y + myh - bm - off, myw - lm - rm, bm + off, 0, off);
		}
		else if (this.edges === 1)	// stretch edges
		{
			if (lm > 0 && be > tm && myh - tm - bm > 0)
				ctx.drawImage(img, 0, tm, lm, be - tm, x, y + tm, lm, myh - tm - bm);
			if (rm > 0 && be > tm && myh - tm - bm > 0)
				ctx.drawImage(img, re, tm, rm, be - tm, x + myw - rm, y + tm, rm, myh - tm - bm);
			if (tm > 0 && re > lm && myw - lm - rm > 0)
				ctx.drawImage(img, lm, 0, re - lm, tm, x + lm, y, myw - lm - rm, tm);
			if (bm > 0 && re > lm && myw - lm - rm > 0)
				ctx.drawImage(img, lm, be, re - lm, bm, x + lm, y + myh - bm, myw - lm - rm, bm);
		}
		if (be > tm && re > lm)
		{
			if (this.fill === 0)		// tile fill
			{
				drawPatternProperly(ctx, this.type.fillPattern, re - lm, be - tm, x + lm, y + tm, myw - lm - rm, myh - tm - bm, 0, 0);
			}
			else if (this.fill === 1)	// stretch fill
			{
				if (myw - lm - rm > 0 && myh - tm - bm > 0)
				{
					ctx.drawImage(img, lm, tm, re - lm, be - tm, x + lm, y + tm, myw - lm - rm, myh - tm - bm);
				}
			}
		}
		ctx.restore();
	};
	instanceProto.drawPatch = function(glw, tex, sx, sy, sw, sh, dx, dy, dw, dh)
	{
		glw.setTexture(tex);
		var rcTex = this.rcTex;
		rcTex.left = sx / tex.c2width;
		rcTex.top = sy / tex.c2height;
		rcTex.right = (sx + sw) / tex.c2width;
		rcTex.bottom = (sy + sh) / tex.c2height;
		glw.quadTex(dx, dy, dx + dw, dy, dx + dw, dy + dh, dx, dy + dh, rcTex);
	};
	instanceProto.tilePatch = function(glw, tex, dx, dy, dw, dh, ox, oy)
	{
		glw.setTexture(tex);
		var rcTex = this.rcTex;
		rcTex.left = -ox / tex.c2width;
		rcTex.top = -oy / tex.c2height;
		rcTex.right = (dw - ox) / tex.c2width;
		rcTex.bottom = (dh - oy) / tex.c2height;
		glw.quadTex(dx, dy, dx + dw, dy, dx + dw, dy + dh, dx, dy + dh, rcTex);
	};
	instanceProto.drawGL_earlyZPass = function(glw)
	{
		this.drawGL(glw);
	};
	instanceProto.drawGL = function(glw)
	{
		var lm = this.leftMargin;
		var rm = this.rightMargin;
		var tm = this.topMargin;
		var bm = this.bottomMargin;
		var iw = this.type.texture_img.width;
		var ih = this.type.texture_img.height;
		var re = iw - rm;
		var be = ih - bm;
		glw.setOpacity(this.opacity);
		var rcTex = this.rcTex;
		var q = this.bquad;
		var myx = q.tlx;
		var myy = q.tly;
		var myw = this.width;
		var myh = this.height;
		if (this.runtime.pixel_rounding)
		{
			myx = Math.round(myx);
			myy = Math.round(myy);
		}
		var s = (this.seamless ? 1 : 0);
		if (lm > 0 && tm > 0)
			this.drawPatch(glw, this.type.webGL_texture, 0, 0, lm + s, tm + s, myx, myy, lm + s, tm + s);
		if (rm > 0 && tm > 0)
			this.drawPatch(glw, this.type.webGL_texture, re - s, 0, rm + s, tm + s, myx + myw - rm - s, myy, rm + s, tm + s);
		if (rm > 0 && bm > 0)
			this.drawPatch(glw, this.type.webGL_texture, re - s, be - s, rm + s, bm + s, myx + myw - rm - s, myy + myh - bm - s, rm + s, bm + s);
		if (lm > 0 && bm > 0)
			this.drawPatch(glw, this.type.webGL_texture, 0, be - s, lm + s, bm + s, myx, myy + myh - bm - s, lm + s, bm + s);
		if (this.edges === 0)		// tile edges
		{
			var off = (this.fill === 2 ? 0 : s);
			if (lm > 0 && be > tm)
				this.tilePatch(glw, this.type.webGL_leftTexture, myx, myy + tm, lm + off, myh - tm - bm, 0, 0);
			if (rm > 0 && be > tm)
				this.tilePatch(glw, this.type.webGL_rightTexture, myx + myw - rm - off, myy + tm, rm + off, myh - tm - bm, off, 0);
			if (tm > 0 && re > lm)
				this.tilePatch(glw, this.type.webGL_topTexture, myx + lm, myy, myw - lm - rm, tm + off, 0, 0);
			if (bm > 0 && re > lm)
				this.tilePatch(glw, this.type.webGL_bottomTexture, myx + lm, myy + myh - bm - off, myw - lm - rm, bm + off, 0, off);
		}
		else if (this.edges === 1)	// stretch edges
		{
			if (lm > 0 && be > tm)
				this.drawPatch(glw, this.type.webGL_texture, 0, tm, lm, be - tm, myx, myy + tm, lm, myh - tm - bm);
			if (rm > 0 && be > tm)
				this.drawPatch(glw, this.type.webGL_texture, re, tm, rm, be - tm, myx + myw - rm, myy + tm, rm, myh - tm - bm);
			if (tm > 0 && re > lm)
				this.drawPatch(glw, this.type.webGL_texture, lm, 0, re - lm, tm, myx + lm, myy, myw - lm - rm, tm);
			if (bm > 0 && re > lm)
				this.drawPatch(glw, this.type.webGL_texture, lm, be, re - lm, bm, myx + lm, myy + myh - bm, myw - lm - rm, bm);
		}
		if (be > tm && re > lm)
		{
			if (this.fill === 0)		// tile fill
			{
				this.tilePatch(glw, this.type.webGL_fillTexture, myx + lm, myy + tm, myw - lm - rm, myh - tm - bm, 0, 0);
			}
			else if (this.fill === 1)	// stretch fill
			{
				this.drawPatch(glw, this.type.webGL_texture, lm, tm, re - lm, be - tm, myx + lm, myy + tm, myw - lm - rm, myh - tm - bm);
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEffect = function (effect)
	{
		this.blend_mode = effect;
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Rex_CSV2Array = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_CSV2Array.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.strDelimiter = this.properties[0];
        this.is_eval_mode = (this.properties[1] == 1);
	    this.exp_CurX = 0;
	    this.exp_CurY = 0;
	    this.exp_CurValue = "";
	    this.exp_Width = 0;
	    this.exp_Height = 0;
	};
	instanceProto.value_get = function(v)
	{
	    if (v == null)
	        v = 0;
	    else if (this.is_eval_mode)
	        v = eval("("+v+")");
        return v;
	};
	instanceProto.saveToJSON = function ()
	{
		return { "delimiter": this.strDelimiter
                     };
	};
	instanceProto.loadFromJSON = function (o)
	{
        this.strDelimiter = o["delimiter"];
	};
    var CSVToArray = function ( strData, strDelimiter ){
        strDelimiter = (strDelimiter || ",");
        var objPattern = new RegExp(
                (
                        "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
                        "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
                        "([^\"\\" + strDelimiter + "\\r\\n]*))"
                ),
                "gi"
                );
        var arrData = [[]];
        var arrMatches = null;
        while (arrMatches = objPattern.exec( strData )){
                var strMatchedDelimiter = arrMatches[ 1 ];
                if (
                        strMatchedDelimiter.length &&
                        (strMatchedDelimiter != strDelimiter)
                        ){
                        arrData.push( [] );
                }
                if (arrMatches[ 2 ]){
                        var strMatchedValue = arrMatches[ 2 ].replace(
                                new RegExp( "\"\"", "g" ),
                                "\""
                                );
                } else {
                        var strMatchedValue = arrMatches[ 3 ];
                }
                arrData[ arrData.length - 1 ].push( strMatchedValue );
        }
        return( arrData );
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.ForEachCell = function (csv_string)
	{
	    var table = CSVToArray(csv_string, this.strDelimiter);
		var y_cnt = table.length;
		var x_cnt = table[0].length;
		var i,j;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
	    this.exp_Width = x_cnt;
	    this.exp_Height = y_cnt;
        if (solModifierAfterCnds)
        {
		    for (j=0; j<y_cnt; j++ )
	        {
	            this.exp_CurY = j;
	            for (i=0; i<x_cnt; i++ )
	            {
                    this.runtime.pushCopySol(current_event.solModifiers);
	                this.exp_CurX = i;
                    this.exp_CurValue = this.value_get(table[j][i]);
		    	    current_event.retrigger();
		    	    this.runtime.popSol(current_event.solModifiers);
		        }
		    }
	    }
	    else
	    {
		    for (j=0; j<y_cnt; j++ )
	        {
	            this.exp_CurY = j;
	            for (i=0; i<x_cnt; i++ )
	            {
	                this.exp_CurX = i;
                    this.exp_CurValue = this.value_get(table[j][i]);
		    	    current_event.retrigger();
		        }
		    }
	    }
		return false;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
	var fake_ret = {value:0,
	                set_any: function(value){this.value=value;},
	                set_int: function(value){this.value=value;},
                    set_float: function(value){this.value=value;},
                    set_string: function(value){this.value=value;},
	               };
    Acts.prototype.CSV2Array = function (csv_string, array_objs, map_mode, z_index)
	{
;
        var array_obj = array_objs.getFirstPicked();
        var is_array_inst = (array_obj instanceof cr.plugins_.Arr.prototype.Instance);
;
        var table = CSVToArray(csv_string, this.strDelimiter);
		var x_cnt = table.length;
		var y_cnt = table[0].length;
		if (z_index == null)
		{
		    z_index = 0;
		    if (map_mode == 0)
		        cr.plugins_.Arr.prototype.acts.SetSize.apply(array_obj, [x_cnt, y_cnt, z_index+1]);
	        else
		        cr.plugins_.Arr.prototype.acts.SetSize.apply(array_obj, [y_cnt, x_cnt, z_index+1]);
		}
		else
		{
		    if (z_index < 0)
		        z_index = 0;
		    cr.plugins_.Arr.prototype.exps.Depth.call(array_obj, fake_ret);
		    var z_cnt = Math.max(fake_ret.value, z_index+1);
		    if (map_mode == 0)
		        cr.plugins_.Arr.prototype.acts.SetSize.apply(array_obj, [x_cnt, y_cnt, z_cnt]);
	        else
		        cr.plugins_.Arr.prototype.acts.SetSize.apply(array_obj, [y_cnt, x_cnt, z_cnt]);
		}
        var i,j,v;
		var array_set = cr.plugins_.Arr.prototype.acts.SetXYZ;
		if (map_mode == 0)
		{
		    for(j=0;j<y_cnt;j++)
		    {
		        for(i=0;i<x_cnt;i++)
			    {
			        v = this.value_get(table[i][j]);
			        array_set.apply(array_obj, [i,j,z_index, v]);
			    }
		    }
        }
        else
        {
		    for(j=0;j<y_cnt;j++)
		    {
		        for(i=0;i<x_cnt;i++)
			    {
			        v = this.value_get(table[i][j]);
			        array_set.apply(array_obj, [j,i,z_index, v]);
			    }
		    }
        }
	};
	Acts.prototype.SetDelimiter = function (s)
	{
        this.strDelimiter = s;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.CurX = function (ret)
	{
		ret.set_int(this.exp_CurX);
	};
	Exps.prototype.CurY = function (ret)
	{
		ret.set_int(this.exp_CurY);
	};
	Exps.prototype.CurValue = function (ret)
	{
		ret.set_any(this.exp_CurValue);
	};
	Exps.prototype.Width = function (ret)
	{
		ret.set_int(this.exp_Width);
	};
	Exps.prototype.Height = function (ret)
	{
		ret.set_int(this.exp_Height);
	};
	Exps.prototype.Delimiter = function (ret)
	{
		ret.set_string(this.strDelimiter);
	};
}());
;
;
cr.plugins_.Rex_CSV2Dictionary = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_CSV2Dictionary.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.strDelimiter = this.properties[0];
        this.is_eval_mode = (this.properties[1] == 1);
	    this.exp_CurKey = "";
	    this.exp_CurValue = "";
	};
	instanceProto.value_get = function(v)
	{
	    if (v == null)
	        v = 0;
	    else if (this.is_eval_mode)
	        v = eval("("+v+")");
        return v;
	};
	instanceProto.saveToJSON = function ()
	{
		return { "delimiter": this.strDelimiter
                     };
	};
	instanceProto.loadFromJSON = function (o)
	{
        this.strDelimiter = o["delimiter"];
	};
    var CSVToArray = function ( strData, strDelimiter ){
        strDelimiter = (strDelimiter || ",");
        var objPattern = new RegExp(
                (
                        "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
                        "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
                        "([^\"\\" + strDelimiter + "\\r\\n]*))"
                ),
                "gi"
                );
        var arrData = [[]];
        var arrMatches = null;
        while (arrMatches = objPattern.exec( strData )){
                var strMatchedDelimiter = arrMatches[ 1 ];
                if (
                        strMatchedDelimiter.length &&
                        (strMatchedDelimiter != strDelimiter)
                        ){
                        arrData.push( [] );
                }
                if (arrMatches[ 2 ]){
                        var strMatchedValue = arrMatches[ 2 ].replace(
                                new RegExp( "\"\"", "g" ),
                                "\""
                                );
                } else {
                        var strMatchedValue = arrMatches[ 3 ];
                }
                arrData[ arrData.length - 1 ].push( strMatchedValue );
        }
        return( arrData );
    };
	Acts.prototype.SetDelimiter = function (s)
	{
        this.strDelimiter = s;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.ForEachCell = function (csv_string)
	{
	    var table = CSVToArray(csv_string, this.strDelimiter);
		var i, cnt = table.length;
		if (cnt == 0)
		    return false;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
	    var entry, v;
        if (solModifierAfterCnds)
        {
		    for (i=0; i<cnt; i++ )
	        {
                this.runtime.pushCopySol(current_event.solModifiers);
	            entry = table[i];
	            this.exp_CurKey = entry[0];
	            this.exp_CurValue = this.value_get(entry[1]);
		    	current_event.retrigger();
		    	this.runtime.popSol(current_event.solModifiers);
		    }
	    }
	    else
	    {
		    for (i=0; i<cnt; i++ )
	        {
	            entry = table[i];
	            this.exp_CurKey = entry[0];
	            this.exp_CurValue = this.value_get(entry[1]);
		    	current_event.retrigger();
		    }
	    }
		return false;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.CSV2Dictionary = function (csv_string, dict_objs)
	{
;
        var dict_obj = dict_objs.getFirstPicked();
        var is_dict_inst = (dict_obj instanceof cr.plugins_.Dictionary.prototype.Instance);
;
        var table = CSVToArray(csv_string, this.strDelimiter);
		var i, cnt = table.length;
		if (cnt == 0)
		    return;
		var entry, k, v;
		var add_key = cr.plugins_.Dictionary.prototype.acts.AddKey;
		for (i=0; i<cnt; i++)
		{
		    entry = table[i];
		    k = entry[0];
		    v = this.value_get(entry[1]);
		    add_key.apply(dict_obj, [k, v]);
		}
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.CurKey = function (ret)
	{
		ret.set_string(this.exp_CurKey);
	};
	Exps.prototype.CurValue = function (ret)
	{
		ret.set_any(this.exp_CurValue);
	};
	Exps.prototype.Delimiter = function (ret)
	{
		ret.set_string(this.strDelimiter);
	};
}());
;
;
cr.plugins_.Rex_Comment = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Comment.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	};
	instanceProto.onDestroy = function ()
	{
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.NOOP = function ()
	{
		return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.NOOP = function ()
	{
	};
	function Exps() {};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Rex_CopyToClipboard = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_CopyToClipboard.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.content = "";
        this.succeed = false;
	};
	instanceProto.onDestroy = function ()
	{
	};
    var copyToClipboard = function(s)
    {
        var targetId = "_hiddenCopyText_";
        target = document["getElementById"](targetId);
        if (!target)
        {
            var target = document["createElement"]("textarea");
            target["style"]["position"] = "absolute";
            target["style"]["left"] = "-9999px";
            target["style"]["top"] = "0";
            target["id"] = targetId;
            document.body.appendChild(target);
        }
        target["textContent"] = s;
        var currentFocus = document["activeElement"];
        target.focus();
        target["setSelectionRange"](0, target["value"].length);
        var succeed;
        try
        {
        	  succeed = document["execCommand"]("copy");
        }
        catch(e)
        {
            succeed = false;
        }
        if (currentFocus && typeof currentFocus["focus"] === "function")
        {
            currentFocus["focus"]();
        }
        target["textContent"] = "";
        return succeed;
    };
	instanceProto.saveToJSON = function ()
	{
		return {
			"c": this.content,
			"s": this.succeed,
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.content = o["c"];
		this.succeed = o["s"];
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.IsSuccess = function ()
	{
		return this.succeed;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.Copy = function (s)
	{
        this.content = s;
        this.succeed = copyToClipboard(s)
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.Content = function (ret)
	{
	    ret.set_string( this.content );
	};
}());
;
;
cr.plugins_.Rex_DungeonGen = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_DungeonGen.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    if (!this.recycled)
	        this.dungeon_gen = new window["DungeonGen"]();
	    this.map = null;
        this.rooms = null;
        this.exp_MapWidth = 0;
        this.exp_MapHeight = 0;
        this.exp_CurRoom = null;
        this.exp_CurRoomIndex = -1;
        this.current_task = null;
	};
	instanceProto.onDestroy = function ()
	{
	    this.Cencel();
	};
    instanceProto.Start = function (type, w, h, seed, options)
	{
	    this.dungeon_gen["Stop"]();
        var self = this;
        var on_complete = function (args)
        {
            self.exp_MapWidth = w;
            self.exp_MapHeight = h;
            var mapInfo = args[0];
            self.map = mapInfo[0];
            self.rooms = mapInfo[1];
            self.current_task = null;
            self.runtime.trigger(cr.plugins_.Rex_DungeonGen.prototype.cnds.OnCompleted, self);
        };
        this.current_task = [type, w, h, seed, options];
        this.dungeon_gen["Start"](type, w, h, seed, options, on_complete);
	};
    instanceProto.Cencel = function (cell)
	{
	    this.current_task = null;
	    this.dungeon_gen["Stop"]();
	};
    instanceProto.ValueAt = function (x, y)
	{
	    var value;
	    if (this.map && this.map[x])
	        value = this.map[x][y];
	    if (value == null)
	        value = -1;
	    return value;
	};
    instanceProto.isInMap = function (x, y)
	{
        return ((x >= 0) && (x <this.exp_MapWidth) && (y >= 0) && (y < this.exp_MapHeight));
	};
    instanceProto.LXY2RoomIndex = function (x, y)
	{
        if (!this.isInMap(x,y))
            return -1;
        var i, cnt=this.rooms.length, room;
        for (i=0; i<cnt; i++)
        {
            room = this.rooms[i];
            if ((x >= room[0]) && (x <= room[2]) && (y >= room[1]) && (y <= room[3]))
                return i;
        }
	    return -1;
	};
    instanceProto.isInvalid = function (x, y)
	{
	    return (this.ValueAt(x,y) === -1);
	};
    instanceProto.isWall = function (x, y)
	{
	    return (this.ValueAt(x,y) === 1);
	};
    instanceProto.isEmptySpace = function (x, y)
	{
	    return (this.ValueAt(x,y) === 0);
	};
    instanceProto.isBorderWall = function (x, y)
	{
        if (this.isWall(x,y))
        {
            var hasEmptySpaceNeighbor = this.isEmptySpace(x, y-1);
            if (!hasEmptySpaceNeighbor) hasEmptySpaceNeighbor = this.isEmptySpace(x+1, y);
            if (!hasEmptySpaceNeighbor) hasEmptySpaceNeighbor = this.isEmptySpace(x, y+1);
            if (!hasEmptySpaceNeighbor) hasEmptySpaceNeighbor = this.isEmptySpace(x-1, y);
            if (!hasEmptySpaceNeighbor) hasEmptySpaceNeighbor = this.isEmptySpace(x+1, y-1);
            if (!hasEmptySpaceNeighbor) hasEmptySpaceNeighbor = this.isEmptySpace(x+1, y+1);
            if (!hasEmptySpaceNeighbor) hasEmptySpaceNeighbor = this.isEmptySpace(x-1, y+1);
            if (!hasEmptySpaceNeighbor) hasEmptySpaceNeighbor = this.isEmptySpace(x-1, y-1);
	        return hasEmptySpaceNeighbor;
        }
        return false;
	};
    instanceProto.isFilledWall = function (x, y)
	{
        return this.isWall(x,y) && (!this.isBorderWall(x,y));
	};
    instanceProto.isRoomSpace = function (x, y)
	{
        return (this.LXY2RoomIndex(x,y) !== -1);
	};
    instanceProto.isCorridor = function (x, y, simpleTest)
	{
        if (this.isEmptySpace(x,y) && (!this.isRoomSpace(x,y)))
        {
            if (simpleTest)  // include door-type
                return true;
            var hasRoomSpaceNeighbor = this.isRoomSpace(x, y-1);
            if (!hasRoomSpaceNeighbor) hasRoomSpaceNeighbor = this.isRoomSpace(x+1, y);
            if (!hasRoomSpaceNeighbor) hasRoomSpaceNeighbor = this.isRoomSpace(x, y+1);
            if (!hasRoomSpaceNeighbor) hasRoomSpaceNeighbor = this.isRoomSpace(x-1, y);
	        return !hasRoomSpaceNeighbor;
        }
        return false;
	};
    instanceProto.isDoor = function (x, y)
	{
        if (this.isEmptySpace(x,y) && (!this.isRoomSpace(x,y)))
        {
            var hasRoomSpaceNeighbor = this.isRoomSpace(x, y-1);
            if (!hasRoomSpaceNeighbor) hasRoomSpaceNeighbor = this.isRoomSpace(x+1, y);
            if (!hasRoomSpaceNeighbor) hasRoomSpaceNeighbor = this.isRoomSpace(x, y+1);
            if (!hasRoomSpaceNeighbor) hasRoomSpaceNeighbor = this.isRoomSpace(x-1, y);
	        return hasRoomSpaceNeighbor;
        }
        return false;
	};
    instanceProto.getCorridorNeighborsCount = function (x, y)
	{
        var cnt = 0;
        if (this.isCorridor(x, y-1, true))  cnt += 1;
        if (this.isCorridor(x+1, y, true))  cnt += 1;
        if (this.isCorridor(x, y+1, true))  cnt += 1;
        if (this.isCorridor(x-1, y, true))  cnt += 1;
	    return cnt;
	};
    instanceProto.getCorridorNeighborsCode = function (x, y)
	{
        var code = 0;
        if (this.isCorridor(x+1, y, true))  code |= 1;
        if (this.isCorridor(x, y+1, true))  code |= 2;
        if (this.isCorridor(x-1, y, true))  code |= 4;
        if (this.isCorridor(x, y-1, true))  code |= 8;
	    return code;
	};
    instanceProto.getRoomLeft = function (room)
	{
        return (room === null)? (-1):room[0];
	};
    instanceProto.getRoomRight = function (room)
	{
        return (room === null)? (-1):room[2];
	};
    instanceProto.getRoomTop = function (room)
	{
        return (room === null)? (-1):room[1];
	};
    instanceProto.getRoomBottom = function (room)
	{
        return (room === null)? (-1):room[3];
	};
    instanceProto.getRoomCenterX = function (room)
	{
        return (room === null)? (-1): (Math.floor((room[0] + room[2])/2));
	};
    instanceProto.getRoomCenterY = function (room)
	{
        return (room === null)? (-1): (Math.floor((room[1] + room[3])/2));
	};
    instanceProto.getRoomWidth = function (room)
	{
        return (room === null)? (-1): (room[2] - room[0] + 1);
	};
    instanceProto.getRoomHeight = function (room)
	{
        return (room === null)? (-1): (room[3] - room[1] + 1);
	};
	instanceProto.saveToJSON = function ()
	{
		return { "map": this.map,
                 "rooms": this.rooms,
                 "w": this.exp_MapWidth,
                 "h": this.exp_MapHeight,
                 "curTsk": this.current_task,
               };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.map = o["map"];
        this.rooms = o["rooms"];
		this.exp_MapWidth = o["w"];
		this.exp_MapHeight = o["h"];
		var current_task = o["curTsk"];
		if (current_task !== null)
		{
		    this.Start.apply(this, current_task);
		}
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.IsGenerating = function ()
	{
		return this.dungeon_gen["IsProcessing"]();
	};
	Cnds.prototype.OnCompleted = function ()
	{
		return true;
	};
	Cnds.prototype.TileType = function (x, y, type)
	{
        switch (type)
        {
        case 0:  return this.isInvalid(x,y);
        case 1:  return this.isFilledWall(x,y);
        case 2:  return this.isBorderWall(x,y);
        case 3:  return this.isRoomSpace(x,y);
        case 4:  return this.isCorridor(x,y);
        case 5:  return this.isDoor(x,y);
        default: return false;
        }
	};
	Cnds.prototype.IsCorridorType = function (x, y, type)
	{
        if (!this.isCorridor(x,y, true))
            return false;
        switch (type)
        {
        case 0:  return (this.getCorridorNeighborsCount(x,y) === 1);  // dead end
        case 1:  // L-junction
            var code = this.getCorridorNeighborsCode(x,y);
            return ((code === 3) || (code === 6) || (code === 12) || (code == 9));
        case 2:  // I-junction
            var code = this.getCorridorNeighborsCode(x,y);
            return ((code === 5) || (code === 10));
        case 3:  return (this.getCorridorNeighborsCount(x,y) === 3);  // T-junction
        case 4:  return (this.getCorridorNeighborsCount(x,y) === 4);  // X-junction
        default: return false;
        }
	};
	Cnds.prototype.DoorType = function (x, y, dir)
	{
        switch (dir)
        {
        case 0:  return this.isRoomSpace(x-1, y);    // left
        case 1:  return this.isRoomSpace(x+1, y);    // right
        case 2:  return this.isRoomSpace(x, y-1);    // top
        case 3:  return this.isRoomSpace(x, y+1);    // bottom
        default: return false;
        }
	};
	Cnds.prototype.ForEachRoom = function ()
	{
        if (this.rooms == null)
            return false;
	    var runtime = this.runtime;
        var current_frame = runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var self = this;
        var i,cnt=this.rooms.length;
        for(i=0; i<cnt; i++)
		{
            if (solModifierAfterCnds)
            {
                runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurRoom = this.rooms[i];
            this.exp_CurRoomIndex = i;
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        runtime.popSol(current_event.solModifiers);
		    }
		}
        this.exp_CurRoom = null;
        this.exp_CurRoomIndex = -1;
		return false;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.GenerateDungeonDigger = function (w, h, seed,
        roomWidthMin, roomWidthMax,
        roomHeightMin, roomHeightMax,
        corridorLengthMin, corridorLengthMax,
        dugPercentage, timeLimit)
	{
        var options = {
            "roomWidth": [roomWidthMin, roomWidthMax],
            "roomHeight": [roomHeightMin, roomHeightMax],
            "corridorLength": [corridorLengthMin, corridorLengthMax],
            "dugPercentage": dugPercentage,
            "timeLimit": timeLimit*1000
        }
	    this.Start("Digger", w, h, seed, options);
	};
    Acts.prototype.GenerateDungeonUniform = function (w, h, seed,
        roomWidthMin, roomWidthMax,
        roomHeightMin, roomHeightMax,
        dugPercentage, timeLimit)
	{
        var options = {
            "roomWidth": [roomWidthMin, roomWidthMax],
            "roomHeight": [roomHeightMin, roomHeightMax],
            "dugPercentage": dugPercentage,
            "timeLimit": timeLimit*1000
        }
	    this.Start("Uniform", w, h, seed, options);
	};
    Acts.prototype.GenerateDungeonRogue = function (w, h, seed,
        cellWidth, cellHeight)
	{
        var options = {
            "cellWidth": cellWidth,
            "cellHeight": cellHeight
        }
	    this.Start("Rogue", w, h, seed, options);
	};
    Acts.prototype.Cencel = function ()
	{
	    this.Cencel();
	};
    Acts.prototype.Release = function ()
	{
        this.exp_MapWidth = 0;
        this.exp_MapHeight = 0;
        this.map = null;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.MapWidth = function (ret)
	{
	    ret.set_float( this.exp_MapWidth );
	};
    Exps.prototype.MapHeight = function (ret)
	{
	    ret.set_float( this.exp_MapHeight );
	};
    Exps.prototype.ValueAt = function (ret, x, y)
	{
	    ret.set_any( this.ValueAt(x,y) );
	};
    Exps.prototype.MapAsJson = function (ret)
	{
        var json = (this.map)? JSON.stringify( this.map ) : "";
	    ret.set_string( json );
	};
    Exps.prototype.CurRoomLeft = function (ret)
	{
	    ret.set_int( this.getRoomLeft(this.exp_CurRoom) );
	};
    Exps.prototype.CurRoomRight = function (ret)
	{
	    ret.set_int( this.getRoomRight(this.exp_CurRoom) );
	};
    Exps.prototype.CurRoomTop = function (ret)
	{
	    ret.set_int( this.getRoomTop(this.exp_CurRoom) );
	};
    Exps.prototype.CurRoomBottom = function (ret)
	{
	    ret.set_int( this.getRoomBottom(this.exp_CurRoom) );
	};
    Exps.prototype.CurRoomCenterX = function (ret)
	{
	    ret.set_int( this.getRoomCenterX(this.exp_CurRoom) );
	};
    Exps.prototype.CurRoomCenterY = function (ret)
	{
	    ret.set_int( this.getRoomCenterY(this.exp_CurRoom) );
	};
    Exps.prototype.CurRoomWidth = function (ret)
	{
	    ret.set_int( this.getRoomWidth(this.exp_CurRoom) );
	};
    Exps.prototype.CurRoomHeight = function (ret)
	{
	    ret.set_int( this.getRoomHeight(this.exp_CurRoom) );
	};
    Exps.prototype.CurRoomIndex = function (ret)
	{
	    ret.set_int( this.exp_CurRoomIndex );
	};
    Exps.prototype.RoomsCount = function (ret)
	{
        var c = (this.rooms == null)? 0 : this.rooms.length;
	    ret.set_int( c );
	};
    Exps.prototype.LXY2RoomIndex = function (ret, x, y)
	{
	    ret.set_int( this.LXY2RoomIndex(x, y) );
	};
    Exps.prototype.RoomLeft = function (ret, index)
	{
        var v = (this.rooms == null)? (-1) : this.getRoomLeft(this.rooms[index]);
	    ret.set_int( v );
	};
    Exps.prototype.RoomRight = function (ret, index)
	{
        var v = (this.rooms == null)? (-1) : this.getRoomRight(this.rooms[index]);
	    ret.set_int( v );
	};
    Exps.prototype.RoomTop = function (ret, index)
	{
        var v = (this.rooms == null)? (-1) : this.getRoomTop(this.rooms[index]);
	    ret.set_int( v );
	};
    Exps.prototype.RoomBottom = function (ret, index)
	{
        var v = (this.rooms == null)? (-1) : this.getRoomBottom(this.rooms[index]);
	    ret.set_int( v );
	};
    Exps.prototype.RoomCenterX = function (ret, index)
	{
        var v = (this.rooms == null)? (-1) : this.getRoomCenterX(this.rooms[index]);
	    ret.set_int( v );
	};
    Exps.prototype.RoomCenterY = function (ret, index)
	{
        var v = (this.rooms == null)? (-1) : this.getRoomCenterY(this.rooms[index]);
	    ret.set_int( v );
	};
    Exps.prototype.RoomWidth = function (ret, index)
	{
        var v = (this.rooms == null)? (-1) : this.getRoomWidth(this.rooms[index]);
	    ret.set_int( v );
	};
    Exps.prototype.RoomHeight = function (ret, index)
	{
        var v = (this.rooms == null)? (-1) : this.getRoomHeight(this.rooms[index]);
	    ret.set_int( v );
	};
}());
;
;
cr.plugins_.Rex_EventBalancer = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_EventBalancer.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.is_dynamic_mode = (this.properties[0] == 0);
        this.processing_time = percentage2time(this.properties[1]);
        this.repeat_count = this.properties[2];
        this.is_running = false;
        this.elapsed_ticks = 0;
        this.trigger_mode_init = false;
        this.is_looping = false;
	};
    var percentage2time = function (percentage)
    {
	    if (percentage < 0.01)
		    percentage = 0.01;
	    return (1/60)*1000*percentage;
    };
    instanceProto.tick = function()
    {
        if (!this.is_running)
            return;
        this.elapsed_ticks += 1;
        if (this.is_dynamic_mode)
            this._run_dynamic_mode()
        else
            this._run_static_mode()
    };
	instanceProto._run_dynamic_mode = function()
	{
        var is_timeout = false;
        var start_time = Date.now();
        while (!is_timeout)
        {
            this.runtime.trigger(cr.plugins_.Rex_EventBalancer.prototype.cnds.OnProcessing, this);
            if (!this.is_running)
                break;
            is_timeout = ((Date.now() - start_time) > this.processing_time);
        }
	};
	instanceProto._run_static_mode = function()
	{
	    var i;
	    for (i=0; i<this.repeat_count; i++)
	    {
            this.runtime.trigger(cr.plugins_.Rex_EventBalancer.prototype.cnds.OnProcessing, this);
            if (!this.is_running)
                break;
	    }
	};
    instanceProto.saveToJSON = function ()
	{
		return { "dm": this.is_dynamic_mode,
                 "pt": this.processing_time,
                 "rc": this.repeat_count,
                 "isrun": this.is_running,
                 };
	};
	instanceProto.loadFromJSON = function (o)
	{
	    this.is_dynamic_mode = o["dm"];
        this.processing_time = o["pt"];
        this.repeat_count = o["rc"];
        this.is_running = o["isrun"];
        if (this.is_running)
            this.runtime.tickMe(this);
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnStart = function()
	{
		return true;
	};
	Cnds.prototype.OnProcessing = function()
	{
		return true;
	};
	Cnds.prototype.OnStop = function()
	{
		return true;
	};
	Cnds.prototype.IsProcessing = function()
	{
		return this.is_running;
	};
	Cnds.prototype.DynamicLoop = function()
	{
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var start_time = Date.now();
		this.is_looping = true;
		if (solModifierAfterCnds)
		{
            while ((Date.now() - start_time) <= this.processing_time)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
                current_event.retrigger();
                this.runtime.popSol(current_event.solModifiers);
                if (!this.is_looping)
                    break;
            }
	    }
	    else
	    {
            while ((Date.now() - start_time) <= this.processing_time)
            {
                current_event.retrigger();
                if (!this.is_looping)
                    break;
            }
	    }
		return false;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
	Acts.prototype.Start = function()
	{
	    if (!this.trigger_mode_init)
	    {
            this.runtime.tickMe(this);
            this.trigger_mode_init = true;
        }
        this.is_running = true;
	    this.elapsed_ticks = 0;
        this.runtime.trigger(cr.plugins_.Rex_EventBalancer.prototype.cnds.OnStart, this);
	};
	Acts.prototype.Stop = function()
	{
	    if (!this.is_running)
	        return;
        this.is_running = false;
        this.runtime.trigger(cr.plugins_.Rex_EventBalancer.prototype.cnds.OnStop, this);
	};
	Acts.prototype.SetProcessingTime = function(percentage)
	{
        this.processing_time = percentage2time(percentage);
	};
	Acts.prototype.SetRepeatCount = function(repeat_count)
	{
	    if (repeat_count < 1)
	        repeat_count = 1;
        this.repeat_count = repeat_count;
	};
	Acts.prototype.StopLoop = function()
	{
	    this.is_running = false;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.ProcessingTime = function (ret)
	{
        ret.set_float(this.processing_time);
	};
	Exps.prototype.ElapsedTicks = function (ret)
	{
        ret.set_int(this.elapsed_ticks);
	};
}());
;
;
cr.plugins_.Rex_FSM = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_FSM.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var behtypeProto = pluginProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.activated = (this.properties[0] == 1);
		var previous_state = "Off";
		var current_state = this.properties[1];
        current_state = (current_state!="")? current_state:"Off";
        if (!this.recycled)
            this.fsm = new cr.plugins_.Rex_FSM.FSMKlass(this, previous_state, current_state);
        else
            this.fsm.Reset(this, previous_state, current_state);
        this.check_state = null;
        this.check_state2 = null;
        this.is_echo = false;
        this.next_state = null;
	};
    instanceProto.run_trigger = function(trigger)
    {
        this.is_echo = false;
        this.runtime.trigger(trigger, this);
        return (this.is_echo);
    };
    instanceProto.get_next_state = function()
    {
        this.next_state = null;
		var is_echo = this.run_trigger(cr.plugins_.Rex_FSM.prototype.cnds.OnLogic);
		if (!is_echo)
		    this.run_trigger(cr.plugins_.Rex_FSM.prototype.cnds.OnDefaultLogic);
        return this.next_state;
    };
	instanceProto.saveToJSON = function ()
	{
		return { "en": this.activated,
		         "fsm": this.fsm.saveToJSON()
		         };
	};
	instanceProto.loadFromJSON = function (o)
	{
	    this.activated = o["en"];
	    this.fsm.loadFromJSON(o["fsm"]);
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnEnter = function (name)
	{
	    var is_my_handler = (this.check_state == name);
        this.is_echo |= is_my_handler;
		return is_my_handler;
	};
	Cnds.prototype.OnDefaultEnter = function ()
	{
		return true;
	};
	Cnds.prototype.OnExit = function (name)
	{
	    var is_my_handler = (this.check_state == name);
        this.is_echo |= is_my_handler;
		return is_my_handler;
	};
	Cnds.prototype.OnDefaultExit = function ()
	{
		return true;
	};
	Cnds.prototype.OnTransfer = function (name_from, name_to)
	{
	    var is_my_handler = (this.check_state == name_from) && (this.check_state2 == name_to);
        this.is_echo |= is_my_handler;
		return is_my_handler;
	};
	Cnds.prototype.OnStateChanged = function ()
	{
		return true;
	};
	Cnds.prototype.OnLogic = function (name)
	{
        var is_my_handler = (this.fsm.CurState == name);
        this.is_echo |= is_my_handler;
		return is_my_handler;
	};
	Cnds.prototype.IsCurState = function (name)
	{
		return (this.fsm.CurState == name);
	};
	Cnds.prototype.IsPreState = function (name)
	{
		return (this.fsm.PreState == name);
	};
	Cnds.prototype.OnDefaultLogic = function ()
	{
		return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
	Acts.prototype.SetActivated = function (s)
	{
		this.activated = (s==1);
	};
    Acts.prototype.Request = function ()
	{
        if (!this.activated)
            return;
        this.fsm.Request();
	};
    Acts.prototype.GotoState = function (new_state)
	{
        if (!this.activated)
            return;
	    this.fsm.Request(new_state);
	};
	Acts.prototype.NextStateSet = function (state)
	{
        this.next_state = state;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.CurState = function (ret)
	{
	    ret.set_string(this.fsm.CurState);
	};
	Exps.prototype.PreState = function (ret)
	{
	    ret.set_string(this.fsm.PreState);
	};
}());
(function ()
{
    cr.plugins_.Rex_FSM.FSMKlass = function(plugin, previous_state, current_state)
    {
        this.Reset(plugin, previous_state, current_state);
    };
    var FSMKlassProto = cr.plugins_.Rex_FSM.FSMKlass.prototype;
    FSMKlassProto.Reset = function (plugin, previous_state, current_state)
    {
        this.plugin = plugin;
        this.PreState = previous_state;
        this.CurState = current_state;
    };
    FSMKlassProto.Request = function(new_state)
    {
        if (new_state == null)
        {
            new_state = this.plugin.get_next_state();
            if (new_state == null)
                return;
        }
        this.PreState = this.CurState;
        this.CurState = new_state;
        var pre_state = this.PreState;
        var cur_state = this.CurState;
		this.plugin.run_trigger(cr.plugins_.Rex_FSM.prototype.cnds.OnStateChanged);
        var is_echo = this._run_transfer_action(pre_state, cur_state);
        if (is_echo)
            return;
        this._run_exit_action(pre_state);
        this._run_enter_action(cur_state);
    };
    FSMKlassProto._run_transfer_action = function(pre_state, cur_state)
    {
        this.plugin.check_state = pre_state;
        this.plugin.check_state2 = cur_state;
        var is_echo = this.plugin.run_trigger(cr.plugins_.Rex_FSM.prototype.cnds.OnTransfer);
        this.plugin.check_state = null;
        this.plugin.check_state2 = null;
        return is_echo;
    };
    FSMKlassProto._run_exit_action = function(pre_state)
    {
        this.plugin.check_state = pre_state;
	    var is_echo = this.plugin.run_trigger(cr.plugins_.Rex_FSM.prototype.cnds.OnExit);
	    this.plugin.check_state = null;
		if (is_echo)
		{
		    return;
		}
	    this.plugin.run_trigger(cr.plugins_.Rex_FSM.prototype.cnds.OnDefaultExit);
    };
    FSMKlassProto._run_enter_action = function(cur_state)
    {
        this.plugin.check_state = cur_state;
	    var is_echo = this.plugin.run_trigger(cr.plugins_.Rex_FSM.prototype.cnds.OnEnter);
	    this.plugin.check_state = null;
		if (is_echo)
		{
		    return;
		}
	    this.plugin.run_trigger(cr.plugins_.Rex_FSM.prototype.cnds.OnDefaultEnter);
    };
	FSMKlassProto.saveToJSON = function ()
	{
		return { "ps": this.PreState,
		         "cs": this.CurState
			   };
	};
	FSMKlassProto.loadFromJSON = function (o)
	{
	    this.PreState = o["ps"];
		this.CurState = o["cs"];
	};
}());
;
;
cr.plugins_.Rex_Firebase = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var EVENTTYPEMAP = ["value", "child_added", "child_changed", "child_removed","child_moved"];
	instanceProto.onCreate = function()
	{
        this.rootpath = this.properties[0] + "/";
		this.last_push_ref = "";
        this.onTransaction_cb = null;
        this.onTransaction_input = null;
        this.onTransaction_output = null;
        this.onTransaction_completed_cb = null;
        this.onTransaction_committedValue = null;
        this.onComplete_cb = null;
        this.error = null;
        if (!this.recycled)
            this.callbackMap = new window.FirebaseCallbackMapKlass();
        else
            this.callbackMap.Reset();
        this.reading_cb = null;
        this.snapshot = null;
		this.prevChildName = null;
        this.exp_LastGeneratedKey = "";
        this.exp_ServerTimeOffset = 0;
        this.isConnected = false;
        var self=this;
        var setupFn = function ()
        {
            if (self.properties[1] === 1)
                self.connectionDetectingStart();
            if (self.properties[2] === 1)
                self.serverTimeOffsetDetectingStart();
        }
        window.FirebaseAddAfterInitializeHandler(setupFn);
	};
	instanceProto.onDestroy = function ()
	{
	     this.callbackMap.Remove();
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
    instanceProto.add_callback = function (query, type_, cbName)
	{
	    var eventType = EVENTTYPEMAP[type_];
	    var self = this;
        var reading_handler = function (snapshot, prevChildName)
        {
            self.reading_cb = cbName;
            self.snapshot = snapshot;
			self.prevChildName = prevChildName;
            self.runtime.trigger(cr.plugins_.Rex_Firebase.prototype.cnds.OnReading, self);
            self.reading_cb = null;
        };
        this.callbackMap.Add(query, eventType, cbName, reading_handler);
	};
    instanceProto.add_callback_once = function (refObj, type_, cb)
	{
	    var eventType = EVENTTYPEMAP[type_];
	    var self = this;
        var reading_handler = function (snapshot, prevChildName)
        {
            self.reading_cb = cb;
            self.snapshot = snapshot;
            self.prevChildName = prevChildName;
            self.runtime.trigger(cr.plugins_.Rex_Firebase.prototype.cnds.OnReading, self);
            self.reading_cb = null;
        };
	    refObj["once"](eventType, reading_handler);
	};
	instanceProto.connectionDetectingStart = function ()
	{
        var self = this;
        var onValueChanged = function (snap)
        {
            var trig;
            var isConnected = !!snap["val"]();
            if ( isConnected )
                trig = cr.plugins_.Rex_Firebase.prototype.cnds.OnConnected;
            else if (self.isConnected && !isConnected)   // disconnected after connected
                trig = cr.plugins_.Rex_Firebase.prototype.cnds.OnDisconnected;
            self.isConnected = isConnected;
            self.runtime.trigger(trig, self);
        };
        var p = get_root(this.get_ref()) + "/.info/connected";
        var ref = this.get_ref(p);
        ref.on("value", onValueChanged);
	};
	instanceProto.serverTimeOffsetDetectingStart = function ()
	{
        var self = this;
        var onValueChanged = function (snap)
        {
            self.exp_ServerTimeOffset = snap["val"]() || 0;
        };
        var p = get_root(this.get_ref()) + "/.info/serverTimeOffset";
        var ref = this.get_ref(p);
        ref.on("value", onValueChanged);
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnTransaction = function (cb)
	{
	    return cr.equals_nocase(cb, this.onTransaction_cb);
	};
	Cnds.prototype.OnReading = function (cb)
	{
	    return cr.equals_nocase(cb, this.reading_cb);
	};
	Cnds.prototype.OnComplete = function (cb)
	{
	    return cr.equals_nocase(cb, this.onComplete_cb);
	};
	Cnds.prototype.OnError = function (cb)
	{
	    return cr.equals_nocase(cb, this.onComplete_cb);
	};
	Cnds.prototype.LastDataIsNull = function ()
	{
        var data =(this.snapshot === null)? null: this.snapshot["val"]();
	    return (data === null);
	};
	Cnds.prototype.TransactionInIsNull = function ()
	{
        var data =(this.onTransaction_input === null)? null: this.onTransaction_input;
	    return (data === null);
	};
	Cnds.prototype.IsTransactionAborted = function () { return false; };
	Cnds.prototype.OnTransactionComplete = function (cb)
	{
	    return cr.equals_nocase(cb, this.onTransaction_completed_cb);
	};
	Cnds.prototype.OnTransactionError = function (cb)
	{
	    return cr.equals_nocase(cb, this.onTransaction_completed_cb);
	};
	Cnds.prototype.OnTransactionAbort = function (cb)
	{
	    return cr.equals_nocase(cb, this.onTransaction_completed_cb);
	};
	Cnds.prototype.OnConnected = function ()
	{
	    return true;
	};
	Cnds.prototype.OnDisconnected = function ()
	{
	    return true;
	};
	Cnds.prototype.IsConnected = function ()
	{
	    return this.isConnected;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (ref)
	{
	    this.rootpath = ref + "/";
	};
	var onComplete_get = function (self, onComplete_cb)
	{
	    if ((onComplete_cb === null) || (onComplete_cb === ""))
	        return;
	    var handler = function(error)
	    {
	        self.onComplete_cb = onComplete_cb;
	        self.error = error;
	        var trig = (error)? cr.plugins_.Rex_Firebase.prototype.cnds.OnError:
	                            cr.plugins_.Rex_Firebase.prototype.cnds.OnComplete;
	        self.runtime.trigger(trig, self);
	        self.onComplete_cb = null;
        };
        return handler;
	};
    Acts.prototype.SetValue = function (k, v, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    this.get_ref(k)["set"](v, handler);
	};
    Acts.prototype.SetJSON = function (k, v, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    this.get_ref(k)["set"](JSON.parse(v), handler);
	};
    Acts.prototype.UpdateJSON = function (k, v, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    this.get_ref(k)["update"](JSON.parse(v), handler);
	};
    Acts.prototype.PushValue = function (k, v, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    var ref = this.get_ref(k)["push"](v, handler);
		this.last_push_ref = k + "/" +  get_key(ref);
	};
    Acts.prototype.PushJSON = function (k, v, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    var ref = this.get_ref(k)["push"](JSON.parse(v), handler);
		this.last_push_ref = k + "/" + get_key(ref);
	};
    Acts.prototype.Transaction = function (k, onTransaction_cb, onComplete_cb)
	{
        var self = this;
	    var _onComplete = function(error, committed, snapshot)
	    {
	        self.onTransaction_completed_cb = onComplete_cb;
	        self.error = error;
            self.onTransaction_committedValue = snapshot["val"]();
            var cnds = cr.plugins_.Rex_Firebase.prototype.cnds;
	        var trig = (error)? cnds.OnTransactionError:
                           (!committed)? cnds.OnTransactionAbort:
	                           cnds.OnTransactionComplete;
	        self.runtime.trigger(trig, self);
	        self.onTransaction_completed_cb = null;
        };
        var _onTransaction = function(current_value)
        {
            self.onTransaction_cb = onTransaction_cb;
            self.onTransaction_input = current_value;
            self.onTransaction_output = null;
            self.runtime.trigger(cr.plugins_.Rex_Firebase.prototype.cnds.OnTransaction, self);
            self.onTransaction_cb = null;
            if (self.onTransaction_output === null)
                return;
            else
                return self.onTransaction_output;
        };
	    this.get_ref(k)["transaction"](_onTransaction, _onComplete);
	};
    Acts.prototype.ReturnTransactionValue = function (v)
	{
	    this.onTransaction_output = v;
	};
    Acts.prototype.ReturnTransactionJSON = function (v)
	{
	    this.onTransaction_output = JSON.parse(v);
	};
    Acts.prototype.Remove = function (k, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    this.get_ref(k)["remove"](handler);
	};
    Acts.prototype.SetBooleanValue = function (k, b, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    this.get_ref(k)["set"]((b===1), handler);
	};
    Acts.prototype.PushBooleanValue = function (k, b, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    var ref = this.get_ref(k)["push"]((b===1), handler);
		this.last_push_ref = k + "/" +  get_key(ref);
	};
    Acts.prototype.SetServerTimestamp = function (k, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    this.get_ref(k)["set"](serverTimeStamp(), handler);
	};
    Acts.prototype.PushServerTimestamp = function (k, onComplete_cb)
	{
	    var handler = onComplete_get(this, onComplete_cb);
	    var ref = this.get_ref(k)["push"](serverTimeStamp(), handler);
		this.last_push_ref = k + "/" +  get_key(ref);
	};
    Acts.prototype.AddReadingCallback = function (k, type_, cbName)
	{
	    this.add_callback(this.get_ref(k), type_, cbName);
	};
    Acts.prototype.RemoveReadingCallback = function (k, type_, cbName)
	{
        var absRef = (k != null)? this.get_ref(k)["toString"](): null;
        var eventType = (type_ != null)? EVENTTYPEMAP[type_]: null;
        this.callbackMap.Remove(absRef, eventType, cbName);
	};
    Acts.prototype.AddReadingCallbackOnce = function (k, type_, cbName)
	{
	    this.add_callback_once(this.get_ref(k), type_, cbName);
	};
    Acts.prototype.RemoveRefOnDisconnect = function (k)
	{
	    this.get_ref(k)["onDisconnect"]()["remove"]();
	};
    Acts.prototype.SetValueOnDisconnect = function (k, v)
	{
	    this.get_ref(k)["onDisconnect"]()["set"](v);
	};
    Acts.prototype.UpdateJSONOnDisconnect = function (k, v)
	{
	    this.get_ref(k)["onDisconnect"]()["update"](JSON.parse(v));
	};
    Acts.prototype.CancelOnDisconnect = function (k)
	{
	    this.get_ref(k)["onDisconnect"]()["cancel"]();
	};
    var get_query = function (queryObjs)
    {
	    if (queryObjs == null)
	        return null;
        var query = queryObjs.getFirstPicked();
        if (query == null)
            return null;
        return query.GetQuery();
    };
    Acts.prototype.AddQueryCallback = function (queryObjs, type_, cbName)
	{
        var refObj = get_query(queryObjs);
        if (refObj == null)
            return;
        this.add_callback(refObj, type_, cbName);
	};
    Acts.prototype.AddQueryCallbackOnce = function (queryObjs, type_, cbName)
	{
        var refObj = get_query(queryObjs);
        if (refObj == null)
            return;
	   this.add_callback_once(refObj, type_, cbName);
	};
    Acts.prototype.GoOffline = function ()
	{
        if (!isFirebase3x())
        {
	        window["Firebase"]["goOffline"]();
        }
        else
        {
            window["Firebase"]["database"]()["goOffline"]();
        }
	};
    Acts.prototype.GoOnline = function ()
	{
        if (!isFirebase3x())
        {
	        window["Firebase"]["goOnline"]();
        }
        else
        {
            window["Firebase"]["database"]()["goOnline"]();
        }
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.Domain = function (ret)
	{
		ret.set_string(this.rootpath);
	};
	Exps.prototype.TransactionIn = function (ret, default_value)
	{
		ret.set_any(window.FirebaseGetValueByKeyPath(this.onTransaction_input, null, default_value));
	};
	Exps.prototype.LastData = function (ret, default_value)
	{
        var data =(this.snapshot === null)? null: this.snapshot["val"]();
		ret.set_any(window.FirebaseGetValueByKeyPath(data, null, default_value));
	};
	Exps.prototype.LastKey = function (ret, default_value)
	{
        var key =(this.snapshot === null)? null: get_key(this.snapshot);
		ret.set_any(window.FirebaseGetValueByKeyPath(key, null, default_value));
	};
	Exps.prototype.PrevChildName = function (ret, default_value)
	{
		ret.set_any(window.FirebaseGetValueByKeyPath(this.prevChildName, null, default_value));
	};
	Exps.prototype.TransactionResult = function (ret, default_value)
	{
		ret.set_any(window.FirebaseGetValueByKeyPath(this.onTransaction_committedValue, null, default_value));
	};
	Exps.prototype.LastPushRef = function (ret)
	{
		ret.set_string(this.last_push_ref);
	};
  	Exps.prototype.GenerateKey = function (ret)
	{
	    var ref = this.get_ref()["push"]();
        this.exp_LastGeneratedKey = get_key(ref);
		ret.set_string(this.exp_LastGeneratedKey);
	};
	Exps.prototype.LastGeneratedKey = function (ret)
	{
	    ret.set_string(this.exp_LastGeneratedKey);
	};
	Exps.prototype.ServerTimeOffset = function (ret)
	{
	    ret.set_int(this.exp_ServerTimeOffset);
	};
	Exps.prototype.EstimatedTime = function (ret)
	{
	    ret.set_int(new Date().getTime() + this.exp_ServerTimeOffset);
	};
	Exps.prototype.LastErrorCode = function (ret)
	{
        var code;
	    if (this.error)
            code = this.error["code"];
		ret.set_string(code || "");
	};
	Exps.prototype.LastErrorMessage = function (ret)
	{
        var s;
	    if (this.error)
            s = this.error["serverResponse"];
		ret.set_string(s || "");
	};
}());
;
;
window["Firebase"] = window["firebase"];
window["FirebaseV3x"] = true;
cr.plugins_.Rex_FirebaseAPIV3 = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_FirebaseAPIV3.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        window["Firebase"]["database"]["enableLogging"](this.properties[4] === 1);
        if (this.properties[0] !== "")
        {
            this.initializeApp(this.properties[0], this.properties[1], this.properties[2], this.properties[3]);
        }
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.initializeApp = function (apiKey, authDomain, databaseURL, storageBucket)
	{
        var config = {
            "apiKey": apiKey,
            "authDomain": authDomain,
            "databaseURL": databaseURL,
            "storageBucket": storageBucket,
        };
        window["Firebase"]["initializeApp"](config);
        runAfterInitializeHandlers();
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	var get_ref = function(path)
	{
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        return get_ref(path);
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	Acts.prototype.initializeApp = function (apiKey, authDomain, databaseURL, storageBucket)
	{
        this.initializeApp(apiKey, authDomain, databaseURL, storageBucket);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    var __afterInitialHandler = [];
    var addAfterInitialHandler = function(callback)
    {
        if (__afterInitialHandler === null)
            callback()
        else
            __afterInitialHandler.push(callback);
    };
    var runAfterInitializeHandlers = function()
    {
        var i, cnt=__afterInitialHandler.length;
        for(i=0; i<cnt; i++)
        {
            __afterInitialHandler[i]();
        }
        __afterInitialHandler = null;
    };
	window.FirebaseAddAfterInitializeHandler = addAfterInitialHandler;
    var ItemListKlass = function ()
    {
        this.updateMode = 1;                  // AUTOCHILDUPDATE
        this.keyItemID = "__itemID__";
        this.snapshot2Item = null;
        this.onItemAdd = null;
        this.onItemRemove = null;
        this.onItemChange = null;
        this.onItemsFetch = null;
        this.onGetIterItem = null;
        this.extra = {};
        this.query = null;
        this.items = [];
        this.itemID2Index = {};
        this.add_child_handler = null;
        this.remove_child_handler = null;
        this.change_child_handler = null;
        this.items_fetch_handler = null;
    };
    var ItemListKlassProto = ItemListKlass.prototype;
    ItemListKlassProto.MANUALUPDATE = 0;
    ItemListKlassProto.AUTOCHILDUPDATE = 1;
    ItemListKlassProto.AUTOALLUPDATE = 2;
    ItemListKlassProto.GetItems = function ()
    {
        return this.items;
    };
    ItemListKlassProto.GetItemIndexByID = function (itemID)
    {
        return this.itemID2Index[itemID];
    };
    ItemListKlassProto.GetItemByID = function (itemID)
    {
        var i = this.GetItemIndexByID(itemID);
        if (i == null)
            return null;
        return this.items[i];
    };
    ItemListKlassProto.Clean = function ()
    {
        this.items.length = 0;
        clean_table(this.itemID2Index);
    };
    ItemListKlassProto.StartUpdate = function (query)
    {
        this.StopUpdate();
        this.Clean();
        if (this.updateMode === this.MANUALUPDATE)
            this.manual_update(query);
        else if (this.updateMode === this.AUTOCHILDUPDATE)
            this.auto_child_update_start(query);
        else if (this.updateMode === this.AUTOALLUPDATE)
            this.auto_all_update_start(query);
    };
    ItemListKlassProto.StopUpdate = function ()
	{
        if (this.updateMode === this.AUTOCHILDUPDATE)
            this.auto_child_update_stop();
        else if (this.updateMode === this.AUTOALLUPDATE)
            this.auto_all_update_stop();
	};
	ItemListKlassProto.ForEachItem = function (runtime, start, end)
	{
	    if ((start == null) || (start < 0))
	        start = 0;
	    if ((end == null) || (end > this.items.length - 1))
	        end = this.items.length - 1;
        var current_frame = runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var i;
		for(i=start; i<=end; i++)
		{
            if (solModifierAfterCnds)
            {
                runtime.pushCopySol(current_event.solModifiers);
            }
            if (this.onGetIterItem)
                this.onGetIterItem(this.items[i], i);
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        runtime.popSol(current_event.solModifiers);
		    }
		}
		return false;
	};
    ItemListKlassProto.add_item = function(snapshot, prevName, force_push)
	{
	    var item;
	    if (this.snapshot2Item)
	        item = this.snapshot2Item(snapshot);
	    else
	    {
	        var k = get_key(snapshot);
	        item = snapshot["val"]();
	        item[this.keyItemID] = k;
	    }
        if (force_push === true)
        {
            this.items.push(item);
            return;
        }
	    if (prevName == null)
	    {
            this.items.unshift(item);
        }
        else
        {
            var i = this.itemID2Index[prevName];
            if (i == this.items.length-1)
                this.items.push(item);
            else
                this.items.splice(i+1, 0, item);
        }
        return item;
	};
	ItemListKlassProto.remove_item = function(snapshot)
	{
	    var k = get_key(snapshot);
	    var i = this.itemID2Index[k];
	    var item = this.items[i];
	    cr.arrayRemove(this.items, i);
	    return item;
	};
	ItemListKlassProto.update_itemID2Index = function()
	{
	    clean_table(this.itemID2Index);
	    var i,cnt = this.items.length;
	    for (i=0; i<cnt; i++)
	    {
	        this.itemID2Index[this.items[i][this.keyItemID]] = i;
	    }
	};
    ItemListKlassProto.manual_update = function(query)
    {
        var self=this;
        var read_item = function(childSnapshot)
        {
            self.add_item(childSnapshot, null, true);
        };
        var handler = function (snapshot)
        {
            snapshot["forEach"](read_item);
            self.update_itemID2Index();
            if (self.onItemsFetch)
                self.onItemsFetch(self.items)
        };
        query["once"]("value", handler);
    };
    ItemListKlassProto.auto_child_update_start = function(query)
    {
        var self = this;
	    var add_child_handler = function (newSnapshot, prevName)
	    {
	        var item = self.add_item(newSnapshot, prevName);
	        self.update_itemID2Index();
	        if (self.onItemAdd)
	            self.onItemAdd(item);
	    };
	    var remove_child_handler = function (snapshot)
	    {
	        var item = self.remove_item(snapshot);
	        self.update_itemID2Index();
	        if (self.onItemRemove)
	            self.onItemRemove(item);
	    };
	    var change_child_handler = function (snapshot, prevName)
	    {
	        var item = self.remove_item(snapshot);
	        self.update_itemID2Index();
	        self.add_item(snapshot, prevName);
	        self.update_itemID2Index();
	        if (self.onItemChange)
	            self.onItemChange(item);
	    };
	    this.query = query;
        this.add_child_handler = add_child_handler;
        this.remove_child_handler = remove_child_handler;
        this.change_child_handler = change_child_handler;
	    query["on"]("child_added", add_child_handler);
	    query["on"]("child_removed", remove_child_handler);
	    query["on"]("child_moved", change_child_handler);
	    query["on"]("child_changed", change_child_handler);
    };
    ItemListKlassProto.auto_child_update_stop = function ()
	{
        if (!this.query)
            return;
        this.query["off"]("child_added", this.add_child_handler);
	    this.query["off"]("child_removed", this.remove_child_handler);
	    this.query["off"]("child_moved", this.change_child_handler);
	    this.query["off"]("child_changed", this.change_child_handler);
        this.add_child_handler = null;
        this.remove_child_handler = null;
        this.change_child_handler = null;
        this.query = null;
	};
    ItemListKlassProto.auto_all_update_start = function(query)
    {
        var self=this;
        var read_item = function(childSnapshot)
        {
            self.add_item(childSnapshot, null, true);
        };
        var items_fetch_handler = function (snapshot)
        {
            self.Clean();
            snapshot["forEach"](read_item);
            self.update_itemID2Index();
            if (self.onItemsFetch)
                self.onItemsFetch(self.items)
        };
        this.query = query;
        this.items_fetch_handler = items_fetch_handler;
        query["on"]("value", items_fetch_handler);
    };
    ItemListKlassProto.auto_all_update_stop = function ()
	{
        if (!this.query)
            return;
        this.query["off"]("value", this.items_fetch_handler);
        this.items_fetch_handler = null;
        this.query = null;
	};
	var clean_table = function (o)
	{
	    var k;
	    for (k in o)
	        delete o[k];
	};
	window.FirebaseItemListKlass = ItemListKlass;
    var CallbackMapKlass = function ()
    {
        this.map = {};
    };
    var CallbackMapKlassProto = CallbackMapKlass.prototype;
	CallbackMapKlassProto.Reset = function(k)
	{
        for (var k in this.map)
            delete this.map[k];
	};
	CallbackMapKlassProto.get_callback = function(absRef, eventType, cbName)
	{
        if (!this.IsExisted(absRef, eventType, cbName))
            return null;
        return this.map[absRef][eventType][cbName];
	};
    CallbackMapKlassProto.IsExisted = function (absRef, eventType, cbName)
    {
        if (!this.map.hasOwnProperty(absRef))
            return false;
        if (!eventType)  // don't check event type
            return true;
        var eventMap = this.map[absRef];
        if (!eventMap.hasOwnProperty(eventType))
            return false;
        if (!cbName)  // don't check callback name
            return true;
        var cbMap = eventMap[eventType];
        if (!cbMap.hasOwnProperty(cbName))
            return false;
        return true;
    };
	CallbackMapKlassProto.Add = function(query, eventType, cbName, cb)
	{
	    var absRef = query["toString"]();
        if (this.IsExisted(absRef, eventType, cbName))
            return;
        if (!this.map.hasOwnProperty(absRef))
            this.map[absRef] = {};
        var eventMap = this.map[absRef];
        if (!eventMap.hasOwnProperty(eventType))
            eventMap[eventType] = {};
        var cbMap = eventMap[eventType];
        cbMap[cbName] = cb;
	    query["on"](eventType, cb);
	};
	CallbackMapKlassProto.Remove = function(absRef, eventType, cbName)
	{
	    if ((absRef != null) && (typeof(absRef) == "object"))
	        absRef = absRef["toString"]();
        if (absRef && eventType && cbName)
        {
            var cb = this.get_callback(absRef, eventType, cbName);
            if (cb == null)
                return;
            get_ref(absRef)["off"](eventType, cb);
            delete this.map[absRef][eventType][cbName];
        }
        else if (absRef && eventType && !cbName)
        {
            var eventMap = this.map[absRef];
            if (!eventMap)
                return;
            var cbMap = eventMap[eventType];
            if (!cbMap)
                return;
            get_ref(absRef)["off"](eventType);
            delete this.map[absRef][eventType];
        }
        else if (absRef && !eventType && !cbName)
        {
            var eventMap = this.map[absRef];
            if (!eventMap)
                return;
            get_ref(absRef)["off"]();
            delete this.map[absRef];
        }
        else if (!absRef && !eventType && !cbName)
        {
            for (var r in this.map)
            {
                get_ref(r)["off"]();
                delete this.map[r];
            }
        }
	};
	CallbackMapKlassProto.RemoveAllCB = function(absRef)
	{
	    if (absRef)
	    {
            var eventMap = this.map[absRef];
            for (var e in eventMap)
            {
                var cbMap = eventMap[e];
                for (var cbName in cbMap)
                {
                    get_ref(absRef)["off"](e, cbMap[cbName]);
                }
            }
            delete this.map[absRef];
	    }
	    else if (!absRef)
	    {
            for (var r in this.map)
            {
                var eventMap = this.map[r];
                for (var e in eventMap)
                {
                    var cbMap = eventMap[e];
                    for (var cbName in cbMap)
                    {
                        get_ref(r)["off"](e, cbMap[cbName]);
                    }
                }
                delete this.map[r];
            }
        }
	};
    CallbackMapKlassProto.getDebuggerValues = function (propsections)
    {
        var r, eventMap, e, cbMap, cn, display;
        for (r in this.map)
        {
            eventMap = this.map[r];
            for (e in eventMap)
            {
                cbMap = eventMap[e];
                for (cn in cbMap)
                {
                    display = cn+":"+e+"-"+r;
                    propsections.push({"name": display, "value": ""});
                }
            }
        }
    };
    CallbackMapKlassProto.GetRefMap = function ()
    {
        return this.map;
    };
	window.FirebaseCallbackMapKlass = CallbackMapKlass;
    var getValueByKeyPath = function (item, k, default_value)
    {
        var v;
        if (item == null)
            v = null;
        else if ((k == null) || (k === ""))
            v = item;
        else if (typeof(item) !== "object")
            v = null;
        else if (k.indexOf(".") === -1)
            v = item[k];
        else
        {
            v = item;
            var keys = k.split(".");
            var i, cnt=keys.length;
            for(i=0; i<cnt; i++)
            {
                v = v[ keys[i] ];
                if (v == null)
                    break;
            }
        }
        return din(v, default_value);
    }
    var din = function (d, default_value)
    {
        var o;
	    if (d === true)
	        o = 1;
	    else if (d === false)
	        o = 0;
        else if (d == null)
        {
            if (default_value != null)
                o = default_value;
            else
                o = 0;
        }
        else if (typeof(d) == "object")
            o = JSON.stringify(d);
        else
            o = d;
	    return o;
    };
	window.FirebaseGetValueByKeyPath = getValueByKeyPath;
}());
;
;
cr.plugins_.Rex_Firebase_Authentication = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Authentication.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.rootpath = this.properties[0];
        this.isMyLoginCall = false;
        this.isMyLogOutCall = false;
        this.lastError = null;
        this.lastAuthData = null;  // only used in 2.x
        this.lastLoginResult = null; // only used in 3.x
        var self=this;
        var setupFn = function ()
        {
            self.setOnLogoutHandler();
        }
        window.FirebaseAddAfterInitializeHandler(setupFn);
        window.FirebaseGetCurrentUserID = function()
        {
            return self.getCurrentUserID();
        };
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (k.substring(0,8) == "https://")
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        return new window["Firebase"](path);
	};
    var getAuthObj = function()
    {
        return window["Firebase"]["auth"]();
    };
	instanceProto.setOnLogoutHandler = function()
	{
        var self = this;
        var onAuthStateChanged = function (authData)
        {
            if (authData)
            {
                var isMyLoginCall = self.isMyLoginCall && !self.isMyLogOutCall;
                self.lastError = null;
                self.lastAuthData = authData;
                if (!isMyLoginCall)
                    self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLoginByOther, self);
                else
                {
                    self.isMyLoginCall = false;
                    self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLoginSuccessful, self);
                }
            }
            else
            {
                var isMyLogOutCall = self.isMyLogOutCall;
                self.isMyLogOutCall = false;
                self.lastAuthData = null;
                self.lastLoginResult = null;
                if (!isMyLogOutCall)
                    self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLoggedOutByOther, self);
                else
                    self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLoggedOut, self);
            }
        };
        if (!isFirebase3x())
        {
            this.lastAuthData  = this.get_ref()["getAuth"]();
            this.get_ref()["onAuth"](onAuthStateChanged);
        }
        else
        {
            getAuthObj()["onAuthStateChanged"](onAuthStateChanged);
        }
	};
    instanceProto.getCurrentUserID = function()
    {
        var uid;
        if (!isFirebase3x())
            uid = (this.lastAuthData)? this.lastAuthData["uid"]:"";
        else
            uid = getUserProperty3x("uid");
        return uid;
    }
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.EmailPassword_OnCreateAccountSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnCreateAccountError = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnChangingPasswordSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnChangingPasswordError = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnSendPasswordResetEmailSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnSendPasswordResetEmailError = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnDeleteUserSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnDeleteUserError = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnUpdatingProfileSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnUpdatingProfileError = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnUpdatingEmailSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnUpdatingEmailError = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnSendVerificationEmailSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.EmailPassword_OnSendVerificationEmailError = function ()
	{
	    return true;
	};
	Cnds.prototype.IsAnonymous = function ()
	{
        var val;
        if (!isFirebase3x())
        {
            var user = this.lastAuthData;
            if (user)
                val = (user["provider"] === "anonymous");
            else
                val = false;
        }
        else
        {
            var user = getAuthObj()["currentUser"];
            val = user && user["isAnonymous"];
        }
        return val;
	};
	Cnds.prototype.OnLoginSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.OnLoginError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnLoggedOut = function ()
	{
	    return true;
	};
	Cnds.prototype.IsLogin = function ()
	{
        if (!isFirebase3x())
            return (this.lastAuthData != null);
        else
            return (getAuthObj()["currentUser"] != null);
	};
	Cnds.prototype.OnLoginByOther = function ()
	{
	    return true;
	};
	Cnds.prototype.OnLoggedOutByOther = function ()
	{
	    return true;
	};
	Cnds.prototype.OnLinkSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.OnLinkError = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
	var getHandler2x = function(self, successTrig, errorTrig)
	{
	    var handler = function(error, authData)
        {
            self.lastError = error;
            self.lastAuthData = authData;
            if (error == null)
            {
                self.runtime.trigger(successTrig, self);
            }
            else
            {
                self.runtime.trigger(errorTrig, self);
            }
        };
        return handler;
    };
	var getLoginHandler2x = function(self)
	{
	    var handler = function(error, authData)
        {
            self.lastError = error;
            self.lastAuthData = authData;
            if (error == null)
            {
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLoginSuccessful, self);
            }
            else
            {
                self.isMyLoginCall = false;
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLoginError, self);
            }
        };
        self.isMyLoginCall = true;
        return handler;
    };
    var addHandler = function (self, authObj, successTrig, errorTrig)
    {
        var onSuccess = function (result)
        {
            self.lastError = null;
            self.lastAuthData = result;
            if (successTrig)
                self.runtime.trigger(successTrig, self);
        };
        var onError = function (error)
        {
            self.lastError = error;
            self.lastAuthData = null;
            if (errorTrig)
                self.runtime.trigger(errorTrig, self);
        };
        authObj["then"](onSuccess)["catch"](onError);
    };
    var addLoginHandler = function (self, authObj)
    {
        var onSuccess = function (result)
        {
            self.lastLoginResult = result;
        };
        var onError = function (error)
        {
            self.isMyLoginCall = false;
            self.lastError = error;
            self.lastLoginResult = null;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLoginError, self);
        };
        self.isMyLoginCall = true;
        authObj["then"](onSuccess)["catch"](onError);
    }
    Acts.prototype.EmailPassword_CreateAccount = function (e_, p_)
	{
        if (!isFirebase3x())
        {
	        var reg_data = {"email":e_,  "password":p_ };
	        var handler = getHandler2x(this,
	                                     cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnCreateAccountSuccessful,
	                                     cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnCreateAccountError);
	        this.get_ref()["createUser"](reg_data, handler);
        }
        else
        {
            var authObj = getAuthObj()["createUserWithEmailAndPassword"](e_, p_);
            addHandler(this, authObj,
                              cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnCreateAccountSuccessful,
                              cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnCreateAccountError
                              );
        }
	};
    var PRESISTING_TYPE = ["default", "sessionOnly", "never"];
    Acts.prototype.EmailPassword_Login = function (e_, p_, r_)
	{
        if (!isFirebase3x())
        {
	        var reg_data = {"email":e_,  "password":p_ };
	        var handler = getLoginHandler2x(this);
            var d = {"remember":PRESISTING_TYPE[r_]};
	        this.get_ref()["authWithPassword"](reg_data, handler, d);
        }
        else
        {
            var authObj = getAuthObj()["signInWithEmailAndPassword"](e_, p_);
            addLoginHandler(this, authObj);
        }
	};
    Acts.prototype.EmailPassword_ChangePassword = function (e_, old_p_, new_p_)
	{
        if (!isFirebase3x())
        {
	        var reg_data = {"email":e_,  "oldPassword ":old_p_,  "newPassword":new_p_};
	        var handler = getHandler2x(this,
	                                     cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnChangingPasswordSuccessful,
	                                     cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnChangingPasswordError);
	        this.get_ref()["changePassword"](reg_data, handler);
        }
        else
        {
            var authObj = getAuthObj()["currentUser"]["updatePassword"](new_p_);
            addHandler(this, authObj,
                              cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnChangingPasswordSuccessful,
                              cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnChangingPasswordError
                              );
        }
	};
    Acts.prototype.EmailPassword_SendPasswordResetEmail = function (e_)
	{
        if (!isFirebase3x())
        {
	        var reg_data = {"email":e_};
	        var handler = getHandler2x(this,
	                                     cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnSendPasswordResetEmailSuccessful,
	                                     cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnSendPasswordResetEmailError);
	        this.get_ref()["resetPassword"](reg_data, handler);
        }
        else
        {
            var authObj = getAuthObj()["sendPasswordResetEmail"](e_);
            addHandler(this, authObj,
                              cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnSendPasswordResetEmailSuccessful,
                              cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnSendPasswordResetEmailError
                              );
        }
	};
    Acts.prototype.EmailPassword_DeleteUser = function (e_, p_)
	{
        if (!isFirebase3x())
        {
	        var reg_data = {"email":e_,  "password":p_};
	        var handler = getHandler2x(this,
	                                     cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnDeleteUserSuccessful,
	                                     cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnDeleteUserError);
	        this.get_ref()["removeUser"](reg_data, handler);
        }
        else
        {
            var authObj = getAuthObj()["currentUser"]["delete"]();
            addHandler(this, authObj,
                              cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnDeleteUserSuccessful,
                              cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnDeleteUserError
                              );
        }
	};
    Acts.prototype.Anonymous_Login = function (r_)
	{
        if (!isFirebase3x())
        {
	        var handler = getLoginHandler2x(this);
            var d = {"remember":PRESISTING_TYPE[r_]};
	        this.get_ref()["authAnonymously"](handler, d);
        }
        else
        {
            var authObj = getAuthObj()["signInAnonymously"]();
            addLoginHandler(this, authObj);
        }
	};
    Acts.prototype.AuthenticationToken_Login = function (t_, r_)
	{
        if (!isFirebase3x())
        {
	        var handler = getLoginHandler2x(this);
            var d = {"remember":PRESISTING_TYPE[r_]};
	        this.get_ref()["authWithCustomToken"](t_, handler, d);
        }
        else
        {
            var authObj = getAuthObj()["signInWithCustomToken"]();
            addLoginHandler(this, authObj);
        }
	};
	var PROVIDER_TYPE2x = ["facebook", "twitter", "github", "google"];
    var capitalizeFirstLetter = function (s)
    {
        return s.charAt(0).toUpperCase() + s.slice(1);
    };
    Acts.prototype.ProviderAuthentication_Login = function (provider, t_, r_, scope_)
	{
        if (!isFirebase3x())
        {
            if (typeof(provider) === "number")
                provider = PROVIDER_TYPE2x[provider];
            var loginType = (t_ === 0)? "authWithOAuthPopup":"authWithOAuthRedirect";
	        var handler = getLoginHandler2x(this);
            var d = {"remember":PRESISTING_TYPE[r_],
                     "scope":scope_};
	        this.get_ref()[loginType](provider, handler, d);
        }
        else
        {
            if (typeof(provider) === "number")
                provider = PROVIDER_TYPE2x[provider];
            provider = capitalizeFirstLetter( provider) + "AuthProvider";
            var providerObj = new window["Firebase"]["auth"][provider]();
            if (scope_ !== "")
                providerObj["addScope"](scope_);
            var loginType = (t_ === 0)? "signInWithPopup":"signInWithRedirect";
            var authObj = getAuthObj()[loginType](providerObj);
            addLoginHandler(this, authObj);
        }
	};
    Acts.prototype.AuthWithOAuthToken_FB = function (access_token, r_, scope_)
	{
        if (access_token == "")
        {
	        if (typeof (FB) == null)
	         return;
	         var auth_response = FB["getAuthResponse"]();
	         if (!auth_response)
	             return;
	        access_token = auth_response["accessToken"];
        }
        if (!isFirebase3x())
        {
	        var handler = getLoginHandler2x(this);
            var d = {"remember":PRESISTING_TYPE[r_],
                     "scope":scope_};
            this.get_ref()["authWithOAuthToken"]("facebook", access_token, handler, d);
        }
        else
        {
            var credential = window["Firebase"]["auth"]["FacebookAuthProvider"]["credential"](access_token);
            var authObj = getAuthObj()["signInWithCredential"](credential);
            addLoginHandler(this, authObj);
        }
	};
    Acts.prototype.LoggingOut = function ()
	{
        this.isMyLogOutCall = true;
        if (!isFirebase3x())
        {
	        this.get_ref()["unauth"]();
        }
        else
        {
            var authObj = getAuthObj()["signOut"]();
        }
	};
    Acts.prototype.GoOffline = function ()
	{
        if (!isFirebase3x())
        {
	        window["Firebase"]["goOffline"]();
        }
        else
        {
            window["Firebase"]["database"]()["goOffline"]();
        }
	};
    Acts.prototype.GoOnline = function ()
	{
        if (!isFirebase3x())
        {
	        window["Firebase"]["goOnline"]();
        }
        else
        {
            window["Firebase"]["database"]()["goOnline"]();
        }
	};
    Acts.prototype.LinkToFB = function (access_token)
	{
        if (!isFirebase3x())
        {
            alert("Does not support in firebase 2.x api");
	        return;
        }
        var user = getAuthObj()["currentUser"];
        if (user == null)
        {
            return;
        }
        if (access_token == "")
        {
	        if (typeof (FB) == null)
	            return;
	        var auth_response = FB["getAuthResponse"]();
	        if (!auth_response)
	            return;
	        access_token = auth_response["accessToken"];
        }
        var credential = window["Firebase"]["auth"]["FacebookAuthProvider"]["credential"](access_token);
        var authObj = user["link"](credential);
        addHandler(this, authObj,
                          cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLinkSuccessful,
                          cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLinkError
                          );
	};
    Acts.prototype.LinkToGoogle = function (id_token)
	{
        if (!isFirebase3x())
        {
            alert("Does not support in firebase 2.x api");
	        return;
        }
        var user = getAuthObj()["currentUser"];
        if (user == null)
        {
            return;
        }
        var credential = window["Firebase"]["auth"]["GoogleAuthProvider"]["credential"](id_token);
        var authObj = user["link"](credential);
        addHandler(this, authObj,
                          cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLinkSuccessful,
                          cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLinkError
                          );
	};
    Acts.prototype.LinkToEmailPassword = function (e_, p_)
	{
        if (!isFirebase3x())
        {
            alert("Does not support in firebase 2.x api");
	        return;
        }
        var user = getAuthObj()["currentUser"];
        if (user == null)
        {
            return;
        }
        var credential = window["Firebase"]["auth"]["EmailAuthProvider"]["credential"](e_, p_);
        var authObj = user["link"](credential);
        addHandler(this, authObj,
                          cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLinkSuccessful,
                          cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.OnLinkError
                          );
	};
    Acts.prototype.UpdateProfile = function (displayName, photoURL)
	{
        if (!isFirebase3x())
        {
            alert("Does not support in firebase 2.x api");
	        return;
        }
        else
        {
            var self = this;
            var user = getAuthObj()["currentUser"];
            var data = {
                "displayName": displayName,
                "photoURL": photoURL,
            }
            var onSuccess = function ()
            {
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnUpdatingProfileSuccessful, self);
            };
            var onError = function ()
            {
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnUpdatingProfileError, self);
            };
            user["updateProfile"](data)["then"](onSuccess)["catch"](onError);
        }
	};
    Acts.prototype.UpdateEmail = function (email)
	{
        if (!isFirebase3x())
        {
            alert("Does not support in firebase 2.x api");
	        return;
        }
        else
        {
            var self = this;
            var user = getAuthObj()["currentUser"];
            var onSuccess = function ()
            {
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnUpdatingEmailSuccessful, self);
            };
            var onError = function ()
            {
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnUpdatingEmailError, self);
            };
            user["updateEmail"](email)["then"](onSuccess)["catch"](onError);
        }
	};
    Acts.prototype.SendEmailVerification = function (email)
	{
        if (!isFirebase3x())
        {
            alert("Does not support in firebase 2.x api");
	        return;
        }
        else
        {
            var self = this;
            var user = getAuthObj()["currentUser"];
            var onSuccess = function ()
            {
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnSendVerificationEmailSuccessful, self);
            };
            var onError = function ()
            {
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Authentication.prototype.cnds.EmailPassword_OnSendVerificationEmailError, self);
            };
            user["sendEmailVerification"]()["then"](onSuccess)["catch"](onError);
        }
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    var getProviderProperty = function (authData, p)
    {
		if (authData == null)
		    return "";
		var provide_type = authData["provider"];
		var provider_info = authData[provide_type];
		if (provider_info == null)
		    return "";
		var val = provider_info[p];
		if (val == null)
		    val = "";
        return val;
    };
    var getUserProperty3x = function(p)
    {
        var user = getAuthObj()["currentUser"];
        return (user)? user[p]:"";
    };
    var getProviderProperty3x = function (p, idx)
    {
		var user = getAuthObj()["currentUser"];
        if (!user)
            return "";
        if (idx == null) idx = 0;
        var providerData = user["providerData"][idx];
        var val = (providerData)? providerData[p]:"";
        return val;
    };
	Exps.prototype.ErrorCode = function (ret)
	{
	    var val = (!this.lastError)? "": this.lastError["code"];
		ret.set_string(val || "");
	};
	Exps.prototype.ErrorMessage = function (ret)
	{
	    var val = (!this.lastError)? "": this.lastError["message"];
		ret.set_string(val || "");
	};
	Exps.prototype.UserID = function (ret)
	{
		ret.set_string(this.getCurrentUserID() || "");
	};
	Exps.prototype.Provider = function (ret)
	{
        var pid;
        if (!isFirebase3x())
        {
            pid = (!this.lastAuthData)? "": this.lastAuthData["provider"];
        }
        else
        {
            pid = getProviderProperty3x("providerId");
        }
		ret.set_string(pid);
	};
	Exps.prototype.DisplayName = function (ret)
	{
        var name;
        if (!isFirebase3x())
        {
            name = getProviderProperty(this.lastAuthData, "displayName");
        }
        else
        {
            name = getUserProperty3x("displayName");
        }
		ret.set_string(name || "");
	};
	Exps.prototype.UserIDFromProvider = function (ret)
	{
        var uid;
        if (!isFirebase3x())
        {
            uid = getProviderProperty(this.lastAuthData, "id");
        }
        else
        {
            uid = getProviderProperty3x("uid");
        }
		ret.set_string(uid || "");
	};
	Exps.prototype.AccessToken = function (ret)
	{
        var token;
        if (!isFirebase3x())
        {
            token = getProviderProperty(this.lastAuthData, "accessToken");
        }
        else
        {
            if (this.lastLoginResult && this.lastLoginResult["credential"])
                token = this.lastLoginResult["credential"]["accessToken"];
        }
		ret.set_string(token || "");
	};
	Exps.prototype.CachedUserProfile = function (ret)
	{
        var profile;
        if (!isFirebase3x())
        {
            profile = getProviderProperty(this.lastAuthData, "cachedUserProfile");
        }
        else
        {
            alert("CachedUserProfile had not implemented in firebase 3.x");
        }
        ret.set_string( profile || "" );
	};
	Exps.prototype.Email = function (ret)
	{
        var email;
        if ((!isFirebase3x()))
        {
            email = getProviderProperty(this.lastAuthData, "email");
        }
        else
        {
            email = getUserProperty3x("email");
        }
		ret.set_string(email || "");
	};
	Exps.prototype.UserName = function (ret)
	{
        var name;
        if (!isFirebase3x())
        {
            name = getProviderProperty(this.lastAuthData, "username");
        }
        else
        {
            name = getUserProperty3x("displayName");
        }
		ret.set_string(name || "");
	};
	Exps.prototype.ErrorDetail = function (ret)
	{
	    var val = (!this.lastError)? "": this.lastError["detail"];
        if (val == null)
            val = "";
		ret.set_string(val);
	};
	Exps.prototype.PhotoURL = function (ret)
	{
        var name;
        if (!isFirebase3x())
        {
            name = "";
        }
        else
        {
            name = getUserProperty3x("photoURL");
        }
		ret.set_string(name || "");
	};
}());
/*
- counter value
*/
;
;
cr.plugins_.Rex_Firebase_Counter = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Counter.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
	    this.set_init(this.properties[2], this.properties[3]);
	    this.exp_LastTransactionIn = null;
        this.exp_LastValue = this.init_value;
        this.exp_MyLastWroteValue = null;
        this.exp_MyLastAddedValue = 0;
        this.onCustomAdd_cb = "";
        this.query = null;
        this.read_value_handler = null;
	};
	instanceProto.onDestroy = function ()
	{
	     this.stop_update();
	};
    instanceProto.set_init = function (init_value, upper_bound)
	{
	    this.init_value = init_value;
	    if ((upper_bound == "") || (upper_bound == '""'))
	        upper_bound = null;
	    else if (typeof (upper_bound) == "string")
	        upper_bound = parseFloat(upper_bound);
	    this.upper_bound = upper_bound;
	    this.set_range(this.init_value, this.upper_bound);
	};
	instanceProto.set_range = function(v0, v1)
	{
	    if ((v0 == null) || (v1 == null))
	    {
	        this.counter_max = null;
	        this.counter_min = null;
	    }
	    else
	    {
	        this.counter_max = Math.max(v0, v1);
	        this.counter_min = Math.min(v0, v1);
	    }
    };
	instanceProto.has_bound = function()
	{
	    return (this.upper_bound != null);
    };
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	instanceProto.clamp_result = function(current_value, wrote_value)
	{
	    if (!this.has_bound())
	        return wrote_value;
	    else if (this.upper_bound == current_value)
	        return null;   // Abort the transaction
	    else
	    {
	        if (this.upper_bound > this.init_value)
	        {
	            if (wrote_value <= this.upper_bound)
	                return wrote_value;
	            else if (wrote_value > this.upper_bound)
	                return this.upper_bound;
	            else
	                return null;   // Abort the transaction
	        }
	        else // (this.upper_bound < this.init_value)
	        {
	            if (wrote_value >= this.upper_bound)
	                return wrote_value;
	            else if (wrote_value < this.upper_bound)
	                return this.upper_bound;
	            else
	                return null;   // Abort the transaction
	        }
	    }
    };
	instanceProto.on_transaction_complete = function(error, committed, snapshot)
    {
        if (error)
        {
            this.runtime.trigger(cr.plugins_.Rex_Firebase_Counter.prototype.cnds.OnMyWritingError, this);
        }
        else if (!committed)
        {
            this.runtime.trigger(cr.plugins_.Rex_Firebase_Counter.prototype.cnds.OnMyWritingAbort, this);
        }
        else
        {
            this.exp_MyLastWroteValue = snapshot["val"]();
            this.exp_MyLastAddedValue = this.exp_MyLastWroteValue - this.exp_LastTransactionIn;
            this.runtime.trigger(cr.plugins_.Rex_Firebase_Counter.prototype.cnds.OnMyWriting, this);
        }
    };
    instanceProto.start_update = function ()
	{
	    this.stop_update();
	    var self = this;
	    var on_read = function (snapshot)
	    {
	        var counter_value = snapshot["val"]();
	        if (counter_value == null)
	            counter_value = self.init_value;
	        self.exp_LastValue = counter_value;
	        self.runtime.trigger(cr.plugins_.Rex_Firebase_Counter.prototype.cnds.OnUpdate, self);
	    };
	    var query = this.get_ref();
	    query["on"]("value", on_read);
	    this.query = query;
	    this.read_value_handler = on_read;
	};
    instanceProto.stop_update = function ()
	{
	    if (this.query)
	    {
	        this.query["off"]("value", this.read_value_handler);
	        this.read_value_handler = null;
	        this.query = null;
	    }
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnUpdate = function ()
	{
	    return true;
	};
	Cnds.prototype.OnMyWriting = function ()
	{
	    return true;
	};
	Cnds.prototype.CompareLastWroteValue = function (cmp, s)
	{
	    if (this.exp_MyLastWroteValue == null)
	        return false;
		return cr.do_cmp(this.exp_MyLastWroteValue, cmp, s);
	};
	Cnds.prototype.CompareLastValue = function (cmp, s)
	{
		return cr.do_cmp(this.exp_LastValue, cmp, s);
	};
	Cnds.prototype.OnMyWritingAbort = function ()
	{
	    return true;
	};
	Cnds.prototype.OnAddFn = function (cb)
	{
	    return cr.equals_nocase(cb, this.onCustomAdd_cb);
	};
	Cnds.prototype.OnMyWritingError = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
	};
    Acts.prototype.StartUpdate = function ()
	{
	    this.start_update();
	};
    Acts.prototype.StopUpdate = function ()
	{
	    this.stop_update();
	};
    Acts.prototype.SetInit = function (init_value, upper_bound)
	{
	    this.set_init(init_value, upper_bound);
	};
    Acts.prototype.Add = function (value_)
	{
	    var is_numbe = typeof(value_) == "number";
	    var self = this;
	    var get_value = function(value_, current_value)
	    {
	        if (is_numbe)
	            return value_;
	        return (parseFloat(value_)/100 * current_value);
        };
	    var on_complete = function(error, committed, snapshot)
	    {
	        self.on_transaction_complete(error, committed, snapshot) ;
        };
	    var on_add = function (current_value)
	    {
	        if (current_value == null)
	            current_value = self.init_value;
	        self.exp_LastTransactionIn = current_value;
	        var added_value = get_value(value_, current_value);
	        var wrote_value = current_value + added_value;
	        var result = self.clamp_result(current_value, wrote_value);
            if (result == null)
                return;          // Abort the transaction
            else
                return result;
	    };
	    this.get_ref()["transaction"](on_add, on_complete);
	};
    Acts.prototype.ForceSet = function (value_)
	{
	    this.get_ref()["set"](value_);
	};
    Acts.prototype.CustomAddByFn = function (cb)
	{
	    var self = this;
	    var on_complete = function(error, committed, snapshot)
	    {
	        self.on_transaction_complete(error, committed, snapshot) ;
        };
        var get_value = function (current_value)
        {
	        self.exp_LastTransactionIn = current_value;
            self.transactionOut = null;
            self.onCustomAdd_cb = cb;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Counter.prototype.cnds.OnAddFn, self);
            return self.transactionOut;
        };
	    var on_add = function (current_value)
	    {
	        if (current_value == null)
	            current_value = self.init_value;
	        var added_value = get_value(current_value);
            if (added_value == null)
                return;   // Abort the transaction
	        var wrote_value = current_value + added_value;
	        var result = self.clamp_result(current_value, wrote_value);
            if (result == null)
                return;          // Abort the transaction
            else
                return result;
	    };
	    this.get_ref()["transaction"](on_add, on_complete);
	};
    Acts.prototype.CustomAddAdd = function (value_)
	{
	    this.transactionOut = value_;
	};
    Acts.prototype.CustomAddAbort = function ()
	{
	    this.transactionOut = null;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.LastValue = function (ret)
	{
		ret.set_float(this.exp_LastValue);
	};
	Exps.prototype.LastWroteValue = function (ret)
	{
		ret.set_float(this.exp_MyLastWroteValue || 0);
	};
	Exps.prototype.LastAddedValue = function (ret)
	{
		ret.set_float(this.exp_MyLastAddedValue);
	};
	Exps.prototype.CustomAddIn = function (ret)
	{
		ret.set_float(this.exp_LastTransactionIn);
	};
}());
/*
- counter value
*/
;
;
cr.plugins_.Rex_Firebase_CurTime = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_CurTime.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.updatingPeriod = this.properties[2];  // seconds
        this.lastTimestamp = null;
        this.remainPeriod = 0;
        this.timestamp_ref = null;
        this.curTimestamp = null;
        this.serverTimeOffset = 0;
        this.lastPredictErr = 0;
        this.my_timescale = -1.0;
        this.runtime.tickMe(this);
        var self=this;
        var setupFn = function()
        {
            self.serverTimeOffsetDetectingStart();
        };
        window.FirebaseAddAfterInitializeHandler(setupFn);
	};
	instanceProto.onDestroy = function ()
	{
	};
    instanceProto.tick = function()
    {
        if ((this.timestamp_ref === null) || (this.curTimestamp === null))
            return;
        var curTimestamp = (new Date()).getTime();
        var dt = curTimestamp - this.lastTimestamp;
        this.lastTimestamp = curTimestamp;
        this.curTimestamp += dt;
        var preRemain = this.remainPeriod;
        this.remainPeriod -= (dt/1000);
        if ((preRemain > 0) && (this.remainPeriod <= 0))
            this.UpdatingTimestamp();
    };
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
    instanceProto.UpdatingTimestamp = function (onComplete)
	{
        var self = this;
        var on_read = function (snapshot)
        {
            var ts = snapshot["val"]();
            if (ts != null)
            {
                var isFirstUpdating = (self.curTimestamp === null);
                ts =  get_timestamp(ts) + self.serverTimeOffset;
                if (self.curTimestamp !== null)
                    self.lastPredictErr = (ts - self.curTimestamp)/1000;
                self.curTimestamp = ts;
                self.remainPeriod = self.updatingPeriod;
                self.lastTimestamp = (new Date()).getTime();
                if (onComplete)
                    onComplete(self.curTimestamp);
                else if (isFirstUpdating)
                    self.runtime.trigger(cr.plugins_.Rex_Firebase_CurTime.prototype.cnds.OnStart, self);
            }
            else  // run again
                setTimeout(function()
                {
                    self.UpdatingTimestamp();
                },0);
        };
        var on_write = function (error)
        {
            if(!error)
                self.timestamp_ref["once"]("value", on_read);
            else  // run again
                setTimeout(function()
                {
                    self.UpdatingTimestamp();
                },0);
        };
        this.timestamp_ref["set"](serverTimeStamp(), on_write);
	};
    instanceProto.getCurTimestamp = function()
    {
        var ts;
        if (this.curTimestamp)
            ts = this.curTimestamp;
        else
            ts = (new Date()).getTime();
        return ts;
    };
	instanceProto.serverTimeOffsetDetectingStart = function ()
	{
        var self = this;
        var onValueChanged = function (snap)
        {
            self.serverTimeOffset = snap["val"]() || 0;
        };
        var p = get_root(this.get_ref()) + "/.info/serverTimeOffset";
        var ref = this.get_ref(p);
        ref.on("value", onValueChanged);
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.IsUpdating = function ()
	{
	    return (this.curTimestamp != null);
	};
	Cnds.prototype.OnStart = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
	};
    Acts.prototype.Start = function (userID)
	{
        this.timestamp_ref = this.get_ref(userID);
        this.UpdatingTimestamp();
	};
    Acts.prototype.Stop = function ()
	{
        this.timestamp_ref = null;
        this.curTimestamp = null;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.Timestamp = function (ret)
	{
	    ret.set_int(Math.floor(this.getCurTimestamp()));
	};
	Exps.prototype.LastPredictedError = function (ret)
	{
	    ret.set_float(this.lastPredictErr);
	};
}());
/*
- counter value
*/
;
;
cr.plugins_.Rex_Firebase_Geofire = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Geofire.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" ;
        this.exp_LastGeneratedKey = "";
        this.geoQuery = null;
        this.current_items = {};
        this.exp_LastItemID = "";
        this.exp_LastLocation = null;
        this.exp_LastDistance = 0;
        this.exp_CurItemID = "";
        this.exp_CurItemContent = null;
	};
	instanceProto.onDestroy = function ()
	{
        this.queryStop();
        this.current_items = {};
	};
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path = this.rootpath + k + "/";
        return window["Firebase"]["database"]()["ref"](path);
	};
	instanceProto.getGeo = function()
	{
        return new window["GeoFire"](this.get_ref());
	};
    instanceProto.setValue = function (itemID, location)
	{
        var self=this;
        var onComplete = function ()
        {
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Geofire.prototype.cnds.OnUpdateComplete, self);
        };
        var onError= function (error)
        {
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Geofire.prototype.cnds.OnUpdateError, self);
        };
		var geo = this.getGeo();
        geo["set"](itemID, location)["then"](onComplete, onError);
	};
    instanceProto.getValue = function (itemID)
	{
        var self=this;
        var onComplete = function (location)
        {
            self.exp_LastItemID = itemID;
            self.exp_LastLocation = location;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Geofire.prototype.cnds.OnGetItemComplete, self);
        };
        var onError= function (error)
        {
            self.exp_LastItemID = itemID;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Geofire.prototype.cnds.OnGetItemError, self);
        };
		var geo = this.getGeo();
        geo["get"](itemID)["then"](onComplete, onError);
	};
    instanceProto.queryStart = function (lat, lng, r)
	{
        var d = { "center": [lat, lng], "radius": r };
		if (!this.geoQuery)
        {
            this.geoQuery = this.getGeo()["query"](d);
            var trig = cr.plugins_.Rex_Firebase_Geofire.prototype.cnds;
            var self = this;
            var onReady = function ()
            {
                self.runtime.trigger(trig.OnReady, self);
            };
            var onEntered = function (itemID, location, distance)
            {
                self.exp_LastItemID = itemID;
                self.exp_LastLocation = location;
                self.exp_LastDistance = distance;
                self.current_items[itemID] = [location, distance];
                self.runtime.trigger(trig.OnItemEntered, self);
            };
            var onExisted = function (itemID, location, distance)
            {
                self.exp_LastItemID = itemID;
                self.exp_LastLocation = location;
                self.exp_LastDistance = distance;
                if (self.current_items.hasOwnProperty(itemID))
                    delete self.current_items[itemID];
                self.runtime.trigger(trig.OnItemExisted, self);
            };
            var onMoved = function (itemID, location, distance)
            {
                self.exp_LastItemID = itemID;
                self.exp_LastLocation = location;
                self.exp_LastDistance = distance;
                self.current_items[itemID] = [location, distance];
                self.runtime.trigger(trig.OnItemMoved, self);
            };
            this.geoQuery.on("ready", onReady);
            this.geoQuery.on("key_entered", onEntered );
            this.geoQuery.on("key_exited", onExisted  );
            this.geoQuery.on("key_moved", onMoved  );
        }
        else
            this.geoQuery["updateCriteria"](d);
	};
    instanceProto.queryStop= function ()
	{
        if (!this.geoQuery)
            return;
        this.geoQuery["cancel"]();
        this.geoQuery = null;
	};
	instanceProto.ForEachItemID = function (itemIDList, items)
	{
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var i, cnt=itemIDList.length;
		for(i=0; i<cnt; i++)
		{
            if (solModifierAfterCnds)
                this.runtime.pushCopySol(current_event.solModifiers);
            this.exp_CurItemID = itemIDList[i];
            this.exp_CurItemContent = items[this.exp_CurItemID];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		        this.runtime.popSol(current_event.solModifiers);
		}
		return false;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnUpdateComplete = function ()
	{
	    return true;
	};
	Cnds.prototype.OnUpdateError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetItemComplete = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetItemError = function ()
	{
	    return true;
	};
	Cnds.prototype.IsItemNotFound = function ()
	{
	    return (this.exp_LastLocation == null);
	};
	Cnds.prototype.OnItemEntered = function ()
	{
	    return true;
	};
	Cnds.prototype.OnItemExisted = function ()
	{
	    return true;
	};
	Cnds.prototype.OnItemMoved = function ()
	{
	    return true;
	};
	Cnds.prototype.OnReady = function ()
	{
	    return true;
	};
	Cnds.prototype.ForEachItemID = function (sortMode_)
	{
        var table = this.current_items;
	    var itemIDList = Object.keys(table);
        var self = this;
        var sortFn = function (valA, valB)
        {
            var m = sortMode_;
            if (sortMode_ >= 2)  // logical descending, logical ascending
            {
                valA = parseFloat(valA);
                valB = parseFloat(valB);
                m -= 2;
            }
            switch (m)
            {
            case 0:  // descending
                if (valA === valB) return 0;
                else if (valA < valB) return 1;
                else return -1;
                break;
            case 1:  // ascending
                if (valA === valB) return 0;
                else if (valA > valB) return 1;
                else return -1;
                break;
            }
        };
	    itemIDList.sort(sortFn);
	    return this.ForEachItemID(itemIDList, table);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetSubDomainRef = function (ref)
	{
		this.rootpath = ref + "/";
	};
    Acts.prototype.SetLocation = function (itemID, lat, lng)
	{
        this.setValue(itemID, [lat, lng]);
	};
    Acts.prototype.OnDisconnectedRemove = function (itemID)
	{
		var geo = this.getGeo();
        geo["ref"]()["child"](itemID)["onDisconnect"]()["remove"]();
	};
    Acts.prototype.RemoveItem = function (itemID)
	{
        this.setValue(itemID, null);
	};
    Acts.prototype.GetItem = function (itemID)
	{
        this.getValue(itemID);
	};
    Acts.prototype.OnDisconnectedCancel = function (itemID)
	{
		var geo = this.getGeo();
        geo["ref"]()["child"](itemID)["onDisconnect"]()["cancel"]();
	};
    Acts.prototype.MonitorAt = function (lat, lng, r)
	{
		this.queryStart(lat, lng, r);
	};
    Acts.prototype.MonitorStop = function ()
	{
		this.queryStop();
	};
	function Exps() {};
	pluginProto.exps = new Exps();
  	Exps.prototype.GenerateKey = function (ret)
	{
	    var ref = this.get_ref()["push"]();
        this.exp_LastGeneratedKey = ref["key"];
		ret.set_string(this.exp_LastGeneratedKey);
	};
	Exps.prototype.LastGeneratedKey = function (ret)
	{
	    ret.set_string(this.exp_LastGeneratedKey);
	};
	Exps.prototype.LastItemID = function (ret)
	{
		ret.set_string(this.exp_LastItemID);
	};
	Exps.prototype.LastLatitude = function (ret)
	{
        var lat = (this.exp_LastLocation)? this.exp_LastLocation[0]:0;
		ret.set_float(lat);
	};
	Exps.prototype.LastLongitude = function (ret)
	{
        var lng = (this.exp_LastLocation)? this.exp_LastLocation[1]:0;
		ret.set_float(lng);
	};
	Exps.prototype.LastDistance = function (ret)
	{
		ret.set_float(this.exp_LastDistance);
	};
    Exps.prototype.CurItemID = function (ret)
	{
		ret.set_string(this.exp_CurItemID);
	};
    Exps.prototype.CurLatitude = function (ret)
	{
        var lat = (this.exp_CurItemContent)? this.exp_CurItemContent[0][0] : 0;
		ret.set_float(lat);
	};
    Exps.prototype.CurLongitude = function (ret)
	{
        var lng = (this.exp_CurItemContent)? this.exp_CurItemContent[0][1] : 0;
		ret.set_float(lng);
	};
    Exps.prototype.CurDistance = function (ret)
	{
        var d = (this.exp_CurItemContent)? this.exp_CurItemContent[1] : 0;
		ret.set_float(d);
	};
	Exps.prototype.MonitorLatitude = function (ret)
	{
        var lat = (this.geoQuery)? this.geoQuery["center"]()[0]:0;
		ret.set_float(lat);
	};
	Exps.prototype.MonitorLongitude = function (ret)
	{
        var lng = (this.geoQuery)? this.geoQuery["center"]()[1]:0;
		ret.set_float(lng);
	};
	Exps.prototype.MonitorRadius = function (ret)
	{
        var r = (this.geoQuery)? this.geoQuery["radius"]():0;
		ret.set_float(r);
	};
	Exps.prototype.Distance = function (ret, latA, lngA, latB, lngB)
	{
        var d = window["GeoFire"]["distance"]([latA, lngA], [latB, lngB]);
		ret.set_float(d);
	};
}());
/*
<tableID>\
    <itemID>: <value>
*/
;
;
cr.plugins_.Rex_Firebase_ItemBook = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_ItemBook.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/";
        this.exp_LastGeneratedKey = "";
        this.exp_LastRandomBase32 = "";
        this.writeItems = {};
        this.writeTableID = null;
        this.writeItemID = null;
        this.readTables = {};
        this.queueMode = false;
        this.requestQueue = [];
        this.onRequestComplete = null;
        this.addToRequestQueue = null;
        this.exp_LastTableID = "";
        this.exp_LastItemID = "";
        this.trigTag = null;
        this.exp_CurItemID = "";
        this.exp_CurItemContent = null;
        this.exp_CurKey = "";
        this.exp_CurValue = 0;
        this.convertKeyTableID = "tableID";
        this.convertKeyItemID = "itemID";
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path = this.rootpath + k + "/";
        return window["Firebase"]["database"]()["ref"](path);
	};
	instanceProto.repeatEvents = function ()
	{
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        if (solModifierAfterCnds)
            this.runtime.pushCopySol(current_event.solModifiers);
        current_event.retrigger();
        if (solModifierAfterCnds)
            this.runtime.popSol(current_event.solModifiers);
	};
    var getFullKey = function (prefix, tableID, itemID, key)
    {
        var k = prefix;
        if (tableID != null)
            k += "/" + tableID;
        if (itemID != null)
            k +=  "/" + itemID;
        if (key != null)
        {
            key = key.replace(/\./g, "/");
            k += "/" + key;
        }
        return k;
    }
	instanceProto.setValue = function (tableID_, itemID_, k_, v_)
	{
        k_ = getFullKey("", tableID_, itemID_, k_);
        this.writeItems[k_] = v_;
	};
    instanceProto.TreeSetValue = function (k_, v_)
	{
        if ((this.writeTableID === null) || (this.writeItemID === null))
        {
            alert("ItemBook: key-value must be assigned under table and item.");
            return;
        }
        this.setValue(this.writeTableID, this.writeItemID, k_, v_);
	};
    instanceProto.EnumSetValue = function (tableID_, itemID_, k_, v_)
	{
        if ((tableID_ === "") || (itemID_ === ""))
        {
            alert("ItemBook: key-value must be assigned under table and item.");
            return;
        }
        this.setValue(tableID_, itemID_, k_, v_);
	};
	instanceProto.ForEachItemID = function (itemIDList, items)
	{
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var i, cnt=itemIDList.length;
		for(i=0; i<cnt; i++)
		{
            if (solModifierAfterCnds)
                this.runtime.pushCopySol(current_event.solModifiers);
            this.exp_CurItemID = itemIDList[i];
            this.exp_CurItemContent = items[this.exp_CurItemID];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		        this.runtime.popSol(current_event.solModifiers);
		}
		return false;
	};
	instanceProto.ConvertItem = function (item, tableID_, itemID_)
	{
        item[this.convertKeyTableID] = tableID_;
        item[this.convertKeyItemID] = itemID_;
        return item;
	};
	instanceProto.RevertItem = function (item)
	{
        delete item[this.convertKeyTableID];
        delete item[this.convertKeyItemID];
	};
	instanceProto.saveToJSON = function ()
	{
		return {
            "lk": this.exp_LastGeneratedKey,
            "lr": this.exp_LastRandomBase32,
            };
	};
	instanceProto.loadFromJSON = function (o)
	{
	    this.exp_LastGeneratedKey = o["lk"];
        this.exp_LastRandomBase32 = o["lr"];
	};
    var isCleanBook = function (o)
    {
        var cnt = 0;
        for (var k in o)
        {
            if ((k === "") && (cnt === 0))
                return true;
            cnt++;
        }
        return false;
    }
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.AddTableNode = function (name_)
	{
        if (this.writeTableID !== null)
        {
            alert("ItemBook: nested table is not allowed.");
            return;
        }
        this.writeTableID = name_;
        this.repeatEvents();
        this.writeTableID = null;
        return false;
	};
	Cnds.prototype.AddItemNode = function (name_)
	{
        if (this.writeTableID === null)
        {
            alert("ItemBook: itemID should be put in a table.");
            return;
        }
        if (this.writeItemID !== null)
        {
            alert("ItemBook: nested itemID is not allowed.");
            return;
        }
        this.writeItemID = name_;
        this.repeatEvents();
        this.writeItemID = null;
        return false;
	};
	Cnds.prototype.TreeOnDisconnectedRemove = function ()
	{
        var k = getFullKey("", this.writeTableID, this.writeItemID);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["remove"]();
        return true;
	};
	Cnds.prototype.TreeOnDisconnectedCancel = function ()
	{
        var k = getFullKey("", this.writeTableID, this.writeItemID);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["cancel"]();
        return true;
	};
	Cnds.prototype.OnUpdateComplete = function ()
	{
	    return true;
	};
	Cnds.prototype.OnUpdateError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnRequestComplete = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trigTag);
	};
	Cnds.prototype.ForEachItemID = function (tableID_, sortMode_)
	{
        var table = this.readTables[tableID_];
        if (table == null)
           return false;
	    var itemIDList = Object.keys(table);
        var self = this;
        var sortFn = function (valA, valB)
        {
            var m = sortMode_;
            if (sortMode_ >= 2)  // logical descending, logical ascending
            {
                valA = parseFloat(valA);
                valB = parseFloat(valB);
                m -= 2;
            }
            switch (m)
            {
            case 0:  // descending
                if (valA === valB) return 0;
                else if (valA < valB) return 1;
                else return -1;
                break;
            case 1:  // ascending
                if (valA === valB) return 0;
                else if (valA > valB) return 1;
                else return -1;
                break;
            }
        };
	    itemIDList.sort(sortFn);
	    return this.ForEachItemID(itemIDList, table);
	};
	Cnds.prototype.ForEachKey = function (tableID_, itemID)
	{
        var table = this.readTables[tableID_];
        if (table == null)
           return false;
	    var item_props = table[itemID];
	    if (item_props == null)
	        return false;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var k, o=item_props;
		for(k in o)
		{
            if (solModifierAfterCnds)
                this.runtime.pushCopySol(current_event.solModifiers);
            this.exp_CurKey = k;
            this.exp_CurValue = o[k];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		        this.runtime.popSol(current_event.solModifiers);
		}
		return false;
	};
	Cnds.prototype.TableIsEmpty = function (tableID_)
	{
        var table = this.readTables[tableID_];
        if (table == null)
           return true;
         for (var k in table)
         {
             return false;
         }
         return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetSubDomainRef = function (ref)
	{
		this.rootpath = ref + "/";
        this.readTables = {};
	};
    Acts.prototype.TreeSetValue = function (k_, v_)
	{
        this.TreeSetValue(k_, v_);
	};
    Acts.prototype.TreeSetBooleanValue = function (k_, v_)
	{
        this.TreeSetValue(k_, (v_ === 1));
	};
    Acts.prototype.TreeSetNullValue = function (k_)
	{
        this.TreeSetValue(k_, null);
	};
    Acts.prototype.TreeCleanAll = function ()
	{
        this.setValue(this.writeTableID, this.writeItemID, null, null);
	};
    Acts.prototype.TreeSetServerTimestamp = function (k_)
	{
        this.TreeSetValue(k_, window["Firebase"]["database"]["ServerValue"]);
	};
    Acts.prototype.TreeSetJSON = function (k_, v_)
	{
        v_ = JSON.parse(v_);
        this.TreeSetValue(k_, v_);
	};
    Acts.prototype.UpdateBook = function ()
	{
        var self=this;
	    var handler = function(error)
	    {
	        var trig = (error)? cr.plugins_.Rex_Firebase_ItemBook.prototype.cnds.OnUpdateError:
	                                    cr.plugins_.Rex_Firebase_ItemBook.prototype.cnds.OnUpdateComplete;
	        self.runtime.trigger(trig, self);
        };
        var ref = this.get_ref();
        if (isCleanBook(this.writeItems))
        {
            ref["parent"]["set"](null, handler);
        }
        else
        {
            ref["update"](this.writeItems, handler);
        }
        this.writeItems = {};
	};
    Acts.prototype.EnumSetValue = function (tableID_, itemID_, k_, v_)
	{
        this.EnumSetValue(tableID_, itemID_, k_, v_);
	};
    Acts.prototype.EnumSetBooleanValue = function (tableID_, itemID_, k_, v_)
	{
        this.EnumSetValue(tableID_, itemID_, k_, (v_ === 1));
	};
    Acts.prototype.EnumSetNullValue = function (tableID_, itemID_, k_)
	{
        if (tableID_ === "")
            this.setValue(null, null, null, null);
        else if (itemID_ === "")
            this.setValue(tableID_, null, null, null);
        else if (k_ === "")
            this.setValue(tableID_, itemID_, null, null);
        else
            this.setValue(tableID_, itemID_, k_, null);
	};
    Acts.prototype.EnumSetServerTimestamp = function (tableID_, itemID_, k_)
	{
        this.EnumSetValue(tableID_, itemID_, k_, window["Firebase"]["database"]["ServerValue"]);
	};
    Acts.prototype.EnumSetJSON = function (tableID_, itemID_, k_, v_)
	{
        v_ = JSON.parse(v_);
        this.EnumSetValue(tableID_, itemID_, k_, v_);
	};
    Acts.prototype.TreeOnDisconnectedCancel = function (k_)
	{
        var k = getFullKey("", this.writeTableID, this.writeItemID, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["cancel"]();
	};
    Acts.prototype.TreeOnDisconnectedSetServerTimestamp = function (k_)
	{
        var k = getFullKey("", this.writeTableID, this.writeItemID, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["set"](window["Firebase"]["database"]["ServerValue"]);
	};
    Acts.prototype.TreeOnDisconnectedSetValue = function (k_, v_)
	{
        var k = getFullKey("", this.writeTableID, this.writeItemID, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["set"](v_);
	};
    Acts.prototype.TreeOnDisconnectedSetBooleanValue = function (k_, v_)
	{
        var k = getFullKey("", this.writeTableID, this.writeItemID, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["set"](v_===1);
	};
    Acts.prototype.TreeOnDisconnectedSetJSON = function (k_, v_)
	{
        var k = getFullKey("", this.writeTableID, this.writeItemID, k_);
        var ref = this.get_ref(k);
        v_ = JSON.parse(v_);
        ref["onDisconnect"]()["set"](v_);
	};
    Acts.prototype.EnumOnDisconnectedRemove = function (tableID_, itemID_, k_)
	{
        var k = getFullKey("", tableID_, itemID_, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["remove"]();
	};
    Acts.prototype.EnumOnDisconnectedSetServerTimestamp = function (tableID_, itemID_, k_)
	{
        var k = getFullKey("", tableID_, itemID_, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["set"](window["Firebase"]["database"]["ServerValue"]);
	};
    Acts.prototype.EnumOnDisconnectedSetValue = function (tableID_, itemID_, k_, v_)
	{
        var k = getFullKey("", tableID_, itemID_, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["set"](v_);
	};
    Acts.prototype.EnumOnDisconnectedSetBooleanValue = function (tableID_, itemID_, k_, v_)
	{
        var k = getFullKey("", tableID_, itemID_, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["set"](v_ === 1);
	};
    Acts.prototype.EnumOnDisconnectedSetJSON = function (tableID_, itemID_, k_, v_)
	{
        var k = getFullKey("", tableID_, itemID_, k_);
        var ref = this.get_ref(k);
        v_ = JSON.parse(v_);
        ref["onDisconnect"]()["set"](v_);
	};
    Acts.prototype.EnumOnDisconnectedCancel = function (tableID_, itemID_, k_)
	{
        var k = getFullKey("", tableID_, itemID_, k_);
        var ref = this.get_ref(k);
        ref["onDisconnect"]()["cancel"]();
	};
	var LIMITTYPE = ["limitToFirst", "limitToLast"];
    Acts.prototype.GetItemsBySingleConditionInRange = function (tableID_, key_, start, end, limit_type, limit_count, tag_)
	{
        var self=this;
        var onReqDone = this.onRequestComplete;
        var onRead = function (snapshot)
        {
            if (!self.readTables.hasOwnProperty(tableID_))
                self.readTables[tableID_] = {};
            var table = self.readTables[tableID_];
            var items = snapshot["val"]() || {};
            for (var k in items)
                table[k] = items[k];
            self.exp_LastTableID = tableID_;
            self.trigTag = tag_;
		    self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemBook.prototype.cnds.OnRequestComplete, self);
			self.trigTag = null;
            if (onReqDone)
                onReqDone();
        };
	    var query = this.get_ref()["child"](tableID_);
        query = query["orderByChild"](key_);
	    query = query["startAt"](start)["endAt"](end);
        if (limit_count > 0)
	        query = query[LIMITTYPE[limit_type]](limit_count);
        var qf = function()
        {
	        query["once"]("value", onRead);
        }
        if (!onReqDone)
	        qf();
        else
            this.addToRequestQueue(qf);
	};
	var COMPARSION_TYPE = ["equalTo", "startAt", "endAt", "startAt", "endAt"];
    Acts.prototype.GetItemsBySingleCondition = function (tableID_, key_, comparsion_type, value_, limit_type, limit_count, tag_)
	{
        var self=this;
        var onReqDone = this.onRequestComplete;
        var onRead = function (snapshot)
        {
            if (!self.readTables.hasOwnProperty(tableID_))
                self.readTables[tableID_] = {};
            var table = self.readTables[tableID_];
            var items = snapshot["val"]() || {};
            for (var k in items)
                table[k] = items[k];
            self.exp_LastTableID = tableID_;
            self.trigTag = tag_;
		    self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemBook.prototype.cnds.OnRequestComplete, self);
			self.trigTag = null;
            if (onReqDone)
                onReqDone();
        };
	    var query = this.get_ref()["child"](tableID_);
        query = query["orderByChild"](key_);
	    query = query[COMPARSION_TYPE[comparsion_type]](value_);
        if (limit_count > 0)
	        query = query[LIMITTYPE[limit_type]](limit_count);
        var qf = function()
        {
	        query["once"]("value", onRead);
        }
        if (!onReqDone)
	        qf();
        else
            this.addToRequestQueue(qf);
	};
    Acts.prototype.LoadItem = function (tableID_, itemID_, tag_)
	{
        if (tableID_ === "")
            itemID_ = "";
        var self=this;
        var onReqDone = this.onRequestComplete;
        var onRead = function (snapshot)
        {
            var o =  snapshot["val"]() || {};
            if (tableID_ === "")
            {
                self.readTables = o;
            }
            else if (itemID_ === "")
            {
                self.readTables[tableID_] = o ;
            }
            else
            {
                if (!self.readTables.hasOwnProperty(tableID_))
                    self.readTables[tableID_] = {};
                self.readTables[tableID_][itemID_] = o;
            }
            self.exp_LastTableID = tableID_;
            self.exp_LastItemID = itemID_;
            self.trigTag = tag_;
		    self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemBook.prototype.cnds.OnRequestComplete, self);
			self.trigTag = null;
            if (onReqDone)
                onReqDone();
        };
        var query = this.get_ref();
        if (tableID_ !== "")
            query = query["child"](tableID_);
        if (itemID_ !== "")
            query = query["child"](itemID_);
        var qf = function()
        {
	        query["once"]("value", onRead);
        }
        if (!onReqDone)
	        qf();
        else
            this.addToRequestQueue(qf);
	};
    Acts.prototype.StartQueue = function (tag_)
	{
        this.queueMode = true;
        this.requestQueue.length = 0;
        var self=this;
        var queueCnt=0;
        this.addToRequestQueue = function (qf)
        {
            this.requestQueue.push(qf);
            queueCnt += 1;
        }
        this.onRequestComplete = function ()
        {
            queueCnt -= 1;
            if (queueCnt === 0)
            {
                self.trigTag = tag_;
		        self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemBook.prototype.cnds.OnRequestComplete, self);
			    self.trigTag = null;
                self.onRequestComplete = null;
            }
        }
	};
    Acts.prototype.ProcessQueue = function ()
	{
        for (var i in this.requestQueue)
            this.requestQueue[i]();
        this.queueMode = false;
	};
    Acts.prototype.CleanResultTable = function (tableID_)
	{
        if (tableID_ === "")
            this.readTables = {};
        else if (this.readTables.hasOwnProperty(tableID_))
            delete this.readTables[tableID_];
	};
    Acts.prototype.SetConvertKeyName = function (keyTableID_, keyItemID_)
	{
        this.convertKeyTableID = keyTableID_;
        this.convertKeyItemID = keyItemID_;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
  	Exps.prototype.GenerateKey = function (ret)
	{
	    var ref = this.get_ref()["push"]();
        this.exp_LastGeneratedKey = ref["key"];
		ret.set_string(this.exp_LastGeneratedKey);
	};
	Exps.prototype.LastGeneratedKey = function (ret)
	{
	    ret.set_string(this.exp_LastGeneratedKey);
	};
    Exps.prototype.At = function (ret, tableID, itemID, key, default_value)
	{
        var item = this.readTables;
        if (tableID)
        {
            item = item[tableID];
            if (item && itemID)
                item = item[itemID];
        }
		ret.set_any( window.FirebaseGetValueByKeyPath(item, key, default_value) );
	};
	Exps.prototype.LastTableID = function (ret)
	{
		ret.set_string(this.exp_LastTableID);
	}
	Exps.prototype.LastItemID = function (ret)
	{
		ret.set_string(this.exp_LastItemID);
	};
    Exps.prototype.CurItemID = function (ret)
	{
		ret.set_string(this.exp_CurItemID);
	};
    Exps.prototype.CurKey = function (ret)
	{
		ret.set_string(this.exp_CurKey);
	};
    Exps.prototype.CurValue = function (ret, subKey, default_value)
	{
		ret.set_any( window.FirebaseGetValueByKeyPath(this.exp_CurValue, subKey, default_value ) );
	};
    Exps.prototype.CurItemContent = function (ret, k, default_value)
	{
		ret.set_any( window.FirebaseGetValueByKeyPath(this.exp_CurItemContent, k, default_value ) );
	};
    Exps.prototype.AsItemList = function (ret, tableID_, itemID_)
	{
        var itemList = [];
        var table, item;
        if (tableID_ == null)
        {
            for (var tableID in this.readTables)
            {
                table = this.readTables[tableID];
                for (var itemID in table)
                {
                    item = table[itemID];
                    itemList.push(this.ConvertItem(item, tableID, itemID));
                }
            }
        }
        else if (itemID_ == null)
        {
            table = this.readTables[tableID_];
            if (table)
            {
                for (var itemID in table)
                {
                    item = table[itemID];
                    itemList.push(this.ConvertItem(item, tableID_, itemID));
                }
            }
        }
        else
        {
            table = this.readTables[tableID_];
            if (table)
            {
                item = table[itemID_];
                if (item)
                    itemList.push(this.ConvertItem(item, tableID_, itemID_));
            }
        }
        var json_ = JSON.stringify(itemList);
        var i, cnt=itemList.length;
        for(i=0; i<cnt; i++)
        {
            this.RevertItem(itemList[i]);
        }
		ret.set_string(json_);
	};
    Exps.prototype.ItemCount = function (ret, tableID_)
	{
        var cnt=0;
        if (tableID_ != null)
        {
            var table = this.readTables[tableID_];
            if (table)
            {
                for (var itemID in table)
                    cnt++
            }
        }
        else
        {
            var table;
            for(var tableID in this.readTables)
            {
                table = this.readTables[tableID];
                for (var itemID in table)
                    cnt++
            }
        }
		ret.set_int(cnt);
	};
    Exps.prototype.Ref = function (ret, tableID_, itemID_, key_)
	{
        var path = this.rootpath + getFullKey("", tableID_, itemID_, key_);
		ret.set_string(path);
	};
    var num2base32 = ["0","1","2","3","4","5","6","7","8","9",
                                 "b","c","d","e","f","g","h","j","k","m",
                                 "n","p","q","r","s","t","u","v","w","x",
                                 "y","z"];
    Exps.prototype.RandomBase32 = function (ret, dig)
	{
        var o = "";
        for (var i=0;i<dig;i++)
            o += num2base32[ Math.floor( Math.random()*32 ) ];
        this.exp_LastRandomBase32 = o;
	    ret.set_string( o );
	};
    Exps.prototype.LastRandomBase32 = function (ret)
	{
	    ret.set_string( this.exp_LastRandomBase32 );
	};
}());
/*
# for random picking
itemIDs\
    <itemID>: true
# for condition picking
filters\
    <keys>
        <itemID>: <value>
# for remove itemID
itemID-keys\
    <itemID>\
        <keys>: true
*/
;
;
cr.plugins_.Rex_Firebase_ItemFilter = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_ItemFilter.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.prepared_item = {};
        this.request_itemIDs = {};
        this.trig_tag = null;
        this.exp_CurItemID = "";
	};
	instanceProto.onDestroy = function ()
	{
        this.prepared_item = {};
        this.request_itemIDs = {};
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	var get_key_path = function(itemID, key_)
	{
	    return "filters/" + key_ + "/" + itemID;
	};
	instanceProto.get_itemID2Keys_ref = function(itemID, key_)
	{
	    var ref = this.get_ref("itemID-keys")["child"](itemID);
	    if (!key_)
	        ref = ref["child"](key_);
        return ref;
	};
	var get_itemID2Keys_path = function(itemID, key_)
	{
	    var p = "itemID-keys/" + itemID;
		if (key_)
		    p += "/" + key_;
        return p;
	};
	instanceProto.get_itemID_ref = function(itemID)
	{
        return this.get_ref("itemIDs")["child"](itemID);
	};
	var get_itemID_path = function(itemID)
	{
	    return "itemIDs/" + itemID;
	};
	instanceProto.create_save_item = function (itemID, item_)
	{
	    var save_item = {};
        save_item[ get_itemID_path(itemID) ] = true;
	    var k, v;
	    for (k in item_)
	    {
	        v = item_[k];
	        save_item[ get_key_path(itemID, k) ] = v;
	        save_item[ get_itemID2Keys_path(itemID, k) ] = (v === null)? null : true;
	    }
	    return save_item;
	};
	instanceProto.create_remove_item = function (itemID, keys)
	{
        var remove_item = {};
        remove_item[ get_itemID_path(itemID) ] = null;
        remove_item[ get_itemID2Keys_path(itemID, k) ] = null;
	    var k;
	    for(k in keys)
	    {
	        remove_item[ get_key_path(itemID, k) ] = null;
        }
	    return remove_item;
	};
    instanceProto.save_item = function (itemID, item_, tag_)
	{
	    var self = this;
	    var onComplete_handler = function(error)
	    {
	        if (!tag_)
	            return;
		    var trig = (!error)? cr.plugins_.Rex_Firebase_ItemFilter.prototype.cnds.OnSaveComplete:
		                         cr.plugins_.Rex_Firebase_ItemFilter.prototype.cnds.OnSaveError;
            self.trig_tag = tag_;
            self.exp_CurItemID = itemID;
		    self.runtime.trigger(trig, self);
		    self.trig_tag = null;
		    self.exp_CurItemID = "";
	    };
	    var write_item = this.create_save_item(itemID, item_);
		this.get_ref()["update"](write_item, onComplete_handler);
	};
    instanceProto.remove_item = function (itemID, tag_)
	{
	    var self = this;
	    var on_read_keys = function (snapshot)
        {
            var keys = snapshot.val();
            if (keys == null)  // itemID is not existed
            {
                onComplete_handler(true);
            }
            else  // itemID is existed, get keys
            {
                var items = self.create_remove_item(itemID, keys);
                self.get_ref()["update"](items, onComplete_handler);
            }
        };
	    var onComplete_handler = function(error)
	    {
	        if (!tag_)
	            return;
		    var trig = (!error)? cr.plugins_.Rex_Firebase_ItemFilter.prototype.cnds.OnRemoveComplete:
		                         cr.plugins_.Rex_Firebase_ItemFilter.prototype.cnds.OnRemoveError;
            self.trig_tag = tag_;
            self.exp_CurItemID = itemID;
		    self.runtime.trigger(trig, self);
		    self.trig_tag = null;
		    self.exp_CurItemID = "";
	    };
	    this.get_itemID2Keys_ref(itemID)["once"]("value", on_read_keys);
	};
    instanceProto.get_Equal_codeString = function (key_, value_)
	{
        key_ = string_quote(key_);
        value_ = string_quote(value_);
        var code_string = 'filter.Query("Equal",'+key_+","+value_+")";
        return code_string;
	};
    instanceProto.get_GreaterEqual_codeString = function (key_, value_)
	{
        key_ = string_quote(key_);
        value_ = string_quote(value_);
        var code_string = 'filter.Query("GreaterEqual",'+key_+","+value_+")";
        return code_string;
	};
    instanceProto.get_LessEqual_codeString = function (key_, value_)
	{
        key_ = string_quote(key_);
        value_ = string_quote(value_);
        var code_string = 'filter.Query("LessEqual",'+key_+","+value_+")";
		return code_string;
	};
    instanceProto.get_InRange_codeString = function (key_, start_, end_)
	{
        key_ = string_quote(key_);
        start_ = string_quote(start_);
        end_ = string_quote(end_);
        var code_string = 'filter.Query("InRange",'+key_+","+start_+","+end_+")";
		return code_string;
	};
    var ARGS_COPY = [];
    instanceProto.get_OR_codeString = function ()
	{
        array_copy(ARGS_COPY, arguments);
        var code_string = 'filter.AddSETOP("OR",'+ARGS_COPY.join(",")+")";
		return code_string;
	};
    instanceProto.get_AND_codeString = function ()
	{
        array_copy(ARGS_COPY, arguments);
        var code_string = 'filter.AddSETOP("AND",'+ARGS_COPY.join(",")+")";
		return code_string;
	};
    instanceProto.get_SUB_codeString = function ()
	{
        array_copy(ARGS_COPY, arguments);
        var code_string = 'filter.AddSETOP("SUB",'+ARGS_COPY.join(",")+")";
		return code_string;
	};
    instanceProto.get_SUBVALUE_codeString = function ()
	{
        array_copy(ARGS_COPY, arguments);
        var code_string = 'filter.AddSETOP("SUB_VALUE",'+ARGS_COPY.join(",")+")";
		return code_string;
	};
	var retrieve_itemIDs = function (table_in, arr_out)
	{
        var itemID;
        arr_out.length = 0;
        for (itemID in table_in)
        {
            arr_out.push(itemID);
        }
	};
    var string_quote = function(v)
    {
        var s;
        if (typeof (v) == "string")
            s = '"'+v+'"';
        else // number
            s = v.toString();
        return s
    };
    var array_copy = function (arr_out, arr_in, start_index)
    {
        if (start_index == null)
            start_index = 0
        var i, cnt=arr_in.length;
        arr_out.length = cnt - start_index;
        for(i=start_index; i<cnt; i++)
            arr_out[i-start_index] = arr_in[i];
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnSaveComplete = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.OnSaveError = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.OnRemoveComplete = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.OnRemoveError = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.OnRequestComplete = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.ForEachItemID = function ()
	{
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var k, o=this.request_itemIDs;
		for(k in o)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurItemID = k;
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
        this.exp_CurItemID = "";
		return false;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
	};
    Acts.prototype.SetValue = function (key_, value_)
	{
		this.prepared_item[key_] = value_;
	};
    Acts.prototype.SetBooleanValue = function (key_, is_true)
	{
		this.prepared_item[key_] = (is_true === 1);
	};
    Acts.prototype.Save = function (itemID, tag_)
	{
	    this.save_item(itemID, this.prepared_item, tag_);
        this.prepared_item = {};
	};
    Acts.prototype.Remove = function (itemID, tag_)
	{
	    this.remove_item(itemID, tag_);
	};
    Acts.prototype.RemoveKey = function (key_)
	{
		this.prepared_item[key_] = null;
	};
    Acts.prototype.GetRandomItems = function (pick_count, tag_)
	{
        this.request_itemIDs = {};
	    var self = this;
	    var on_read_itemIDs = function (snapshot)
        {
            var arr_itemIDs = [];
            var itemIDs = snapshot.val();
            if (itemIDs == null)
            {
            }
            else
            {
                retrieve_itemIDs(itemIDs, arr_itemIDs);
                var cnt = arr_itemIDs.length;
                if (cnt <= pick_count)
                {
                    var i;
                    for (i=0; i<cnt; i++)
                        self.request_itemIDs[arr_itemIDs[i]] = true;
                }
                else if ((pick_count/cnt) < 0.5)
                {
                    var i, rv, try_pick, itemID;
                    for (i=0; i<pick_count; i++)
                    {
                        try_pick = true;
                        while (try_pick)
                        {
                            rv = Math.floor(Math.random() * cnt);
                            itemID = arr_itemIDs[rv];
                            if (!self.request_itemIDs.hasOwnProperty(itemID))
                            {
                                self.request_itemIDs[itemID] = true;
                                try_pick = false;
                            }
                        }
                    }
                }
                else
                {
                    _shuffle(arr_itemIDs);
                    arr_itemIDs.length = pick_count;
                    var i;
                    for (i=0; i<pick_count; i++)
                        self.request_itemIDs[arr_itemIDs[i]] = true;
                }
            } // pick random
            self.trig_tag = tag_;
		    self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemFilter.prototype.cnds.OnRequestComplete, self);
			self.trig_tag = null;
        };
		this.get_ref("itemIDs")["once"]("value", on_read_itemIDs);
	};
	var _shuffle = function (arr, random_gen)
	{
        var i = arr.length, j, temp, random_value;
        if ( i == 0 ) return;
        while ( --i )
        {
		    random_value = (random_gen == null)?
			               Math.random(): random_gen.random();
            j = Math.floor( random_value * (i+1) );
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    };
    Acts.prototype.GetItemsByCondition = function (condition_expression, tag_)
	{
        var filter = new FilterKlass(this);
        var self=this;
        var on_complete = function(result)
        {
            self.request_itemIDs = {};
            for (var k in result)
                self.request_itemIDs[k] = true;
            self.trig_tag = tag_;
		    self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemFilter.prototype.cnds.OnRequestComplete, self);
			self.trig_tag = null;
        }
        filter.DoRequest(condition_expression, on_complete);
	};
	var LIMITTYPE = ["limitToFirst", "limitToLast"];
    Acts.prototype.GetItemsBySingleConditionInRange = function (key_, start, end, limit_type, limit_count, tag_)
	{
	    this.request_itemIDs = {};
	    var self = this;
        var read_item = function(childSnapshot)
        {
            var k = get_key(childSnapshot);
            var v = childSnapshot["val"]();
            self.request_itemIDs[k] = v;
        };
        var on_read_itemIDs = function (snapshot)
        {
            snapshot["forEach"](read_item);
            self.trig_tag = tag_;
		    self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemFilter.prototype.cnds.OnRequestComplete, self);
			self.trig_tag = null;
        };
	    var query = this.get_ref("filters")["child"](key_);
        query = query["orderByValue"]();
	    query = query["startAt"](start)["endAt"](end);
	    query = query[LIMITTYPE[limit_type]](limit_count);
	    query["once"]("value", on_read_itemIDs);
	};
	var COMPARSION_TYPE = ["equalTo", "startAt", "endAt", "startAt", "endAt"];
    Acts.prototype.GetItemsBySingleCondition = function (key_, comparsion_type, value_, limit_type, limit_count, tag_)
	{
	    var is_exclusive = (comparsion_type == 3) || (comparsion_type == 4);
	    var current_item_count=0, last_key = "";
	    this.request_itemIDs = {};
	    var self = this;
        var read_item = function(childSnapshot)
        {
            var k = get_key(childSnapshot);
            var v = childSnapshot["val"]();
            self.request_itemIDs[k] = v;
            current_item_count += 1;
        };
        var on_read_itemIDs = function (snapshot)
        {
            snapshot["forEach"](read_item);
            self.trig_tag = tag_;
		    self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemFilter.prototype.cnds.OnRequestComplete, self);
			self.trig_tag = null;
        };
	    var query = this.get_ref("filters")["child"](key_);
        query = query["orderByValue"]();
	    query = query[COMPARSION_TYPE[comparsion_type]](value_);
	    query = query[LIMITTYPE[limit_type]](limit_count);
	    query["once"]("value", on_read_itemIDs);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.CurItemID = function (ret)
	{
		ret.set_string(this.exp_CurItemID);
	};
	Exps.prototype.ItemIDToJSON = function (ret)
	{
		ret.set_string(JSON.stringify(this.request_itemIDs));
	};
    Exps.prototype.Equal = function (ret, key_, value_)
	{
        var code_string;
        if (arguments.length == 3)
        {
		    code_string = this.get_Equal_codeString(key_, value_);
        }
        else
        {
            var equals = [];
            var i, cnt=arguments.length;
            for (i=2; i<cnt; i++)
            {
                equals.push(this.get_Equal_codeString(key_, arguments[i]));
            }
            code_string = this.get_OR_codeString.apply(this, equals);
        }
        ret.set_string(code_string);
	};
    Exps.prototype.GreaterEqual = function (ret, key_, value_)
	{
        ret.set_string(this.get_GreaterEqual_codeString(key_, value_));
	};
    Exps.prototype.LessEqual = function (ret, key_, value_)
	{
        ret.set_string(this.get_LessEqual_codeString(key_, value_));
	};
    Exps.prototype.InRange = function (ret, key_, start_, end_)
	{
        ret.set_string(this.get_InRange_codeString(key_, start_, end_));
	};
    Exps.prototype.Greater = function (ret, key_, value_)
	{
        var query_code_string = this.get_GreaterEqual_codeString(key_, value_);
        var code_string = this.get_SUBVALUE_codeString(query_code_string, value_);
        ret.set_string(code_string);
	};
    Exps.prototype.Less = function (ret, key_, value_)
	{
        var query_code_string = this.get_LessEqual_codeString(key_, value_);
        var code_string = this.get_SUBVALUE_codeString(query_code_string, value_);
        ret.set_string(code_string);
	};
    Exps.prototype.OR = function (ret)
	{
        array_copy(ARGS_COPY, arguments, 1);
        var code_string = this.get_OR_codeString.apply(this, ARGS_COPY);
		ret.set_string(code_string);
	};
    Exps.prototype.AND = function (ret)
	{
        array_copy(ARGS_COPY, arguments, 1);
        var code_string = this.get_AND_codeString.apply(this, ARGS_COPY);
		ret.set_string(code_string);
	};
    Exps.prototype.SUB = function (ret)
	{
        array_copy(ARGS_COPY, arguments, 1);
        var code_string = this.get_SUB_codeString.apply(this, ARGS_COPY);
		ret.set_string(code_string);
	};
    var FilterKlass = function(plugin)
    {
        this.plugin = plugin;
        this.wait_events = 0;
        this.on_complete = null;
        this.current_groupUid = 0;
        this.groups = {};
        this.set_expression = "";
    };
    var FilterKlassProto = FilterKlass.prototype;
	FilterKlassProto.isDone_test = function(on_complete)
	{
	    this.wait_events -= 1;
        if (this.wait_events > 0)
            return;
        var result_group = this.DoSetOperation(this.set_expression);
	    if (on_complete != null)
			on_complete(result_group);
	};
    FilterKlassProto.NewGroupUID = function()
    {
        var current_group_uid = this.current_groupUid.toString();
        this.groups[current_group_uid] = {};
        this.current_groupUid += 1;
        return current_group_uid;
    };
    FilterKlassProto["Query"] = function (query_typeName, key_, value0, value1)
    {
        var current_group_uid = this.NewGroupUID();
        var read_result = this.groups[current_group_uid];
        var self = this;
        var read_item = function(childSnapshot)
        {
            var k = get_key(childSnapshot);
            var v = childSnapshot["val"]();
            read_result[k] = v;
        };
        var on_read = function (snapshot)
        {
            snapshot["forEach"](read_item);
            self.isDone_test(self.on_complete);
        };
        this.wait_events += 1;
        var query = this.plugin.get_ref("filters")["child"](key_);
        query = query["orderByValue"]();
        query = this[query_typeName](query, value0, value1);
        query["once"]("value", on_read);
        var code_string = '(filter.groups["'+current_group_uid+'"])';
        return code_string;
    };
    FilterKlassProto["Equal"] = function (query, value_)
    {
        return query["equalTo"](value_);
    };
    FilterKlassProto["GreaterEqual"] = function (query, value_)
    {
        return query["startAt"](value_);
    };
    FilterKlassProto["LessEqual"] = function (query, value_)
    {
        return query["endAt"](value_);
    };
    FilterKlassProto["InRange"] = function (query, value0, value1)
    {
        return query["startAt"](value0)["endAt"](value1);
    };
    var params = [];
    FilterKlassProto["AddSETOP"] = function (operation_name)
    {
        var i,cnt=arguments.length;
        for (i=1; i<cnt; i++)
            params.push(arguments[i]);
        operation_name = '"'+operation_name+'"';
        var code_string = 'filter["SET"]('+operation_name+","+params.join(",")+")";
        return code_string;
    };
    FilterKlassProto["SET"] = function (operation_name)
    {
        var i, cnt=arguments.length;
        var groupA=arguments[1], groupB;
        var itemID;
        for (i=2; i<cnt; i++)
        {
            groupB = arguments[i];
            this[operation_name](groupA, groupB);
        }
        return groupA;
    };
    FilterKlassProto["OR"] = function (setA, setB)
    {
        var k;
        for (k in setB)
            setA[k] = true;
    };
    FilterKlassProto["AND"] = function (setA, setB)
    {
        var k;
        for (k in setA)
        {
            if (!setB.hasOwnProperty(k))
                delete setA[k];
        }
    };
    FilterKlassProto["SUB"] = function (setA, setB)
    {
        var k;
        for (k in setB)
        {
            if (setA.hasOwnProperty(k))
                delete setA[k];
        }
    };
    FilterKlassProto["SUB_VALUE"] = function (setA, value_)
    {
        var k;
        for (k in setA)
        {
            if (setA[k] == value_)
                delete setA[k];
        }
    };
    FilterKlassProto.DoRequest = function (condition_expression, on_complete)
    {
        this.current_groupUid = 0;
        this.wait_events = 0;
        this.on_complete = on_complete;
        var code_string = "function(filter){\n return "+condition_expression +";\n}";
        var request;
        try
        {
            request = eval("("+code_string+")");
        }
        catch(err)
        {
            request = null;
        }
        this.set_expression = request(this);
    };
    FilterKlassProto.DoSetOperation = function (set_expression)
    {
        var code_string = "function(filter){\n return "+set_expression +";\n}";
        var handler;
        try
        {
            handler = eval("("+code_string+")");
        }
        catch(err)
        {
            handler = null;
        }
        var result_groupUid = handler(this);
        return result_groupUid;
    };
}());
/*
<itemID>
    # monitor item added and removed
    <Key> : <value>
    # monitor key added and removed, and value changed
*/
;
;
cr.plugins_.Rex_Firebase_ItemMonitor = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_ItemMonitor.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.query = null;
        this.items = {};
        this.tag2items = {};
        if (!this.recycled)
        {
            this.callbackMap = new window.FirebaseCallbackMapKlass();
        }
        else
        {
            this.callbackMap.Reset();
        }
        this.exp_LastItemID = "";
        this.exp_LastItemContent = null;
        this.exp_LastPropertyName = "";
        this.exp_LastValue = null;
        this.exp_PrevValue = null;
        this.exp_CurItemID = "";
        this.exp_CurItemContent = null;
        this.exp_CurKey = "";
        this.exp_CurValue = 0;
	};
	instanceProto.onDestroy = function ()
	{
	    this.StopMonitor();
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
    instanceProto.StartMonitor = function (query, tag, monitorKey)
	{
	    this.StopMonitor();
        if (this.tag2items.hasOwnProperty(tag))
            return;
	    this.tag2items[tag] = {};
	    var tag2items = this.tag2items[tag];
        var self = this;
        var on_add = function (snapshot)
        {
            var itemID = get_key(snapshot);
            tag2items[itemID] = true;
            var itemContent = snapshot["val"]();
            self.items[itemID] = itemContent;
            self.exp_LastItemID = itemID;
            self.exp_LastItemContent = itemContent;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemAdded, self);
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemListChanged, self);
            self.start_monitor_item(snapshot, monitorKey);
        };
        var on_remove = function (snapshot)
        {
            var itemID = get_key(snapshot);
            delete tag2items[itemID];
            if (is_empty_table(self.tag2items[tag]))
                delete self.tag2items[tag];
            delete self.items[itemID];
            self.stop_monitor_item(get_refPath(snapshot), monitorKey);
            self.exp_LastItemID = itemID;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemRemoved, self);
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemListChanged, self);
        };
        this.callbackMap.Add(query, "child_added", "child_added#"+tag, on_add);
        this.callbackMap.Add(query, "child_removed", "child_removed#"+tag, on_remove);
	};
	instanceProto.RemoveMonitorQuery = function (query, tag)
	{
        this.callbackMap.Remove(query, "child_added", "child_added#"+tag);
        this.callbackMap.Remove(query, "child_removed", "child_removed#"+tag);
	    this.remove_tag2items(tag);
	};
	instanceProto.StopMonitor = function ()
	{
        if (this.query == null)
            return;
	    for (var tag in this.tag2items)
	    {
	        this.RemoveMonitorQuery(this.query, tag);
	    }
        this.query = null;
	};
	instanceProto.start_monitor_item = function(snapshot, tag)
	{
        if (tag == null)
            tag = "";
        var ref = get_refPath(snapshot);
        var k = get_key(snapshot);
        var v = snapshot["val"]();
        this.items[k] = v;
        var monitor_item = this.items[k];
        var self = this;
        var on_prop_added = function (snapshot)
	    {
            var ck = get_key(snapshot);
            var cv = snapshot["val"]();
            if (monitor_item[ck] === cv)
                return;
            self.exp_LastItemID = k;
            self.exp_LastPropertyName = ck;
            self.exp_LastValue = cv;
            monitor_item[ck] = cv;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnPropertyAdded, self);
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemListChanged, self);
	    };
        var on_value_changed = function (snapshot)
	    {
            var ck = get_key(snapshot);
            var cv = snapshot["val"]();
            if (monitor_item[ck] === cv)
                return;
            self.exp_LastItemID = k;
            self.exp_LastPropertyName = ck;
            self.exp_LastValue = cv;
            if (monitor_item[ck] == null)
                self.exp_PrevValue = self.exp_LastValue;
            else
                self.exp_PrevValue = monitor_item[ck];
            monitor_item[ck] = cv;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnAnyValueChnaged, self);
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnValueChnaged, self);
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemListChanged, self);
	    };
        var on_prop_removed = function (snapshot)
	    {
            var ck = get_key(snapshot);
            if (!monitor_item.hasOwnProperty(ck))
                return;
            self.exp_LastItemID = k;
            self.exp_LastPropertyName = ck;
            delete monitor_item[k];
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnPropertyRemoved, self);
            self.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemListChanged, self);
	    };
        this.callbackMap.Add(ref, "child_added", "prop_added#"+tag, on_prop_added);
        this.callbackMap.Add(ref, "child_removed", "prop_removed#"+tag, on_prop_removed);
        this.callbackMap.Add(ref, "child_moved", "prop_added#"+tag, on_value_changed);
        this.callbackMap.Add(ref, "child_changed", "prop_removed#"+tag, on_value_changed);
	};
	instanceProto.stop_monitor_item = function(ref, tag)
	{
        this.callbackMap.Remove(ref, "child_added", "prop_added#"+tag);
        this.callbackMap.Remove(ref, "child_removed", "prop_removed#"+tag);
        this.callbackMap.Remove(ref, "child_moved", "prop_added#"+tag);
        this.callbackMap.Remove(ref, "child_changed", "prop_removed#"+tag);
	};
	instanceProto.remove_tag2items = function (tag)
	{
	    var tag2items = this.tag2items[tag];
	    if (tag2items == null)
	        return;
        delete this.tag2items[tag];
        for(var itemID in tag2items)
        {
            delete this.items[itemID];
            this.stop_monitor_item(this.get_ref(itemID), tag);
            this.exp_LastItemID = itemID;
            this.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemRemoved, this);
            this.runtime.trigger(cr.plugins_.Rex_Firebase_ItemMonitor.prototype.cnds.OnItemListChanged, this);
        }
	};
	instanceProto.ForEachItemID = function (itemIDList, items)
	{
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var i, cnt=itemIDList.length;
		for(i=0; i<cnt; i++)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurItemID = itemIDList[i];
            this.exp_CurItemContent = items[this.exp_CurItemID];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
		return false;
	};
	var is_empty_table = function (o)
	{
		for (var k in o)
		    return false;
		return true;
	};
    var din = function (d, default_value)
    {
        var o;
	    if (d === true)
	        o = 1;
	    else if (d === false)
	        o = 0;
        else if (d == null)
        {
            if (default_value != null)
                o = default_value;
            else
                o = 0;
        }
        else if (typeof(d) == "object")
            o = JSON.stringify(d);
        else
            o = d;
	    return o;
    };
    var getValueByKeyPath = function (o, keyPath)
    {
        if ((keyPath == null) || (keyPath === ""))
            return o;
        else if (typeof(o) !== "object")
            return null;
        else if (keyPath.indexOf(".") === -1)
            return o[keyPath];
        else
        {
            var val = o;
            var keys = keyPath.split(".");
            var i, cnt=keys.length;
            for(i=0; i<cnt; i++)
            {
                val = val[keys[i]];
                if (val == null)
                    return null;
            }
            return val;
        }
    }
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnItemAdded = function ()
	{
	    return true;
	};
	Cnds.prototype.OnItemRemoved = function ()
	{
	    return true;
	};
	Cnds.prototype.OnValueChnaged = function (name)
	{
	    return cr.equals_nocase(name, this.exp_LastPropertyName);
	};
	Cnds.prototype.OnAnyValueChnaged = function ()
	{
	    return true;
	};
	Cnds.prototype.OnPropertyAdded = function ()
	{
	    return true;
	};
	Cnds.prototype.OnPropertyRemoved = function ()
	{
	    return true;
	};
	Cnds.prototype.OnItemListChanged = function ()
	{
	    return true;
	};
    var inc = function(a, b)
    {
        return (a > b)?  1:
               (a == b)? 0:
                         (-1);
    };
    var dec = function(a, b)
    {
        return (a < b)?  1:
               (a == b)? 0:
                         (-1);
    };
	Cnds.prototype.ForEachItemID = function (order)
	{
	    var itemIDList = Object.keys(this.items);
	    var sort_fn = (order == 0)? inc:dec;
	    itemIDList.sort(sort_fn);
	    return this.ForEachItemID(itemIDList, this.items);
	};
	Cnds.prototype.ForEachKey = function (itemID)
	{
	    var item_props = this.items[itemID];
	    if (item_props == null)
	        return false;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var k, o=item_props;
		for(k in o)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurKey = k;
            this.exp_CurValue = o[k];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
		return false;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
        this.load_items = {};
	};
    Acts.prototype.StartMonitor = function ()
	{
        if (this.query == null)
            this.query = this.get_ref();
        this.StartMonitor(this.query, "all");
	};
    Acts.prototype.StopMonitor = function ()
	{
	    this.StopMonitor();
	};
    var get_query = function (queryObjs)
    {
	    if (queryObjs == null)
	        return null;
        var query = queryObjs.getFirstPicked();
        if (query == null)
            return null;
        return query.GetQuery();
    };
    Acts.prototype.SetQueryObject = function (queryObjs, type_, cbName)
	{
	    this.StopMonitor();
        this.query = get_query(queryObjs);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.LastItemID = function (ret)
	{
		ret.set_string(this.exp_LastItemID);
	};
    Exps.prototype.LastItemContent = function (ret, key_, default_value)
	{
        var val = getValueByKeyPath(this.exp_LastItemContent, key_);
        val = din(val, default_value);
		ret.set_any(val);
	};
    Exps.prototype.At = function (ret, itemID, key_, default_value)
	{
	    var val, props = this.items[itemID];
	    if (props)
	        val = getValueByKeyPath(props, key_);
        val = din(val, default_value);
		ret.set_any(val);
	};
    Exps.prototype.LastItemContentPosX = function (ret)
	{
	    var v = this.exp_LastItemContent;
        if (v != null)
        {
            v = v["pos"];
            if (v != null)
                v = v["x"];
        }
        if ( v == null)
            v = 0;
		ret.set_float(v);
	};
    Exps.prototype.LastItemContentPosY = function (ret)
	{
	    var v = this.exp_LastItemContent;
        if (v != null)
        {
            v = v["pos"];
            if (v != null)
                v = v["y"];
        }
        if ( v == null)
            v = 0;
		ret.set_float(v);
	};
    Exps.prototype.LastPropertyName = function (ret)
	{
		ret.set_string(this.exp_LastPropertyName);
	};
    Exps.prototype.LastValue = function (ret, subKey)
	{
        var val = getValueByKeyPath(this.exp_LastValue, subKey);
		ret.set_any(din(val));
	};
    Exps.prototype.PrevValue = function (ret, subKey)
	{
        var val = getValueByKeyPath(this.exp_PrevValue, subKey);
		ret.set_any(din(val));
	};
    Exps.prototype.LastValuePosX = function (ret)
	{
	    var v = this.exp_LastValue;
        if (v != null)
            v = v["x"];
        if ( v == null)
            v = 0;
		ret.set_float(v);
	};
    Exps.prototype.LastValuePosY = function (ret)
	{
	    var v = this.exp_LastValue;
        if (v != null)
            v = v["y"];
        if ( v == null)
            v = 0;
		ret.set_float(v);
	};
    Exps.prototype.PrevValuePosX = function (ret)
	{
	    var v = this.exp_PrevValue;
        if (v != null)
            v = v["x"];
        if ( v == null)
            v = 0;
		ret.set_float(v);
	};
    Exps.prototype.PrevValuePosY = function (ret)
	{
	    var v = this.exp_PrevValue;
        if (v != null)
            v = v["y"];
        if ( v == null)
            v = 0;
		ret.set_float(v);
	};
    Exps.prototype.CurItemID = function (ret)
	{
		ret.set_string(this.exp_CurItemID);
	};
    Exps.prototype.CurKey = function (ret)
	{
		ret.set_string(this.exp_CurKey);
	};
    Exps.prototype.CurValue = function (ret, subKey)
	{
        var val = getValueByKeyPath(this.exp_CurValue, subKey);
		ret.set_any(din(val));
	};
    Exps.prototype.CurItemContent = function (ret, key_, default_value)
	{
        var val = getValueByKeyPath(this.exp_CurItemContent, key_);
		ret.set_any(din(val));
	};
}());
/*
<itemID>\
    <Key> : <value>
*/
;
;
cr.plugins_.Rex_Firebase_ItemTable = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_ItemTable.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.save_item = {};
	    if (!this.recycled)
	    {
            this.disconnectRemove_absRefs = {};
            this.load_request_itemIDs = {};
            this.load_items = {};
            this.load_items_cnt = null;
        }
        else
        {
            clean_table( this.disconnectRemove_absRefs );
            clean_table( this.load_request_itemIDs );
            this.clean_load_items();
        }
        this.trig_tag = null;
        this.exp_CurItemID = "";
        this.exp_CurItemContent = null;
        this.exp_CurKey = "";
        this.exp_CurValue = 0;
        this.exp_LastItemID = "";
        this.exp_LastGeneratedKey = "";
	};
	instanceProto.onDestroy = function ()
	{
	    this.CancelOnDisconnected();
        this.save_item = {};
        clean_table( this.disconnectRemove_absRefs );
        clean_table( this.load_request_itemIDs );
        this.clean_load_items();
	};
	instanceProto.clean_load_items = function ()
	{
        clean_table( this.load_items );
        this.load_items_cnt = null;
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	instanceProto.ForEachItemID = function (itemIDList, items)
	{
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var i, cnt=itemIDList.length;
		for(i=0; i<cnt; i++)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurItemID = itemIDList[i];
            this.exp_CurItemContent = items[this.exp_CurItemID];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
		return false;
	};
    instanceProto.Save = function (itemID, save_item, set_mode, tag_)
	{
	    if (itemID === "")
	    {
	        var ref = this.get_ref()["push"]();
	   	    itemID = get_key(ref);
	    }
	    else
	    {
	        var ref = this.get_ref(itemID);
	    }
	    var self = this;
	    var on_save = function (error)
	    {
		    var trig = (!error)? cr.plugins_.Rex_Firebase_ItemTable.prototype.cnds.OnSaveComplete:
		                         cr.plugins_.Rex_Firebase_ItemTable.prototype.cnds.OnSaveError;
            self.trig_tag = tag_;
            self.exp_CurItemID = itemID;
		    self.runtime.trigger(trig, self);
		    self.trig_tag = null;
		    self.exp_CurItemID = "";
	    };
	    this.exp_LastItemID = itemID;
	    var is_empty = is_empty_table(save_item);
	    var save_data = (is_empty)? true: save_item;
	    var op = (set_mode == 1)? "set":"update";
	    ref[op](save_data, on_save);
	};
    instanceProto.Remove = function (itemID, tag_)
	{
	    var self = this;
	    var on_remove = function (error)
	    {
		    var trig = (!error)? cr.plugins_.Rex_Firebase_ItemTable.prototype.cnds.OnRemoveComplete:
		                         cr.plugins_.Rex_Firebase_ItemTable.prototype.cnds.OnRemoveError;
            self.trig_tag = tag_;
            self.exp_CurItemID = itemID;
		    self.runtime.trigger(trig, self);
		    self.trig_tag = null;
		    self.exp_CurItemID = "";
	    };
	    this.get_ref(itemID)["remove"](on_remove);
	};
    instanceProto.At = function (itemID, key_, default_value)
	{
	    var v;
        if (!this.load_items.hasOwnProperty(itemID))
            v = null;
        else
            v = this.load_items[itemID][key_];
        v = din(v, default_value);
		return v;
	};
    instanceProto.CancelOnDisconnected = function ()
	{
	    for(var r in this.disconnectRemove_absRefs)
	    {
	        this.get_ref(r)["onDisconnect"]()["cancel"]();
	        delete this.disconnectRemove_absRefs[r];
	    }
	};
    var getFullKey = function (prefix, itemID, key)
    {
        var k = prefix;
        if (itemID != null)
            k +=  "/" + itemID;
        if (key != null)
        {
            key = key.replace(/\./g, "/");
            k += "/" + key;
        }
        return k;
    }
	var clean_table = function (o)
	{
		for (var k in o)
		    delete o[k];
	};
	var is_empty_table = function (o)
	{
		for (var k in o)
		    return false;
		return true;
	};
    var din = function (d, default_value)
    {
        var o;
	    if (d === true)
	        o = 1;
	    else if (d === false)
	        o = 0;
        else if (d == null)
        {
            if (default_value != null)
                o = default_value;
            else
                o = 0;
        }
        else if (typeof(d) == "object")
            o = JSON.stringify(d);
        else
            o = d;
	    return o;
    };
    var dout = function (d)
    {
        var o;
        if (typeof(d) == "string")
        {
            try
            {
	            o = JSON.parse(d)
            }
            catch(err)
            {
                o = d;
            }
        }
        else
        {
            o = d;
        }
        return o;
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnSaveComplete = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.OnSaveError = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.OnRemoveComplete = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.OnRemoveError = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
	Cnds.prototype.OnLoadComplete = function (tag_)
	{
	    return cr.equals_nocase(tag_, this.trig_tag);
	};
    var inc = function(a, b)
    {
        return (a > b)?  1:
               (a == b)? 0:
                         (-1);
    };
    var dec = function(a, b)
    {
        return (a < b)?  1:
               (a == b)? 0:
                         (-1);
    };
	Cnds.prototype.ForEachItemID = function (order)
	{
	    var itemIDList = Object.keys(this.load_items);
	    var sort_fn = (order === 0)? inc:dec;
	    itemIDList.sort(sort_fn);
	    return this.ForEachItemID(itemIDList, this.load_items);
	};
	Cnds.prototype.ForEachKey = function (itemID)
	{
	    var item_props = this.load_items[itemID];
	    if (item_props == null)
	        return false;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var k, o=item_props;
		for(k in o)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurKey = k;
            this.exp_CurValue = o[k];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
		return false;
	};
	Cnds.prototype.OnCleanAllComplete = function ()
	{
	    return true;
	};
	Cnds.prototype.OnCleanAllError = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
		this.clean_load_items();
	};
    Acts.prototype.SetValue = function (key_, value_)
	{
		this.save_item[key_] = dout(value_);
	};
    Acts.prototype.SetBooleanValue = function (key_, is_true)
	{
		this.save_item[key_] = (is_true == 1);
	};
    Acts.prototype.RemoveKey = function (key_)
	{
		this.save_item[key_] = null;
	};
    Acts.prototype.Save = function (itemID, set_mode, tag_)
	{
	    this.Save(itemID, this.save_item, set_mode, tag_);
        this.save_item = {};
	};
    Acts.prototype.Push = function (tag_)
	{
	    this.Save("", this.save_item, 1, tag_);
        this.save_item = {};
	};
    Acts.prototype.Remove = function (itemID, tag_)
	{
	    this.Remove(itemID, tag_);
	};
    Acts.prototype.GenerateKey = function ()
	{
	    var ref = this.get_ref()["push"]();
        this.exp_LastGeneratedKey = get_key(ref);
	};
    Acts.prototype.SetPosValue = function (x, y)
	{
		this.save_item["pos"] = {"x":x, "y":y};
	};
    Acts.prototype.SetServerTimestampValue = function (key_)
	{
		this.save_item[key_] = serverTimeStamp();
	};
    Acts.prototype.AddLoadRequestItemID = function (itemID)
	{
	    if (itemID == "")
	        return;
		this.load_request_itemIDs[itemID] = true;
	};
    Acts.prototype.LoadItems = function (tag_)
	{
	    this.clean_load_items();
        var self = this;
        var wait_events = 0;
	    var isDone_handler = function()
	    {
	        wait_events -= 1;
	        if (wait_events == 0)
	        {
                self.trig_tag = tag_;
                var trig = cr.plugins_.Rex_Firebase_ItemTable.prototype.cnds.OnLoadComplete;
				self.runtime.trigger(trig, self);
				self.trig_tag = null;
	        }
	    };
	    var on_read = function (snapshot)
	    {
	        var itemID = get_key(snapshot);
	        var content = snapshot["val"]();
	        self.load_items[itemID] = content;
	        isDone_handler();
	    };
        var itemID, item_ref;
		for(itemID in this.load_request_itemIDs)
		{
		    wait_events += 1;
		    item_ref = this.get_ref(itemID)["once"]("value", on_read);
		    delete this.load_request_itemIDs[itemID];
		}
	};
    Acts.prototype.LoadAllItems = function (tag_)
	{
	    clean_table(this.load_items);
        var self = this;
        var wait_events = 0;
	    var isDone_handler = function()
	    {
	        wait_events -= 1;
	        if (wait_events == 0)
	        {
                self.trig_tag = tag_;
                var trig = cr.plugins_.Rex_Firebase_ItemTable.prototype.cnds.OnLoadComplete;
				self.runtime.trigger(trig, self);
				self.trig_tag = null;
	        }
	    };
        var read_item = function(childSnapshot)
        {
            var key = get_key(childSnapshot);
            var childData = childSnapshot["val"]();
            self.load_items[key] = childData;
        };
	    var on_read = function (snapshot)
	    {
            snapshot["forEach"](read_item);
            isDone_handler();
	    };
        wait_events += 1;
        this.get_ref()["once"]("value", on_read);
	};
    Acts.prototype.CancelOnDisconnected = function ()
	{
	    this.CancelOnDisconnected();
	};
    Acts.prototype.RemoveOnDisconnected = function (itemID)
	{
	    if (itemID == "")
	        return;
        var ref = this.get_ref(itemID);
        ref["onDisconnect"]()["remove"]();
	    this.disconnectRemove_absRefs[ref["toString"]()] = true;
	};
    Acts.prototype.CleanAll = function ()
	{
        var self=this;
        var onComplete = function(error)
        {
	        var trig = (!error)? cr.plugins_.Rex_Firebase_ItemTable.prototype.cnds.OnCleanAllComplete:
	                                    cr.plugins_.Rex_Firebase_ItemTable.prototype.cnds.OnCleanAllError;
	        self.runtime.trigger(trig, self);
        };
	    var ref = this.get_ref();
        ref["remove"](onComplete);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.CurItemID = function (ret)
	{
		ret.set_string(this.exp_CurItemID);
	};
	Exps.prototype.LoadResultToJSON = function (ret)
	{
		ret.set_string(JSON.stringify(this.load_items));
	};
    Exps.prototype.CurKey = function (ret)
	{
		ret.set_string(this.exp_CurKey);
	};
    Exps.prototype.CurValue = function (ret)
	{
	    var v = this.exp_CurValue;
	    v = din(v);
		ret.set_any(v);
	};
    Exps.prototype.At = function (ret, itemID, key_, default_value)
	{
	    var v;
        if (!this.load_items.hasOwnProperty(itemID))
            v = null;
        else
            v = this.load_items[itemID][key_];
        v = din(v, default_value);
		ret.set_any(v);
	};
	Exps.prototype.LastItemID = function (ret)
	{
		ret.set_string(this.exp_LastItemID);
	};
    Exps.prototype.CurItemContent = function (ret, key_, default_value)
	{
	    var v;
        if (key_ == null)
            v = din(this.exp_CurItemContent);
        else
            v = din(this.exp_CurItemContent[key_], default_value);
		ret.set_any(v);
	};
	Exps.prototype.ItemsCount = function (ret)
	{
        if (this.load_items_cnt === null)
        {
            this.load_items_cnt = 0;
            for (var k in this.load_items)
                this.load_items_cnt += 1;
        }
		ret.set_int(this.load_items_cnt);
	};
	Exps.prototype.GenerateKey = function (ret)
	{
	    var ref = this.get_ref()["push"]();
        this.exp_LastGeneratedKey = get_key(ref);
		ret.set_string(this.exp_LastGeneratedKey);
	};
	Exps.prototype.LastGeneratedKey = function (ret)
	{
	    ret.set_string(this.exp_LastGeneratedKey);
	};
    Exps.prototype.Ref = function (ret, itemID_, key_)
	{
        var path = this.rootpath + getFullKey("", itemID_, key_);
		ret.set_string(path);
	};
}());
/*
<UserID>
    name - user name
	score - score
	extra - extra data like photo
	updateAt - timestamp of last score updating
*/
;
;
cr.plugins_.Rex_Firebase_Leaderboard = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Leaderboard.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
		this.ranking_order = this.properties[2];
	    this.ranks = this.create_ranks(this.properties[3]==1);
	    this.exp_CurRankCol = null;
	    this.exp_CurPlayerRank = -1;
	    this.exp_PostPlayerName = "";
        this.exp_PostPlayerScore = 0;
        this.exp_PostPlayerUserID = "";
        this.exp_PostExtraData = "";
		this.exp_LastUserID = "";
		this.exp_LastScore = 0;
		this.exp_LastPlayerName = "";
	};
	instanceProto.onDestroy = function ()
	{
	    this.ranks.StopUpdate();
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	instanceProto.create_ranks = function(isAutoUpdate)
	{
	    var ranks = new window.FirebaseItemListKlass();
	    ranks.updateMode = (isAutoUpdate)? ranks.AUTOCHILDUPDATE : ranks.MANUALUPDATE;
	    ranks.keyItemID = "userID";
	    var self = this;
	    var on_update = function()
	    {
	        self.runtime.trigger(cr.plugins_.Rex_Firebase_Leaderboard.prototype.cnds.OnUpdate, self);
	    };
	    ranks.onItemsFetch = on_update;
        ranks.onItemAdd = on_update;
        ranks.onItemRemove = on_update;
        ranks.onItemChange = on_update;
	    var onGetIterItem = function(item, i)
	    {
	        self.exp_CurRankCol = item;
	        self.exp_CurPlayerRank = i;
	    };
	    ranks.onGetIterItem = onGetIterItem;
        return ranks;
    };
    instanceProto.update_ranks = function (count)
	{
	    var query = this.get_ref();
		if (count == -1)  // update all
		{
		}
		else
		{
		    query = query["orderByPriority"]()["limitToFirst"](count);
		}
		this.ranks.StartUpdate(query);
	};
    var get_extraData = function (extra_data)
    {
        var save_extra_data;
        if (extra_data == "")
        {
            save_extra_data = null;
        }
        else
        {
            try
            {
	            save_extra_data = JSON.parse(extra_data)
            }
            catch(err)
            {
                save_extra_data = extra_data;
            }
        }
        return save_extra_data;
    }
    instanceProto.post_score = function (userID, name, score, extra_data)
	{
        extra_data = get_extraData(extra_data);
	    var self = this;
	    var onComplete = function(error)
	    {
            self.onPostComplete.call(self, error, userID, name, score, extra_data);
        };
        var save_data = {"name":name,
                         "score":score,
                         "extra": extra_data,
                         "updateAt": serverTimeStamp()
                        };
        var priority = (this.ranking_order == 0)? score:-score;
        var ref = this.get_ref();
	    ref["child"](userID)["setWithPriority"](save_data, priority, onComplete);
	};
	instanceProto.onPostComplete = function(error, userID, name, score, extra_data)
	{
	    this.exp_PostPlayerName = name;
        this.exp_PostPlayerScore = score;
        this.exp_PostPlayerUserID = userID;
        this.exp_PostExtraData = extra_data;
	    var trig = (error)? cr.plugins_.Rex_Firebase_Leaderboard.prototype.cnds.OnPostError:
	                        cr.plugins_.Rex_Firebase_Leaderboard.prototype.cnds.OnPostComplete;
	    this.runtime.trigger(trig, this);
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnPostComplete = function ()
	{
	    return true;
	};
	Cnds.prototype.OnPostError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnUpdate = function ()
	{
	    return true;
	};
	Cnds.prototype.ForEachRank = function (start, end)
	{
		return this.ranks.ForEachItem(this.runtime, start, end);
	};
	Cnds.prototype.OnGetScore = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (ref, ID_)
	{
	    this.ranks.StopUpdate();
	    this.rootpath = ref + "/" + ID_ + "/";
	};
    Acts.prototype.PostScore = function (userID, name, score, extra_data, post_cond)
	{
        if (post_cond !== 0)
        {
            var self=this;
            var onReadScore = function(snapshot)
            {
                var preScore = snapshot["val"]();
                var doPosting;
                if (post_cond === 1)
                    doPosting = (score > preScore);
                else if (post_cond === 2)
                    doPosting = (score < preScore);
                else if (post_cond === 3)
                    doPosting = (preScore == null) ;
                if (doPosting)
                    self.post_score(userID, name, score, extra_data);
                else
                {
                    self.onPostComplete.call(self, false, userID, name, preScore, extra_data);
                }
            };
            var ref = this.get_ref()["child"](userID)["child"]("score");
	        ref["once"]("value", onReadScore)
        }
        else
        {
            this.post_score(userID, name, score, extra_data);
        }
	};
    Acts.prototype.UpdateAllRanks = function ()
	{
	    this.update_ranks(-1);
	};
    Acts.prototype.UpdateTopRanks = function (count)
	{
	    this.update_ranks(count);
	};
    Acts.prototype.RemovePost = function (userID)
	{
	    var ref = this.get_ref();
	    ref["child"](userID)["remove"]();
	};
    Acts.prototype.StopUpdating = function ()
	{
        this.ranks.StopUpdate();
	};
    Acts.prototype.AddScore = function (userID, name, scoreAddTo, extra_data)
	{
        extra_data = get_extraData(extra_data);
	    var self = this;
	    var on_complete = function(error, committed, snapshot)
	    {
            var val = snapshot["val"]();
            self.onPostComplete.call(self, error, userID, name, val["score"], extra_data);
        };
        var on_transaction = function (currentValue)
        {
            var old_score = (currentValue == null)? 0: currentValue["score"];
            var new_score = old_score + scoreAddTo;
            var save_data = {"name":name,
                                       "score":new_score,
                                       "extra": extra_data,
                                       "updateAt": serverTimeStamp()
                                      };
            var priority = (self.ranking_order == 0)? new_score:-new_score;
            return { '.value': save_data, '.priority': priority };
        };
        var ref = this.get_ref();
	    ref["child"](userID)["transaction"](on_transaction, on_complete);
	};
    Acts.prototype.GetScore = function (userID)
	{
        var self=this;
        var onReadUserID = function(snapshot)
        {
			var userData = snapshot["val"]();
            if (userData)
			{
				self.exp_LastUserID = userID;
				self.exp_LastScore = userData["score"];
				self.exp_LastPlayerName = userData["name"];
			}
			else
			{
				self.exp_LastUserID = "";
				self.exp_LastScore = 0;
				self.exp_LastPlayerName = "";
			}
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Leaderboard.prototype.cnds.OnGetScore, self);
        };
		var ref = this.get_ref()["child"](userID);
		ref["once"]("value", onReadUserID);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.CurPlayerName = function (ret)
	{
	    var name;
	    if (this.exp_CurRankCol != null)
	        name = this.exp_CurRankCol["name"];
	    else
	        name = "";
		ret.set_string(name);
	};
	Exps.prototype.CurPlayerScore = function (ret)
	{
	    var score;
	    if (this.exp_CurRankCol != null)
	        score = this.exp_CurRankCol["score"];
	    else
	        score = 0;
		ret.set_any(score);
	};
	Exps.prototype.CurPlayerRank = function (ret)
	{
		ret.set_int(this.exp_CurPlayerRank);
	};
	Exps.prototype.CurUserID = function (ret)
	{
	    var userID;
	    if (this.exp_CurRankCol != null)
	        userID = this.exp_CurRankCol["userID"];
	    else
	        userID = "";
		ret.set_string(this.exp_CurRankCol["userID"]);
	};
	Exps.prototype.CurExtraData = function (ret)
	{
	    var extra_data = this.exp_CurRankCol["extra"];
	    if (extra_data == null)
	    {
	        extra_data = "";
	    }
	    else if (typeof(extra_data) == "object")
	    {
	        extra_data = JSON.stringify(extra_data);
	        this.exp_CurRankCol["extra"] = extra_data;
	    }
		ret.set_any(extra_data);
	};
	Exps.prototype.PostPlayerName = function (ret)
	{
		ret.set_string(this.exp_PostPlayerName);
	};
	Exps.prototype.PostPlayerScore = function (ret)
	{
		ret.set_any(this.exp_PostPlayerScore);
	};
	Exps.prototype.PostPlayerUserID = function (ret)
	{
		ret.set_string(this.exp_PostPlayerUserID);
	};
	Exps.prototype.PostExtraData = function (ret)
	{
		ret.set_any(this.exp_PostExtraData);
	};
	Exps.prototype.RankCount = function (ret)
	{
		ret.set_int(this.ranks.GetItems().length);
	};
	Exps.prototype.UserID2Rank = function (ret, userID)
	{
	    var rank = this.ranks.GetItemIndexByID(userID);
	    if (rank == null)
	        rank = -1;
		ret.set_int(rank);
	};
	Exps.prototype.Rank2PlayerName = function (ret, i)
	{
	    var rank_info = this.ranks.GetItems()[i];
	    var name = (!rank_info)? "":rank_info["name"];
		ret.set_string(name);
	};
	Exps.prototype.Rank2PlayerScore = function (ret, i)
	{
	    var rank_info = this.ranks.GetItems()[i];
	    var score = (!rank_info)? "":rank_info["score"];
		ret.set_any(score);
	};
	Exps.prototype.Rank2ExtraData = function (ret, i)
	{
	    var rank_info = this.ranks.GetItems()[i];
	    var extra_data = (!rank_info)? "":rank_info["extra"];
		ret.set_any(extra_data);
	};
	Exps.prototype.Rank2PlayerUserID = function (ret, i)
	{
	    var rank_info = this.ranks.GetItems()[i];
	    var extra_data = (!rank_info)? "":rank_info["userID"];
		ret.set_any(extra_data);
	};
	Exps.prototype.LastUserID = function (ret)
	{
		ret.set_string(this.exp_LastUserID);
	};
	Exps.prototype.LastScore = function (ret)
	{
		ret.set_any(this.exp_LastScore);
	};
	Exps.prototype.LastPlayerName = function (ret)
	{
		ret.set_any(this.exp_LastPlayerName);
	};
}());
;
;
cr.plugins_.Rex_Firebase_Query = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Query.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/";
	    this.current_query = null;
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	instanceProto.GetQuery = function()
	{
        var q = this.current_query;
        this.current_query = null;
        return q;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
     Acts.prototype.SetDomainRef = function (ref)
	{
	    this.rootpath = ref + "/";
	};
    Acts.prototype.CreateNewQuery = function (k)
	{
	    this.current_query = this.get_ref(k);
	};
    Acts.prototype.OrderByKey = function ()
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["orderByKey"]();
	};
    Acts.prototype.OrderByChild = function (child_name)
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["orderByChild"](child_name);
	};
    Acts.prototype.OrderByPriority = function (child_name)
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["orderByPriority"]();
	};
    Acts.prototype.OrderByValue = function ()
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["orderByValue"]();
	};
    Acts.prototype.StartAt = function (v)
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["startAt"](v);
	};
    Acts.prototype.EndAt = function (v)
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["endAt"](v);
	};
    Acts.prototype.StartEndAt = function (v0, v1)
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["startAt"](v0)["endAt"](v1);
	};
    Acts.prototype.EqualTo = function (v)
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["equalTo"](v);
	};
    Acts.prototype.LimitToFirst = function (l)
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["limitToFirst"](l);
	};
    Acts.prototype.LimitToLast = function (l)
	{
        if (this.current_query === null)
            this.current_query = this.get_ref();
	    this.current_query = this.current_query["limitToLast"](l);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
}());
/*
# filter to monitor opened rooms
room-filter/
    <roomID>
        filter -  close/open + "|" + public/private/...
        name - The display name of the room.
# header of room, write by owner of room. Each room has unique roomID.
# read it when joining the room
room-metadata/
    <roomID>
        name - The display name of the room.
        # monitor filter to catch room open/close event
        filter -  close/open + "|" + public/private/...
        # moderators of this room
        moderators/
            <userID> - userName
        # join permission
        permission - null("anyone")/("black-list")/("white-list")
        black-list/
            <userID> - userName
        white-list/
            <userID> - userName
        # ignore room if user can not join
        maxPeers - The maximum number of peers that can join this room.
        # limit the amount of users
        extra/
# body of room data. Each room has unique roomID.
rooms/
    <roomID>
        alive - true or null
        # users in this room.
        users/
            <joinAt>
                ID - The id of the user.
                # monitor ID == null for "user kicked-out"
                name - The name of the user.
        <"channel-"+channel_name> - custom channel
# write by each user, user could join to many rooms.
user-metadata\
    <joinAt>
        user/
            ID - The id of the user.
            name - The display name of the user.
        room/
            ID - The id of the room
            name - The display name of the room.
*/
;
;
cr.plugins_.Rex_Firebase_Rooms = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Rooms.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
    var ROOMOPEN = "open";
    var ROOMCLOSED = "closed";
    var LIFE_TEMPORARY = 0;
    var LIFE_PERSISTED = 1;
    var JOINPERMINNSION = [null /*"anyone"*/, "black-list", "white-list"];
    var DOORSTATES = [ROOMCLOSED, ROOMOPEN];
    var LEAVEDELAY = 10;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.LockedByAction = false;
	    this.triggeredRoomName = "";
	    this.triggeredRoomID = "";
	    this.triggeredUserName = "";
	    this.triggeredUserID = "";
        this.exp_CurRoom = null;
        this.exp_CurUser = null;
        this.exp_LoopIndex = 0;
        this.room = new RoomMgrKlass(this);
        this.room.doorAutoControl = (this.properties[2] === 1);
        this.roomsList = new RoomsListKlass(this);
        this.usersList = this.room.usersList;
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	instanceProto.get_room_ref = function(roomID)
	{
        var ref = this.get_ref("rooms");
        if (roomID)
            ref = ref["child"](roomID);
	    return ref;
	};
	instanceProto.get_roomUser_ref = function(roomID, joinAt)
	{
        var ref = this.get_room_ref(roomID)["child"]("users");
        if (joinAt != null)
            ref = ref["child"](joinAt);
	    return ref;
	};
	instanceProto.get_roomAliveFlag_ref = function(roomID)
	{
	    return this.get_room_ref(roomID)["child"]("alive");
	};
	instanceProto.get_roomfilter_ref = function(roomID)
	{
	    var ref = this.get_ref("room-filter");
	    if (roomID != null)
	        ref = ref["child"](roomID);
	    return ref;
	};
	instanceProto.get_roommetadata_ref = function(roomID)
	{
	    var ref = this.get_ref("room-metadata");
	    if (roomID != null)
	        ref = ref["child"](roomID);
	    return ref;
	};
	instanceProto.get_usermetadata_ref = function(userID)
	{
	    return this.get_ref("user-metadata")["child"](userID);
	};
    var getFilter = function(state, type_)
	{
        var val = state+"|"+type_;
	    return val;
	};
    var parseFilter = function(filter)
    {
        var arr = filter.split("|");
        var state = arr[0];
        var type = arr[1];
        return [state, type];
    }
    var get_roomState = function (filter)
    {
        return filter.split("|")[0];
    };
    instanceProto.run_room_trigger = function(trig, roomName, roomID)
	{
        var self=this;
        setTimeout(function()
        {
	        self.triggeredRoomName = roomName;
	        self.triggeredRoomID = roomID;
		    self.runtime.trigger(trig, self);
        }, 0);
	};
    instanceProto.run_userlist_trigger = function(trig, userName, userID)
	{
        var self=this;
        setTimeout(function()
        {
	        self.triggeredUserName = userName;
	        self.triggeredUserID = userID;
		    self.runtime.trigger(trig, self);
        }, 0);
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnCreateRoom = function ()
	{
	    return true;
	};
	Cnds.prototype.OnCreateRoomError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnJoinRoom = function ()
	{
	    return true;
	};
	Cnds.prototype.OnJoinRoomError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnLeftRoom = function ()
	{
	    return true;
	};
	Cnds.prototype.OnKicked = function ()
	{
	    return true;
	};
	Cnds.prototype.OnOpened = function ()
	{
	    return true;
	};
	Cnds.prototype.OnClosed = function ()
	{
	    return true;
	};
	Cnds.prototype.IsInRoom = function ()
	{
	    return this.room.IsInRoom();
	};
	Cnds.prototype.OnUpdateRoomsList = function ()
	{
	    return true;
	};
	Cnds.prototype.ForEachRoom = function (start, end)
	{
		return this.roomsList.ForEachRoom(start, end);
	};
	Cnds.prototype.OnUpdateUsersList = function ()
	{
	    return true;
	};
	Cnds.prototype.ForEachUser = function (start, end)
	{
		return this.usersList.ForEachUser(start, end);
	};
	Cnds.prototype.OnUserJoin = function ()
	{
	    return true;
	};
	Cnds.prototype.OnUserLeft = function ()
	{
	    return true;
	};
	Cnds.prototype.IsFirstUser = function ()
	{
	    return this.usersList.isFirstUser();
	};
	Cnds.prototype.IsFull = function ()
	{
	    return this.usersList.IsFull();
	};
	Cnds.prototype.OnBecomeFirstUser = function ()
	{
	    return true;
	};
	Cnds.prototype.ForEachUserInPermissionList = function (listType)
	{
        var listName = (listType === 1)? "black-list" : "white-list";
        var permissionList = (this.room.metadata)? this.room.metadata[listName] : null;
        if (permissionList == null)
            return false;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var userID, user;
        this.exp_CurUser = {};
        this.exp_LoopIndex = -1;
		for(userID in permissionList)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurUser["ID"] = userID
            this.exp_CurUser["name"] = permissionList[userID];
            this.exp_LoopIndex ++;
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
        this.exp_CurUser = null;
		return false;
	};
	Cnds.prototype.IsLocked = function ()
	{
	    return this.LockedByAction;
	};
	Cnds.prototype.OnGetUsersList = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetUserInfo = function (userID, name)
	{
        if (userID == "")
        {
            console.error("rex_firebase_rooms: UserID should not be empty string.");
            return;
        }
        this.room.SetUser(userID, name);
	};
    Acts.prototype.CreateRoom = function (roomName, roomType, maxPeers, lifePeriod, doorState, roomID, createThenJoin)
	{
        this.LockedByAction = true;
        var self = this;
        var on_end = function ()
        {
            self.LockedByAction = false;
        }
        doorState = DOORSTATES[doorState];
        createThenJoin = (createThenJoin === 1);
        if (createThenJoin)
        {
            var on_create = function (error)
            {
                if ((roomID !== "") && error)
                {
                    self.room.TryJoinRoom(roomID, on_end);
                }
            };
            var on_left = function (error)
            {
                if (error)
                {
                    on_end();
                    return;
                }
                setTimeout(function()
                {
                    self.room.TryCreateRoom(roomName, roomType, maxPeers, lifePeriod, doorState, roomID, createThenJoin, on_create);
                }, LEAVEDELAY);
            }
            if (this.room.IsInRoom())
            {
                this.room.LeaveRoom(on_left);
            }
            else
                this.room.TryCreateRoom(roomName, roomType, maxPeers, lifePeriod, doorState, roomID, createThenJoin, on_create);
        }
        else  // create room only
        {
            this.room.TryCreateRoom(roomName, roomType, maxPeers, lifePeriod, doorState, roomID, createThenJoin, on_end);
        }
	};
    Acts.prototype.SwitchDoor = function (doorState)
	{
        doorState = DOORSTATES[doorState];
        this.room.SwitchDoor(doorState);
	};
    Acts.prototype.JoinRoom = function (roomID, leftThenJoin)
	{
        this.LockedByAction = true;
        var self = this;
        var on_end = function ()
        {
            self.LockedByAction = false;
        };
        var try_join = function (error)
        {
            if (error || (roomID === ""))
            {
                on_end();
                self.run_room_trigger(cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnJoinRoomError, "", "");
                return;
            }
            setTimeout(function()
            {
                self.room.TryJoinRoom(roomID, on_end);
            }, LEAVEDELAY);
        }
        if (leftThenJoin===0)
            try_join();
        else
            this.room.LeaveRoom(try_join);
	};
    Acts.prototype.LeaveRoom = function ()
	{
        this.LockedByAction = true;
        var self = this;
        var on_end = function ()
        {
            self.LockedByAction = false;
        };
        this.room.LeaveRoom(on_end);
	};
    Acts.prototype.KickUser = function (userID)
	{
        this.room.KickUser(userID);
	};
    Acts.prototype.UpdateOpenRoomsList = function (roomType)
	{
        this.roomsList.UpdateOpenRoomsList(roomType);
	};
    Acts.prototype.StopUpdatingOpenRoomsList = function ()
	{
        this.roomsList.StopUpdatingOpenRoomsList();
	};
    Acts.prototype.PermissionListAdd = function (userID, name, listType)
	{
        var listName = (listType === 1)? "black-list" : "white-list";
        this.room.SetPermissionList(listName, userID, name);
	};
    Acts.prototype.PermissionListRemove = function (userID, listType)
	{
        var listName = (listType === 1)? "black-list" : "white-list";
        this.room.SetPermissionList(listName, userID, null);
	};
    Acts.prototype.RequestMetadata = function ()
	{
        this.room.RequestMetadata();
	};
    Acts.prototype.RequestUserMetadata = function (userID)
	{
	};
    Acts.prototype.JoinRandomRoom = function (leftThenJoin, retry)
	{
        var roomID = "";
        this.LockedByAction = true;
        var self = this;
        var on_end = function (failed)
        {
            self.LockedByAction = false;
            if (failed)
            {
                self.run_room_trigger(cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnJoinRoomError, "", "");
            }
            else
            {
                var roomName = self.room.roomName;
                var roomID = self.room.roomID;
                self.run_room_trigger(cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnJoinRoom, roomName, roomID);
            }
        };
        var on_join = function (error)
        {
            if (error)
                main();
            else
                on_end();
        };
        var try_join = function (error)
        {
            if (error || (roomID === ""))
            {
                on_end(true);
                return;
            }
            setTimeout(function()
            {
                self.room.TryJoinRoom(roomID, on_join, true);  // ignore trigger
            }, LEAVEDELAY);
        }
        var main = function ()
        {
            if (retry < 0)
            {
                on_end(true);
                return;
            }
            retry -= 1;
            var rooms = self.roomsList.GetRooms();
            var idx = Math.floor( Math.random() * rooms.length );
            var room = rooms[idx];
            roomID = (room)? room["roomID"]:"";
            if (leftThenJoin===0)
                try_join();
            else
                self.room.LeaveRoom(try_join);
        }
        main();
	};
    Acts.prototype.GetUsersList = function (roomID)
	{
        var on_read = function (snapshot)
        {
            var val = snapshot["val"]();
        }
        var usersList_ref = this.get_roomUser_ref(roomID);
        usersList_ref["once"]("value", on_read);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.UserName = function (ret)
	{
		ret.set_string(this.room.userName);
	};
	Exps.prototype.UserID = function (ret)
	{
		ret.set_string(this.room.userID);
	};
	Exps.prototype.MyUserName = Exps.prototype.UserName;
	Exps.prototype.MyUserID = Exps.prototype.UserID;
	Exps.prototype.RoomName = function (ret)
	{
		ret.set_string(this.room.roomName);
	};
	Exps.prototype.RoomID = function (ret)
	{
		ret.set_string(this.room.roomID);
	};
	Exps.prototype.TriggeredRoomName = function (ret)
	{
		ret.set_string(this.triggeredRoomName);
	};
	Exps.prototype.TriggeredRoomID = function (ret)
	{
		ret.set_string(this.triggeredRoomID);
	};
	Exps.prototype.CurRoomName = function (ret)
	{
        var room = this.exp_CurRoom;
        var name = (room)? room["name"]:"";
		ret.set_string(name);
	};
	Exps.prototype.CurRoomID = function (ret)
	{
        var room = this.exp_CurRoom;
        var ID = (room)? room["roomID"]:"";
		ret.set_string(ID);
	};
	Exps.prototype.CurCreatorName = function (ret)
	{
        var room = this.exp_CurRoom;
        var name;
        if (room)
        {
            var user = room["moderators"];
            for(var ID in user)
            {
                name = user[ID];
                break;
            }
        }
        if (name == null)
            name = "";
		ret.set_string(name);
	};
	Exps.prototype.CurCreatorID = function (ret)
	{
        var room = this.exp_CurRoom;
        var ID;
        if (room)
        {
            var user = room["moderators"];
            for(ID in user)
            {
                break;
            }
        }
        if (ID == null)
            ID = "";
		ret.set_string(ID);
	};
	Exps.prototype.Index2RoomName = function (ret, index)
	{
        var room = this.roomsList.GetRooms()[index];
        var name = (room)? room["name"]:"";
		ret.set_string(name);
	};
	Exps.prototype.Index2RoomID = function (ret, index)
	{
        var room = this.roomsList.GetRooms()[index];
        var ID = (room)? room["roomID"]:"";
		ret.set_string(ID);
	};
	Exps.prototype.RoomsCount = function (ret, index)
	{
		ret.set_int(this.roomsList.GetRooms().length);
	};
	Exps.prototype.CurUserName = function (ret)
	{
        var user = this.exp_CurUser;
        var name = (user)? user["name"]:"";
		ret.set_string(name);
	};
	Exps.prototype.CurUserID = function (ret)
	{
        var user = this.exp_CurUser;
        var ID = (user)? user["ID"]:"";
		ret.set_string(ID);
	};
    Exps.prototype.Index2UserName = function (ret, index)
	{
        var user = this.usersList.usersList.GetItems()[index];
        var name = (user)? user["name"]:"";
		ret.set_string(name);
	};
	Exps.prototype.Index2UserID = function (ret, index)
	{
        var user = this.usersList.usersList.GetItems()[index];
        var ID = (user)? user["ID"]:"";
		ret.set_string(ID);
	};
	Exps.prototype.TriggeredUserName = function (ret)
	{
		ret.set_string(this.triggeredUserName);
	};
	Exps.prototype.TriggeredUserID = function (ret)
	{
		ret.set_string(this.triggeredUserID);
	};
	Exps.prototype.UsersCount = function (ret)
	{
		ret.set_int(this.usersList.usersList.GetItems().length);
	};
	Exps.prototype.CurRoomMaxPeers = function (ret)
	{
        var room = this.exp_CurRoom;
        var maxPeers = (room)? (room["maxPeers"] || 0) : 0;
		ret.set_int(maxPeers);
	};
    Exps.prototype.Index2RoomMaxPeers = function (ret, index)
	{
        var room = this.roomsList.GetRooms()[index];
        var maxPeers = (room)? (room["maxPeers"] || 0) : 0;
		ret.set_int(maxPeers);
	};
	Exps.prototype.WhiteListToJSON = function (ret)
	{
        var permissionList;
        if (this.room.metadata)
            permissionList = this.room.metadata["white-list"];
        if (permissionList == null)
            permissionList = {}
		ret.set_string(JSON.stringify(permissionList));
	};
	Exps.prototype.BlackListToJSON = function (ret)
	{
        var permissionList;
        if (this.room.metadata)
            permissionList = this.room.metadata["black-list"];
        if (permissionList == null)
            permissionList = {}
		ret.set_string(JSON.stringify(permissionList));
	};
	Exps.prototype.ChannelRef = function (ret, name, roomID)
	{
        if (roomID == null)
            roomID = this.room.roomID;
        var path = this.rootpath + "/rooms/" + roomID +"/";
        if (name != null)
            path += "channel-"+name + "/";
	    ret.set_string(path);
	};
	Exps.prototype.LoopIndex = function (ret)
	{
	    ret.set_int(this.exp_LoopIndex);
	};
    var RoomMgrKlass = function (plugin)
    {
        this.plugin = plugin;
        this.doorAutoControl = true;
	    this.isRemoveRoomWhenLeft = false;
        this.manualLeave = false;
        this.userID = "";
        this.userName = "";
        this.roomID = "";
        this.roomName = "";
        this.roomType = "";
        this.maxPeers = 0;
        this.metadata = null;
        this.doorState = null;
        this.isFullSave = false;
        this.is_creater = false;
        this.joinAt = "";
        this.monitor_ref = [];
        this.usersList = new UsersListKlass(this);
    };
    var RoomMgrKlassProto = RoomMgrKlass.prototype;
    RoomMgrKlassProto.SetUser = function (userID, name)
    {
        this.userID = userID;
        this.userName = name;
    };
	RoomMgrKlassProto.IsInRoom = function()
	{
	    return (this.roomID !== "");
	};
    RoomMgrKlassProto.TryCreateRoom = function (roomName, roomType, maxPeers, lifePeriod, doorState, roomID, createThenJoin,
                                                onComplete, ignoreTrigger)
	{
        if (this.IsInRoom())
        {
            if (onComplete)
                onComplete(true);
            return;
        }
        var self = this;
        var on_create_room_complete = function(error, metadata)
        {
            if (error)
            {
                on_create_room_error();
                return;
            }
            if (createThenJoin)
            {
                self.roomID = roomID;
                self.roomName = roomName;
                self.roomType = roomType;
                self.maxPeers = maxPeers;
            }
            if (!ignoreTrigger)
            {
                var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnCreateRoom;
                self.plugin.run_room_trigger(trig, roomName, roomID);
            }
			self.onJoinRoom(roomID, metadata, onComplete, ignoreTrigger);
			if (onComplete)
			    onComplete();
        };
        var on_create_room_error = function()
        {
            if (!ignoreTrigger)
            {
                var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnCreateRoomError;
                self.plugin.run_room_trigger(trig, roomName, roomID);
            }
			if (onComplete)
			    onComplete(true);
        };
        if (roomID == "")
        {
            roomID = get_key( this.plugin.get_room_ref()["push"]() );
            this.createRoom(roomName, roomType, maxPeers, lifePeriod, doorState, roomID, createThenJoin,
                             on_create_room_complete);
        }
        else  // roomID !== ""
        {
            var self=this;
            var on_write_userID = function(current_value)
            {
                if (current_value === null)
                    return true;
                else
                    return;    // Abort the transaction
            };
            var on_write_userID_complete = function(error, committed, snapshot)
            {
                if (error || !committed)
                {
                    on_create_room_error();
                }
                else
                {
                    self.createRoom(roomName, roomType, maxPeers, lifePeriod, doorState, roomID, createThenJoin,
                                     on_create_room_complete);
                }
            };
            var ref = this.plugin.get_roomAliveFlag_ref(roomID);
            ref["transaction"](on_write_userID, on_write_userID_complete);
        }
	};
    RoomMgrKlassProto.SwitchDoor = function (doorState)
	{
        if (!this.IsInRoom())
            return;
        this.SetDoorState(doorState);
	};
    RoomMgrKlassProto.isRoomOpened = function (metadata)
    {
        if (metadata == null)
            return false;
        var state = get_roomState(metadata["filter"]);
        if (state === ROOMCLOSED)
            return false;
        var IamModerators = metadata["moderators"].hasOwnProperty(this.userID);
        if (IamModerators)
            return true;
        var permission = metadata["permission"];
        if (permission === "black-list")
        {
            var blackList = metadata["black-list"];
            if (blackList && blackList.hasOwnProperty(this.userID))
                return false;
            else
                return true;
        }
        else if (permission === "white-list")
        {
            var whiteList = metadata["white-list"];
            if (whiteList && whiteList.hasOwnProperty(this.userID))
                return true;
            else
                return true;
        }
        else    // permission === "anyone"
            return true;
    }
    RoomMgrKlassProto.TryJoinRoom = function (roomID, onComplete, ignoreTrigger)
	{
        if (this.IsInRoom())
        {
            if (onComplete)
                onComplete(true);
            return;
        }
        var self = this;
        var on_join_complete = function(metadata)
        {
            self.onJoinRoom(roomID, metadata, onComplete, ignoreTrigger);
        };
        var on_join_errror = function()
        {
            if (!ignoreTrigger)
            {
                var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnJoinRoomError;
                self.plugin.run_room_trigger(trig, "", roomID);
            }
			if (onComplete)
			    onComplete(true);
        };
        var check_user_count = function (metadata)
        {
            var on_read = function (snapshot)
            {
                var isInList = false;
                snapshot["forEach"](function (childSnapshot)
                {
                    var userID = childSnapshot["val"]()["ID"];
                    isInList = (userID === self.userID);
	                if (isInList)
	                    return true;
                });
                if (isInList)
                {
                    on_join_complete(metadata);
                }
                else
                {
                    self.removeUsersList(roomID, on_join_errror);
                }
            }
            setTimeout(function()
            {
                var usersList_ref = self.plugin.get_roomUser_ref(roomID);
                usersList_ref["limitToFirst"](metadata["maxPeers"])["once"]("value", on_read);
            }, 0);
        };
        var try_join = function (metadata)
        {
            var on_write = function (error)
            {
                if (error)
                {
                    on_join_errror();
                    return;
                }
                if (metadata["maxPeers"])
                    check_user_count(metadata);
                else
                    on_join_complete(metadata);
            }
            self.addUsersList(roomID, on_write);
        };
        var check_door = function ()
        {
	        var on_read = function (snapshot)
	        {
	            var metadata = snapshot["val"]();
                if (!self.isRoomOpened(metadata))
                {
                    on_join_errror();
                    return;
                }
                try_join(metadata);
	        };
            var roommetadata_ref = self.plugin.get_roommetadata_ref(roomID);
            roommetadata_ref["once"]("value", on_read);
        };
        check_door();
        this.pendCommand = "JOIN";
	};
    RoomMgrKlassProto.KickUser = function (userID, onComplete)
	{
        var user = this.usersList.GetUser(userID);
        if (user == null)
        {
            if (onComplete)
                onComplete(true);
            return;
        }
        var user_ref = this.plugin.get_roomUser_ref(this.roomID, user["joinAt"]);
        user_ref["remove"](onComplete);
    };
    RoomMgrKlassProto.LeaveRoom = function (onComplete, ignoreTrigger)
	{
        if (!this.IsInRoom())
        {
            if (onComplete)
                onComplete(true);
            return;
        }
        this.manualLeave = true;
         var self=this;
         var on_left = function(error)
         {
             self.pendCommand = null;
             if (!error)
             {
                 self.isRemoveRoomWhenLeft = false;
                 self.is_creater = false;
             }
             if (onComplete)
                 onComplete(error);
        };
        if (this.isRemoveRoomWhenLeft)
        {
            this.removeRoom(this.roomID, on_left);
        }
        else
        {
            this.removeUsersList(this.roomID, on_left);
        }
	};
    RoomMgrKlassProto.SetPermissionList = function (listName, userID, value)
    {
        if (!this.IsInRoom())
            return;
        var data = {};
        data["permission"] = listName;
        if (userID !== "")
            data[listName + "/" + userID] = value;
        var metadata_ref = this.plugin.get_roommetadata_ref(this.roomID);
        metadata_ref["update"](data);
    };
    RoomMgrKlassProto.RequestMetadata = function ()
    {
        if (!this.IsInRoom())
            return;
        var self=this;
        var on_read = function (snapshot)
        {
            self.metadata = snapshot["val"]();
        }
        var metadata_ref = this.plugin.get_roommetadata_ref(this.roomID);
        metadata_ref["once"]("value", on_read);
    };
	RoomMgrKlassProto.addUsersList = function(roomID, onComplete)
	{
        var usersList_ref = this.plugin.get_roomUser_ref(roomID);
        var user_ref = usersList_ref["push"]();
        user_ref["onDisconnect"]()["remove"]();
        this.joinAt = get_key( user_ref );
        var userData = {
            "ID": this.userID,
            "name": this.userName,
        };
        if (onComplete)
            user_ref["set"](userData, onComplete);
        var data = {};
        data[this.joinAt] = userData;
        return data;
    };
    RoomMgrKlassProto.removeUsersList = function (roomID, onComplete)
	{
	    if (roomID == null)
	        roomID = this.roomID;
        var user_ref = this.plugin.get_roomUser_ref(roomID, this.joinAt);
        var on_remove = function (error)
        {
            if (!error)
            {
                user_ref["onDisconnect"]()["cancel"]();
            }
            if (onComplete)
                onComplete(error);
        }
        user_ref["remove"](on_remove);
	};
	RoomMgrKlassProto.monitorMyStateOn = function ()
	{
	    var self = this;
	    var id_ref = this.plugin.get_roomUser_ref(this.roomID, this.joinAt)["child"]("ID");
	    var on_value_changed = function (snapshot)
	    {
	        var ID = snapshot["val"]();
	        if (ID != null)
	            return;
            self.onLeftRoom();
	    };
	    this.monitor_ref.push(id_ref["toString"]());
	    id_ref["on"]("value", on_value_changed);
        var filter_ref = this.plugin.get_roommetadata_ref(this.roomID)["child"]("filter");
        var on_value_changed = function (snapshot)
        {
            var filter = snapshot["val"]();
            if (filter == null)
                return;
            var state = get_roomState(filter);
            if (self.doorState !== state)
            {
                var cnds = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds;
                var trig = (state === ROOMOPEN)? cnds.OnOpened : cnds.OnClosed;
                self.plugin.run_room_trigger(trig, self.roomName, self.roomID);
                self.doorState = state;
            }
        }
	    this.monitor_ref.push(filter_ref["toString"]());
	    filter_ref["on"]("value", on_value_changed);
	};
	RoomMgrKlassProto.monitorMyStateOff = function ()
	{
	    var i, cnt=this.monitor_ref.length;
	    for (i=0; i<cnt; i++)
	    {
	        this.plugin.get_ref(this.monitor_ref[i])["off"]();
	    }
	};
    RoomMgrKlassProto.createRoom = function (roomName, roomType, maxPeers, lifePeriod, doorState, roomID, createThenJoin,
                                              onComplete_)
	{
        var roomfilter_ref = this.plugin.get_roomfilter_ref(roomID);
        var metadata_ref = this.plugin.get_roommetadata_ref(roomID);
        var room_ref = this.plugin.get_room_ref(roomID);
        this.isRemoveRoomWhenLeft = (lifePeriod === LIFE_TEMPORARY);
        if (this.isRemoveRoomWhenLeft)
        {
            roomfilter_ref["onDisconnect"]()["remove"]();
            room_ref["onDisconnect"]()["remove"]();
            metadata_ref["onDisconnect"]()["remove"]();
        }
        var filter = getFilter(doorState, roomType);
        var roomfilter = {
            "filter": filter,
            "name": roomName,
        }
        var metadata = {
            "name": roomName,
            "filter": filter,
            "moderators":{},
        };
        metadata["moderators"][this.userID] = this.userName;
        if (maxPeers > 0)
            metadata["maxPeers"] = maxPeers;
        var roomdata = {
            "alive": true,
        };
        if (createThenJoin)
        {
            roomdata["users"] = {};
            var userData = this.addUsersList(roomID, false);
            for (var k in userData)
                roomdata["users"][k] = userData[k];
        }
        var data = {};
        data["room-filter/"+roomID] = roomfilter;
        data["room-metadata/"+roomID] = metadata;
        data["rooms/"+roomID] = roomdata;
        var onComplete = function(error)
        {
            if (onComplete_)
                onComplete_(error, metadata);
        }
        var root_ref = this.plugin.get_ref();
        root_ref["update"](data, onComplete);
        this.is_creater = true;
	};
    RoomMgrKlassProto.removeRoom = function (roomID, onComplete)
	{
        var self=this;
        var on_remove = function(error)
        {
            if (!error)
            {
                var roomfilter_ref = self.plugin.get_roomfilter_ref(roomID);
                var metadata_ref = self.plugin.get_roommetadata_ref(roomID);
                var room_ref = self.plugin.get_room_ref(roomID);
                roomfilter_ref["onDisconnect"]()["cancel"]();
                metadata_ref["onDisconnect"]()["cancel"]();
                room_ref["onDisconnect"]()["cancel"]();
                if (roomID === self.roomID)
                {
                    var user_ref = self.plugin.get_roomUser_ref(roomID, self.joinAt);
                    user_ref["onDisconnect"]()["cancel"]();
                    self.joinAt = "";
                }
            }
            if (onComplete)
                onComplete(error);
        };
        var data = {};
        data["room-filter/"+roomID] = null;
        data["room-metadata/"+ roomID] = null;
        data["rooms/"+ roomID] = null;
        var root_ref = this.plugin.get_ref();
        root_ref["update"](data, on_remove);
	};
	RoomMgrKlassProto.onJoinRoom = function (roomID, metadata, onComplete, ignoreTrigger)
	{
        this.metadata = metadata;
        var filterProps = parseFilter(metadata["filter"]);  // state,type
        this.roomID = roomID;
        this.roomName = metadata["name"];
        this.roomType = filterProps[1];
        this.maxPeers = metadata["maxPeers"] || 0;
        this.doorState = null;
	    this.monitorMyStateOn();
        var self=this;
        this.usersList.onInitialize = function ()
        {
            if (!ignoreTrigger)
            {
                var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnJoinRoom;
                self.plugin.run_room_trigger(trig, self.roomName, roomID);
            }
            if (onComplete)
                onComplete();
            self.usersList.onInitialize = null;
        }
	    this.usersList.StartUpdate(roomID, this.maxPeers);
	};
    RoomMgrKlassProto.onLeftRoom = function ()
	{
        var roomID = this.roomID;
        var roomName = this.roomName;
        this.roomID = "";
        this.roomName = "";
        this.doorState = null;
        this.isFullSave = false;
        this.monitorMyStateOff();
	    this.usersList.StopUpdate();
	    this.usersList.Clean();
        var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnLeftRoom;
        this.plugin.run_room_trigger(trig, roomName, roomID);
        if (!this.manualLeave)
        {
            var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnKicked;
            this.plugin.run_room_trigger(trig, roomName, roomID);
        }
        this.manualLeave = false;
	};
    RoomMgrKlassProto.SetDoorState = function (doorState, onComplete)
	{
        var filter = getFilter(doorState, this.roomType);
        var data = {};
        data["room-filter/"+this.roomID+"/filter"] = filter;
        data["room-metadata/"+this.roomID+"/filter"] = filter;
        var root_ref = this.plugin.get_ref();
        root_ref["update"](data, onComplete);
	};
    RoomMgrKlassProto.onUsersListUpdated = function (usersList)
	{
        var self=this;
        setTimeout(function ()
        {
            var nowIsFull = self.usersList.IsFull();
            if (self.doorAutoControl && self.usersList.isFirstUser())
            {
                if (self.isFullSave !== nowIsFull)
                {
                    var doorState = (nowIsFull)? ROOMCLOSED : ROOMOPEN;
                    self.SetDoorState( doorState );
                }
            }
            self.isFullSave = nowIsFull;
        }, 0);
	};
	var clean_table = function (o)
	{
	    var k;
	    for (k in o)
	        delete o[k];
	};
    var RoomsListKlass = function (plugin)
    {
        this.plugin = plugin;
        this.myRoom = plugin.room;
        this.rooms_list = new window.FirebaseItemListKlass();
        this.rooms_list.keyItemID = "roomID";
    };
    var RoomsListKlassProto = RoomsListKlass.prototype;
    RoomsListKlassProto.UpdateOpenRoomsList = function (roomType)
	{
	    var self = this;
        var on_roomList_update = function (room)
        {
            var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnUpdateRoomsList;
            self.plugin.run_room_trigger(trig, room["name"], room["roomID"]);
        };
        this.rooms_list.onItemAdd = on_roomList_update;
        this.rooms_list.onItemRemove = on_roomList_update;
        this.rooms_list.onItemChange = on_roomList_update;
	    var filter_ref = this.plugin.get_roomfilter_ref();
	    var query = filter_ref["orderByChild"]("filter");
        if (roomType != "")
	        query = query["equalTo"](getFilter(ROOMOPEN, roomType));
	    else
            query = query["startAt"](ROOMOPEN)["endAt"](ROOMOPEN+"~");
	    this.rooms_list.StartUpdate(query);
	};
	RoomsListKlassProto.StopUpdatingOpenRoomsList = function()
	{
	    this.rooms_list.StopUpdate();
	};
	RoomsListKlassProto.ForEachRoom = function (start, end)
	{
	    var self = this;
	    var onGetIterItem = function(item, i)
	    {
	        self.plugin.exp_CurRoom = item;
            self.plugin.exp_LoopIndex = i;
	    };
	    this.rooms_list.onGetIterItem = onGetIterItem;
	    this.rooms_list.ForEachItem(this.plugin.runtime, start, end);
        this.plugin.exp_CurRoom = null;
        this.plugin.exp_LoopIndex = 0;
		return false;
	};
	RoomsListKlassProto.GetRooms = function()
	{
	    return this.rooms_list.GetItems();
	};
    var UsersListKlass = function (room)
    {
        this.onInitialize = null;
        this.plugin = room.plugin;
        this.myRoom = room;
        this.usersList = new window.FirebaseItemListKlass();
        this.userID2joinAt = {};
        this.room = room;
        this.roomID = "";
        this.limit = 0;
        this.isFirstUserSave = false;
        this.usersList.keyItemID = "joinAt";
    };
    var UsersListKlassProto = UsersListKlass.prototype;
    UsersListKlassProto.StartUpdate = function (roomID, limit)
	{
        if (limit == null)
            limit = 0;
        this.StopUpdate();
        this.roomID = roomID;
        this.limit = limit;
	    var self = this;
        var on_usersList_update = function (item)
        {
            var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnUpdateUsersList;
            self.plugin.run_userlist_trigger(trig, item["name"], item["ID"]);
            var isFirstUser = self.isFirstUser();
            if (isFirstUser && !self.isFirstUserSave)
            {
                var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnBecomeFirstUser;
                self.plugin.run_userlist_trigger(trig, self.room.userName, self.room.userID);
            }
            self.isFirstUserSave = isFirstUser;
        };
	    var on_user_join = function (item)
	    {
            self.userID2joinAt[ item["ID"] ] = item["joinAt"];
            if (item["ID"] === self.room.userID)
            {
                if (self.onInitialize)
                    self.onInitialize(self.usersList.GetItems());
            }
            var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnUserJoin;
            self.plugin.run_userlist_trigger(trig, item["name"], item["ID"]);
            on_usersList_update(item);
            self.myRoom.onUsersListUpdated(self.usersList.GetItems());
	    };
	    var on_user_left = function (item)
	    {
            if (self.userID2joinAt.hasOwnProperty( item["ID"] ))
                delete self.userID2joinAt[ item["ID"] ];
            var trig = cr.plugins_.Rex_Firebase_Rooms.prototype.cnds.OnUserLeft;
            self.plugin.run_userlist_trigger(trig, item["name"], item["ID"]);
            on_usersList_update(item);
            self.myRoom.onUsersListUpdated(self.usersList.GetItems());
	    };
	    var query = this.plugin.get_roomUser_ref(this.roomID);
	    if (limit > 0)
	        query = query["limitToFirst"](limit);
        this.usersList.onItemAdd = on_user_join;
        this.usersList.onItemRemove = on_user_left;
        this.usersList.onItemChange = on_usersList_update;
	    this.usersList.StartUpdate(query);
	};
	UsersListKlassProto.StopUpdate = function()
	{
	    this.usersList.StopUpdate();
        this.roomID = "";
        this.limit = 0;
	};
	UsersListKlassProto.ForEachUser = function (start, end)
	{
	    var self = this;
	    var onGetIterItem = function(item, i)
	    {
	        self.plugin.exp_CurUser = item;
            self.plugin.exp_LoopIndex = i;
	    };
	    this.usersList.onGetIterItem = onGetIterItem;
	    this.usersList.ForEachItem(this.plugin.runtime, start, end);
        this.plugin.exp_CurUser = null;
        this.plugin.exp_LoopIndex = 0;
		return false;
	};
	UsersListKlassProto.Clean = function ()
	{
	    this.usersList.Clean();
	};
    UsersListKlassProto.IsFull = function ()
    {
        if (this.limit === 0)
            return false;
        return (this.usersList.GetItems().length >= this.limit);
    };
    UsersListKlassProto.isFirstUser = function (userID)
    {
        if (userID == null)
            userID = this.room.userID;
         var user = this.usersList.GetItems()[0];
         if (!user)
             return false;
         return (user["ID"] === userID);
    };
    UsersListKlassProto.GetUser = function (userID)
    {
        if (!this.userID2joinAt.hasOwnProperty(userID))
            return null;
        var joinAt = this.userID2joinAt[userID];
        return this.usersList.GetItemByID(joinAt);
    };
    var UserMetadataKlass = function (room)
    {
        this.room = room;
        this.plugin = room.plugin;
        this.ref = null;
    };
    var UserMetadataKlassProto = UserMetadataKlass.prototype;
    UserMetadataKlassProto.Init = function ()
    {
        if (this.ref)
            this.ref["onDisconnect"]()["cancel"]();
        this.ref = this.plugin.get_usermetadata_ref(this.room.userID);
        this.ref["onDisconnect"]()["remove"]();
        this.Update();
    };
    UserMetadataKlassProto.Update = function ()
    {
	    var metadata = {
	        "name": this.room.userName,
	        "roomID": this.room.roomID,
	        "roomName": this.room.roomName,
	    };
	    this.ref["set"](metadata);
    };
}());
/*
<UserID>
    headers\
	    <slotName>
		    <key> - value
	bodies\
	    <slotName>
		    <key> - value
*/
;
;
cr.plugins_.Rex_Firebase_SaveSlot = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_SaveSlot.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.ownerID = "";
        this.error = null;
		this.save_header = {};
		this.save_body = {};
		this.save_item = {};
		this.load_headers = null;
		this.load_body = null;
        this.exp_LastSlotName = null;
		this.exp_CurSlotName = "";
		this.exp_CurHeader = {};
        this.exp_CurKey = "";
        this.exp_CurValue = 0;
	};
	instanceProto.onDestroy = function ()
	{
		this.save_header = {};
		this.save_body = {};
		this.save_item = {};
		this.load_headers = null;
		this.load_body = null;
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	var is_empty = function (o)
	{
		for (var k in o)
        {
            if (o[k] !== null)
		        return false;
        }
	    return true;
	};
    var get_path = function (slot_name, is_body, key)
    {
        key = key.replace(re_ALLDOT, "/");
        var p = (is_body)? "bodies":"headers";
        p += "/" + slot_name + "/" + key;
        return p;
    };
	instanceProto.updateCacheData = function (slot_name, save_header, save_body)
	{
        if (this.load_headers == null)
            this.load_headers = {};
        if (!this.load_headers.hasOwnProperty(slot_name))
            this.load_headers[slot_name] = {};
        var load_header = this.load_headers[slot_name];
        for(var n in save_header)
        {
            n = setItemValue(n, save_header[n], load_header);
        }
        if (slot_name === this.exp_LastSlotName)
        {
            if (this.load_body == null)
                this.load_body = {};
            for (var n in save_body)
            {
                setItemValue(n, save_body[n], this.load_body);
            }
        }
	};
	var setItemValue = function(keys, value, root)
	{
        if (typeof (keys) === "string")
            keys = keys.split(".");
        var lastKey = keys.pop();
        var entry = getEntry(keys, root);
        entry[lastKey] = value;
	};
	var getEntry = function(keys, root)
	{
        var entry = root;
        if ((keys === "") || (keys.length === 0))
        {
        }
        else
        {
            if (typeof (keys) === "string")
                keys = keys.split(".");
            var i,  cnt=keys.length, key;
            for (i=0; i< cnt; i++)
            {
                key = keys[i];
                if ( (entry[key] == null) || (typeof(entry[key]) !== "object") )
                    entry[key] = {};
                entry = entry[key];
            }
        }
        return entry;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnSave = function ()
	{
	    return true;
	};
	Cnds.prototype.OnSaveError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetAllHeaders = function ()
	{
	    return true;
	};
	Cnds.prototype.ForEachHeader = function (slot_name)
	{
	    if (this.load_headers == null)
		    return false;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var k, o=this.exp_CurHeader;
		for(k in this.load_headers)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurSlotName = k;
            this.exp_CurHeader = this.load_headers[k];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
        this.exp_CurSlotName = "";
        this.exp_CurHeader = o;
		return false;
	};
	Cnds.prototype.OnGetBody = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetUnusedBody = function ()
	{
	    return true;
	};
	Cnds.prototype.AllSlotAreEmpty = function ()
	{
	    if (this.load_headers == null)
	        return true;
	    return is_empty(this.load_headers);
	};
	Cnds.prototype.IsOccupied = function (slot_name)
	{
	    if (this.load_headers == null)
	        return false;
	    return this.load_headers.hasOwnProperty(slot_name);
	};
	Cnds.prototype.ForEachKeyInHeader = function (slot_name)
	{
	    if (!this.load_headers || !this.load_headers[slot_name])
		    return false;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var k, header = this.load_headers[slot_name];
		for(k in header)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurKey = k;
            this.exp_CurValue = header[this.exp_CurKey];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
		return false;
	};
	Cnds.prototype.ForEachKeyInBody = function ()
	{
	    if (!this.load_body)
		    return false;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		for(var k in  this.load_body)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurKey = k;
            this.exp_CurValue = this.load_body[this.exp_CurKey];
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
		return false;
	};
	Cnds.prototype.BodyIsInvalid = function ()
	{
	    return (this.load_body == null);
	};
	Cnds.prototype.OnClean = function ()
	{
	    return true;
	};
	Cnds.prototype.OnCleanError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetAllHeadersError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetBodyError = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetOwner = function (id)
	{
        this.ownerID = id;
        this.exp_LastSlotName = null;
        this.load_body = null;
        this.load_headers = null;
	};
    var re_ALLDOT = new RegExp(/\./, 'g');
    Acts.prototype.SetValue = function (k, v, is_body)
	{
        var table = (is_body==1)? this.save_body:this.save_header;
        k = k.replace(re_ALLDOT, "/");
		table[k] = v;
	};
    Acts.prototype.Save = function (slot_name)
	{
		var self = this;
	    var on_complete = function(error)
	    {
            self.error = error;
			var trig = (!error)? cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnSave:
				                 cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnSaveError;
			self.runtime.trigger(trig, self);
        };
        if (is_empty(this.save_header))
		    this.save_header["is-used"] = true;
        var k;
        for (k in this.save_header)
            this.save_item[ get_path(slot_name, false, k) ] = this.save_header[k];
        for (k in this.save_body)
            this.save_item[ get_path(slot_name, true, k) ] = this.save_body[k];
	    var ref = this.get_ref(this.ownerID);
        ref["update"](this.save_item, on_complete);
        this.updateCacheData(slot_name, this.save_header, this.save_body);
        this.save_header = {};
        this.save_body = {};
        this.save_item = {};
	};
    Acts.prototype.SetBooleanValue = function (k, b, is_body)
	{
        var table = (is_body==1)? this.save_body:this.save_header;
		table[k] = (b==1);
	};
    Acts.prototype.SetJSON = function (k, v, is_body)
	{
        var table = (is_body==1)? this.save_body:this.save_header;
		table[k] = JSON.parse(v);
	};
    Acts.prototype.RemoveKey = function (k, is_body)
	{
        var table = (is_body==1)? this.save_body:this.save_header;
		table[k] = null;
	};
    Acts.prototype.SetBooleanValue = function (k, b, is_body)
	{
        var table = (is_body==1)? this.save_body:this.save_header;
		table[k] = (b==1);
	};
    Acts.prototype.GetAllHeaders = function ()
	{
	    var ref = this.get_ref(this.ownerID)["child"]("headers");
		var self = this;
        var on_read = function (snapshot)
        {
            self.error = null;
            self.load_headers = snapshot.val();
            self.runtime.trigger(cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnGetAllHeaders, self);
        };
        var on_read_failure = function(error)
        {
            self.error = error;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnGetAllHeadersError, self);
        };
		ref["once"]("value", on_read, on_read_failure);
	};
    Acts.prototype.GetSlotBody = function (slot_name)
	{
	    var ref = this.get_ref(this.ownerID)["child"]("bodies")["child"](slot_name);
		var self = this;
        var on_read = function (snapshot)
        {
            self.exp_LastSlotName = slot_name;
            self.load_body = snapshot.val();
            self.error = null;
			var trig = (self.load_body!=null)? cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnGetBody:
				                               cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnGetUnusedBody;
            self.runtime.trigger(trig, self);
        };
        var on_read_failure = function(error)
        {
            self.error = error;
            self.exp_LastSlotName = slot_name;
            self.load_body = null;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnGetBodyError, self);
        };
		ref["once"]("value", on_read, on_read_failure);
	};
    Acts.prototype.CleanSlot = function (slot_name)
	{
		var self = this;
	    var on_complete = function(error)
	    {
            self.error = error;
			var trig = (!error)? cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnClean:
				                 cr.plugins_.Rex_Firebase_SaveSlot.prototype.cnds.OnCleanError;
			self.runtime.trigger(trig, self);
        };
	    var ref = this.get_ref(this.ownerID);
        var save_item = {};
        slot_name = (slot_name)? ("/"+slot_name) : "";
        save_item["headers" + slot_name] = null;
        save_item["bodies" + slot_name] = null;
        ref["update"](save_item, on_complete);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.CurSlotName = function (ret)
	{
		ret.set_string(this.exp_CurSlotName);
	};
	Exps.prototype.CurHeaderValue = function (ret, key, default_value)
	{
		ret.set_any( window.FirebaseGetValueByKeyPath(this.exp_CurHeader, key, default_value) );
	};
	Exps.prototype.BodyValue = function (ret, key, default_value)
	{
		ret.set_any( window.FirebaseGetValueByKeyPath(this.load_body, key, default_value) );
	};
	Exps.prototype.HeadersToJSON = function (ret)
	{
		ret.set_string(JSON.stringify(this.load_headers || {}));
	};
	Exps.prototype.BodyToJSON = function (ret)
	{
		ret.set_string(JSON.stringify(this.load_body || {}));
	};
	Exps.prototype.HeaderValue = function (ret, slot_name, key, default_value)
	{
        var val = this.load_headers;
        if (slot_name)
            val = val[slot_name];
		ret.set_any( window.FirebaseGetValueByKeyPath(val, key, default_value) );
	};
	Exps.prototype.CurHeaderValue = function (ret, key, default_value)
	{
		ret.set_any( window.FirebaseGetValueByKeyPath(this.exp_CurHeader, key, default_value) );
	};
	Exps.prototype.CurKey = function (ret)
	{
		ret.set_any(this.exp_CurKey);
	};
	Exps.prototype.CurValue = function (ret, subKey, default_value)
	{
		ret.set_any( window.FirebaseGetValueByKeyPath(this.exp_CurValue, subKey, default_value) );
	};
	Exps.prototype.LastSlotName = function (ret)
	{
		ret.set_any( this.exp_LastSlotName || "" );
	};
	Exps.prototype.LastErrorCode = function (ret)
	{
        var code;
	    if (this.error)
            code = this.error["code"];
		ret.set_string(code || "");
	};
	Exps.prototype.LastErrorMessage = function (ret)
	{
        var s;
	    if (this.error)
            s = this.error["serverResponse"];
		ret.set_string(s || "");
	};
}());
/*
<receiverID>
    message - message
    senderID - ID of sender, assume that each senders has an unique ID
	senderName - name of sender
	stamp - toggle between true and false
*/
;
;
cr.plugins_.Rex_Firebase_SimpleMessage = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_SimpleMessage.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
    var OFFLMSG_DISCARD = 0;
    var OFFLMSG_PEND = 1;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.userID = "";
        this.userName = "";
        this.lastReceiverID = null;
        var message_type = this.properties[2];
        this.offline_mode = this.properties[3];
        if (!this.recycled)
        {
	        var messageKlass = (this.offline_mode == OFFLMSG_DISCARD)?
	                           window.FirebaseSimpleMessageKlass: window.FirebaseStackMessageKlass;
            this.inBox = this.create_inBox(messageKlass, message_type);
            this.outPort = new messageKlass(message_type);
        }
        this.exp_LastMessage = null;
	};
	instanceProto.onDestroy = function ()
	{
	    this.inBox.StopUpdate();
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    instanceProto.create_inBox = function (messageKlass, message_type)
	{
	    var self = this;
	    var on_received = function(d)
	    {
	        self.exp_LastMessage = d;
            var trig = cr.plugins_.Rex_Firebase_SimpleMessage.prototype.cnds.OnReceivedMessage;
            self.runtime.trigger(trig, self);
	    };
	    var simple_message = new messageKlass(message_type);
	    simple_message.onReceived = on_received;
        return simple_message;
    };
    instanceProto.send_message = function (receiverID, message)
	{
        if ((receiverID == null) || (receiverID == ""))
            return;
	    if (this.lastReceiverID != receiverID)
	    {
            var ref = this.get_ref(receiverID);
	        this.outPort.SetRef(ref);
	    }
	    if (message == null)
	    {
	        this.outPort.Send();
	    }
	    else
	    {
	        this.outPort.Send(message, this.userID, this.userName);
	    }
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnReceivedMessage = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
	    this.inBox.StopUpdate();
	    if (this.offline_mode == OFFLMSG_DISCARD)
	    {
	        this.send_message(this.lastReceiverID, null);
	    }
        this.lastReceiverID = null;  // re-build outPort in next send_message
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
	};
    Acts.prototype.SetUserInfo = function (userID, userName)
	{
        this.userID = userID;
        this.userName = userName;
	};
    Acts.prototype.StartUpdate = function (receiverID)
	{
	    if (receiverID == "")
	        return;
	    var ref = this.get_ref(receiverID);
	    this.inBox.StartUpdate(ref);
	};
    Acts.prototype.StopUpdate = function ()
	{
	    this.inBox.StopUpdate();
	};
    Acts.prototype.SendMessage = function (receiverID, message)
	{
	    if (receiverID == "")
	        return;
        this.send_message(receiverID, message);
        this.lastReceiverID = receiverID;
	};
    Acts.prototype.CleanMessageBox = function (receiverID)
	{
	    if (receiverID == "")
	        return;
        this.send_message(receiverID, null);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.LastSenderID = function (ret)
	{
        var senderID = null;
        if (this.exp_LastMessage != null)
            senderID = this.exp_LastMessage["senderID"];
        if (senderID == null)
            senderID = "";
		ret.set_string(senderID);
	};
	Exps.prototype.LastSenderName = function (ret)
	{
        var senderName = null;
        if (this.exp_LastMessage != null)
            senderName = this.exp_LastMessage["senderName"];
        if (senderName == null)
            senderName = "";
		ret.set_string(senderName);
	};
	Exps.prototype.LastMessage = function (ret)
	{
        var message = null;
        if (this.exp_LastMessage != null)
            message = this.exp_LastMessage["message"];
        if (message == null)
            message = "";
		ret.set_string(message);
	};
}());
(function ()
{
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    if (window.FirebaseStackMessageKlass != null)
        return;
    var MESSAGE_STRING = 0;
    var MESSAGE_JSON = 1;
    var StackMessageKlass = function (messageType)
    {
        this.onReceived = null
        this.messageType = messageType;
        this.ref = null;
        this.on_read = null;
    };
    var StackMessageKlassProto = StackMessageKlass.prototype;
    StackMessageKlassProto.SetRef = function (ref)
    {
        var is_reading = (this.on_read != null);
        this.StopUpdate();
        this.ref = ref;
        if (is_reading)
            this.StartUpdate();
    };
    StackMessageKlassProto.Send = function (message, senderID, senderName)
    {
        if (this.ref == null)
            return;
        if ((message == null) && (senderID == null) && (senderName == null))
        {
            return;
        }
        if (this.messageType == MESSAGE_JSON)
            message = JSON.parse(message);
        var d = {
            "message": message,
            "senderID": senderID,
            "senderName": senderName,
        };
        this.ref["push"](d);
    };
    StackMessageKlassProto.StartUpdate = function (ref)
	{
        this.StopUpdate();
        if (ref != null)
            this.ref = ref;
        var self = this;
	    var on_update = function (snapshot)
	    {
	        var d = snapshot["val"]();
            if (self.skip_first)
            {
                self.skip_first = false;
                return;
            }
            if (d == null)
                return;
            if (self.messageType == MESSAGE_JSON)
                d["message"] = JSON.stringify(d["message"]);
            if (self.onReceived)
                self.onReceived(d);
            get_refPath(snapshot)["remove"]();
        };
        this.ref["limitToFirst"](1)["on"]("child_added", on_update);
        this.on_read = on_update;
    };
    StackMessageKlassProto.StopUpdate = function ()
	{
        if (this.on_read == null)
            return;
        this.ref["off"]("child_added", this.on_read);
        this.on_read = null;
    };
	window.FirebaseStackMessageKlass = StackMessageKlass;
}());
(function ()
{
    if (window.FirebaseSimpleMessageKlass != null)
        return;
    var MESSAGE_STRING = 0;
    var MESSAGE_JSON = 1;
    var SimpleMessageKlass = function (messageType)
    {
        this.onReceived = null
        this.messageType = messageType;
        this.skip_first = true;
        this.stamp = false;
        this.ref = null;
        this.on_read = null;
    };
    var SimpleMessageKlassProto = SimpleMessageKlass.prototype;
    SimpleMessageKlassProto.SetRef = function (ref)
    {
        var is_reading = (this.on_read != null);
        this.StopUpdate();
        this.ref = ref;
        if (is_reading)
            this.StartUpdate();
    };
    SimpleMessageKlassProto.Send = function (message, senderID, senderName)
    {
        if (this.ref == null)
            return;
        if ((message == null) && (senderID == null) && (senderName == null))
        {
            this.ref["remove"]();
            return;
        }
        if (this.messageType == MESSAGE_JSON)
            message = JSON.parse(message);
        var d = {
            "message": message,
            "senderID": senderID,
            "senderName": senderName,
            "stamp" : this.stamp,
        };
        this.skip_first = false;
        this.ref["set"](d);
        this.stamp = !this.stamp;
    };
    SimpleMessageKlassProto.StartUpdate = function (ref)
	{
        this.StopUpdate();
        if (ref != null)
            this.ref = ref;
        this.skip_first = true;      // skip previous message
        var self = this;
	    var on_update = function (snapshot)
	    {
	        var d = snapshot["val"]();
            if (self.skip_first)
            {
                self.skip_first = false;
                return;
            }
            if (d == null)
                return;
            if (self.messageType == MESSAGE_JSON)
                d["message"] = JSON.stringify(d["message"]);
            if (self.onReceived)
                self.onReceived(d);
        };
        this.ref["on"]("value", on_update);
        this.on_read = on_update;
        this.ref["onDisconnect"]()["remove"]();
    };
    SimpleMessageKlassProto.StopUpdate = function ()
	{
        if (this.on_read == null)
            return;
        this.ref["off"]("value", this.on_read);
        this.on_read = null;
        this.ref["remove"]();
        this.ref["onDisconnect"]()["cancel"]();
    };
	window.FirebaseSimpleMessageKlass = SimpleMessageKlass;
}());
;
;
cr.plugins_.Rex_Firebase_SingleLogin = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_SingleLogin.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
	    this.myUserID = null;
        this.myLoginID = null;
        this.loginList = null;
        this.kickMode = this.properties[2];
        this.tryLogin = false;
	    this.exp_CurLoginItem = null;
	    this.exp_CurLoginItemIdx = -1;
	};
	instanceProto.onDestroy = function ()
	{
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_refPath = function (obj)
    {
        return (!isFirebase3x())?  obj["ref"]() : obj["ref"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	instanceProto.create_loginList = function()
	{
	    var loginList = new window.FirebaseItemListKlass();
	    loginList.updateMode = loginList.AUTOALLUPDATE;
        loginList.keyItemID = "loginID";
	    var self = this;
        var snapshot2Item = function (snapshot)
        {
            var item = {};
	        item[loginList.keyItemID] = get_key(snapshot);
            item["timestamp"] = snapshot["val"]();
            return item;
        };
        loginList.snapshot2Item = snapshot2Item;
	    var on_update = function()
	    {
	        var myIndex = loginList.GetItemIndexByID(self.myLoginID);
            if (myIndex != null)
            {
                var loggingOut = false;
                if (self.kickMode === 1)   // Kick previous
                {
                    var lastIndex = loginList.GetItems().length - 1;
                    loggingOut = (myIndex !== lastIndex);
                }
                else if (self.kickMode === 2)   // Kick current
                {
                     loggingOut = (myIndex !== 0);
                }
                if (self.tryLogin)
                {
                    self.tryLogin = false;
                    if (!loggingOut)
                        self.runtime.trigger(cr.plugins_.Rex_Firebase_SingleLogin.prototype.cnds.OnLoginSuccess, self);
                }
                if (loggingOut)
                {
                    self.loggingOut();
                    self.runtime.trigger(cr.plugins_.Rex_Firebase_SingleLogin.prototype.cnds.OnKicked, self);
                }
                self.runtime.trigger(cr.plugins_.Rex_Firebase_SingleLogin.prototype.cnds.OnLoginListChanged, self);
            }
            else    // kicked from other machine
            {
                self.tryLogin = false;
                self.loggingOut();
                self.runtime.trigger(cr.plugins_.Rex_Firebase_SingleLogin.prototype.cnds.OnKicked, self);
                self.runtime.trigger(cr.plugins_.Rex_Firebase_SingleLogin.prototype.cnds.OnLoginListChanged, self);
            }
	    };
	    loginList.onItemsFetch = on_update;
	    var onGetIterItem = function(item, i)
	    {
	        self.exp_CurLoginItem = item;
	        self.exp_CurLoginItemIdx = i;
	    };
	    loginList.onGetIterItem = onGetIterItem;
        return loginList;
    };
    instanceProto.login = function (userID)
	{
        var userRef = this.get_ref(userID);
	    var loginRef = userRef["push"]();
	    var self = this;
	    var on_write = function (error)
	    {
            if (error)
            {
                loginRef["onDisconnect"]()["cancel"]();
	            self.myUserID = null;
                self.myLoginID = null;
                self.runtime.trigger(cr.plugins_.Rex_Firebase_SingleLogin.prototype.cnds.OnLoginError, self);
            }
		    else
            {
                self.tryLogin = true;
	            self.myUserID = userID;
                self.myLoginID = get_key(loginRef);
                if (self.loginList === null)
                    self.loginList = self.create_loginList();
                var query = userRef["orderByKey"]();
                setTimeout(function()
                {
                    self.loginList.StartUpdate(query);
                }, 0);
            }
	    };
        loginRef["onDisconnect"]()["remove"]();
        var ts = serverTimeStamp();
	    loginRef["set"](ts, on_write);
	};
    instanceProto.loggingOut = function ()
	{
	    if (this.myUserID === null)
	        return;
        this.loginList.StopUpdate();
        this.loginList.Clean();
	    var loginRef = this.get_ref(this.myUserID)["child"](this.myLoginID);
	    loginRef["remove"]();
	    loginRef["onDisconnect"]()["cancel"]();
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnLoginSuccess = function ()
	{
	    return true;
	};
	Cnds.prototype.OnLoginError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnKicked = function ()
	{
	    return true;
	};
	Cnds.prototype.OnLoginListChanged = function ()
	{
	    return true;
	};
	Cnds.prototype.ForEachLogin = function ()
	{
        if (this.loginList === null)
            return false;
		return this.loginList.ForEachItem(this.runtime);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
	};
    Acts.prototype.Login = function (userID)
	{
        this.login(userID);
	};
    Acts.prototype.LoggingOut = function ()
	{
	    this.loggingOut();
	};
    Acts.prototype.KickByIndex = function (index)
	{
        if (this.loginList === null)
            return false;
        var item = this.loginList.GetItems()[index];
        if (!item)
            return;
        var loginID = item[this.loginList.keyItemID];
	    var loginRef = this.get_ref(this.myUserID)["child"](loginID);
	    loginRef["remove"]();
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.LoginCount = function (ret)
	{
        var cnt = (this.loginList === null)? 0: this.loginList.GetItems().length;
		ret.set_int(cnt);
	};
	Exps.prototype.CurLoginIndex = function (ret)
	{
		ret.set_int(this.exp_CurLoginItemIdx);
	};
	Exps.prototype.CurLoginTimestamp = function (ret)
	{
	    var ts;
	    if (this.exp_CurLoginItem != null)
	        ts = get_timestamp(this.exp_CurLoginItem["timestamp"]);
	    else
	        ts = 0;
		ret.set_int(ts);
	};
}());
/*
- counter value
*/
;
;
cr.plugins_.Rex_Firebase_Storage = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Storage.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/";
        this.uploadTask = null;
        this.metadata = {};
        this.snapshot = null;
        this.isUploading = false;
        this.error = null;
        this.exp_LastDownloadURL = "";
        this.exp_LastMetadata = null
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.get_storage_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path = this.rootpath + k + "/";
        return window["Firebase"]["storage"]()["ref"](path);
	};
    instanceProto.upload = function(file, path, metadata)
    {
        if (this.uploadTask)
            this.uploadTask["cancel"]();
        var self=this;
        this.isUploading = null;
        this.snapshot = null;
        this.error = null;
        this.exp_LastDownloadURL = "";
        var onComplete = function ()
        {
            self.isUploading = false;
            self.snapshot = self.uploadTask["snapshot"];
            self.exp_LastDownloadURL = self.snapshot["downloadURL"];
            self.exp_LastMetadata = self.snapshot["metadata"];
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnUploadCompleted, self);
        };
        var onError = function (error)
        {
            self.isUploading = false;
            self.error = error;
            switch (error["code"])
            {
            case 'storage/unauthorized':
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnUploadError, self);
                break;
            case 'storage/canceled':
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnUploadCanceled, self);
                break;
            case 'storage/unknown':
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnUploadError, self);
                break;
            default:
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnUploadError, self);
                break;
            }
        };
        var onStateChanged = function (snapshot)
        {
            self.snapshot = self.uploadTask["snapshot"];
            var isRunning = (snapshot["state"] === 'running');
            if (isRunning && (self.isUploading === null))
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnStart, self);
            else if (isRunning && !self.isUploading)
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnResmue, self);
            else if (!isRunning && self.isUploading)
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnPaused, self);
            self.isUploading = isRunning;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnProgress, self);
        };
        this.exp_LastMetadata = metadata;
        this.uploadTask = this.get_storage_ref(path)["put"](file, metadata);
        this.uploadTask["on"]('state_changed', onStateChanged, onError, onComplete);
    };
	instanceProto.doRequest = function ( url_, callback )
	{
	    var oReq;
		if (this.runtime.isWindowsPhone8)
			oReq = new ActiveXObject("Microsoft.XMLHTTP");
		else
			oReq = new XMLHttpRequest();
        oReq.open("GET", url_, true);
        oReq.responseType = "arraybuffer";
        oReq.onload = function (oEvent)
        {
            callback(oReq.response);
        };
        oReq.send(null);
	};
    var parseMetadata = function(metadata, defaultContentType)
    {
        if ((metadata.indexOf("{") !== -1) && (metadata.indexOf("}") !== -1))
        {
            metadata = JSON.parse(metadata);
        }
        else if (metadata !== "")
        {
            metadata = {"contentType":  metadata};
        }
        else
            metadata = {};
        if (!metadata.hasOwnProperty("contentType") && defaultContentType)
            metadata["contentType"] = defaultContentType;
        return metadata;
    };
	var setValue = function(keys, value, root)
	{
        if (typeof (keys) === "string")
            keys = keys.split(".");
        var lastKey = keys.pop();
        var entry = getEntry(keys, root);
        entry[lastKey] = value;
	};
	var getEntry = function(keys, root)
	{
        var entry = root;
        if ((keys === "") || (keys.length === 0))
        {
        }
        else
        {
            if (typeof (keys) === "string")
                keys = keys.split(".");
            var i,  cnt=keys.length, key;
            for (i=0; i< cnt; i++)
            {
                key = keys[i];
                if ( (entry[key] == null) || (typeof(entry[key]) !== "object") )
                    entry[key] = {};
                entry = entry[key];
            }
        }
        return entry;
	};
 	var getItemValue = function (item, k, default_value)
	{
        var v;
	    if (item == null)
            v = null;
        else if ( (k == null) || (k === "") )
            v = item;
        else if ((typeof(k) === "number") || (k.indexOf(".") == -1))
            v = item[k];
        else
        {
            var kList = k.split(".");
            v = item;
            var i,cnt=kList.length;
            for(i=0; i<cnt; i++)
            {
                if (typeof(v) !== "object")
                {
                    v = null;
                    break;
                }
                v = v[kList[i]];
            }
        }
        return din(v, default_value);
	};
    var din = function (d, default_value)
    {
        var o;
	    if (d === true)
	        o = 1;
	    else if (d === false)
	        o = 0;
        else if (d == null)
        {
            if (default_value != null)
                o = default_value;
            else
                o = 0;
        }
        else if (typeof(d) == "object")
            o = JSON.stringify(d);
        else
            o = d;
	    return o;
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnUploadCompleted = function ()
	{
	    return true;
	};
	Cnds.prototype.OnUploadError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnUploadCanceled = function ()
	{
	    return true;
	};
	Cnds.prototype.OnPaused = function ()
	{
	    return true;
	};
	Cnds.prototype.OnResmue = function ()
	{
	    return true;
	};
	Cnds.prototype.IsUploading = function ()
	{
	    return this.isUploading;
	};
	Cnds.prototype.OnProgress = function ()
	{
	    return true;
	};
	Cnds.prototype.OnStart = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetDownloadURL = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetDownloadURLError = function ()
	{
	    return true;
	};
	Cnds.prototype.FileDoesntExist = function ()
	{
        return (this.error && (this.error === 'storage/object_not_found'));
	};
	Cnds.prototype.OnDeleteCompleted = function ()
	{
	    return true;
	};
	Cnds.prototype.OnDeleteError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetMetadata = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetMetadataError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnUpdateMetadata = function ()
	{
	    return true;
	};
	Cnds.prototype.OnUpdateMetadataError = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
     Acts.prototype.SetSubDomainRef = function (ref)
	{
	    this.rootpath = ref + "/";
    };
    Acts.prototype.UploadFromFileChooser = function (fileChooserObjs, storagePath)
	{
        if (!fileChooserObjs)
            return;
        var fc = fileChooserObjs.getFirstPicked();
        if (!fc)
            return;
;
        var files = fc.elem["files"];
        if (!files)
            return;
        var f = files[0];
        if (!f)
            return;
        this.upload(f, storagePath, this.metadata);
        this.metadata = {};
	};
    Acts.prototype.CancelUploading = function ()
	{
        if (!this.uploadTask)
            return;
        this.uploadTask["cancel"]();
	};
    Acts.prototype.PauseUploading = function ()
	{
        if (!this.uploadTask)
            return;
        this.uploadTask["pause"]();
	};
    Acts.prototype.ResumeUploading = function ()
	{
        if (!this.uploadTask)
            return;
        this.uploadTask["resume"]();
	};
    Acts.prototype.UploadFromSprite = function (objType, storagePath)
	{
        if (!objType)
            return;
        var inst = objType.getFirstPicked();
        if (!inst)
            return;
        var canvas;
        if (inst.curFrame)
        {
            canvas = frame_getCanvas.call(inst.curFrame);
        }
        else if (inst.canvas)
        {
            canvas = inst.canvas;
        }
        var self=this;
        var onGetBlob = function (blob)
        {
            self.upload(blob, storagePath, self.metadata);
            self.metadata = {};
        };
        canvas["toBlob"](onGetBlob);
	};
	function frame_getCanvas()
	{
        var tmpcanvas = document.createElement("canvas");
        tmpcanvas.width = this.width;
        tmpcanvas.height = this.height;
        var tmpctx = tmpcanvas.getContext("2d");
        if (this.spritesheeted)
        {
        	tmpctx.drawImage(this.texture_img, this.offx, this.offy, this.width, this.height,
        							 0, 0, this.width, this.height);
        }
        else
        {
        	tmpctx.drawImage(this.texture_img, 0, 0, this.width, this.height);
        }
		return tmpcanvas;
	};
    Acts.prototype.UploadDataURI = function (dataURI, storagePath)
	{
        var obj = dataURItoBlob(dataURI);
        var blob = obj[0];
        var contentType = obj[1];
        if (!this.metadata.hasOwnProperty("contentType"))
            this.metadata["contentType"] = contentType;
        this.upload(blob, storagePath, this.metadata);
        this.metadata = {};
	};
    /*
    The MIT License (MIT)
    Copyright (c) 2016 David Gomez-Urquiza
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    */
    function dataURItoBlob(dataURI) {
        var byteString = atob(dataURI.split(',')[1]);
        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
        var arrayBuffer = new ArrayBuffer(byteString.length);
        var _ia = new Uint8Array(arrayBuffer);
        for (var i = 0; i < byteString.length; i++) {
            _ia[i] = byteString.charCodeAt(i);
        }
        var dataView = new DataView(arrayBuffer);
        var blob = new Blob([dataView], { "type": mimeString });
        return [blob, mimeString];
    };
    Acts.prototype.UploadString = function (s, storagePath)
	{
        var type = "text/plain";
        var blob = new Blob([s], {"type": type});
        if (!this.metadata.hasOwnProperty("contentType"))
            this.metadata["contentType"] = type;
        this.upload(blob, storagePath, this.metadata);
        this.metadata = {};
	};
    Acts.prototype.UploadObjectURL = function (objectURL, contentType, storagePath)
	{
        var self=this;
        var callback = function (blob)
        {
            if (contentType !== "")
                self.metadata["contentType"] = contentType;
            self.upload(blob, storagePath, self.metadata);
            self.metadata = {};
        }
        this.doRequest(objectURL, callback);
	};
    Acts.prototype.GetDownloadURL = function (storagePath)
	{
        var self=this;
        var ref = this.get_storage_ref(storagePath);
        this.error = null;
        this.exp_LastDownloadURL = "";
        var onComplete = function (url)
        {
            self.exp_LastDownloadURL = url;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnGetDownloadURL, self);
        };
        var onError = function (error)
        {
            self.error = error;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnGetDownloadURLError, self);
        }
        ref["getDownloadURL"]()["then"](onComplete)["catch"](onError);
	};
    Acts.prototype.DeleteAtURL = function (storagePath)
	{
        var self=this;
        var ref = this.get_storage_ref(storagePath);
        this.error = null;
        var onComplete = function ()
        {
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnDeleteCompleted, self);
        };
        var onError = function (error)
        {
            self.error = error;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnDeleteError, self);
        }
        ref["delete"]()["then"](onComplete)["catch"](onError);
	};
    Acts.prototype.GetMetadata = function (storagePath)
	{
        var self=this;
        var ref = this.get_storage_ref(storagePath);
        this.error = null;
        this.exp_LastMetadata = null;
        var onComplete = function (metadata)
        {
            self.exp_LastMetadata = metadata;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnGetMetadata, self);
        };
        var onError = function (error)
        {
            self.error = error;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnGetMetadataError, self);
        }
        ref["getMetadata"]()["then"](onComplete)["catch"](onError);
	};
    Acts.prototype.UpdateMetadata = function (storagePath)
	{
        var self=this;
        var ref = this.get_storage_ref(storagePath);
        this.error = null;
        this.exp_LastMetadata = null;
        var onComplete = function (metadata)
        {
            self.exp_LastMetadata = metadata;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnUpdateMetadata, self);
        };
        var onError = function (error)
        {
            self.error = error;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Storage.prototype.cnds.OnUpdateMetadataError, self);
        }
        ref["updateMetadata"](this.metadata)["then"](onComplete)["catch"](onError);
        this.metadata = {};
	};
    Acts.prototype.MetadataSetValue = function (k, v)
	{
        setValue(k, v, this.metadata);
        this.metadata
	};
    Acts.prototype.MetadataLoadJSON = function (s)
	{
        this.metadata = JSON.parse(s);
	};
    Acts.prototype.MetadataRemoveKey = function (k)
	{
        setValue(k, null, this.metadata);
        this.metadata
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.LastDownloadURL = function (ret)
	{
		ret.set_string(this.exp_LastDownloadURL);
	};
	Exps.prototype.Progress = function (ret)
	{
        var p;
	    if (this.snapshot)
            p = this.snapshot["bytesTransferred"] / this.snapshot["totalBytes"];
		ret.set_float(p || 0);
	};
	Exps.prototype.TransferredBytes = function (ret)
	{
        var b;
	    if (this.snapshot)
            b = this.snapshot["bytesTransferred"];
		ret.set_float(b || 0);
	};
	Exps.prototype.TotalBytes = function (ret)
	{
        var b;
	    if (this.snapshot)
            b = this.snapshot["totalBytes"];
		ret.set_float(b || 0);
	};
	Exps.prototype.LastErrorCode = function (ret)
	{
        var code;
	    if (this.error)
            code = this.error["code"];
		ret.set_string(code || "");
	};
	Exps.prototype.LastErrorMessage = function (ret)
	{
        var s;
	    if (this.error)
            s = this.error["serverResponse"];
		ret.set_string(s || "");
	};
	Exps.prototype.LastMetadata = function (ret, k, default_value)
	{
		ret.set_any( getItemValue(this.exp_LastMetadata, k, default_value) );
	};
}());
/*
in\
    <pushAt>
out\
    <pushAt>
*/
;
;
cr.plugins_.Rex_Firebase_SyncQueue = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var input_text = "";
	var pluginProto = cr.plugins_.Rex_Firebase_SyncQueue.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	    jsfile_load("firebase.js");
	};
	var jsfile_load = function(file_name)
	{
	    var scripts=document.getElementsByTagName("script");
	    var exist=false;
	    for(var i=0;i<scripts.length;i++)
	    {
	    	if(scripts[i].src.indexOf(file_name) != -1)
	    	{
	    		exist=true;
	    		break;
	    	}
	    }
	    if(!exist)
	    {
	    	var newScriptTag=document.createElement("script");
	    	newScriptTag.setAttribute("type","text/javascript");
	    	newScriptTag.setAttribute("src", file_name);
	    	document.getElementsByTagName("head")[0].appendChild(newScriptTag);
	    }
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
	    this.tokenCtrl = null;
	    this.has_input_handler = false;
	    this.exp_LastIn = null;
	    this.on_get_indata = null;
	};
	instanceProto.get_ref = function(k)
	{
	    if (k == null)
	        k = "";
	    var path;
	    if (k.substring(0,8) == "https://")
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        return new window["Firebase"](path);
	};
    instanceProto.OnGetToken = function ()
    {
        var self = this;
        var on_get_indata = function(snapshot)
        {
            var d = snapshot["val"]();
            if (d == null)
                return;
            self.OnGetInputData(d);
        };
        this.on_get_indata = on_get_indata;
        this.get_ref("in")["on"]("child_added", on_get_indata);
    };
    instanceProto.OnReleaseToken = function ()
    {
        if (!this.on_get_indata)
            return;
        this.get_ref("in")["off"]("child_added", this.on_get_indata);
        this.on_get_indata = null;
    };
    instanceProto.OnGetInputData = function (d)
    {
        this.exp_LastIn = din(d);
	    this.has_input_handler = false;
	    this.runtime.trigger(cr.plugins_.Rex_Firebase_SyncQueue.prototype.cnds.OnGetInputData, this);
        if (!this.has_input_handler)
        {
            this.get_ref("out")["push"](d);
        }
        var k = snapshot["key"]();
        this.get_ref("in")["child"](k)["remove"]();
    };
    var din = function (d)
    {
        var o;
	    if (d === true)
	        o = 1;
	    else if (d === false)
	        o = 0;
        else if (typeof(d) == "object")
            o = JSON.stringify(d);
        else
            o = d;
	    return o;
    };
    var dout = function (d)
    {
        var o;
        if (typeof(d) == "string")
        {
            try
            {
	            o = JSON.parse(d)
            }
            catch(err)
            {
                o = d;
            }
        }
        else
        {
            o = d;
        }
        return o;
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnGetData = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetInputData = function ()
	{
	    this.has_input_handler = true;
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
     Acts.prototype.SetupToken = function (token_objs)
	{
	    if (this.tokenCtrl)
	    {
	        this.tokenCtrl.Remove(this);
	        this.tokenCtrl = null;
	    }
        var token_inst = token_objs.instances[0];
        if (token_inst.GetTokenCtrl)
        {
            this.tokenCtrl = token_inst.GetTokenCtrl();
            this.tokenCtrl.Add(this);
        }
        else
            alert ("Sync Queue should connect to a token object");
	};
    Acts.prototype.Push2In = function (d)
	{
	    this.get_ref("in")["push"](dout(d));
	};
    Acts.prototype.Push2Out = function (d)
	{
        this.get_ref("out")["push"](dout(d));
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.LastIn = function (ret)
	{
		ret.set_any(this.exp_LastIn);
	};
}());
/*
<ownerID>
    <timerName>
        start - timestamp of start
        current - timestamp of current
        time-out - interval of time-out
*/
;
;
cr.plugins_.Rex_Firebase_Timer = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Timer.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
	    this.exp_LastOwnerID = "";
	    this.exp_LastTimerName = "";
        this.exp_LastTimer = null;
	};
	instanceProto.onDestroy = function ()
	{
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        if (!obj)
            return null;
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
    var newTimerDate = function (interval)
    {
        var t = {"start": serverTimeStamp(),
		             "current": serverTimeStamp(),
                    "time-out": interval};
        return t;
    }
    instanceProto.start_timer = function(ref, interval, handler)
    {
		ref["set"](newTimerDate(interval), handler);
    };
    var get_deltaTime = function (timer)
    {
        var t;
        if (timer)
            t = get_timestamp(timer["current"]) - get_timestamp(timer["start"]);
        else
            t = 0;
        return t;
    }
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnStartTimerComplete = function ()
	{
	    return true;
	};
	Cnds.prototype.OnStartTimerError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetTimerComplete = function ()
	{
	    return true;
	};
	Cnds.prototype.OnGetTimerError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnRemoveTimerComplete = function ()
	{
	    return true;
	};
	Cnds.prototype.OnRemoveTimerError = function ()
	{
	    return true;
	};
	Cnds.prototype.IsTimeOut = function ()
	{
        if (!this.exp_LastTimer)
            return false;
        var t = get_deltaTime(this.exp_LastTimer);
	    return (t/1000) > this.exp_LastTimer["time-out"];
	};
	Cnds.prototype.IsValid = function ()
	{
        return (this.exp_LastTimer != null);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
	};
    Acts.prototype.StartTimer = function (ownerID, timer_name, interval)
	{
	    var ref = this.get_ref()["child"](ownerID)["child"](timer_name);
	    var self = this;
	    var on_read = function (snapshot)
	    {
	        self.exp_LastOwnerID = ownerID;
	        self.exp_LastTimerName = timer_name;
            self.exp_LastTimer = snapshot["val"]();
	        self.runtime.trigger(cr.plugins_.Rex_Firebase_Timer.prototype.cnds.OnStartTimerComplete, self);
	    };
	    var read_timer = function()
	    {
	        ref["once"]("value", on_read);
	    };
	    var onComplete = function(error)
	    {
            if (error)
                self.runtime.trigger(cr.plugins_.Rex_Firebase_Timer.prototype.cnds.OnStartTimerError, self);
            else
                read_timer();
        };
        this.start_timer(ref, interval, onComplete);
	};
    Acts.prototype.GetTimer = function (ownerID, timer_name, interval)
	{
        var startIfNotExists = (interval != null);
        var isNewTimer = false;
	    var ref = this.get_ref()["child"](ownerID)["child"](timer_name);
	    var self = this;
	    var on_read = function (snapshot)
	    {
	        self.exp_LastOwnerID = ownerID;
	        self.exp_LastTimerName = timer_name;
            self.exp_LastTimer = snapshot["val"]();
            if (isNewTimer)
	            self.runtime.trigger(cr.plugins_.Rex_Firebase_Timer.prototype.cnds.OnStartTimerComplete, self);
	        self.runtime.trigger(cr.plugins_.Rex_Firebase_Timer.prototype.cnds.OnGetTimerComplete, self);
	    };
	    var read_timer = function()
	    {
	        ref["once"]("value", on_read);
	    };
	    var on_update = function(error)
	    {
	        if (error)
	        {
	            self.exp_LastOwnerID = ownerID;
	            self.exp_LastTimerName = timer_name;
	            self.runtime.trigger(cr.plugins_.Rex_Firebase_Timer.prototype.cnds.OnGetTimerError, self);
	            return;
	        }
	        read_timer();
        };
        var update_timer = function()
        {
		    var t = {"current": serverTimeStamp()};
		    ref["update"](t, on_update);
        };
        var start_timer = function()
        {
            isNewTimer = true;
            self.start_timer(ref, interval, on_update);
        };
	    var on_exist_check = function (snapshot)
	    {
	        if (snapshot["val"]())
	            update_timer();
	        else if (startIfNotExists)
	            start_timer();
            else
                on_read(snapshot);
	    };
        ref["once"]("value", on_exist_check);
	};
    Acts.prototype.RemoveTimer = function (ownerID, timer_name)
	{
	    var ref = this.get_ref()["child"](ownerID)["child"](timer_name);
	    var self = this;
	    var onComplete = function(error)
	    {
	        self.exp_LastOwnerID = ownerID;
	        self.exp_LastTimerName = timer_name;
	        var trig = (error)? cr.plugins_.Rex_Firebase_Timer.prototype.cnds.OnRemoveTimerError:
	                            cr.plugins_.Rex_Firebase_Timer.prototype.cnds.OnRemoveTimerComplete;
	        self.runtime.trigger(trig, self);
        };
		ref["remove"](onComplete)
	};
    Acts.prototype.StartTimerWhenDisconnect = function (ownerID, timer_name, interval)
	{
	    var ref = this.get_ref()["child"](ownerID)["child"](timer_name);
        ref["onDisconnect"]()["set"](newTimerDate(interval));
	};
    Acts.prototype.DeleteTimerWhenDisconnect = function (ownerID, timer_name, interval)
	{
	    var ref = this.get_ref()["child"](ownerID)["child"](timer_name);
        ref["onDisconnect"]()["remove"]();
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.LastUserID = function (ret)
	{
		ret.set_string(this.exp_LastOwnerID);
	};
	Exps.prototype.LastTimerName = function (ret)
	{
		ret.set_string(this.exp_LastTimerName);
	};
	Exps.prototype.LastStartTimestamp = function (ret)
	{
        var t;
        if (this.exp_LastTimer)
            t = get_timestamp(this.exp_LastTimer["start"]);
		ret.set_float(t || 0);
	};
	Exps.prototype.LastCurrentTimestamp = function (ret)
	{
        var t;
        if (this.exp_LastTimer)
            t = get_timestamp(this.exp_LastTimer["current"]);
		ret.set_float(t || 0);
	};
	Exps.prototype.LastElapsedTime = function (ret)
	{
        var t;
        if (this.exp_LastTimer)
            t = get_deltaTime(this.exp_LastTimer)/1000;
		ret.set_float(t || 0);
	};
	Exps.prototype.LastTimeoutInterval = function (ret)
	{
        var t;
        if (this.exp_LastTimer)
            t = this.exp_LastTimer["time-out"];
		ret.set_float(t || 0);
	};
	Exps.prototype.LastRemainInterval = function (ret)
	{
        var t;
        if (this.exp_LastTimer)
            t = this.exp_LastTimer["time-out"] - get_deltaTime(this.exp_LastTimer)/1000;
		ret.set_float(t || 0);
	};
	Exps.prototype.LastOwnerID = function (ret)
	{
		ret.set_string(this.exp_LastOwnerID);
	};
}());
/*
<ID> - UserID
Push UserID into a list
*/
;
;
cr.plugins_.Rex_Firebase_Token = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_Token.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
		this.token = new cr.plugins_.Rex_Firebase_Token.TokenKlass(this);
		var self = this;
        var on_tokenOwner_changed = function ()
        {
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Token.prototype.cnds.OnTokenOwnerChanged, self);
        };
        var on_get_token = function ()
        {
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Token.prototype.cnds.OnGetToken, self);
        };
        var on_release_token = function ()
        {
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Token.prototype.cnds.OnReleaseToken, self);
        };
        this.token.OnTokenOwnerChanged = on_tokenOwner_changed;
        this.token.OnGetToken = on_get_token;
        this.token.OnReleaseToken = on_release_token;
        if (window.SuspendMgr == null)
        {
            window.SuspendMgr = new window.SuspendMgrKlass(this.runtime);
        }
        window.SuspendMgr.push(this);
	};
	instanceProto.onDestroy = function ()
	{
        window.SuspendMgr.remove(this);
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
    instanceProto.JoinGroup = function (UserID)
	{
	    this.token.JoinGroup(UserID);
	};
    instanceProto.LeaveGroup = function ()
	{
	    this.token.LeaveGroup();
	};
    instanceProto.OnSuspend = instanceProto.LeaveGroup;
    instanceProto.OnResume = instanceProto.JoinGroup;
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnGetToken = function ()
	{
	    return true;
	};
	Cnds.prototype.OnTokenOwnerChanged = function ()
	{
	    return true;
	};
	Cnds.prototype.IsOwner = function ()
	{
	    return (this.token.IsInGroup() && this.token.IsOwner());
	};
	Cnds.prototype.OnReleaseToken = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetDomainRef = function (domain_ref, sub_domain_ref)
	{
	    this.LeaveGroup();
		this.rootpath = domain_ref + "/" + sub_domain_ref + "/";
	};
    Acts.prototype.JoinGroup = function (UserID)
	{
	    this.JoinGroup(UserID);
	};
    Acts.prototype.LeaveGroup = function ()
	{
	    this.LeaveGroup();
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.OwnerID = function (ret)
	{
		ret.set_string(this.token.ownerID);
	};
}());
(function ()
{
    if (window.SuspendMgrKlass != null)
        return;
    var SuspendMgrKlass = function(runtime)
    {
        this.objects = [];
        this.addSuspendCallback(runtime);
    };
    var SuspendMgrKlassProto = SuspendMgrKlass.prototype;
	SuspendMgrKlassProto.addSuspendCallback = function(runtime)
	{
        if (cr.plugins_.Rex_Waker)
            return;
        var self = this;
        var on_suspended = function (s)
        {
            var i, cnt=self.objects.length, inst;
			if (s)
			{
			    for (i=0; i<cnt; i++)
			    {
			        inst = self.objects[i];
			        if (inst.OnSuspend)
			            inst.OnSuspend();
			    }
			}
			else
			{
			    for (i=0; i<cnt; i++)
			    {
			        inst = self.objects[i];
			        if (inst.OnResume)
			            inst.OnResume();
			    }
			}
        }
		runtime.addSuspendCallback(on_suspended);
	};
	SuspendMgrKlassProto.push = function(inst)
	{
        this.objects.push(inst);
	};
	SuspendMgrKlassProto.remove = function(inst)
	{
	    cr.arrayFindRemove(this.objects, inst);
	};
	window.SuspendMgrKlass = SuspendMgrKlass;
}());
(function ()
{
    cr.plugins_.Rex_Firebase_Token.TokenKlass = function(plugin)
    {
        this.OnTokenOwnerChanged = null;
        this.OnGetToken = null;
        this.OnReleaseToken = null;
        this.plugin = plugin;
		this.myID = "";
        this.ownerID = "";
        this.my_ref = null;
        this.on_owner_changed = null;
    };
    var TokenKlassProto = cr.plugins_.Rex_Firebase_Token.TokenKlass.prototype;
	TokenKlassProto.IsInGroup = function()
	{
	    return (this.my_ref != null);
	};
	TokenKlassProto.IsOwner = function()
	{
	    return (this.myID == this.ownerID);
	};
	TokenKlassProto.ListenOwner = function()
	{
	    if (this.on_owner_changed)
	        return;
	    var candidates_ref = this.plugin.get_ref();
	    var self = this;
	    var on_owner_changed = function(snapshot)
	    {
	        self.ownerID = snapshot["val"]();
	        if (self.OnTokenOwnerChanged)
	            self.OnTokenOwnerChanged();
	        if (self.IsOwner() && self.OnGetToken)
	            self.OnGetToken();
	        if (!self.IsOwner() && self.OnReleaseToken)
	            self.OnReleaseToken();
	    };
	    candidates_ref["limitToFirst"](1)["on"]("child_added", on_owner_changed);
	    this.on_owner_changed = on_owner_changed;
	};
    TokenKlassProto.JoinGroup = function (UserID)
	{
	    if (this.IsInGroup())
	        this.LeaveGroup();
	    if (UserID != null)
	        this.myID = UserID;
	    if (this.myID === "")
	        return;
	    var self = this;
	    var on_complete = function (error)
	    {
	        if (error)
	            return;
	        self.ListenOwner();
	    };
	    var candidates_ref = this.plugin.get_ref();
        this.my_ref = candidates_ref["push"]();
        this.my_ref["onDisconnect"]()["remove"]();
        this.my_ref["set"](this.myID, on_complete);
	};
    TokenKlassProto.LeaveGroup = function ()
	{
	    if (!this.IsInGroup())
	        return;
        var candidates_ref = this.plugin.get_ref();
	    candidates_ref["off"]("child_added", this.on_owner_changed);
	    this.my_ref["remove"]();
	    this.my_ref["onDisconnect"]()["cancel"]();
	    this.my_ref = null;
	    this.on_owner_changed = null;
	};
}());
/*
<ID> - UserID
*/
;
;
cr.plugins_.Rex_Firebase_UserID2ID = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_UserID2ID.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.exp_ID = "";
        this.exp_UserID = "";
        this.error = null;
	};
	var isFirebase3x = function()
	{
        return (window["FirebaseV3x"] === true);
    };
    var isFullPath = function (p)
    {
        return (p.substring(0,8) === "https://");
    };
	instanceProto.get_ref = function(k)
	{
        if (k == null)
	        k = "";
	    var path;
	    if (isFullPath(k))
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        if (!isFirebase3x())
        {
            return new window["Firebase"](path);
        }
        else
        {
            var fnName = (isFullPath(path))? "refFromURL":"ref";
            return window["Firebase"]["database"]()[fnName](path);
        }
	};
    var get_key = function (obj)
    {
        return (!isFirebase3x())?  obj["key"]() : obj["key"];
    };
    var get_root = function (obj)
    {
        return (!isFirebase3x())?  obj["root"]() : obj["root"];
    };
    var serverTimeStamp = function ()
    {
        if (!isFirebase3x())
            return window["Firebase"]["ServerValue"]["TIMESTAMP"];
        else
            return window["Firebase"]["database"]["ServerValue"];
    };
    var get_timestamp = function (obj)
    {
        return (!isFirebase3x())?  obj : obj["TIMESTAMP"];
    };
	instanceProto.get_ID_ref = function(ID)
	{
        return this.get_ref()["child"](ID);
	};
	instanceProto.try_getID = function(UserID, ID, on_failed)
	{
	    var ID_ref = this.get_ID_ref(ID);
	    var self = this;
        var on_write = function(current_value)
        {
            if (current_value === null)  //this ID has not been occupied
                return UserID;
            else
                return;    // Abort the transaction
        };
        var on_complete = function(error, committed, snapshot)
        {
            if (error || !committed)
            {
                if (on_failed)
                    on_failed(error);
            }
            else
            {
                self.on_getID_successful(UserID, ID);
            };
        };
        ID_ref["transaction"](on_write, on_complete);
	};
    instanceProto.on_getID_successful = function (UserID_, ID_)
    {
        this.exp_UserID = UserID_;
        this.exp_ID = ID_;
        this.runtime.trigger(cr.plugins_.Rex_Firebase_UserID2ID.prototype.cnds.OnRequestIDSuccessful, this);
    };
    instanceProto.on_getID_failed = function (UserID_)
    {
        this.exp_UserID = UserID_;
        this.exp_ID = "";
        this.runtime.trigger(cr.plugins_.Rex_Firebase_UserID2ID.prototype.cnds.OnRequestIDError, this);
    };
    instanceProto.on_getUserID_successful = function (UserID_, ID_)
    {
        this.exp_UserID = UserID_;
        this.exp_ID = ID_;
        this.runtime.trigger(cr.plugins_.Rex_Firebase_UserID2ID.prototype.cnds.OnRequestUserIDSuccessful, this);
    };
    instanceProto.on_getUserID_failed = function (ID_)
    {
        this.exp_UserID = "";
        this.exp_ID = ID_;
        this.runtime.trigger(cr.plugins_.Rex_Firebase_UserID2ID.prototype.cnds.OnRequestUserIDError, this);
    };
	var generate_ID = function(digits)
	{
        var ID = Math.floor(Math.random()*Math.pow(10, digits)).toString();
        var i, zeroes = digits - ID.length;
		for (i=0; i<zeroes; i++)
			ID += "0";
        return ID;
	};
	var _get_key = function (obj_)
	{
	    if (typeof(obj_) !== "object")
	        return null;
	    for (var k in obj_)
	        return k;
        return null;
	};
	var _get_value = function (obj_)
	{
	    if (typeof(obj_) !== "object")
	        return null;
	    for (var k in obj_)
	        return obj_[k];
        return null;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnRequestIDSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.OnRequestIDError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnRequestUserIDSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.OnRequestUserIDError = function ()
	{
	    return true;
	};
	Cnds.prototype.OnRemoveUserIDSuccessful = function ()
	{
	    return true;
	};
	Cnds.prototype.OnRemoveUserIDError = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.RequestGetRandomID = function (UserID, digits, retry)
	{
        if (UserID === "")
            return;
        var self = this;
        var retry_cnt = retry;
        var try_get_id = function()
        {
            if (retry_cnt == 0)
            {
                self.error = null;
                self.on_getID_failed(UserID);
            }
            else
            {
                retry_cnt -= 1;
                var newID = generate_ID(digits);
                self.try_getID(UserID, newID, try_get_id);
            }
        };
        var on_read = function(snapshot)
        {
            var result = snapshot["val"]();    // { ID:UserID }
            if (result == null)
            {
                try_get_id();
            }
            else
            {
                var return_ID = _get_key(result);
                self.on_getID_successful(UserID, return_ID);
            }
        };
        var on_read_failure = function(error)
        {
            self.error = error;
            self.on_getID_failed(UserID);
        };
        var query = this.get_ref()["orderByValue"]()["equalTo"](UserID)["limitToFirst"](1);
        query["once"]("value", on_read, on_read_failure);
	};
    Acts.prototype.RequestGetUserID = function (ID)
	{
        if (ID === "")
            return;
        var self = this;
        var on_read = function(snapshot)
        {
            var return_UserID = snapshot["val"]();
            self.error = null;
            if (return_UserID == null)
                self.on_getUserID_failed(ID);
            else
                self.on_getUserID_successful(return_UserID, ID);
        };
        var on_read_failure = function(error)
        {
            self.error = error;
            self.on_getUserID_failed(ID);
        };
        var ID_ref = this.get_ID_ref(ID);
        ID_ref["once"]("value", on_read, on_read_failure);
	};
    Acts.prototype.RequestTryGetID = function (UserID, ID)
	{
	    if ((UserID === "") || (ID === ""))
	        return;
	    var GETCMD = (ID == null);
        var self = this;
        var on_read = function(snapshot)
        {
            var result = snapshot["val"]();    // { ID:UserID }
            var return_ID = _get_key(result);
            self.error = null;
            if (GETCMD)  // get existed ID
            {
                if (return_ID == null)
                    self.on_getID_failed(UserID);
                else
                    self.on_getID_successful(UserID, return_ID);
            }
            else
            {
                if (return_ID == null)  // try set new ID
                    self.try_getID(UserID, ID, on_getID_failed);
                else                     // ID is existed
                {
                    if (return_ID != ID)
                        self.on_getID_failed(UserID);
                    else
                        self.on_getID_successful(UserID, ID);
                }
            }
        };
        var on_getID_failed = function ()
        {
            self.on_getID_failed(UserID);
        };
        var on_read_failure = function(error)
        {
            self.error = error;
            self.on_getID_failed(UserID);
        };
        var query = this.get_ref()["orderByValue"]()["equalTo"](UserID)["limitToFirst"](1);
        query["once"]("value", on_read, on_read_failure);
	};
    Acts.prototype.RemoveUserID = function (UserID)
	{
	    if (UserID === "")
	        return;
        var self = this;
	    var onComplete = function(error)
	    {
            self.exp_UserID = UserID;
            self.error = error;
            if (error)
                self.runtime.trigger(cr.plugins_.Rex_Firebase_UserID2ID.prototype.cnds.OnRemoveUserIDError, self);
            else
                self.runtime.trigger(cr.plugins_.Rex_Firebase_UserID2ID.prototype.cnds.OnRemoveUserIDSuccessful, self);
        };
        var on_read = function(snapshot)
        {
            var result = snapshot["val"]();    // { ID:UserID }
            var return_ID = _get_key(result);
            if (return_ID == null)
            {
                onComplete();
            }
            else
            {
                var ref = self.get_ID_ref(return_ID);
                ref["set"](null, onComplete);
            }
        };
        var on_read_failure = function(error)
        {
            onComplete(error);
        };
        var query = this.get_ref()["orderByValue"]()["equalTo"](UserID)["limitToFirst"](1);
        query["once"]("value", on_read);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.ID = function (ret)
	{
		ret.set_string(this.exp_ID);
	};
	Exps.prototype.UserID = function (ret)
	{
		ret.set_string(this.exp_UserID);
	};
	Exps.prototype.LastErrorCode = function (ret)
	{
        var code;
	    if (this.error)
            code = this.error["code"];
		ret.set_string(code || "");
	};
	Exps.prototype.LastErrorMessage = function (ret)
	{
        var s;
	    if (this.error)
            s = this.error["serverResponse"];
		ret.set_string(s || "");
	};
}());
/*
<user-id>/
    lists/
        <list-name>/
            <member-user-id>
    invite/
        <inviter-id>
            inviter-id
            inviter-list
            my-list
            message
*/
;
;
cr.plugins_.Rex_Firebase_Userlist = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var input_text = "";
	var pluginProto = cr.plugins_.Rex_Firebase_Userlist.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	    jsfile_load("firebase.js");
	};
	var jsfile_load = function(file_name)
	{
	    var scripts=document.getElementsByTagName("script");
	    var exist=false;
	    for(var i=0;i<scripts.length;i++)
	    {
	    	if(scripts[i].src.indexOf(file_name) != -1)
	    	{
	    		exist=true;
	    		break;
	    	}
	    }
	    if(!exist)
	    {
	    	var newScriptTag=document.createElement("script");
	    	newScriptTag.setAttribute("type","text/javascript");
	    	newScriptTag.setAttribute("src", file_name);
	    	document.getElementsByTagName("head")[0].appendChild(newScriptTag);
	    }
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/";
        this.owner_userID = "";
        this.userLists = {};
        this.exp_CurUserID = "";
        this.CurUserInfo = null;
        this.inviter_lists = null;
        this.listener_refs = [];
	};
	instanceProto.get_ref = function(k)
	{
	    if (k == null)
	        k = "";
	    var path;
	    if (k.substring(0,8) == "https://")
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        return new window["Firebase"](path);
	};
	instanceProto.get_list_ref = function(userId, list_name)
	{
        return this.get_ref(userId + "/lists/" + list_name);
	};
	instanceProto.get_inviter_list_ref = function(userId)
	{
        return this.get_ref(userId)["child"]("invite");
	};
	instanceProto.get_cancel_notify_ref = function(userId)
	{
        return this.get_ref(userId)["child"]("cancel");
	};
    instanceProto.userList_addUser = function (owner_id, list_name, target_id)
	{
        var list_ref = this.get_list_ref(owner_id, list_name);
        list_ref["child"](target_id)["set"](true);
	};
    instanceProto.userList_removeUser = function (owner_id, list_name, target_id)
	{
        var list_ref = this.get_list_ref(owner_id, list_name);
        list_ref["child"](target_id)["remove"]();
	};
    instanceProto.setup_owner_listener = function ()
	{
        this.setup_cancel_listener();
	};
    instanceProto.close_owner_listener = function ()
	{
        var i, cnt=this.listener_refs.length;
        for (i=0; i<cnt; i++)
            this.listener_refs[i]["off"]();
	};
    instanceProto.setup_cancel_listener = function ()
	{
        var remove_notify_ref = this.get_cancel_notify_ref(this.owner_userID);
        var self = this;
        var on_cancel = function (snapshot)
        {
            var info = snapshot["val"]();
            if (info === null)
                return;
            var user_ref = self.get_list_ref(self.owner_userID, info["my-list"])["child"](info["cancel-id"]);
            user_ref["remove"]();
            remove_notify_ref["child"](info["cancel-id"])["remove"]();
        };
        remove_notify_ref["on"]("child_added", on_cancel);
        this.listener_refs.push(remove_notify_ref);
	};
    var clean_table = function (o)
	{
        var k;
        for (k in o)
            delete o[k];
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnReceivingAllLists = function ()
	{
	    return true;
	};
	Cnds.prototype.ForEachUserIDInList = function (list_name)
	{
	    if (!this.userLists.hasOwnProperty(list_name))
	        return false;
        var user_list = this.userLists[list_name];
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var k;
		for (k in user_list)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurUserID = k;
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
	    return false;
	};
	Cnds.prototype.UserIDInList = function (id, list_name)
	{
	    if (!this.userLists.hasOwnProperty(list_name))
	        return false;
	    return this.userLists[list_name].hasOwnProperty(id);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetOwner = function (id)
	{
        this.close_owner_listener();
        this.owner_userID = id;
        clean_table(this.userLists);
        this.setup_owner_listener();
	};
    Acts.prototype.RequestAllLists = function ()
	{
        if (this.owner_userID==="")
            return;
        var user_ref = this.get_ref(this.owner_userID);
        var self = this;
        var on_read = function (snapshot)
        {
            var l = snapshot["val"]();
            if (l === null)
                clean_table(self.userLists);
            else
                self.userLists = l;
            self.runtime.trigger(cr.plugins_.Rex_Firebase_Userlist.prototype.cnds.OnReceivingAllLists, self);
        };
        user_ref["once"]("value", on_read);
	};
    Acts.prototype.AddUserIn2Sides = function (target_id, owner_list, target_list)
	{
        if (this.owner_userID==="")
            return;
        this.userList_addUser(this.owner_userID, owner_list, target_id);
        this.userList_addUser(target_id, target_list, this.owner_userID);
	};
    Acts.prototype.RemoveUserFrom2Sides = function  (target_id, owner_list, target_list)
	{
        if (this.owner_userID==="")
            return;
        this.userList_removeUser(this.owner_userID, owner_list, target_id);
        this.userList_removeUser(target_id, target_list, this.owner_userID);
	};
    Acts.prototype.AddUser = function (target_id, list_name)
	{
        if (this.owner_userID==="")
            return;
        this.userList_addUser(this.owner_userID, list_name, target_id);
	};
    Acts.prototype.RemoveUser = function (target_id, list_name)
	{
        if (this.owner_userID==="")
            return;
        this.userList_removeUser(this.owner_userID, list_name, target_id);
	};
    Acts.prototype.InviteUser = function (target_id, owner_list, target_list, msg)
	{
        if (this.owner_userID==="")
            return;
        var inviter_ref = this.get_inviter_list_ref(target_id)["child"](this.owner_userID);
        var invite_info = {"inviter-id":this.owner_userID,
                           "inviter-list":owner_list,
                           "my-list": target_list,
                           "message":msg,
                          };
        inviter_ref["set"](invite_info);
	};
    Acts.prototype.ResponseInvitation = function (inviter_id, is_accept)
	{
        if (this.owner_userID==="")
            return;
        var inviter_ref = this.get_inviter_list_ref(this.owner_userID)["child"](inviter_id);
        var self = this;
        var on_read = function (snapshot)
        {
            var invite_info = snapshot["val"]();
            if (invite_info === null)
                return;
            if (is_accept == 1)
            {
                self.userList_addUser(self.owner_userID, invite_info["my-list"], invite_info["inviter-id"]);
                self.userList_addUser(invite_info["inviter-id"], invite_info["inviter-list"], self.owner_userID);
            }
            inviter_ref["remove"]();
        };
        inviter_ref["once"]("value", on_read);
	};
    Acts.prototype.CancelInvitation = function (target_id)
	{
        if (this.owner_userID==="")
            return;
        var inviter_ref = this.get_inviter_list_ref(target_id)["child"](this.owner_userID);
        inviter_ref["remove"]();
	};
    Acts.prototype.RemoveMembership = function (target_id, owner_list, target_list)
	{
        if (this.owner_userID==="")
            return;
        this.userList_removeUser(this.owner_userID, owner_list, target_id);
        var remove_notify_ref = this.get_cancel_notify_ref(target_id)["child"](this.owner_userID);
        var cancel_info = {"cancel-id":this.owner_userID,
                           "my-list": target_list
                          };
        remove_notify_ref["set"](cancel_info);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.OwnerUserID = function (ret)
	{
		ret.set_string(this.owner_userID);
	};
	Exps.prototype.CurUserID = function (ret)
	{
		ret.set_string(this.exp_CurUserID);
	};
}());
/*
headers\
    <messageID>
        senderID - userID of sender
        senderName - name of sender
        receiverID - userID of receiver
        title - title (header) of message
        sentAt - timestamp
bodies\
    <messageID> - content (body) of message, string or json object in string
*/
;
;
cr.plugins_.Rex_Firebase_message = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Firebase_message.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	    jsfile_load("firebase.js");
	};
	var jsfile_load = function(file_name)
	{
	    var scripts=document.getElementsByTagName("script");
	    var exist=false;
	    for(var i=0;i<scripts.length;i++)
	    {
	    	if(scripts[i].src.indexOf(file_name) != -1)
	    	{
	    		exist=true;
	    		break;
	    	}
	    }
	    if(!exist)
	    {
	    	var newScriptTag=document.createElement("script");
	    	newScriptTag.setAttribute("type","text/javascript");
	    	newScriptTag.setAttribute("src", file_name);
	    	document.getElementsByTagName("head")[0].appendChild(newScriptTag);
	    }
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
    var MESSAGE_STRING = 0;
    var MESSAGE_JSON = 1;
	instanceProto.onCreate = function()
	{
	    this.rootpath = this.properties[0] + "/" + this.properties[1] + "/";
        this.message_type = this.properties[2];
        this.userID = "";
        this.userName = "";
        this.inBox = this.create_messageBox();
        this.newMsgRecv = this.create_newMessageReceived();
        this.exp_LastMessage = null;
        this.exp_CurMsg = null;
        this.exp_CurMsgIndex = -1;
	};
	instanceProto.create_messageBox = function()
	{
	    var inBox = new window.FirebaseItemListKlass();
	    inBox.updateMode = inBox.AUTOCHILDUPDATE;
	    inBox.keyItemID = "messageID";
	    var self = this;
	    var on_update = function()
	    {
	        self.runtime.trigger(cr.plugins_.Rex_Firebase_message.prototype.cnds.OnUpdate, self);
	    };
        inBox.onItemAdd = on_update;
        inBox.onItemRemove = on_update;
        inBox.onItemChange = on_update;
	    var onGetIterItem = function(item, i)
	    {
	        self.exp_CurMsg = item;
	        self.exp_CurMsgIndex = i;
	    };
	    inBox.onGetIterItem = onGetIterItem;
        return inBox;
    };
	instanceProto.create_newMessageReceived = function()
	{
	    var newMsgRecv = new window.FirebaseItemListKlass();
	    newMsgRecv.updateMode = newMsgRecv.AUTOCHILDUPDATE;
	    newMsgRecv.keyItemID = "messageID";
        newMsgRecv.extra.startAt = "";
	    var self = this;
	    var on_add = function(item)
	    {
            if (item["messageID"] < newMsgRecv.extra.startAt)
                return;
	        self.exp_LastMessage = item;
	        self.runtime.trigger(cr.plugins_.Rex_Firebase_message.prototype.cnds.OnNewMessage, self);
	    };
        newMsgRecv.onItemAdd = on_add;
        return newMsgRecv;
    };
	instanceProto.get_ref = function(k)
	{
	    if (k == null)
	        k = "";
	    var path;
	    if (k.substring(0,8) == "https://")
	        path = k;
	    else
	        path = this.rootpath + k + "/";
        return new window["Firebase"](path);
	};
	instanceProto.get_inbox_ref = function(userID)
	{
        if (userID == null)
            userID = this.userID;
        var ref = this.get_ref();
	    return ref["orderByChild"]("receiverID")["equalTo"](userID);
	};
	instanceProto.get_sent_ref = function(userID)
	{
        if (userID == null)
            userID = this.userID;
        var ref = this.get_ref();
	    return ref["orderByChild"]("senderID")["equalTo"](userID);
	};
    instanceProto.start_update = function ()
	{
	    var query = this.get_inbox_ref(this.userID);
	    this.inBox.StartUpdate(query);
        this.newMsgRecv.extra.startAt = this.get_ref()["push"]()["key"]();
	    var query = this.get_inbox_ref(this.userID)["limitToLast"](1);
	    this.newMsgRecv.StartUpdate(query);
	};
    instanceProto.stop_update = function ()
	{
	    this.inBox.StopUpdate();
	    this.newMsgRecv.StopUpdate();
	};
    instanceProto.send = function (receiverID, title_, content_)
	{
	    var header = {
            "senderID": this.userID,
            "senderName": this.userName,
            "receiverID": receiverID,
            "title" : title_,
            "sentAt": window["Firebase"]["ServerValue"]["TIMESTAMP"]
	    };
        var ref = this.get_ref("headers")["push"](header);
        var messageID = ref["key"]();
        if (this.messageType == MESSAGE_JSON)
            content_ = JSON.parse(content_);
        this.get_ref("bodies")["child"](messageID)["set"](content_);
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnNewMessage = function ()
	{
	    return true;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetUserInfo = function (userID, userName)
	{
        this.userID = userID;
        this.userName = userName;
	};
    Acts.prototype.StartUpdate = function ()
	{
	    this.start_update();
	};
    Acts.prototype.StopUpdate = function ()
	{
	    this.stop_update();
	};
    Acts.prototype.Send = function (receiverID, title_, content_)
	{
	    this.send(receiverID, title_, content_);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.LastSenderID = function (ret)
	{
        var senderID = null;
        if (this.exp_LastMessage != null)
            senderID = this.exp_LastMessage["senderID"];
        if (senderID == null)
            senderID = "";
		ret.set_string(senderID);
	};
	Exps.prototype.LastSenderName = function (ret)
	{
        var senderName = null;
        if (this.exp_LastMessage != null)
            senderName = this.exp_LastMessage["senderName"];
        if (senderName == null)
            senderName = "";
		ret.set_string(senderName);
	};
	Exps.prototype.LastTitle = function (ret)
	{
        var title_ = null;
        if (this.exp_LastMessage != null)
            title_ = this.exp_LastMessage["title"];
        if (title_ == null)
            title_ = "";
		ret.set_string(title_);
	};
	Exps.prototype.LastContent = function (ret)
	{
        var content_ = null;
        if (this.exp_LastMessage != null)
            content_ = this.exp_LastMessage["content"];
        if (content_ == null)
            content_ = "";
		ret.set_string(content_);
	};
	Exps.prototype.LastMessageID = function (ret)
	{
        var messageID = null;
        if (this.exp_LastMessage != null)
            messageID = this.exp_LastMessage["messageID"];
        if (messageID == null)
            messageID = "";
		ret.set_string(messageID);
	};
}());
;
;
cr.plugins_.Rex_LayerObj = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_LayerObj.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.visible = (this.properties[0] === 1);
	    this._width_init = this.width;
	    this._height_init = this.height;
	    this.runtime.tick2Me(this);
	};
	instanceProto.tick2 = function()
	{
        var layer = this.layer;
	    var wscale = this.width/this._width_init;
	    var hscale = this.height/this._height_init;
	    var scale = Math.min(wscale, hscale);
        if (layer.scale != scale)
        {
            layer.scale = scale;
            this.runtime.redraw = true;
        }
	    if (layer.angle != this.angle)
        {
	        layer.angle = this.angle;
	        this.runtime.redraw = true;
        }
	    var opacity_ = cr.clamp(this.opacity, 0, 1);
        if (layer.opacity != opacity_)
        {
	        layer.opacity = opacity_;
	        this.runtime.redraw = true;
        }
	    if (layer.visible != this.visible)
        {
	        layer.visible = this.visible;
	        this.runtime.redraw = true;
        }
	};
	instanceProto.draw = function(ctx)
	{
	};
	instanceProto.drawGL = function(glw)
	{
	};
	instanceProto.saveToJSON = function ()
	{
		return { "wi": this._width_init,
                 "hi": this._height_init
	            };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this._width_init = o["wi"];
        this._height_init = o["hi"];
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	function Exps() {};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Rex_Layouter = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Layouter.prototype;
	pluginProto.onCreate = function ()
	{
		pluginProto.acts.Destroy = function ()
		{
			this.runtime.DestroyInstance(this);
            this._destory_all_insts();
		};
	};
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.check_name = "LAYOUTER";
        this._uids = {};
        this.sprites = [];    // uid
        this._removed_uids = [];
        this.pin_status = {};
        this.pin_mode = this.properties[0];
        this._opactiy_save = this.opacity;
	    this._visible_save = this.visible;
        this.handlers = [];
        this._insts = [];    // temp list
        this.layout_inst_params = null;
        this.has_event_call = false;
        this._get_layouter_handler();
        this.runtime.tick2Me(this);
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto._update_opacity = function ()
	{
        if (this._opactiy_save == this.opacity)
            return;
        var i, cnt=this.sprites.length, inst;
	    this.opacity = cr.clamp(this.opacity, 0, 1);
	    for (i=0; i<cnt; i++)
	    {
	        inst = this._uid2inst(this.sprites[i]);
            if (inst == null)
                continue;
	        inst.opacity = this.opacity;
	    }
	    this.runtime.redraw = true;
	    this._opactiy_save = this.opacity;
	};
	instanceProto._update_visible = function ()
	{
        if (this._visible_save == this.visible)
            return;
        var i, cnt=this.sprites.length, inst;
	    for (i=0; i<cnt; i++)
	    {
	        inst = this._uid2inst(this.sprites[i]);
            if (inst == null)
                continue;
	        inst.visible = this.visible;
	    }
	    this.runtime.redraw = true;
	    this._visible_save = this.visible;
	};
	instanceProto._update_position_angle = function ()
	{
	    if (this.pin_mode == 0)
	        return;
	    var uid, status, pin_inst, a, new_x, new_y, new_angle;
	    for (uid in this.pin_status)
	    {
            pin_inst = this._uid2inst(uid);
            if (pin_inst == null)
                continue;
            status = this.pin_status[uid];
            if ((this.pin_mode == 1) || (this.pin_mode == 2))
			{
			    a = this.angle + status["da"];
                new_x = this.x + (status["dd"]*Math.cos(a));
                new_y = this.y + (status["dd"]*Math.sin(a));
			}
            if ((this.pin_mode == 1) || (this.pin_mode == 3))
			{
			    new_angle = status["rda"] + this.angle;
			}
            if (((new_x != null) && (new_y != null)) &&
			    ((new_x != pin_inst.x) || (new_y != pin_inst.y)))
            {
			    pin_inst.x = new_x;
			    pin_inst.y = new_y;
			    pin_inst.set_bbox_changed();
            }
			if ((new_angle != null) && (new_angle != pin_inst.angle))
			{
			    pin_inst.angle = new_angle;
			    pin_inst.set_bbox_changed();
			}
	    }
	};
	instanceProto.tick2 = function ()
	{
	    var i, cnt=this.sprites.length, inst;
	    if (cnt == 0)
	        return;
	    this._update_opacity();
	    this._update_visible();
        this._update_position_angle();
	};
	instanceProto.draw = function(ctx)
	{
	};
	instanceProto.drawGL = function(glw)
	{
	};
	instanceProto.add_insts = function (insts, skip_layout)
	{
        var inst, i, cnt=insts.length;
		var is_world = insts[0].type.plugin.is_world;
        for (i=0; i<cnt; i++)
        {
            inst = insts[i];
            if (this._uids[inst.uid])  // is inside container
                continue;
            this._uids[inst.uid] = true;
            inst.extra["rex_glayouter_uid"] = this.uid;
            if (is_world)
                this.sprites.push(inst.uid);
        }
        if (!skip_layout)
            this._do_layout(insts, true);
        if (is_world && (this.pin_mode != 0))
        {
            for (i=0; i<cnt; i++)
                this.pin_inst(insts[i]);
        }
	};
	instanceProto.pin_inst = function (inst)
	{
        if (this.pin_status[inst.uid] == null)
            this.pin_status[inst.uid] = {};
        var pin_data = this.pin_status[inst.uid];
        pin_data["da"] = cr.angleTo(this.x, this.y, inst.x, inst.y) - this.angle;
        pin_data["dd"] = cr.distanceTo(this.x, this.y, inst.x, inst.y);
        pin_data["rda"] = inst.angle - this.angle;
	};
	instanceProto.create_inst = function (objtype, x, y, _layer, callback)
	{
        if (objtype == null)
            return;
        var layer = (_layer == null)? this.layer : _layer;
        var inst = window.RexC2CreateObject.call(this, objtype, layer, x, y, callback);
        return inst;
	};
    instanceProto._remove_uid = function (uid)
	{
        if (uid in this._uids)
            delete this._uids[uid];
        else
            return;
        if (uid in this.pin_inst)
            delete this.pin_inst[uid];
        cr.arrayFindRemove(this.sprites, uid);
	};
	instanceProto.remove_uids = function (insts)
	{
        var i, cnt=insts.length;
        for (i=0; i<cnt; i++)
        {
            this._remove_uid(insts[i].uid);
        }
	};
	instanceProto.destroy_insts = function (insts)
	{
        var i, cnt=insts.length, inst;
        this._insts.length = 0;
        for (i=0; i<cnt; i++)
        {
            inst = insts[i];
            if (!(inst.uid in this._uids))
                continue;
            this._insts.push(inst);
            Object.getPrototypeOf(inst.type.plugin).acts.Destroy.call(inst);
            this._remove_uid(inst.uid);
        }
        this._do_layout(this._insts, false);
        this._insts.length = 0;
	};
    instanceProto._uid2inst = function(uid, objtype)
    {
	    if (uid == null)
		    return null;
        var inst = this.runtime.getObjectByUID(uid);
        if (inst == null)
        {
            this._remove_uid(uid);
			return null;
        }
        if ((objtype == null) || (inst.type == objtype))
            return inst;
        else if (objtype.is_family)
        {
            var families = inst.type.families;
            var cnt=families.length, i;
            for (i=0; i<cnt; i++)
            {
                if (objtype == families[i])
                    return inst;
            }
        }
        return null;
    };
    instanceProto._pick_insts = function (objtype)
	{
        var sol = objtype.getCurrentSol();
        sol.select_all = false;
        sol.instances.length = 0;   // clear contents
        var uid, inst;
        for (uid in this._uids)
        {
            inst = this._uid2inst(uid, objtype)
            if (inst != null)
                sol.instances.push(inst);
        }
        return  (sol.instances.length >0);
	};
    var name2type = {};  // private global object
	instanceProto._pick_all_insts = function ()
	{
	    var uid, inst, objtype, sol;
	    var uids = this._uids;
	    hash_clean(name2type);
	    var has_inst = false;
	    for (uid in uids)
	    {
	        inst = this._uid2inst(uid);
            if (inst == null)
                continue;
	        objtype = inst.type;
	        sol = objtype.getCurrentSol();
	        if (!(objtype.name in name2type))
	        {
	            sol.select_all = false;
	            sol.instances.length = 0;
	            name2type[objtype.name] = objtype;
	        }
	        sol.instances.push(inst);
	        has_inst = true;
	    }
	    var name;
	    for (name in name2type)
	        name2type[name].applySolToContainer();
	    hash_clean(name2type);
	    return has_inst;
	};
	instanceProto._destory_all_insts = function ()
	{
        var uid, inst;
        for (uid in this._uids)
        {
            inst = this.runtime.getObjectByUID(uid);
            if (inst != null)
            {
                Object.getPrototypeOf(inst.type.plugin).acts.Destroy.call(inst);
            }
        }
	};
	instanceProto._remove_invalid_insts = function ()
	{
        var uid, inst;
        this._removed_uids.length = 0;
        for (uid in this._uids)
        {
            inst = this.runtime.getObjectByUID(uid);
            if (inst == null)
                this._removed_uids.push(parseInt(uid));
        }
        var i, cnt=this._removed_uids.length;
        for(i=0; i<cnt; i++)
            this._remove_uid(this._removed_uids[i]);
	};
	instanceProto._get_layouter_handler = function ()
	{
        var behavior_insts = this.behavior_insts;
        var cnt=behavior_insts.length;
        var i,behavior_inst;
        for (i=0;i<cnt;i++)
        {
            behavior_inst = behavior_insts[i];
            if (behavior_inst.check_name == "LAYOUTER")
                this.handlers.push(behavior_inst);
        }
	};
	instanceProto._do_layout = function (insts, is_add_mode)
	{
	    if (this.sprites.length == 0)
	        return;
        var j, handler_cnt = this.handlers.length, cb;
        for (j=0;j<handler_cnt;j++)
        {
            cb = (is_add_mode)? this.handlers[j].on_add_insts:
                                this.handlers[j].on_remove_insts;
            if (cb != null)
                cb.call(this.handlers[j], insts);
        }
	};
	instanceProto.layout_inst = function (uid, params)
	{
	    var inst;
	    if (typeof(uid) == "number")
            inst = this.runtime.getObjectByUID(uid);
        else
            inst = uid;
	    params.inst = inst;
	    this.layout_inst_params = params;
	    this.has_event_call = false;
	    this.runtime.trigger(cr.plugins_.Rex_Layouter.prototype.cnds.OnLayoutInst, this);
	    if (!this.has_event_call)
	    {
	        if (params.x != null)
	            inst.x = params.x;
	        if (params.y != null)
	            inst.y = params.y;
	        if (params.angle != null)
	            inst.angle = params.angle;
	        if (params.width != null)
	            inst.width = params.width;
	        if (params.height != null)
	            inst.height = params.height;
	        if (params.opacity != null)
	            inst.opacity = params.opacity;
	        if (params.visible != null)
	            inst.visible = params.visible;
	        inst.set_bbox_changed();
	    }
	    this.pin_inst(inst);
	    this.layout_inst_params = null;
	};
	instanceProto.get_centerX = function (inst)
	{
        if (inst == null)
            inst = this;
	    inst.update_bbox();
	    var bbox = inst.bbox;
	    return (bbox.right+bbox.left)/2;
	};
	instanceProto.get_centerY = function (inst)
	{
        if (inst == null)
            inst = this;
	    inst.update_bbox();
	    var bbox = inst.bbox;
	    return (bbox.top+bbox.bottom)/2;
	};
	var hash_clean = function (obj)
	{
	    var k;
	    for (k in obj)
	        delete obj[k];
	};
	var is_hash_empty = function (obj)
	{
	    var k;
	    for (k in obj)
        {
            return false;
        }
        return true;
	};
	instanceProto.saveToJSON = function ()
	{
		return { "uids": this._uids,
                 "s": this.sprites,
                 "ps": this.pin_status,
                };
	};
	instanceProto.loadFromJSON = function (o)
	{
        this._uids = o["uids"];
        this.sprites = o["s"];
        this.pin_status = o["ps"];
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnLayoutInst = function ()
	{
	    this.has_event_call = true;
		return true;
	};
	Cnds.prototype.PickInsts = function (objtype)
	{
		if (!objtype)
			return;
        this._remove_invalid_insts();
		return this._pick_insts(objtype);
	};
	Cnds.prototype.PickLayouter =function (objtype)
	{
		if (!objtype)
			return;
    	var insts = objtype.getCurrentSol().getObjects();
    	var cnt = insts.length;
        if (cnt == 0)
            return false;
        var container_type = this.runtime.getCurrentCondition().type;
        var container_sol = container_type.getCurrentSol();
        container_sol.select_all = false;
        container_sol.instances.length = 0;
        var i, container_uid, container_inst;
        var uids = {};
        for (i=0; i<cnt; i++)
        {
            container_uid = insts[i].extra["rex_glayouter_uid"];
            if (container_uid in uids)
                continue;
            container_inst = this.runtime.getObjectByUID(container_uid);
            if (container_inst == null)
                continue;
            container_sol.instances.push(container_inst);
            uids[container_uid] = true;
        }
        var current_event = this.runtime.getCurrentEventStack().current_event;
        this.runtime.pushCopySol(current_event.solModifiers);
        current_event.retrigger();
        this.runtime.popSol(current_event.solModifiers);
		return false;
	};
	Cnds.prototype.PickAllInsts = function ()
	{
        this._remove_invalid_insts();
	    return this._pick_all_insts();
	};
	function Acts() {};
	pluginProto.acts = new Acts();
	Acts.prototype.AddInsts = function (objtype)
	{
        if (!objtype)
            return;
        this._remove_invalid_insts();
        var insts = objtype.getCurrentSol().getObjects();
        if (insts.length==0)
            return;
	    this.add_insts(insts);
	};
    Acts.prototype.PickInsts = function (objtype)
	{
        if (!objtype)
            return;
        this._remove_invalid_insts();
	    this._pick_insts(objtype);
	};
	Acts.prototype.PickAllInsts = function ()
	{
        this._remove_invalid_insts();
	    this._pick_all_insts();
	};
	Acts.prototype.CreateInsts = function (objtype,x,y,_layer)
	{
        if (!objtype)
            return;
        var inst = this.create_inst(objtype,x,y,_layer);
        if (inst==null)
            return;
        this._remove_invalid_insts();
        this._insts.length = 0;
        this._insts.push(inst);
	    this.add_insts(this._insts);
        this._insts.length = 0;
	};
	Acts.prototype.RemoveInsts = function (objtype)
	{
        if (!objtype)
            return;
        this._remove_invalid_insts();
        var insts = objtype.getCurrentSol().getObjects();
        if (insts.length==0)
            return;
	    this.remove_uids(insts);
	};
	Acts.prototype.ForceLayout = function ()
	{
        this._remove_invalid_insts();
        this._do_layout([], true);
	};
	Acts.prototype.RemoveAllInsts = function ()
	{
	    var uid;
	    for(uid in this._uids)
	    {
	         delete this._uids[uid];
	         if (uid in this.pin_inst)
	              delete this.pin_inst[uid];
	    }
	    this.sprites.length = 0;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.InstUID = function (ret)
	{
		ret.set_int(this.layout_inst_params.inst.uid);
	};
	Exps.prototype.InstX = function (ret)
	{
	    var val=this.layout_inst_params.x;
	    if (val == null)
	        val = this.layout_inst_params.inst.x;
		ret.set_float(val);
	};
	Exps.prototype.InstY = function (ret)
	{
	    var val=this.layout_inst_params.y;
	    if (val == null)
	        val = this.layout_inst_params.inst.y;
		ret.set_float(val);
	};
	Exps.prototype.InstAngle = function (ret)
	{
	    var val = this.layout_inst_params.angle;
	    if (val == null)
	        val = this.layout_inst_params.inst.angle;
	    else
		    val = cr.to_degrees(val);
		ret.set_float(val);
	};
	Exps.prototype.InstWidth = function (ret)
	{
	    var val=this.layout_inst_params.width;
	    if (val == null)
	        val = this.layout_inst_params.inst.width;
		ret.set_float(val);
	};
	Exps.prototype.InstHeight = function (ret)
	{
	    var val=this.layout_inst_params.height;
	    if (val == null)
	        val = this.layout_inst_params.inst.height;
		ret.set_float(val);
	};
	Exps.prototype.InstOpacity = function (ret)
	{
	    var val=this.layout_inst_params.opacity;
	    if (val == null)
	        val = this.layout_inst_params.inst.opacity;
		ret.set_float(val);
	};
	Exps.prototype.InstVisible = function (ret)
	{
	    var val=this.layout_inst_params.visible;
	    if (val == null)
	        val = this.layout_inst_params.inst.visible;
		ret.set_int(val);
	};
	Exps.prototype.SpritesCnt = function (ret)
	{
		ret.set_int(this.sprites.length);
	};
}());
(function ()
{
    if (window.RexC2CreateObject != null)
        return;
    var CreateObject = function (obj, layer, x, y, callback, ignore_picking)
    {
        if (!layer || !obj)
            return;
        var inst = this.runtime.createInstance(obj, layer, x, y);
		if (!inst)
			return;
		this.runtime.isInOnDestroy++;
		if (callback)
		    callback(inst);
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
        if (ignore_picking !== true)
        {
            var sol = obj.getCurrentSol();
            sol.select_all = false;
		    sol.instances.length = 1;
		    sol.instances[0] = inst;
		    if (inst.is_contained)
		    {
			    for (i = 0, len = inst.siblings.length; i < len; i++)
			    {
				    s = inst.siblings[i];
				    sol = s.type.getCurrentSol();
				    sol.select_all = false;
				    sol.instances.length = 1;
				    sol.instances[0] = s;
			    }
		    }
        }
		return inst;
    };
    window.RexC2CreateObject = CreateObject;
}());
;
;
cr.plugins_.Rex_ListCtrl = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_ListCtrl.prototype;
	pluginProto.onCreate = function ()
	{
		pluginProto.acts.Destroy = function ()
		{
			this.runtime.DestroyInstance(this);
            this.set_lines_count(0);
		};
	};
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.lines_mgr = new cr.plugins_.Rex_ListCtrl.LinesMgrKlass(this);
	    this.is_vertical_scrolling = (this.properties[4] === 1);
	    this.is_clamp_OY = (this.properties[3] === 1);
	    this.lines_mgr.SetDefaultLineHeight(this.properties[1]);
	    this.update_flag = true;
	    this.OY = 0;
	    this.lines_mgr.SetLinesCount(this.properties[2]);
        this.visibleLineIndexes = {};
        this.pre_visibleLineIndexes = {};
        this.visible_start = 0;
        this.visible_end = 0;
        this.pre_instX = this.x;
        this.pre_instY = this.y;
        this.pre_instHeight = this.get_inst_height();
        this.is_out_top_bound = false;
        this.is_out_bottom_bound = false;
        this.bound_type = null;
        this.exp_LineIndex = 0;
        this.exp_LineTLX = 0;
        this.exp_LineTLY = 0;
        this.exp_LastRemovedLines = "";
        this.exp_LastBoundOY = 0;
        this.runtime.tick2Me(this);
        this.lines_mgr_save = null;
	};
	instanceProto.draw = function(ctx)
	{
	};
	instanceProto.drawGL = function(glw)
	{
	};
    instanceProto.tick2 = function()
    {
        var cur_instHeight = this.get_inst_height();
        var is_heightChanged = (this.pre_instHeight !== cur_instHeight);
        var is_XChanged = (this.pre_instX !== this.x);
        var is_YChanged = (this.pre_instY !== this.y);
        var is_areaChange = is_heightChanged || is_XChanged || is_YChanged;
        if (is_areaChange)
            this.update_flag = true;
        if (!this.update_flag)
            return;
        this.update();
        this.pre_instX = this.x;
        this.pre_instY = this.y;
        this.pre_instHeight = cur_instHeight;
    };
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.get_inst_height = function()
	{
	    return (this.is_vertical_scrolling)? this.height : this.width;
	};
	instanceProto.get_inst_width = function()
	{
	    return (this.is_vertical_scrolling)? this.width : this.height;
	};
    instanceProto.update = function(refresh)
    {
		this.update_flag = false;
        if (refresh)
        {
            this.prepare();
            this.hide_lines();
        }
        this.prepare();
        this.show_lines();
        this.hide_lines();
        this.exp_LineIndex = -1;
    };
    instanceProto.prepare = function()
    {
        var tmp = this.pre_visibleLineIndexes;
        this.pre_visibleLineIndexes = this.visibleLineIndexes;
        this.visibleLineIndexes = tmp;
        clean_table(this.visibleLineIndexes);
    };
    instanceProto.show_lines = function()
    {
        var line_index = this.lines_mgr.Height2LineIndex(-this.OY);
        var line_tlx = this.get_tlX();
        var line_tly = this.get_tlY(line_index);
        var bottom_bound = this.get_bottom_bound();
        var last_index = this.lines_mgr.GetLinesCount() -1;
        var line;
        this.visible_start = null;
        this.visible_end = null;
        while ((line_tly < bottom_bound) && (line_index <= last_index))
        {
            if (this.lines_mgr.IsInRange(line_index))
            {
                if (this.visible_start === null)
                {
                    this.visible_start = line_index;
                }
                this.visible_end = line_index;
                this.visibleLineIndexes[line_index] = true;
                line = this.lines_mgr.GetLine(line_index);
                line_tly += line.offsety;
                line.SetTLXY(line_tlx, line_tly);
                if (this.pre_visibleLineIndexes.hasOwnProperty(line_index))
                {
                    line.PinInsts();
                }
                else
                {
                    this.show_line(line_index, line_tlx, line_tly);
                }
            }
            line_tly += this.lines_mgr.GetLineHeight(line_index);
            line_index += 1;
        }
    };
    instanceProto.show_line = function(line_index, tlx, tly)
    {
        this.exp_LineIndex = line_index;
        if (this.is_vertical_scrolling)
        {
            this.exp_LineTLX = tlx;
            this.exp_LineTLY = tly;
        }
        else
        {
            this.exp_LineTLX = tly;
            this.exp_LineTLY = tlx;
        }
        this.runtime.trigger(cr.plugins_.Rex_ListCtrl.prototype.cnds.OnLineVisible, this);
    };
    instanceProto.hide_lines = function()
    {
        var i, insts;
        for (i in this.pre_visibleLineIndexes)
        {
            if (this.visibleLineIndexes.hasOwnProperty(i))
                continue;
            this.hide_line(i);
        }
    };
    instanceProto.hide_line = function(line_index)
    {
        this.exp_LineIndex = parseInt(line_index);
        this.runtime.trigger(cr.plugins_.Rex_ListCtrl.prototype.cnds.OnLineInvisible, this);
        this.lines_mgr.DestroyPinedInsts(line_index);
    };
    instanceProto.get_tlX = function()
    {
        this.update_bbox();
        return (this.is_vertical_scrolling)? this.bquad.tlx : this.bquad.tly;
    };
    instanceProto.get_tlY = function(line_index)
    {
        this.update_bbox();
        var poy = (this.is_vertical_scrolling)? this.bquad.tly : this.bquad.tlx;
        var py = this.OY +  this.lines_mgr.LineIndex2Height(0, line_index-1) + poy;
        return py;
    };
    instanceProto.get_bottom_bound = function()
    {
        this.update_bbox();
        return (this.is_vertical_scrolling)? this.bquad.bly : this.bquad.trx;
    };
	instanceProto.set_OY = function(oy)
	{
	    var is_out_top_bound = this.is_OY_out_bound(oy, 0);
	    var is_out_bottom_bound = this.is_OY_out_bound(oy, 1);
	    if (this.is_clamp_OY)
	    {
	        var total_lines=this.lines_mgr.GetLinesCount();
	        var visible_lines=this.lines_mgr.Height2LineIndex(this.get_inst_height(), true);
	        if (total_lines === visible_lines)
	            oy = 0;
	        else if (oy > 0)
	            oy = 0;
	        else
	        {
	            var list_height = this.get_list_height();
	            if (oy < -list_height)
	                oy = -list_height;
	        }
	    }
        if (this.OY !== oy )
        {
	        this.update_flag = true;
	        this.OY = oy;
        }
	    if (is_out_top_bound && (!this.is_out_top_bound))
	    {
	        this.bound_type = 0;
	        this.exp_LastBoundOY = 0;
	        this.runtime.trigger(cr.plugins_.Rex_ListCtrl.prototype.cnds.OnOYOutOfBound, this);
	        this.bound_type = null;
	    }
	    if (is_out_bottom_bound && !this.is_out_bottom_bound)
	    {
	        this.bound_type = 1;
	        this.exp_LastBoundOY = -this.get_list_height();
	        this.runtime.trigger(cr.plugins_.Rex_ListCtrl.prototype.cnds.OnOYOutOfBound, this);
	        this.bound_type = null;
	    }
        this.is_out_top_bound = is_out_top_bound;
        this.is_out_bottom_bound = is_out_bottom_bound;
	};
	instanceProto.is_visible = function(line_index)
	{
	    if (this.visible_start == null)
	        return false;
	    return (line_index >= this.visible_start) && (line_index <= this.visible_end);
	};
	var NEWLINES = [];
	var get_content = function (content)
	{
	    if (content === "")
	        return null;
	    if (typeof(content) === "string")
	    {
	        try {
		    	return JSON.parse(content);
		    }
		    catch(e) { return null; }
	    }
	    else if (typeof(content) === "number")
	    {
	        NEWLINES.length = content;
	        var i;
	        for (i=0; i<content; i++)
	            NEWLINES[i] = null;
	        return NEWLINES;
	    }
	    else
	        return content;
	};
    instanceProto.set_lines_count = function (cnt)
	{
	    if (cnt < 0)
	        cnt = 0;
	    var is_changed = this.lines_mgr.SetLinesCount(cnt);
		if (is_changed)
            this.update_flag = true;
	};
    instanceProto.insert_lines = function (line_index, content)
	{
	    content = get_content(content);
	    if (content === null)
	        return;
	    var cnt = content.length;
        if (this.is_visible(line_index))
        {
            var i;
            for(i=0; i<cnt; i++)
            {
	            delete this.visibleLineIndexes[line_index + i];
	            this.visibleLineIndexes[this.visible_end+1 + i] = true;
	        }
        }
	    this.lines_mgr.InsertLines(line_index, content);
		this.update_flag = true;
	};
    instanceProto.remove_lines = function (line_index, cnt)
	{
	    var total_lines = this.lines_mgr.GetLinesCount();
	    if ( (line_index + cnt) > total_lines)
	        cnt = total_lines - line_index;
        if (this.is_visible(line_index))
        {
            var i;
            for(i=0; i<cnt; i++)
            {
                delete this.visibleLineIndexes[this.visible_end-i];
            }
        }
	    var removed_lines = this.lines_mgr.RemoveLines(line_index, cnt);
	    this.exp_LastRemovedLines = JSON.stringify( removed_lines );
		this.update_flag = true;
	};
    instanceProto.for_each_line = function (start_, end_, filter_fn)
	{
	    var total_lines = this.lines_mgr.GetLinesCount();
	    var start = (start_ == null)? 0: Math.min(start_, end_);
	    var end = (end_ == null)? total_lines-1: Math.max(start_, end_);
	    if (start < 0)
	        start = 0;
	    if (end > total_lines)
	        end = total_lines-1;
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var i;
		for(i=start; i<=end; i++)
		{
            if ((!filter_fn) || filter_fn(i))
            {
                if (solModifierAfterCnds)
                {
                    this.runtime.pushCopySol(current_event.solModifiers);
                }
                this.exp_LineIndex = i;
                current_event.retrigger();
		        if (solModifierAfterCnds)
		        {
		            this.runtime.popSol(current_event.solModifiers);
		        }
            }
		}
		return false;
	};
    instanceProto.get_list_height = function ()
	{
        var h;
        var totalLinesHeight = this.lines_mgr.GetTotalLinesHeight();
        var inst_height = this.get_inst_height();
        if (totalLinesHeight > inst_height)
            h = totalLinesHeight - inst_height;
        else
            h = 0;
        return h;
	};
    instanceProto.is_OY_out_bound = function (OY, bound_type)
	{
	    var is_out_bound;
	    if (bound_type === 0)
	        is_out_bound = (OY > 0);
	    else
	        is_out_bound = (OY < -this.get_list_height());
	    return is_out_bound;
	};
    instanceProto._uid2inst = function(uid, objtype)
    {
	    if (uid == null)
		    return null;
        var inst = this.runtime.getObjectByUID(uid);
        if (inst == null)
			return null;
        if ((objtype == null) || (inst.type == objtype))
            return inst;
        else if (objtype.is_family)
        {
            var families = inst.type.families;
            var cnt=families.length, i;
            for (i=0; i<cnt; i++)
            {
                if (objtype == families[i])
                    return inst;
            }
        }
        return null;
    };
    instanceProto.pick_insts_on_line = function (line_index, objtype)
	{
	    var line = this.lines_mgr.GetLine(line_index, true);
	    if (line == null)
	        return false;
	    var insts_uid = line.GetPinInstsUID();
        var sol = objtype.getCurrentSol();
        sol.select_all = false;
        sol.instances.length = 0;   // clear contents
        var uid, inst;
        for (uid in insts_uid)
        {
            inst = this._uid2inst(uid, objtype)
            if (inst != null)
                sol.instances.push(inst);
        }
        objtype.applySolToContainer();
        return  (sol.instances.length >0);
	};
    var name2type = {};  // private global object
	instanceProto.pick_all_insts_on_line = function (line_index)
	{
	    var line = this.lines_mgr.GetLine(line_index, true);
	    if (line == null)
	        return false;
	    var insts_uid = line.GetPinInstsUID();
	    var uid, inst, objtype, sol;
	    clean_table(name2type);
	    var has_inst = false;
	    for (uid in insts_uid)
	    {
	        inst = this._uid2inst(uid);
            if (inst == null)
                continue;
	        objtype = inst.type;
	        sol = objtype.getCurrentSol();
	        if (!(objtype.name in name2type))
	        {
	            sol.select_all = false;
	            sol.instances.length = 0;
	            name2type[objtype.name] = objtype;
	        }
	        sol.instances.push(inst);
	        has_inst = true;
	    }
	    var name;
	    for (name in name2type)
	        name2type[name].applySolToContainer();
	    clean_table(name2type);
	    return has_inst;
	};
    var clean_table = function(o)
    {
        for(var k in o)
            delete o[k];
    };
	instanceProto.saveToJSON = function ()
	{
        this.pre_instX = this.x;
        this.pre_instY = this.y;
        this.pre_instHeight = this.height;
		return {
                 "update_flag": this.update_flag,
		         "OY": this.OY,
		         "lines_mgr": this.lines_mgr.saveToJSON(),
		         "visible_lines": this.visibleLineIndexes,
		         "pre_visible_lines": this.pre_visibleLineIndexes,
		         "visible_start": this.visible_start,
		         "visible_end": this.visible_end,
		         "pre_instX": this.pre_instX,
		         "pre_instY": this.pre_instY,
		         "pre_instHeight": this.pre_instHeight,
		         "topb": this.is_out_top_bound,
		         "bottomb": this.is_out_bottom_bound
		       };
	};
	instanceProto.loadFromJSON = function (o)
	{
	    this.update_flag = o["update_flag"];
	    this.OY = o["OY"];
	    this.lines_mgr_save = o["lines_mgr"];
	    this.visibleLineIndexes = o["visible_lines"];
	    this.pre_visibleLineIndexes = o["pre_visible_lines"];
	    this.visible_start = o["visible_start"];
	    this.visible_end = o["visible_end"];
	    this.pre_instX = o["pre_instX"];
	    this.pre_instY = o["pre_instY"];
	    this.pre_instHeight = o["pre_instHeight"];
        this.is_out_top_bound = o["topb"];
        this.is_out_bottom_bound = o["bottomb"];
	};
	instanceProto.afterLoad = function ()
	{
	    this.lines_mgr.afterLoad( this.lines_mgr_save );
	    this.lines_mgr_save = null;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnLineVisible = function ()
	{
		return true;
	};
	Cnds.prototype.OnLineInvisible = function ()
	{
		return true;
	};
	Cnds.prototype.ForEachLine = function (start, end)
	{
		return this.for_each_line(start, end);
	};
	Cnds.prototype.ForEachVisibleLine = function ()
	{
		return this.for_each_line(this.visible_start, this.visible_end);
	};
	Cnds.prototype.ForEachMatchedLine = function (k_, cmp, v_)
	{
        var self = this;
        var filter_fn = function (line_index)
        {
            var d = self.lines_mgr.GetCustomData(line_index, k_);
            if (d == null)
                return false;
    		return cr.do_cmp(d, cmp, v_);
        }
		return this.for_each_line(null, null, filter_fn);
	};
	Cnds.prototype.IsOYOutOfBound = function (bound_type)
	{
	    if ((bound_type === 0) || (bound_type === 1))
	        return this.is_OY_out_bound(this.OY, bound_type);
	    else
		    return this.is_OY_out_bound(this.OY, 0) || this.is_OY_out_bound(this.OY, 1);
	};
	Cnds.prototype.OnOYOutOfBound = function (bound_type)
	{
	    if ((bound_type === 0) || (bound_type === 1))
	        return (this.bound_type === bound_type);
	    else
	        return true;
	};
	Cnds.prototype.PickInstsOnLine = function (line_index, objtype)
	{
	    if (!objtype)
	        return false;
		return this.pick_insts_on_line(line_index, objtype);
	};
	Cnds.prototype.PickAllInstsOnLine = function (line_index)
	{
	    return this.pick_all_insts_on_line(line_index);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetOY = function (oy)
	{
	    this.set_OY(oy);
	};
    Acts.prototype.AddOY = function (dy)
	{
	    this.set_OY(this.OY + dy);
	};
    Acts.prototype.PinInstToLine = function (objs)
	{
        if ((!objs) || (this.exp_LineIndex == -1))
            return;
		var insts = objs.getCurrentSol().getObjects();
		var i, cnt=insts.length;
        for (i=0; i<cnt; i++)
        {
	        this.lines_mgr.AddInstToLine(this.exp_LineIndex, insts[i]);
	    }
	};
    Acts.prototype.UnPinInst = function (objs)
	{
        if (!objs)
            return;
	    if (this.visible_start !== null)
	    {
		    var insts = objs.getCurrentSol().getObjects();
	        var i, j, cnt=insts.length, uid;
			for (i=0; i<cnt; i++)
			{
			    uid = insts[i].uid;
	            for(j=this.visible_start; j<=this.visible_end; j++)
	                this.lines_mgr.RemoveInstFromLine(j, uid)
		    }
	    }
	};
    Acts.prototype.SetLinesCount = function (cnt)
	{
	    this.set_lines_count(cnt);
	};
    Acts.prototype.SetOYToLineIndex = function (line_index)
	{
        var p = this.lines_mgr.LineIndex2Height(0, line_index);
	    this.set_OY( -p );
	};
    Acts.prototype.SetOYByPercentage = function (percentage)
	{
        var p = this.get_list_height() *percentage;
        this.set_OY( -p );
	};
    Acts.prototype.SetValue = function (line_index, key_, value_)
	{
	    var is_changed = this.lines_mgr.SetCustomData(line_index, key_, value_);
		if (is_changed)
		    this.update_flag = true;
	};
    Acts.prototype.CleanKeyInAllLine = function (key_)
	{
	    this.lines_mgr.SetCustomData(null, key_, null);
		this.update_flag = true;
	};
    Acts.prototype.CleanAllKeysInAllLine = function ()
	{
	    this.lines_mgr.SetCustomData(null, null, null);
		this.update_flag = true;
	};
    Acts.prototype.InsertNewLines = function (line_index, cnt)
	{
	    this.insert_lines(line_index, cnt);
	};
    Acts.prototype.RemoveLines = function (line_index, cnt)
	{
	    this.remove_lines(line_index, cnt);
	};
    Acts.prototype.InsertLines = function (line_index, content)
	{
	    this.insert_lines(line_index, content);
	};
    Acts.prototype.PushNewLines = function (where, cnt)
	{
	    var line_index = (where==1)? 0: this.lines_mgr.GetLinesCount();
	    this.insert_lines(line_index, cnt);
	};
    Acts.prototype.PushLines = function (where, content)
	{
	    var line_index = (where==1)? 0: this.lines_mgr.GetLinesCount();
	    this.insert_lines(line_index, content);
	};
    Acts.prototype.SetDefaultLineHeight = function (height)
	{
	    if (height <= 0)
		    return;
        var is_changed = this.lines_mgr.SetDefaultLineHeight(height);
        if (is_changed)
		    this.update_flag = true;
	};
    Acts.prototype.SetLineOffsetY = function (line_index, offsety)
	{
        var line = this.lines_mgr.GetLine(line_index);
        if (!line)
            return;
        var is_changed = (line.offsety != offsety);
	    line.offsety = offsety;
        if (is_changed)
		    this.update_flag = true;
	};
    Acts.prototype.SetLineHeight = function (line_index, height)
	{
        if (!this.lines_mgr.IsInRange(line_index))
            return;
	    if (height < 0)
		    return;
        var is_changed = this.lines_mgr.SetLineHeight(line_index, height);
        if (is_changed)
		    this.update_flag = true;
	};
    Acts.prototype.RefreshVisibleLines = function ()
	{
        this.update(true);
	};
	Acts.prototype.PickInstsOnLine = function (line_index, objtype)
	{
	    if (!objtype)
	        return;
		this.pick_insts_on_line(line_index, objtype);
	};
	Acts.prototype.PickAllInstsOnLine = function (line_index)
	{
	    return this.pick_all_insts_on_line(line_index);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.LineIndex = function (ret)
	{
		ret.set_int(this.exp_LineIndex);
	};
    Exps.prototype.LineTLX = function (ret)
	{
		ret.set_float(this.exp_LineTLX);
	};
    Exps.prototype.LineTLY = function (ret)
	{
		ret.set_float(this.exp_LineTLY);
	};
    Exps.prototype.UID2LineIndex = function (ret, uid)
	{
	    var line_index;
	    if (this.visible_start !== null)
	    {
	        var i;
	        for(i=this.visible_start; i<=this.visible_end; i++)
	        {
	            if (this.lines_mgr.LineHasInst(i, uid))
	            {
	                line_index = i;
	                break;
	            }
	        }
	    }
	    if (line_index == null)
	        line_index = -1;
		ret.set_int(line_index);
	};
    Exps.prototype.LineIndex2LineTLY = function (ret, line_index)
	{
		ret.set_float(this.get_tlY(line_index));
	};
    Exps.prototype.TotalLinesCount = function (ret)
	{
		ret.set_int(this.lines_mgr.GetLinesCount());
	};
    Exps.prototype.DefaultLineHeight = function (ret)
	{
		ret.set_float(this.lines_mgr.defaultLineHeight);
	};
    Exps.prototype.LineHeight = function (ret, index_)
	{
		ret.set_float(this.lines_mgr.GetLineHeight(index_));
	};
    Exps.prototype.ListHeight = function (ret)
	{
		ret.set_float(this.lines_mgr.GetTotalLinesHeight());
	};
    Exps.prototype.At = function (ret, index_, key_, default_value)
	{
	    var v = this.lines_mgr.GetCustomData(index_, key_);
        if (v == null)
            v = default_value || 0;
		ret.set_any(v);
	};
    Exps.prototype.LastRemovedLines = function (ret)
	{
		ret.set_string(this.exp_LastRemovedLines);
	};
    Exps.prototype.CustomDataInLines = function (ret, line_index, cnt)
	{
	    var dataInLines = this.lines_mgr.GetCustomDataInLines(line_index, cnt);
		ret.set_string(JSON.stringify( dataInLines ));
	};
    Exps.prototype.OY = function (ret)
	{
		ret.set_float(this.OY);
	};
    Exps.prototype.BotomOY = function (ret)
	{
		ret.set_float(-this.get_list_height());
	};
    Exps.prototype.TopOY = function (ret)
	{
		ret.set_float(0);
	};
    Exps.prototype.LastBoundOY = function (ret)
	{
		ret.set_float(this.exp_LastBoundOY);
	};
    Exps.prototype.LineCX = function (ret)
	{
	    var x = this.exp_LineTLX + (0.5 * this.get_inst_width());
		ret.set_float(x);
	};
    Exps.prototype.CurLineIndex = function (ret)
	{
		ret.set_int(this.exp_LineIndex);
	};
    Exps.prototype.FirstVisibleLineIndex = function (ret)
	{
		ret.set_int(this.visible_start || 0);
	};
    Exps.prototype.LastVisibleLineIndex = function (ret)
	{
		ret.set_int(this.visible_end || 0);
	};
}());
(function ()
{
    var ObjCacheKlass = function ()
    {
        this.lines = [];
    };
    var ObjCacheKlassProto = ObjCacheKlass.prototype;
	ObjCacheKlassProto.allocLine = function()
	{
		return (this.lines.length > 0)? this.lines.pop(): null;
	};
	ObjCacheKlassProto.freeLine = function (l)
	{
		this.lines.push(l);
	};
    var lineCache = new ObjCacheKlass();
    cr.plugins_.Rex_ListCtrl.LinesMgrKlass = function(plugin)
    {
        this.plugin = plugin;
        this.lines = [];
	    this.defaultLineHeight = 0;
        this.defaultLineHeightMode = true;
        this.totalLinesHeight = null;
    };
    var LinesMgrKlassProto = cr.plugins_.Rex_ListCtrl.LinesMgrKlass.prototype;
	LinesMgrKlassProto.SetLinesCount = function(cnt)
	{
        var end=this.GetLinesCount();
		if (end === cnt)
		  return false;
        else if (end > cnt)
        {
            var i, line;
            for(i=cnt; i<end; i++)
            {
                line = this.lines[i];
                if (!line)
                    continue;
                line.Clean();
                lineCache.freeLine( line );
            }
            this.lines.length = cnt;
        }
        else if (end < cnt)
        {
            var i,start=end;
            this.lines.length = cnt
            for(i=start; i<cnt; i++)
            {
                this.lines[i] = null;
            }
        }
        if (this.GetLinesCount() === 0)
            this.defaultLineHeightMode = true;
        this.totalLinesHeight = null;
		return true;
	};
    LinesMgrKlassProto.GetLinesCount = function()
    {
        return this.lines.length;
    };
    LinesMgrKlassProto.IsInRange = function(line_index)
    {
        return ((line_index >= 0) && (line_index < this.GetLinesCount()));
    };
    LinesMgrKlassProto.GetNewLine = function()
    {
        var line = lineCache.allocLine();
        if (line == null)
            line = new LineKlass(this.plugin);
        else
            line.Reset(this.plugin);
        return line;
    };
	LinesMgrKlassProto.GetLine = function(line_index, dont_create_line_inst)
	{
        if (!this.IsInRange(line_index))
            return;
        if ((this.lines[line_index] == null) && (!dont_create_line_inst))
        {
            this.lines[line_index] = this.GetNewLine();
        }
        return this.lines[line_index];
	};
	LinesMgrKlassProto.AddInstToLine = function(line_index, inst)
	{
	    if (inst == null)
	        return;
        var line = this.GetLine(line_index);
        if (line == null)
            return;
        line.AddInst(inst);
	};
	LinesMgrKlassProto.RemoveInstFromLine = function(line_index, uid)
	{
        var line = this.GetLine(line_index, true);
        if (line == null)
            return;
        line.RemoveInst(uid);
	};
	LinesMgrKlassProto.LineHasInst = function(line_index, uid)
	{
        var line = this.GetLine(line_index, true);
        if (line == null)
            return;
        return line.HasInst(uid);
	};
	LinesMgrKlassProto.DestroyPinedInsts = function(line_index)
	{
	    var line = this.GetLine(line_index, true);
        if (line == null)
            return;
        line.DestroyPinedInsts();
	};
	LinesMgrKlassProto.SetCustomData = function(line_index, k, v)
	{
	    if (line_index != null)  // set custom data in a line
		{
            var line = this.GetLine(line_index);
            if (line == null)
                return;
            line.SetCustomData(k, v);
	    }
        else    // set custom data in all lines
		{
		    var i, cnt=this.GetLinesCount(), line;
			var is_clean_key = (v == null);
			for(i=0; i<cnt; i++)
			{
			    line = this.GetLine(i, is_clean_key);
				if (line == null)
				    continue;
			    line.SetCustomData(k, v);
	        }
		}
	};
	LinesMgrKlassProto.GetCustomData = function(line_index, k)
	{
	    var line = this.GetLine(line_index, true);
        if (line == null)
            return;
        return line.GetCustomData(k);
	};
	LinesMgrKlassProto.InsertLines = function(line_index, content)
	{
	    var cnt = content.length;
	    if (line_index < 0)
	        line_index = 0;
	    else if (line_index > this.GetLinesCount())
	        line_index = this.GetLinesCount();
	    this.lines.length += cnt;
	    var start = this.GetLinesCount() - 1;
	    var end = line_index + cnt;
	    var i, insert_line, new_line;
	    for (i=start; i>=line_index; i--)
	    {
	        if (i>=end)  // shift line down
	            this.lines[i] = this.lines[i-cnt];
	        else        // empty space
	        {
	            insert_line = content[i-line_index];
	            if (insert_line == null)
	                this.lines[i] = null;
	            else
	            {
	                new_line = this.GetNewLine();
	                new_line.SetCustomData( insert_line );
	                this.lines[i] = new_line;
	            }
	        }
	    }
        this.totalLinesHeight = null;
	};
	LinesMgrKlassProto.RemoveLines = function(line_index, cnt)
	{
	    var i, line, removed_lines=[];
	    removed_lines.length = cnt;
	    for (i=0; i<cnt; i++)
	    {
	        line = this.GetLine(line_index+i, true);
	        if (line)
	        {
	            removed_lines[i] = line.GetCustomData();
                line.Clean();
                lineCache.freeLine( line );
	        }
	        else
	        {
	            removed_lines[i] = null;
	        }
	    }
	    var start = line_index+cnt;
	    var end = this.GetLinesCount() -1;
	    for (i=start; i<=end; i++)
	    {
	        this.lines[i-cnt] = this.lines[i];
	    }
	    this.lines.length -= cnt;
        if (this.GetLinesCount() === 0)
            this.defaultLineHeightMode = true;
        this.totalLinesHeight = null;
	    return removed_lines;
	};
	LinesMgrKlassProto.GetCustomDataInLines = function(line_index, cnt)
	{
	    var i, line, dataInLines=[];
	    dataInLines.length = cnt;
	    for (i=0; i<cnt; i++)
	    {
	        line = this.GetLine(line_index+i, true);
	        if (line)
	            dataInLines[i] = line.GetCustomData();
	        else
	            dataInLines[i] = null;
	    }
	    return dataInLines;
	};
	LinesMgrKlassProto.SetDefaultLineHeight = function(height)
	{
        if (this.defaultLineHeight === height)
            return false;
        this.defaultLineHeight = height;
        this.totalLinesHeight = null;
        return true;
	};
	LinesMgrKlassProto.GetLineHeight = function(line_index)
	{
        if (!this.IsInRange(line_index))
            return 0;
        var line_height;
        if (this.defaultLineHeightMode)
            line_height = this.defaultLineHeight;
        else
        {
            var line = this.GetLine(line_index, true);
            var deltaHeight = (line)? line.deltaHeight : 0;
            line_height = this.defaultLineHeight + deltaHeight;
        }
        return line_height;
	};
	LinesMgrKlassProto.SetLineHeight = function(line_index, height)
	{
        if (!this.IsInRange(line_index))
            return;
        var curHeight = this.GetLineHeight(line_index);
        if (curHeight === height)
            return false;
        var deltaHeight = height - this.defaultLineHeight;
        var line = this.GetLine(line_index);
        var dd = deltaHeight - line.deltaHeight;
        line.deltaHeight = deltaHeight;
        if (deltaHeight !== 0)
            this.defaultLineHeightMode = false;
        if (this.totalLinesHeight !== null)
            this.totalLinesHeight += dd;
        return true;
	};
	LinesMgrKlassProto.Height2LineIndex = function(h, isCeil)
	{
        if (this.defaultLineHeightMode)
        {
            var line_index = h / this.defaultLineHeight;
            if (isCeil)
                line_index = Math.ceil(line_index);
            else
                line_index = Math.floor(line_index);
            return line_index;
        }
        else
        {
            var total_ines_cnt = this.GetLinesCount();
            var remain=h, line_cnt=0, is_valid_index;
            var line, line_height, line_index=0;
            while (1)
            {
                line_height = this.GetLineHeight(line_index);
                remain -=  line_height;
                is_valid_index = (line_index >=0) && (line_index < total_ines_cnt);
                if ((remain > 0) && is_valid_index)
                {
                    line_index += 1;
                }
                else if (remain === 0)
                    return line_index;
                else
                {
                    if (isCeil)
                    {
                        var line_index_save = line_index;
                        line_index += 1;
                        is_valid_index = (line_index >=0) && (line_index < total_ines_cnt);
                        if (!is_valid_index)
                            line_index = line_index_save;
                    }
                    return line_index;
                }
            }
        }
	};
	LinesMgrKlassProto.LineIndex2Height = function(start, end)
	{
        if (this.defaultLineHeightMode)
            return (end - start + 1) * this.defaultLineHeight;
        else
        {
            var i, h, sum=0;
            var all_default_height = true;
            for(i=start; i<=end; i++)
            {
                h = this.GetLineHeight(i);
                sum += h;
                if (h !== this.defaultLineHeight)
                    all_default_height = false;
            }
            var all_lines = (start===0)  && (end >= (this.GetLinesCount()-1));
            if (all_default_height && all_lines)
                this.defaultLineHeightMode = true;
            return sum;
        }
	};
    LinesMgrKlassProto.GetTotalLinesHeight = function ()
    {
        if (this.totalLinesHeight === null)
            this.totalLinesHeight = this.LineIndex2Height(0, (this.GetLinesCount()-1));
        return this.totalLinesHeight;
    };
	LinesMgrKlassProto.saveToJSON = function ()
	{
	    var i,cnt=this.GetLinesCount();
	    var save_lines = [], line, save_line;
	    for(i=0; i<cnt; i++)
	    {
	        line = this.lines[i];
	        save_line = (!line)? null : line.saveToJSON()
	        save_lines.push( save_line );
	    }
		return { "lines": save_lines,
                      "dlh": this.defaultLineHeight,
                      "dlhm": this.defaultLineHeightMode,
                      "tlh": this.totalLinesHeight,
		       };
	};
	LinesMgrKlassProto.afterLoad = function (o)
	{
	    this.lines.length = 0;
	    var save_lines = o["lines"];
	    var i,cnt=save_lines.length;
	    var save_lines = [], save_line;
	    for(i=0; i<cnt; i++)
	    {
	        save_line = save_lines[i];
	        if (!save_line)
	            this.lines.push( null );
	        else
	        {
	            var new_line = this.GetNewLine();
	            new_line.afterLoad(save_line);
	            this.lines.push( new_line );
	        }
	    }
        this.defaultLineHeight = o["dlh"];
        this.defaultLineHeightMode = o["dlhm"];
        this.totalLinesHeight = o["tlh"];
	};
    var LineKlass = function(plugin)
    {
        this.pined_insts = {};
        this.custom_data = {};
        this.Reset(plugin);
    };
    var LineKlassProto = LineKlass.prototype;
	LineKlassProto.Reset = function(plugin)
	{
        this.plugin = plugin;
        this.tlx = 0;
        this.tly = 0;
        this.offsety = 0;
        this.deltaHeight = 0;
	};
	LineKlassProto.SetTLXY = function(tlx, tly)
	{
        this.tlx = tlx;
        this.tly = tly;
	};
	LineKlassProto.AddInst = function(inst)
	{
	    var uid = inst.uid;
	    if (!this.pined_insts.hasOwnProperty(uid))
	        this.pined_insts[uid] = {};
	    var pin_info = this.pined_insts[uid];
	    pin_info["dx"] = inst.x - this.get_px();
	    pin_info["dy"] = inst.y - this.get_py();
	};
	LineKlassProto.RemoveInst = function(uid)
	{
	    if (uid != null)
	    {
	        if (!this.pined_insts.hasOwnProperty(uid))
	            return;
            delete this.pined_insts[uid];
        }
        else
        {
            for(var uid in this.pined_insts)
                delete this.pined_insts[uid];
        }
	};
	LineKlassProto.HasInst = function(uid)
	{
	    return this.pined_insts.hasOwnProperty(uid);
	};
	LineKlassProto.PinInsts = function()
	{
	    var uid, inst, pin_info, runtime = this.plugin.runtime;
	    for (uid in this.pined_insts)
	    {
	        inst = runtime.getObjectByUID(uid);
	        if (!inst)
	        {
	            delete this.pined_insts[uid];
	            continue;
	        }
	        pin_info = this.pined_insts[uid];
	        pin_inst(inst, pin_info, this.get_px(), this.get_py());
	    }
	};
	LineKlassProto.GetPinInstsUID = function()
	{
	    return this.pined_insts;
	};
	LineKlassProto.get_px = function()
	{
	    return (this.plugin.is_vertical_scrolling)? this.tlx : this.tly;
	};
	LineKlassProto.get_py = function()
	{
	    return (this.plugin.is_vertical_scrolling)? this.tly : this.tlx;
	};
	var pin_inst = function(inst, pin_info, ref_x, ref_y)
	{
        var new_x = ref_x + pin_info["dx"];
        var new_y = ref_y + pin_info["dy"];
        if ((new_x != inst.x) || (new_y != inst.y))
        {
            inst.x = new_x;
            inst.y = new_y;
            inst.set_bbox_changed();
        }
	};
	LineKlassProto.DestroyPinedInsts = function()
	{
	    var uid, inst, runtime = this.plugin.runtime;
	    for (uid in this.pined_insts)
	    {
	        inst = runtime.getObjectByUID(uid);
	        if (!inst)
	            continue;
            Object.getPrototypeOf(inst.type.plugin).acts.Destroy.call(inst);
	        delete this.pined_insts[uid];
	    }
	};
	LineKlassProto.SetCustomData = function(k,v)
	{
		var is_changed;
	    if (typeof(k) != "object")    // single key
		{
		    if (v != null)
			{
				is_changed = (this.custom_data[k] !== v);
	            this.custom_data[k] = v;
			}
		    else if (this.custom_data.hasOwnProperty(k))  // v == null: clean key
			{
			    delete this.custom_data[k];
				is_changed = true;
			}
	    }
        else if (k === null)    // clean all
        {
            for (var n in this.custom_data)
			{
                delete this.custom_data[n];
			}
            is_changed = true;
        }
	    else                          // copy all
	    {
	        var d = k;
	        for (var k in d)
			{
				is_changed = (this.custom_data[k] !== d[k]);
	            this.custom_data[k] = d[k];
			}
	    }
	};
	LineKlassProto.GetCustomData = function(k)
	{
	    if (k != null)    // single key
	        return this.custom_data[k];
	    else             // copy all
	    {
	        var d = {};
	        for (k in this.custom_data)
	            d[k] = this.custom_data[k];
	        return d;
	    }
	};
	LineKlassProto.Clean = function()
	{
	    this.DestroyPinedInsts();
	    for(var k in this.custom_data)
	        delete this.custom_data[k];
	};
	LineKlassProto.saveToJSON = function ()
	{
		return { "insts": this.pined_insts,
		         "data": this.custom_data,
		         "tlx": this.tlx,
		         "tly": this.tly,
		         "offsety": this.offsety,
                 "dh": this.deltaHeight,
		       };
	};
	LineKlassProto.afterLoad = function (o)
	{
		this.pined_insts = o["insts"];
		this.custom_data = o["data"];
		this.tlx = o["tlx"];
		this.tly = o["tly"];
		this.offsety = o["offsety"];
        this.deltaHeight = o["dh"];
	};
}());
;
;
cr.plugins_.Rex_LoopIterator = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_LoopIterator.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.loop_iters = new cr.plugins_.Rex_LoopIterator.LoopItersKlass();
        this._last_tick = null;
	};
	instanceProto.is_tick_changed = function ()
	{
	    var cur_tick = this.runtime.tickcount;
		var tick_changed = (this._last_tick != cur_tick);
        this._last_tick = cur_tick;
		return tick_changed;
	};
    instanceProto.saveToJSON = function ()
	{
		return { "lps": this.loop_iters.saveToJSON(),
                 "lt": this._last_tick};
	};
	instanceProto.loadFromJSON = function (o)
	{
       this.loop_iters.loadFromJSON(o["lps"]);
       this._last_tick = o["lt"];
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.HasNext = function()
	{
		return this.loop_iters.has_next();;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.AddForLoop = function (name, start, end, step)
	{
        if (this.is_tick_changed())
            this.loop_iters.reset();
        this.loop_iters.add_forloop(name, start, end, step);
	};
    Acts.prototype.AddList = function (name, json_string)
	{
        if (this.is_tick_changed())
            this.loop_iters.reset();
        var list = JSON.parse(json_string);
        this.loop_iters.add_list(name, list);
	};
    Acts.prototype.Next = function ()
	{
        this.loop_iters.next();
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.loopindex = function (ret, name)
	{
        ret.set_any(this.loop_iters.index_get(name));
	};
}());
(function ()
{
    cr.plugins_.Rex_LoopIterator.LoopItersKlass = function()
    {
        this.loops = [];
        this.vars = {};
        this.first_flg = true;
    };
    var LoopItersKlassProto = cr.plugins_.Rex_LoopIterator.LoopItersKlass.prototype;
    LoopItersKlassProto.reset = function ()
    {
        this.loops.length = 0;
        var name;
        for (name in this.vars)
            delete this.vars[name];
        this.first_flg = true;
    };
    LoopItersKlassProto.add_forloop = function (name, start, end, step)
    {
        if (this.vars[name] != null)
            return;
        var iter = new forloopIterKlass(name, start, end, step);
        this.loops.push(iter);
        this.vars[name] = iter;
    };
    LoopItersKlassProto.add_list = function (name, list)
    {
        if (this.vars[name] != null)
            return;
        var iter = new listIterKlass(name, list);
        this.loops.push(iter);
        this.vars[name] = iter;
    };
    LoopItersKlassProto.has_next = function ()
    {
        var i, cnt=this.loops.length;
        for (i=0; i<cnt; i++)
        {
            if (this.loops[i].has_next())
                return true;
        }
        return false;
    };
    LoopItersKlassProto.next = function ()
    {
        if (this.first_flg)
        {
            this._first_run();
            this.first_flg = false;
            return;
        }
        var i, cnt=this.loops.length, iter;
        for (i=cnt-1; i>=0; i--)
        {
            iter = this.loops[i];
            if (iter.has_next())
            {
                iter.next();
                break;
            }
            else
            {
                iter.return2zero();
            }
        }
    };
    LoopItersKlassProto._first_run = function ()
    {
        var i, cnt=this.loops.length;
        for (i=cnt-1; i>=0; i--)
            this.loops[i].return2zero();
    };
    LoopItersKlassProto.index_get = function (name)
    {
	    var iter = this.vars[name];
	    return (iter != null)? iter.index_get():0;
    };
    LoopItersKlassProto.saveToJSON = function ()
	{
	    var i,cnt=this.loops.length, iter, type, loops_saved = [];
	    for (i=0; i<cnt; i++)
	    {
	        iter = this.loops[i];
	        type = (iter instanceof forloopIterKlass)? "for":"list";
	        iter = iter.saveToJSON();
	        iter["__type"] = type
	        loops_saved.push(iter);
	    };
		return { "loops":loops_saved,
		         "ff": this.first_flg,
                };
	};
	LoopItersKlassProto.loadFromJSON = function (o)
	{
       var loops_save = o["loops"];
       var i, cnt=loops_save.length, iter, type, iterKlass, iterObj;
       for (i=0; i<cnt; i++)
       {
           iter = loops_save[i];
           type = iter["__type"];
           iterKlass = (type == "for")?  forloopIterKlass:listIterKlass;
           iterObj = new iterKlass();
           iterObj.loadFromJSON(iter);
           this.loops.push(iterObj);
           this.vars[iter["name"]] = iterObj;
       }
       this.first_flg = o["ff"];
	};
    var forloopIterKlass = function(name, start, end, step)
    {
        this.name = name;
        this.start = start;
        this.end = end;
        this.step = step;
        this.current = null;
    };
    var forloopIterKlassProto = forloopIterKlass.prototype;
    forloopIterKlassProto.has_next = function()
    {
        if (this.current == null)
            return true;
        return (this.current + this.step <= this.end);
    };
    forloopIterKlassProto.return2zero = function()
    {
        this.current = this.start;
    };
    forloopIterKlassProto.next = function()
    {
        if (this.current == null)
            this.return2zero();
        else
            this.current += this.step;
    };
    forloopIterKlassProto.index_get = function()
    {
        var ret = this.current;
        if (ret == null)
            ret = this.start;
        return ret;
    };
    forloopIterKlassProto.saveToJSON = function ()
	{
		return { "name": this.name,
		         "start": this.start,
                 "end": this.end,
                 "step": this.step,
                 "cur": this.current,
                };
	};
	forloopIterKlassProto.loadFromJSON = function (o)
	{
	    this.name = o["name"];
        this.start = o["start"];
        this.end = o["end"];
        this.step = o["step"];
        this.current = o["cur"];
	};
    var listIterKlass = function(name, list)
    {
        this.name = name;
        this.list = list;
        this.current = null;
    };
    var listIterKlassProto = listIterKlass.prototype;
    listIterKlassProto.has_next = function()
    {
        if (this.current == null)
            return true;
        return (this.current+1 <  this.list.length);
    };
    listIterKlassProto.return2zero = function()
    {
        this.current = 0;
    };
    listIterKlassProto.next = function()
    {
        if (this.current == null)
            this.return2zero();
        else
            this.current += 1;
    };
    listIterKlassProto.index_get = function()
    {
        var ret = this.current;
        if (ret == null)
            ret = 0;
        return this.list[ret];
    };
    listIterKlassProto.saveToJSON = function ()
	{
		return { "name": this.name,
		         "l": this.list,
                 "cur": this.current,
                };
	};
	listIterKlassProto.loadFromJSON = function (o)
	{
	    this.name = o["name"];
        this.list = o["l"];
        this.current = o["cur"];
	};
}());
;
;
cr.plugins_.Rex_MazeGen = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_MazeGen.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    if (!this.recycled)
	        this.maze_gen = new window["MazeGen"]();
	    this.map = null;
        this.exp_MapWidth = 0;
        this.exp_MapHeight = 0;
        this.current_task = null;
	};
	instanceProto.onDestroy = function ()
	{
	    this.Cencel();
	};
    instanceProto.Start = function (w, h, type, seed)
	{
	    this.maze_gen["Stop"]();
        var self = this;
        var on_complete = function (args)
        {
            self.exp_MapWidth = w;
            self.exp_MapHeight = h;
            self.map = args[0];
            self.current_task = null;
            self.runtime.trigger(cr.plugins_.Rex_MazeGen.prototype.cnds.OnCompleted, self);
        };
        this.current_task = [w, h, type, seed];
        this.maze_gen["Start"](w, h, type, seed, on_complete);
	};
    instanceProto.Cencel = function (cell)
	{
	    this.current_task = null;
	    this.maze_gen["Stop"]();
	};
    instanceProto.ValueAt = function (x, y)
	{
	    var value;
	    if (this.map && this.map[x])
	        value = this.map[x][y];
	    if (value == null)
	        value = -1;
	    return value;
	};
	instanceProto.saveToJSON = function ()
	{
		return { "map": this.map,
                 "w": this.exp_MapWidth,
                 "h": this.exp_MapHeight,
                 "curTsk": this.current_task,
               };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.map = o["map"];
		this.exp_MapWidth = o["w"];
		this.exp_MapHeight = o["h"];
		this.current_task = o["curTsk"];
	};
	instanceProto.afterLoad = function ()
	{
		if (this.current_task !== null)
		{
		    this.Start.apply(this, this.current_task);
		}
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.IsGenerating = function ()
	{
		return this.maze_gen["IsProcessing"]();
	};
	Cnds.prototype.OnCompleted = function ()
	{
		return true;
	};
	Cnds.prototype.IsCharAt = function (x, y, type)
	{
	    var c = this.ValueAt(x,y);
	    if (c === -1)
	        return false;
	    else
		    return (c === type);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.GenerateMaze = function (w, h, type, seed)
	{
	    this.Start(w, h, type, seed);
	};
    Acts.prototype.Cencel = function ()
	{
	    this.Cencel();
	};
    Acts.prototype.Release = function ()
	{
        this.exp_MapWidth = 0;
        this.exp_MapHeight = 0;
        this.map = null;
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.MapWidth = function (ret)
	{
	    ret.set_float( this.exp_MapWidth );
	};
    Exps.prototype.MapHeight = function (ret)
	{
	    ret.set_float( this.exp_MapHeight );
	};
    Exps.prototype.ValueAt = function (ret, x, y)
	{
	    ret.set_any( this.ValueAt(x,y) );
	};
    Exps.prototype.MapAsJson = function (ret)
	{
        var json = (this.map)? JSON.stringify( this.map ) : "";
	    ret.set_string( json );
	};
}());
;
;
cr.plugins_.Rex_PatternGen = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_PatternGen.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.mode = this.properties[0];
        var init_patterns = this.properties[1];
        if (init_patterns != "")
            this.patterns = JSON.parse(init_patterns);
        else
            this.patterns = {};
	    this._pat_rank = [];
        this._shadow_patterns = {};
        this.start_gen();
		this.random_gen = null;
        this.exp_LastPattern = "";
        this.exp_CurPatternName = "";
        this.exp_LoopIndex = -1;
        this.randomGenUid = -1;    // for loading
	};
	instanceProto.reset_pat_rank = function(patterns)
	{
	    var pat;
	    this._pat_rank.length = 0;
	    var pat, count, total_count=0;
	    for (pat in patterns)
	    {
	        count = patterns[pat];
	        if (count > 0)
	            total_count += count;
	    }
	    for (pat in patterns)
	    {
	        count = patterns[pat];
	        if (count > 0)
	        {
	            this._pat_rank.push({"rate":count/total_count,
	                                 "pattern":pat});
	        }
	    }
	};
	instanceProto.get_random_value = function()
	{
	    var value = (this.random_gen == null)?
			        Math.random(): this.random_gen.random();
        return value;
	};
	instanceProto.get_rand_pattern = function(pat_rank)
	{
	    var value = this.get_random_value();
	    var pattern="", i, cnt=pat_rank.length;
	    for (i=0; i<cnt; i++)
	    {
	        value -= pat_rank[i]["rate"];
	        if (value < 0)
	        {
	            pattern = pat_rank[i]["pattern"];
	            break;
	        }
	    }
	    return pattern;
	};
	instanceProto.start_gen = function()
	{
	    var pat,count;
	    for (pat in this._shadow_patterns)
	        delete this._shadow_patterns[pat];
	    for (pat in this.patterns)
	    {
	        count = this.patterns[pat];
	        if (count > 0)
	            this._shadow_patterns[pat] = this.patterns[pat];
	    }
	    if (this.mode == 1) // random mode
	        this.reset_pat_rank(this._shadow_patterns);
	    this.restart_gen_flg = false;
	};
	var is_hash_empty = function(hash_obj)
	{
	    var is_empty=true;
	    var pat;
	    for (pat in hash_obj)
	    {
	        is_empty = false;
	        break;
	    }
	    return is_empty;
	};
	instanceProto.add_shadow_patterns = function(pattern, inc, max_count)
	{
	    if ((pattern == null) || (inc == 0))
	        return;
        if (!this._shadow_patterns.hasOwnProperty(pattern))
            this._shadow_patterns[pattern] = 0;
        this._shadow_patterns[pattern] += inc;
        if ((max_count != null) && (this._shadow_patterns[pattern] > max_count))
            this._shadow_patterns[pattern] = max_count
        if (this._shadow_patterns[pattern] <= 0)
            delete this._shadow_patterns[pattern];
        if ((this.mode == 0) && is_hash_empty(this._shadow_patterns))
            this.restart_gen_flg = true;
	};
	instanceProto.get_pattern = function(pattern)
	{
	    if (this.restart_gen_flg)
	        this.start_gen();
	    if (pattern == null)
		{
	        if ((this.mode == 0) || (this.mode == 2))  // shuffle mode
	        {
	            this.reset_pat_rank(this._shadow_patterns);
	            pattern = this.get_rand_pattern(this._pat_rank);
	            this.add_shadow_patterns(pattern, -1);
	        }
	        else if (this.mode == 1)   // random mode
	        {
	            pattern = this.get_rand_pattern(this._pat_rank);
	        }
		}
		else  // force pick
		{
			if (!this._shadow_patterns.hasOwnProperty(pattern))
				pattern = "";
            else
            {
			    if ((this.mode == 0) || (this.mode == 2))  // shuffle mode
	            {
	                this.add_shadow_patterns(pattern, -1);
			    }
			}
		}
	    return pattern;
	};
	instanceProto.get_pattern_count = function (name, is_remain)
	{
        var patList = (is_remain)? this._shadow_patterns : this.patterns;
        return patList[name] || 0;
	};
	instanceProto.saveToJSON = function ()
	{
        var randomGenUid = (this.random_gen != null)? this.random_gen.uid:(-1);
		return { "m": this.mode,
		         "pats": this.patterns,
		         "pr": this._pat_rank,
		         "spats": this._shadow_patterns,
		         "rstf": this.restart_gen_flg,
                 "randomuid":randomGenUid,
                 "lp" : this.exp_LastPattern,
                 };
	};
	instanceProto.loadFromJSON = function (o)
	{
	    this.mode = o["m"];
	    this.patterns = o["pats"];
	    this._pat_rank = o["pr"];
	    this._shadow_patterns = o["spats"];
	    this.restart_gen_flg = o["rstf"];
        this.randomGenUid = o["randomuid"];
        this.exp_LastPattern = o["lp"];
	};
	instanceProto.afterLoad = function ()
	{
        var randomGen;
		if (this.randomGenUid === -1)
			randomGen = null;
		else
		{
			randomGen = this.runtime.getObjectByUID(this.randomGenUid);
;
		}
		this.randomGenUid = -1;
		this.random_gen = randomGen;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
    var CountAscending = function(a, b)
    {
        if (a[1] > b[1])
            return 1;
        else if (a[1] == b[1])
            return 0;
        else  // ay < by
            return (-1);
    };
    var CountDescending = function(a, b)
    {
        if (a[1] < b[1])
            return 1;
        else if (a[1] == b[1])
            return 0;
        else  // ay < by
            return (-1);
    };
    var NameAscending = function(a, b)
    {
        if (a[0] > b[0])
            return 1;
        else if (a[0] == b[0])
            return 0;
        else
            return (-1);
    };
    var NameDescending = function(a, b)
    {
        if (a[0] < b[0])
            return 1;
        else if (a[0] == b[0])
            return 0;
        else
            return (-1);
    };
    var SortFns = [CountAscending, CountDescending, NameAscending, NameDescending];
	Cnds.prototype.ForEachPattern = function (m)
	{
	    var l = [];
	    for (var n in this.patterns)
	        l.push([n, this.patterns[n]]);
	    l.sort(SortFns[m]);
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
		var i, cnt=l.length;
		for(i=0; i<cnt; i++)
		{
            if (solModifierAfterCnds)
            {
                this.runtime.pushCopySol(current_event.solModifiers);
            }
            this.exp_CurPatternName = l[i][0];
            this.exp_LoopIndex = i;
            current_event.retrigger();
		    if (solModifierAfterCnds)
		    {
		        this.runtime.popSol(current_event.solModifiers);
		    }
		}
        this.exp_CurPatternName = "";
		return false;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetMode = function (m)
	{
	    this.mode = m;
	    this.restart_gen_flg = true;
	};
    Acts.prototype.SetPattern = function (pattern, count)
	{
	    if (pattern == "")
	        return;
        this.patterns[pattern] = count;
        this.restart_gen_flg = true;
	};
    Acts.prototype.RemovePattern = function (pattern)
	{
	    if (pattern in this.patterns)
	        delete this.patterns[pattern];
        this.restart_gen_flg = true;
	};
    Acts.prototype.RemoveAllPatterns = function ()
	{
	    var pattern;
	    for (pattern in this.patterns)
	        delete this.patterns[pattern];
	    this.restart_gen_flg = true;
	};
    Acts.prototype.StartGenerator = function ()
	{
	    this.restart_gen_flg = true;
	};
    Acts.prototype.Generate = function ()
	{
        this.exp_LastPattern = this.get_pattern();
	};
    Acts.prototype.AddPattern = function (pattern, count)
	{
	    if (pattern == "")
	        return;
        if (!this.patterns.hasOwnProperty(pattern))
            this.patterns[pattern] = 0;
        this.patterns[pattern] += count;
        if (this.restart_gen_flg)
            return;
	    if (this.mode == 1) // random mode
	        this.reset_pat_rank(this._shadow_patterns);
	    else if ((this.mode == 0) || (this.mode == 2))  // shuffle mode
	        this.add_shadow_patterns(pattern, count);
	};
    Acts.prototype.PutPatternBack = function (pattern, count)
	{
	    if (this.mode == 1) // random mode
	        return;
	    if (pattern == "")
	        return;
        if (!this.patterns.hasOwnProperty(pattern))
            return;
        if ((this.mode == 2) && this.restart_gen_flg)
            return;
        if (!this._shadow_patterns.hasOwnProperty(pattern))
            this._shadow_patterns[pattern] = 0;
        this.add_shadow_patterns(pattern, count, this.patterns[pattern]);
	};
	Acts.prototype.JSONLoad = function (json_)
	{
		var o;
		try {
			o = JSON.parse(json_);
		}
		catch(e) { return; }
		this.loadFromJSON(o);
	};
    Acts.prototype.SetRandomGenerator = function (random_gen_objs)
	{
        var random_gen = random_gen_objs.getFirstPicked();
        if (random_gen.check_name == "RANDOM")
            this.random_gen = random_gen;
        else
            alert ("[Pattern generator] This object is not a random generator object.");
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.Pattern = function (ret)
	{
        this.exp_LastPattern = this.get_pattern();
		ret.set_string(this.exp_LastPattern);
	};
	Exps.prototype.TotalCount = function (ret, pattern)
	{
		ret.set_float(this.get_pattern_count(pattern));
	};
	Exps.prototype.ManualPick = function (ret, pattern)
	{
		ret.set_string(this.get_pattern(pattern));
	};
	Exps.prototype.LastPattern = function (ret)
	{
		ret.set_string(this.exp_LastPattern);
	};
	Exps.prototype.RemainCount = function (ret, pattern)
	{
		ret.set_float(this.get_pattern_count(pattern, true));
	};
	Exps.prototype.AsJSON = function (ret)
	{
		ret.set_string(JSON.stringify(this.saveToJSON()));
	};
	Exps.prototype.CurPatternName = function (ret)
	{
		ret.set_string(this.exp_CurPatternName);
	};
	Exps.prototype.CurPatternTotalCount = function (ret)
	{
		ret.set_float(this.get_pattern_count(this.exp_CurPatternName) );
	};
	Exps.prototype.CurPatternRemainCount = function (ret)
	{
		ret.set_float(this.get_pattern_count(this.exp_CurPatternName, true) );
	};
	Exps.prototype.LoopIndex = function (ret)
	{
		ret.set_int(this.exp_LoopIndex );
	};
}());
;
;
cr.plugins_.Rex_SLGSquareTx = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_SLGSquareTx.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.check_name = "LAYOUT";
        this.mode = this.properties[0];
        this.is8Dir = (this.properties[5] == 1);
        this.SetPOX(this.properties[1]);
        this.SetPOY(this.properties[2]);
        this.SetWidth(this.properties[3]);
        this.SetHeight(this.properties[4]);
	};
	instanceProto.SetPOX = function(pox)
	{
        this.pox = pox;
	};
	instanceProto.SetPOY = function(poy)
	{
        this.poy = poy;
	};
	instanceProto.GetPOX = function()
	{
        return this.pox;
	};
	instanceProto.GetPOY = function()
	{
        return this.poy;
	};
	instanceProto.SetWidth = function(width)
	{
        this.width = width;
        this.halfWidth = width/2;
	};
	instanceProto.SetHeight = function(height)
	{
        this.height = height;
        this.halfHeight = height/2;
	};
	instanceProto.LXYZ2PX = function(lx, ly, lz)
	{
	    var x;
	    if (this.mode == 0)  // Orthogonal
	    {
	        x = lx * this.width;
	    }
	    else if (this.mode == 1)  // Isometric
	    {
	        x = (lx - ly) * this.halfWidth;
	    }
	    else if (this.mode == 2)  // Staggered
	    {
	        x = lx * this.width;
	        if (ly&1)
	            x += this.halfWidth;
	    }
        return x+this.pox;
	};
	instanceProto.LXYZ2PY = function (lx, ly, lz)
	{
	    var y;
	    if (this.mode == 0)  // Orthogonal
	    {
	        y = ly * this.height;
	    }
	    else if (this.mode == 1)  // Isometric
	    {
	        y = (lx + ly) * this.halfHeight;
	    }
	    else if (this.mode == 2)  // Staggered
	    {
	        y = ly * this.halfHeight;
	    }
        return y+this.poy;
	};
	instanceProto.PXY2LX = function(px, py)
	{
	    var lx;
	    if (this.mode == 0)   // Orthogonal
	    {
	        px -= this.pox;
	        lx = Math.round(px/this.width);
	    }
	    else if (this.mode == 1)   // Isometric
		{
		    px -= this.pox;
		    py -= this.poy;
		    lx = 0.5 * (Math.round(py/this.halfHeight) + Math.round(px/this.halfWidth));
		}
		else if (this.mode == 2)  // Staggered
		{
		    var ly = Math.round((py - this.poy)/this.halfHeight);
		    px = px - this.pox;
		    if (ly&1)
		        px -= this.halfWidth;
		    lx = Math.round(px/this.width);
		}
        return lx;
	};
	instanceProto.PXY2LY = function(px,py)
	{
	    var ly;
	    if (this.mode == 0)   // Orthogonal
	    {
	        py -= this.poy;
	        ly = Math.round(py/this.height);
	    }
	    else if (this.mode == 1)   // Isometric
		{
		    px -= this.pox;
		    py -= this.poy;
		    ly = 0.5 * (Math.round(py/this.halfHeight) - Math.round(px/this.halfWidth));
		}
		else if (this.mode == 2)  // Staggered
	    {
		    ly = Math.round((py - this.poy)/this.halfHeight);
		}
        return ly;
	};
    var map_01 = [[1,0], [0,1], [-1,0], [0,-1],
                  [1,1], [-1,1], [-1,-1], [1,-1]];   // Orthogonal or Isometric
	var nlx_map_2_0 = [0, -1, -1, 0, 0, -1, 0, 1]; // Staggered (y%2==0)
	var nlx_map_2_1 = [1, 0, 0, 1, 0, -1, 0, 1]; // Staggered (y%2==1)
	instanceProto.GetNeighborLX = function(x, y, dir)
	{
	    var dx;
	    if (this.mode == 0)   // Orthogonal
	    {
	        dx = map_01[dir][0];
	    }
	    else if (this.mode == 1)   // Isometric
		{
	        dx = map_01[dir][0];
		}
		else if (this.mode == 2)  // Staggered
	    {
	        if (y&1)
	            dx = nlx_map_2_1[dir];
	        else
	            dx = nlx_map_2_0[dir];
		}
		return (x+dx);
	};
	var nly_map_2 = [1, 1, -1, -1, 2, 0, -2, 0];  // Staggered
	instanceProto.GetNeighborLY = function(x, y, dir)
	{
	    var dy;
	    if (this.mode == 0)   // Orthogonal
	    {
	        dy = map_01[dir][1];
	    }
	    else if (this.mode == 1)   // Isometric
		{
	        dy = map_01[dir][1];
		}
		else if (this.mode == 2)  // Staggered
	    {
	        dy = nly_map_2[dir];
		}
        return (y+dy);
	};
	instanceProto.GetDirCount = function()
	{
        return (!this.is8Dir)? 4:8;
	};
	var dxy2dir = function (dx, dy, x, y, mode)
	{
	    var dir;
	    if (mode == 0)   // Orthogonal
	    {
	        dir = ((dx==1) && (dy==0))?  0:
	              ((dx==0) && (dy==1))?  1:
	              ((dx==-1) && (dy==0))? 2:
	              ((dx==0) && (dy==-1))? 3:
                  ((dx==1) && (dy==1))?  4:
	              ((dx==-1) && (dy==1))?  5:
	              ((dx==-1) && (dy==-1))? 6:
	              ((dx==1) && (dy==-1))? 7:
	                                     null;
	    }
	    else if (mode == 1)   // Isometric
		{
	        dir = ((dx==1) && (dy==0))?  0:
	              ((dx==0) && (dy==1))?  1:
	              ((dx==-1) && (dy==0))? 2:
	              ((dx==0) && (dy==-1))? 3:
                  ((dx==1) && (dy==1))?  4:
	              ((dx==-1) && (dy==1))?  5:
	              ((dx==-1) && (dy==-1))? 6:
	              ((dx==1) && (dy==-1))? 7:
	                                     null;
		}
		else if (mode == 2)  // Staggered
	    {
	        if (y&1)
	        {
	            dir = ((dx==1) && (dy==-1))?  0:
	                  ((dx==1) && (dy==1))?   1:
	                  ((dx==0) && (dy==1))?   2:
	                  ((dx==0) && (dy==-1))?  3:
	                  ((dx==0) && (dy==2))?  4:
	                  ((dx==-1) && (dy==0))?  5:
	                  ((dx==0) && (dy==-2))? 6:
	                  ((dx==1) && (dy==-0))? 7:
	                                          null;
	        }
	        else
	        {
	            dir = ((dx==0) && (dy==-1))?  0:
	                  ((dx==0) && (dy==1))?   1:
	                  ((dx==-1) && (dy==1))?  2:
	                  ((dx==-1) && (dy==-1))? 3:
	                  ((dx==0) && (dy==2))?  4:
	                  ((dx==-1) && (dy==0))?  5:
	                  ((dx==0) && (dy==-2))? 6:
	                  ((dx==1) && (dy==-0))? 7:
	                                          null;
	        }
		}
		return dir;
	};
	instanceProto.XYZ2LA = function(xyz_o, xyz_to)
	{
	    var dir = this.XYZ2Dir(xyz_o, xyz_to);
        var angle;
        if (dir == null)
            angle = -1;
        else
        {
            if (dir < 4)
                angle = dir*90;
            else
                angle = (dir - 4)*90 + 45;
        }
        return angle;
	};
	instanceProto.XYZ2Dir = function(xyz_o, xyz_to)
	{
	    var dx = xyz_to.x - xyz_o.x;
	    var dy = xyz_to.y - xyz_o.y;
	    var vmax = Math.max(quickAbs(dx), quickAbs(dy));
	    if (vmax != 0)
	    {
	        dx = dx/vmax;
	        dy = dy/vmax;
	    }
	    var dir = dxy2dir(dx, dy, xyz_o.x, xyz_o.y, this.mode);
        return dir;
	};
	instanceProto.NeighborXYZ2Dir = function(xyz_o, xyz_to)
	{
	    var dx = xyz_to.x - xyz_o.x;
	    var dy = xyz_to.y - xyz_o.y;
	    var dir = dxy2dir(dx, dy, xyz_o.x, xyz_o.y, this.mode);
	    if ((dir != null) && (!this.is8Dir) && (dir > 3))
	        dir = null;
        return dir;
	};
	instanceProto.LXYZRotate2LX = function (lx, ly, lz, dir)
	{
        var new_lx;
        switch (this.mode)
        {
        case 0:    // Orthogonal
        case 1:    // Isometric
	        switch (dir)
	        {
	        case 1: new_lx = -ly; break;
	        case 2: new_lx = -lx; break;
	        case 3: new_lx = ly; break;
	        default: new_lx = lx; break;
	        }
        break;
        case 2:
        break;
        }
        return new_lx;
	};
	instanceProto.LXYZRotate2LY = function (lx, ly, lz, dir)
	{
        var new_ly;
        switch (this.mode)
        {
        case 0:    // Orthogonal
        case 1:    // Isometric
	        switch (dir)
	        {
	        case 1: new_ly = lx; break;
	        case 2: new_ly = -ly; break;
	        case 3: new_ly = -lx; break;
	        default: new_ly = ly; break;
	        }
        break;
        case 2:
        break;
        }
        return new_ly;
	};
	instanceProto.LXYZ2Dist = function (lx0, ly0, lz0, lx1, ly1, lz1, is_rough)
	{
        var dx = lx1 - lx0;
        var dy = ly1 - ly0;
        var d;
        if (!is_rough)
            d = Math.sqrt(dx*dx + dy*dy);
        else
            d = quickAbs(dx) + quickAbs(dy);
       return d;
	};
	instanceProto.OffsetLX = function (lx0, ly0, lz0, offsetx, offsety, offsetz)
	{
        return lx0 + offsetx;
	};
	instanceProto.OffsetLY = function (lx0, ly0, lz0, offsetx, offsety, offsetz)
	{
        return ly0 + offsety;
	};
	function quickAbs(x)
	{
		return x < 0 ? -x : x;
	};
	instanceProto.PXY2EdgePA = function (px1, py1, px0, py0)
	{
	    var a, a01 = cr.angleTo(px1, py1, px0, py0);;
	    switch (this.mode)
	    {
	    case 0:      // Orthogonal
	        a = a01;
	        break;
	    case 1:      // Isometric
	    case 2:      // Staggered
	        a = 4.7123889804 - a01; // 270 - a01
	        break;
	    }
		return a;
	};
	instanceProto.saveToJSON = function ()
	{
		return { "iso": this.mode,
                 "w": this.width,
                 "h": this.height,
                 "ox": this.pox,
                 "oy": this.poy,
                 "is8d": this.is8Dir};
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.mode = o["iso"];
        this.SetWidth(o["w"]);
        this.SetHeight(o["h"]);
        this.SetPOX(o["ox"]);
        this.SetPOY(o["oy"]);
        this.is8Dir = o["is8d"];
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.SetOrientation = function (m)
    {
        this.mode = m;
	};
    Acts.prototype.SetCellSize = function (width, height)
    {
        this.SetWidth(width);
        this.SetHeight(height);
	};
    Acts.prototype.SetOffset = function (x, y)
    {
        this.SetPOX(x);
        this.SetPOY(y);
	};
    Acts.prototype.SetDirections = function (d)
    {
        this.is8Dir = (d==1);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.Width = function (ret)
	{
	    ret.set_float(this.width);
	};
	Exps.prototype.Height = function (ret)
    {
	    ret.set_float(this.height);
	};
	Exps.prototype.POX = function (ret)
	{
	    ret.set_float(this.pox);
	};
	Exps.prototype.POY = function (ret)
    {
	    ret.set_float(this.poy);
	};
	Exps.prototype.DIRRIGHT = function (ret)
    {
	    ret.set_int(0);
	};
	Exps.prototype.DIRDOWN = function (ret)
    {
	    ret.set_int(1);
	};
	Exps.prototype.DIRLEFT = function (ret)
    {
	    ret.set_int(2);
	};
	Exps.prototype.DIRUP = function (ret)
    {
	    ret.set_int(3);
	};
	Exps.prototype.DIRRIGHTDOWN = function (ret)
    {
	    ret.set_int(4);
	};
	Exps.prototype.DIRLEFTDOWN = function (ret)
    {
	    ret.set_int(5);
	};
	Exps.prototype.DIRLEFTUP = function (ret)
    {
	    ret.set_int(6);
	};
	Exps.prototype.DIRRIGHTUP = function (ret)
    {
	    ret.set_int(7);
	};
	Exps.prototype.LXY2PX = function (ret,lx,ly)
	{
        var px = this.LXYZ2PX(lx,ly,0);
	    ret.set_float(px);
	};
	Exps.prototype.LXY2PY = function (ret,lx,ly)
	{
        var py = this.LXYZ2PY(lx,ly,0);
	    ret.set_float(py);
	};
	Exps.prototype.PXY2LX = function (ret,px,py)
	{
        var lx = this.PXY2LX(px,py);
	    ret.set_float(lx);
	};
	Exps.prototype.PXY2LY = function (ret,px,py)
	{
        var ly = this.PXY2LY(px,py);
	    ret.set_float(ly);
	};
}());
;
;
cr.plugins_.Rex_SequenceMatcher = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_SequenceMatcher.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this._symbol_buffer = new cr.plugins_.Rex_SequenceMatcher.BufferKlass(this.properties[0]);
        this._has_matched_pattern = false;
	};
	instanceProto.push_symbol = function (s)
	{
	    this._symbol_buffer.push_data(s);
	    this._has_matched_pattern = false;
	    this.runtime.trigger(cr.plugins_.Rex_SequenceMatcher.prototype.cnds.OnMatchPattern, this);
	    if (!this._has_matched_pattern)
            this.runtime.trigger(cr.plugins_.Rex_SequenceMatcher.prototype.cnds.OnNoMatchPattern, this);
	};
	instanceProto.saveToJSON = function ()
	{
		return { "d": this._symbol_buffer.saveToJSON()
	            };
	};
	instanceProto.loadFromJSON = function (o)
	{
	    this._symbol_buffer.loadFromJSON(o["d"]);
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnMatchPattern = function (pattern)
	{
	    var is_matched = this._symbol_buffer.is_matched(pattern);
	    this._has_matched_pattern |= is_matched;
        return is_matched;
	};
	Cnds.prototype.OnNoMatchPattern = function ()
	{
        return true;
	};
	Cnds.prototype.IsMatchPattern = function (pattern)
	{
        return this._symbol_buffer.is_matched(pattern);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
	Acts.prototype.CleanSymbolBuffer = function ()
	{
	    this._symbol_buffer.clean();
	};
	Acts.prototype.SetSymbolBufferLength = function (max_len)
	{
	    this._symbol_buffer.set_max_length(max_len);
	};
	Acts.prototype.PushSymbol = function (s)
	{
	    this.push_symbol(s);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
}());
(function ()
{
    cr.plugins_.Rex_SequenceMatcher.BufferKlass = function(max_len)
    {
        this._buf = [];
        this.set_max_length(max_len);
    };
    var BufferKlassProto = cr.plugins_.Rex_SequenceMatcher.BufferKlass.prototype;
	BufferKlassProto.clean = function()
	{
	    this._buf.length = 0;
	};
	BufferKlassProto.set_max_length = function(max_len)
	{
	    this.max_len = max_len;
        if (max_len < this._buf.length)
            this._buf.length = max_len;
	};
	BufferKlassProto.push_data = function(data)
	{
	    this._buf.push(data);
	    if (this._buf.length > this.max_len)
	        this._buf.shift()
	};
	BufferKlassProto.is_matched = function(pattern)
	{
	    if (pattern == "")
	        return false;
	    var has_comma = (pattern.indexOf(",") != -1);
	    if (has_comma)
	    {
	        pattern = pattern.split(",");
	    }
	    var pattern_len=pattern.length;
	    var buf_len=this._buf.length;
	    if (pattern_len > buf_len)
	        return false;
	    var i,is_matched=true;
	    for (i=0; i<pattern_len; i++)
	    {
	        if (pattern[pattern_len-1-i] != this._buf[buf_len-1-i])
	        {
	            is_matched = false;
	            break;
	        }
	    }
	    return is_matched;
	};
	BufferKlassProto.saveToJSON = function ()
	{
		return { "b" : this._buf,
		         "l" : this.max_len,
	            };
	};
	BufferKlassProto.loadFromJSON = function (o)
	{
	    this._buf = o["b"];
	    this.set_max_length(o["l"]);
	};
	BufferKlassProto.content2string = function (separator)
	{
	    return this._buf.join(separator);
	};
}());
;
;
cr.plugins_.Rex_SysExt = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_SysExt.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.tmp_insts = [];
	};
    instanceProto._pick_all = function (objtype)
	{
        if (!objtype)
            return false;
		if (!objtype.instances.length)
			return false;
        var sol = objtype.getCurrentSol();
        sol.select_all = true;
		objtype.applySolToContainer();
        return true;
	};
    instanceProto._pick_inverse = function (objtype, uid, is_pick_all)
	{
        if (!objtype)
            return false;
		if (!objtype.instances.length)
			return false;
        var sol = objtype.getCurrentSol();
        if (is_pick_all==1)
        {
            sol.select_all = true;
            cr.shallowAssignArray(sol.instances, sol.getObjects());
        }
        var insts = sol.instances;
        var insts_length = insts.length;
        var i, inst;
        var index = -1;
        for (i=0; i < insts_length; i++)
        {
            inst = insts[i];
            if (inst.uid == uid)
            {
                index = i;
                break;
            }
        }
        if (index != -1)
            cr.arrayRemove(insts, index);
        sol.select_all = false;
        objtype.applySolToContainer();
        return (sol.instances.length != 0);
	};
    instanceProto._quick_pick = function (objtype, uid)
	{
        if (!objtype)
            return;
		if (!objtype.instances.length)
			return;
        var inst = this.runtime.getObjectByUID(uid);
        var is_find = (inst != null);
        if (is_find)
        {
            var type_name = inst.type.name;
            if (objtype.is_family)
            {
                is_find = false;
                var members = objtype.members;
                var cnt = members.length;
                var i;
                for (i=0; i<cnt; i++)
                {
                    if (type_name == members[i].name)
                    {
                        is_find = true;
                        break;
                    }
                }
            }
            else
                is_find = (type_name == objtype.name);
        }
        var sol = objtype.getCurrentSol();
        if (is_find)
            sol.pick_one(inst);
        else
            sol.instances.length = 0;
        sol.select_all = false;
        objtype.applySolToContainer();
        return is_find;
	};
    instanceProto._get_layer = function(layerparam)
    {
        return (typeof layerparam == "number")?
               this.runtime.getLayerByNumber(layerparam):
               this.runtime.getLayerByName(layerparam);
    };
	var GetInstPropertyValue = function(inst, prop_index)
	{
	    var val;
	    switch(prop_index)
	    {
	    case 0:   // uid
	        val = inst.uid;
	        break;
	    case 1:   // x
	        val = inst.x;
	        break;
	    case 2:   // y
	        val = inst.y;
	        break;
	    case 3:   // width
	        val = inst.width;
	        break;
	    case 4:   // height
	        val = inst.height;
	        break;
	    case 5:   // angle
	        val = inst.angle;
	        break;
	    case 6:   // opacity
	        val = inst.opacity;
	        break;
	    default:
	        val = 0;
	        break;
	    }
	    return val;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.PickAll = function (objtype)
	{
		return this._pick_all(objtype);;
	};
	Cnds.prototype.PickInverse = function (objtype, uid, is_pick_all)
	{
        return this._pick_inverse(objtype, uid, is_pick_all);
	};
	Cnds.prototype.QuickPickByUID = function (objtype, uid)
	{
        return this._quick_pick(objtype, uid);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.__PickByUID = function (objtype, uid, is_pick_all)
	{
        if (!objtype)
            return;
		if (!objtype.instances.length)
			return;
        var sol = objtype.getCurrentSol();
        if (is_pick_all==1)
            sol.select_all = true;
        var insts = sol.getObjects();
        var insts_length = insts.length;
        var i, inst;
        var is_find = false;
        for (i=0; i < insts_length; i++)
        {
            inst = insts[i];
            if (inst.uid == uid)
            {
                is_find = true;
                break;
            }
        }
        if (is_find)
            sol.pick_one(inst);
        else
            sol.instances.length = 0;
        sol.select_all = false;
        objtype.applySolToContainer();
	};
    Acts.prototype.PickByPropCmp = function (objtype, prop_index, cmp, value, is_pick_all)
	{
        if (!objtype)
            return;
		if (!objtype.instances.length)
			return;
        var sol = objtype.getCurrentSol();
        if (is_pick_all==1)
            sol.select_all = true;
        var insts = sol.getObjects();
        var insts_length = insts.length;
        var i, inst;
        this.tmp_insts.length = 0;
        for (i=0; i < insts_length; i++)
        {
            inst = insts[i];
            if (cr.do_cmp(GetInstPropertyValue(inst, prop_index), cmp, value))
                this.tmp_insts.push(inst);
        }
        cr.shallowAssignArray(sol.instances, this.tmp_insts);
        sol.select_all = false;
	};
    Acts.prototype.__PickInverse = function (objtype, uid, is_pick_all)
	{
        this._pick_inverse(objtype, uid, is_pick_all);
	};
    Acts.prototype.PickAll = function (objtype)
	{
        if (!objtype)
            return;
        var sol = objtype.getCurrentSol();
        sol.select_all = true;
		objtype.applySolToContainer();
	};
    Acts.prototype.PickByUID = function (objtype, uid)
	{
		var i, len, j, inst, families, instances, sol;
        if (!objtype)
            return;
        inst = this.runtime.getObjectByUID(uid);
        if (!inst)
        	return;
        sol = objtype.getCurrentSol();
        if (!sol.select_all && sol.instances.indexOf(inst) === -1)
        	return;		// not picked
        if (objtype.is_family)
        {
        	families = objtype.families;
        	for (i = 0, len = families.length; i < len; i++)
        	{
        		if (families[i] === inst.type)
        		{
        			sol.pick_one(inst);
        			objtype.applySolToContainer();
        			return;
        		}
        	}
        }
        else if (inst.type === objtype)
        {
        	sol.pick_one(inst);
        	objtype.applySolToContainer();
        	return;
        }
	};
    Acts.prototype.PickInverse = function (objtype, uid, is_pick_all)
	{
	    var i, len, j, inst, families, instances, sol;
        if (!objtype)
            return;
        sol = objtype.getCurrentSol();
        if (is_pick_all)
        {
            sol.select_all = true;
        }
        if (sol.select_all)
        {
        	sol.select_all = false;
        	sol.instances.length = 0;
        	instances = objtype.instances;
        	for (i = 0, len = instances.length; i < len; i++)
        	{
        		inst = instances[i];
        		if (inst.uid !== uid)
        			sol.instances.push(inst);
        	}
        	objtype.applySolToContainer();
        	return;
        }
        else
        {
        	for (i = 0, j = 0, len = sol.instances.length; i < len; i++)
        	{
        		inst = sol.instances[i];
        		sol.instances[j] = inst;
        		if (inst.uid !== uid)
        			j++;
        	}
        	sol.instances.length = j;
        	objtype.applySolToContainer();
        	return;
        }
	};
    Acts.prototype.SetGroupActive = function (group, active)
    {
		var g = this.runtime.groups_by_name[group.toLowerCase()];
		if (!g)
			return;
		switch (active) {
		case 0:
			g.setGroupActive(false);
			break;
		case 1:
			g.setGroupActive(true);
			break;
		case 2:
			g.setGroupActive(!g.group_active);
			break;
		}
    };
    Acts.prototype.SetLayerVisible = function (layerparam, visible_)
    {
        var layer;
		if (cr.is_number(layerparam))
			layer = this.runtime.getLayerByNumber(layerparam);
		else
			layer = this.runtime.getLayerByName(layerparam);
        if (!layer)
            return;
        var is_visible = (visible_ == 1);
		if (layer.visible !== is_visible)
		{
			layer.visible = is_visible;
			this.runtime.redraw = true;
		}
    };
    Acts.prototype.SwapPosByUID = function (uidA, uidB)
    {
        var instA = this.runtime.getObjectByUID(uidA);
        var instB = this.runtime.getObjectByUID(uidB);
        if (!instA || !instB)
            return;
        var pxA = instA.x, pyA = instA.y;
        var pxB = instB.x, pyB = instB.y;
        instA.x = pxB; instA.y = pyB;
        instB.x = pxA; instB.y = pyA;
        instA.set_bbox_changed();
        instB.set_bbox_changed();
    };
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.Eval = function (ret, code_string)
	{
	    ret.set_any( eval( "("+code_string+")" ) );
	};
    Exps.prototype.ToHexString = function (ret, decval)
	{
	    ret.set_string( decval.toString(16) );
	};
    Exps.prototype.ToDecimalMark = function (ret, number_in, locales)
	{
	    ret.set_string( number_in.toLocaleString(locales) );
	};
    Exps.prototype.String2ByteCount = function (ret, s)
	{
	    var c = encodeURI(s).split(/%..|./).length - 1;
	    ret.set_int( c );
	};
    Exps.prototype.SubString = function (ret, s, start, end)
	{
	    ret.set_string( s.substring(start, end) );
	};
    Exps.prototype.ToFixed = function (ret, n, dig)
	{
        if (dig == null)
            dig = 10;
	    ret.set_string( n["toFixed"](dig) );
	};
    Exps.prototype.ToPrecision = function (ret, n, dig)
	{
        if (dig == null)
            dig = 10;
	    ret.set_string( n["toPrecision"](dig) );
	};
    Exps.prototype.ToFixedNumber = function (ret, n, dig)
	{
        if (dig == null)
            dig = 10;
        var val = n["toFixed"](dig);
	    ret.set_float( parseFloat( val ) );
	};
    Exps.prototype.Newline = function (ret, cnt)
	{
        if (cnt == null)
            cnt = 1;
        var i, s = "";
        for (i=0; i<cnt; i++)
            s += "\n";
	    ret.set_string( s );
	};
    Exps.prototype.NormalRandom = function (ret, mean, stddev)
	{
        var u, v, r
		do
        {
			u = 2*Math.random() -1;
			v = 2*Math.random() -1;
			r = u*u + v*v;
		} while (r > 1 || r == 0);
		var gauss = u * Math.sqrt(-2*Math.log(r)/r);
	    ret.set_float( mean + gauss*stddev );
	};
    Exps.prototype.NormalRandomApproximation = function (ret, mean, stddev)
	{
        var g=0;
        for (var i=0; i<6; i++)
            g += Math.random();
		g = (g - 3) / 3;
	    ret.set_float( mean + g*stddev );
	};
	Exps.prototype.ReflectionAngle = function (ret, inputA, normalA)
	{
	    var normalangle = cr.to_radians(normalA);
        var startangle = cr.to_radians(inputA);
		var vx = Math.cos(startangle);
		var vy = Math.sin(startangle);
		var nx = Math.cos(normalangle);
		var ny = Math.sin(normalangle);
		var v_dot_n = vx * nx + vy * ny;
		var rx = vx - 2 * v_dot_n * nx;
		var ry = vy - 2 * v_dot_n * ny;
        var ra = cr.angleTo(0, 0, rx, ry);
	    ret.set_float(cr.to_degrees(ra));
	};
    var num2base32 = ["0","1","2","3","4","5","6","7","8","9",
                                 "b","c","d","e","f","g","h","j","k","m",
                                 "n","p","q","r","s","t","u","v","w","x",
                                 "y","z"];
    Exps.prototype.RandomBase32 = function (ret, dig)
	{
        var o = "";
        for (var i=0;i<dig;i++)
            o += num2base32[ Math.floor( Math.random()*32 ) ];
	    ret.set_string( o );
	};
}());
;
;
cr.plugins_.Rex_WaitEvent = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_WaitEvent.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	    this.events = {};
		this.exp_EventName = "";
        this.exp_Tag = null;
	};
	var isEmpty = function(o)
	{
		for (var k in o)
		    return false;
		return true;
	};
    instanceProto.saveToJSON = function ()
	{
		return { "evts": this.events,
                 "ename": this.exp_EventName,
                 "tag": this.exp_Tag,
                };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.events = o["evts"];
        this.exp_EventName = o["ename"];
        this.exp_Tag = o["tag"];
	};
	instanceProto.eventExist = function (event_name, tag)
	{
        return (this.events[tag] != null) && (this.events[tag][event_name] != null);
	};
	instanceProto.runTrigEvent = function (method, tag, event_name)
	{
        this.exp_EventName = event_name;
        this.exp_Tag = tag;
        this.runtime.trigger(method, this);
        this.exp_Tag = null;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnAllEventsFinished = function(tag)
	{
		return (this.exp_Tag === tag);
	};
	Cnds.prototype.OnAnyEventFinished = function(tag)
	{
		return (this.exp_Tag === tag);
	};
	Cnds.prototype.NoWaitEvent = function(tag)
	{
		var e=this.events[tag];
		if (e == null)
		    return true;
		var k;
		for (k in e)
		{
		    return false;
		}
		return true;
	};
	Cnds.prototype.OnAnyEventStart = function()
	{
		return true;
	};
	Cnds.prototype.IsWaiting = function(event_name, tag)
	{
		return (this.events[tag] && this.events[tag][event_name]);
	};
	function Acts() {};
	pluginProto.acts = new Acts();
	Acts.prototype.WaitEvent = function(event_name, tag)
	{
	    if (!this.events.hasOwnProperty(tag))
		    this.events[tag] = {};
        if (this.events[tag].hasOwnProperty(event_name))
            return;
	    this.events[tag][event_name] = true;
        var cnds = cr.plugins_.Rex_WaitEvent.prototype.cnds;
        this.runTrigEvent(cnds.OnAnyEventStart, tag, event_name);
	};
	Acts.prototype.EventFinished = function(event_name, tag)
	{
	    if (!this.eventExist(event_name, tag))
		    return;
        var cnds = cr.plugins_.Rex_WaitEvent.prototype.cnds;
		this.exp_EventName = event_name;
	    delete this.events[tag][event_name];
        this.runTrigEvent(cnds.OnAnyEventFinished, tag, event_name);
		if (isEmpty(this.events[tag]))
		{
			delete this.events[tag];
            this.runTrigEvent(cnds.OnAllEventsFinished, tag, event_name);
        }
	};
	Acts.prototype.CancelEvents = function(tag)
	{
	    if (!this.events.hasOwnProperty(tag))
		    return;
		delete this.events[tag];
	};
	function Exps() {};
	pluginProto.exps = new Exps();
	Exps.prototype.CurEventName = function(ret)
	{
		ret.set_string(this.exp_EventName);
	};
	Exps.prototype.CurTag = function(ret)
	{
		ret.set_string(this.exp_Tag || "");
	};
}());
;
;
cr.plugins_.Rex_WebstorageExt = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_WebstorageExt.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this._webstorage_obj = null;
	    this.fake_ret = {value:0,
	                     set_any: function(value){this.value=value;},
	                     set_int: function(value){this.value=value;},
                         set_float: function(value){this.value=value;},
                         set_string: function(value){this.value=value;},
	                    };
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.webstorage_get = function ()
	{
        if (this._webstorage_obj != null)
            return this._webstorage_obj;
;
        var plugins = this.runtime.types;
        this._key_exist_fn = cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists;
        var name, plugin;
        for (name in plugins)
        {
            plugin = plugins[name];
            if (plugin.plugin.acts.StoreLocal == this._save_fn)
            {
                this._webstorage_obj = plugin.instances[0];
                break;
            }
        }
        return this._webstorage_obj;
	};
    instanceProto.load_value = function (key)
    {
        var webstorage_obj = this.webstorage_get();
        cr.plugins_.WebStorage.prototype.exps.LocalValue.call(webstorage_obj, this.fake_ret, key);
        return this.fake_ret.value;
    };
    instanceProto.save_value = function (key, value)
    {
        var webstorage_obj = this.webstorage_get();
        cr.plugins_.WebStorage.prototype.acts.StoreLocal.call(webstorage_obj, key, value);
    };
    instanceProto.key_exist = function (key)
    {
        var webstorage_obj = this.webstorage_get();
        return cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists.call(webstorage_obj, key);
    };
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.LocalValue = function (ret, _key, _default)
	{
	    var v;
	    if (this.key_exist(_key))
	    {
	        v = this.load_value(_key);
	    }
	    else
	    {
	        v = _default;
	        this.save_value(_key, v);
	    }
	    ret.set_any( v );
	};
}());
;
;
cr.plugins_.Rex_fnParam2Array = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_fnParam2Array.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
	};
	var fake_ret = {value:0,
	                set_any: function(value){this.value=value;},
	                set_int: function(value){this.value=value;},
                    set_float: function(value){this.value=value;},
                    set_string: function(value){this.value=value;},
	               };
	instanceProto.new_array = function (array_objs)
	{
        cr.system_object.prototype.acts.CreateObject.call(
            this.runtime.system,
            array_objs,
            this.runtime.getLayerByNumber(0),
            0,
            0
        );
        return array_objs.getFirstPicked();
	};
	instanceProto.get_fn_object = function ()
	{
;
        var plugins = this.runtime.types;
        var name, inst;
        for (name in plugins)
        {
            inst = plugins[name].instances[0];
            if (inst instanceof cr.plugins_.Function.prototype.Instance)
            {
                return inst;
            }
        }
	};
	instanceProto.get_fn_params_cnt = function (fn_obj)
	{
        cr.plugins_.Function.prototype.exps.ParamCount.call(fn_obj, fake_ret);
        return fake_ret.value;
	};
	instanceProto.get_fn_param = function (fn_obj, index_)
	{
        cr.plugins_.Function.prototype.exps.Param.call(fn_obj, fake_ret, index_);
        return fake_ret.value;
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
    Acts.prototype.DumpFParam2NewArray = function (array_objs)
	{
;
        var array_obj = this.new_array(array_objs);
        var is_array_inst = (array_obj instanceof cr.plugins_.Arr.prototype.Instance);
;
        cr.plugins_.Arr.prototype.acts.SetSize.call(array_obj, 0, 1, 1);
        var fn_obj = this.get_fn_object();
        var params_cnt = this.get_fn_params_cnt(fn_obj);
        var i, p, arr_push = cr.plugins_.Arr.prototype.acts.Push;
        for (i=0; i<params_cnt; i++)
        {
            p = this.get_fn_param(fn_obj, i);
            arr_push.call(array_obj, 0, p, 0);
        }
	};
	function Exps() {};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Sprite = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Sprite.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	function frame_getDataUri()
	{
		if (this.datauri.length === 0)
		{
			var tmpcanvas = document.createElement("canvas");
			tmpcanvas.width = this.width;
			tmpcanvas.height = this.height;
			var tmpctx = tmpcanvas.getContext("2d");
			if (this.spritesheeted)
			{
				tmpctx.drawImage(this.texture_img, this.offx, this.offy, this.width, this.height,
										 0, 0, this.width, this.height);
			}
			else
			{
				tmpctx.drawImage(this.texture_img, 0, 0, this.width, this.height);
			}
			this.datauri = tmpcanvas.toDataURL("image/png");
		}
		return this.datauri;
	};
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		var i, leni, j, lenj;
		var anim, frame, animobj, frameobj, wt, uv;
		this.all_frames = [];
		this.has_loaded_textures = false;
		for (i = 0, leni = this.animations.length; i < leni; i++)
		{
			anim = this.animations[i];
			animobj = {};
			animobj.name = anim[0];
			animobj.speed = anim[1];
			animobj.loop = anim[2];
			animobj.repeatcount = anim[3];
			animobj.repeatto = anim[4];
			animobj.pingpong = anim[5];
			animobj.sid = anim[6];
			animobj.frames = [];
			for (j = 0, lenj = anim[7].length; j < lenj; j++)
			{
				frame = anim[7][j];
				frameobj = {};
				frameobj.texture_file = frame[0];
				frameobj.texture_filesize = frame[1];
				frameobj.offx = frame[2];
				frameobj.offy = frame[3];
				frameobj.width = frame[4];
				frameobj.height = frame[5];
				frameobj.duration = frame[6];
				frameobj.hotspotX = frame[7];
				frameobj.hotspotY = frame[8];
				frameobj.image_points = frame[9];
				frameobj.poly_pts = frame[10];
				frameobj.pixelformat = frame[11];
				frameobj.spritesheeted = (frameobj.width !== 0);
				frameobj.datauri = "";		// generated on demand and cached
				frameobj.getDataUri = frame_getDataUri;
				uv = {};
				uv.left = 0;
				uv.top = 0;
				uv.right = 1;
				uv.bottom = 1;
				frameobj.sheetTex = uv;
				frameobj.webGL_texture = null;
				wt = this.runtime.findWaitingTexture(frame[0]);
				if (wt)
				{
					frameobj.texture_img = wt;
				}
				else
				{
					frameobj.texture_img = new Image();
					frameobj.texture_img.cr_src = frame[0];
					frameobj.texture_img.cr_filesize = frame[1];
					frameobj.texture_img.c2webGL_texture = null;
					this.runtime.waitForImageLoad(frameobj.texture_img, frame[0]);
				}
				cr.seal(frameobj);
				animobj.frames.push(frameobj);
				this.all_frames.push(frameobj);
			}
			cr.seal(animobj);
			this.animations[i] = animobj;		// swap array data for object
		}
	};
	typeProto.updateAllCurrentTexture = function ()
	{
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			inst.curWebGLTexture = inst.curFrame.webGL_texture;
		}
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.texture_img.c2webGL_texture = null;
			frame.webGL_texture = null;
		}
		this.has_loaded_textures = false;
		this.updateAllCurrentTexture();
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.updateAllCurrentTexture();
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.has_loaded_textures || !this.runtime.glwrap)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.has_loaded_textures = true;
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.has_loaded_textures)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			this.runtime.glwrap.deleteTexture(frame.webGL_texture);
			frame.webGL_texture = null;
		}
		this.has_loaded_textures = false;
	};
	var already_drawn_images = [];
	typeProto.preloadCanvas2D = function (ctx)
	{
		var i, len, frameimg;
		cr.clearArray(already_drawn_images);
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frameimg = this.all_frames[i].texture_img;
			if (already_drawn_images.indexOf(frameimg) !== -1)
					continue;
			ctx.drawImage(frameimg, 0, 0);
			already_drawn_images.push(frameimg);
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		var poly_pts = this.type.animations[0].frames[0].poly_pts;
		if (this.recycled)
			this.collision_poly.set_pts(poly_pts);
		else
			this.collision_poly = new cr.CollisionPoly(poly_pts);
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);	// 0=visible, 1=invisible
		this.isTicking = false;
		this.inAnimTrigger = false;
		this.collisionsEnabled = (this.properties[3] !== 0);
		this.cur_animation = this.getAnimationByName(this.properties[1]) || this.type.animations[0];
		this.cur_frame = this.properties[2];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		var curanimframe = this.cur_animation.frames[this.cur_frame];
		this.collision_poly.set_pts(curanimframe.poly_pts);
		this.hotspotX = curanimframe.hotspotX;
		this.hotspotY = curanimframe.hotspotY;
		this.cur_anim_speed = this.cur_animation.speed;
		this.cur_anim_repeatto = this.cur_animation.repeatto;
		if (!(this.type.animations.length === 1 && this.type.animations[0].frames.length === 1) && this.cur_anim_speed !== 0)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (this.recycled)
			this.animTimer.reset();
		else
			this.animTimer = new cr.KahanAdder();
		this.frameStart = this.getNowTime();
		this.animPlaying = true;
		this.animRepeats = 0;
		this.animForwards = true;
		this.animTriggerName = "";
		this.changeAnimName = "";
		this.changeAnimFrom = 0;
		this.changeAnimFrame = -1;
		this.type.loadTextures();
		var i, leni, j, lenj;
		var anim, frame, uv, maintex;
		for (i = 0, leni = this.type.animations.length; i < leni; i++)
		{
			anim = this.type.animations[i];
			for (j = 0, lenj = anim.frames.length; j < lenj; j++)
			{
				frame = anim.frames[j];
				if (frame.width === 0)
				{
					frame.width = frame.texture_img.width;
					frame.height = frame.texture_img.height;
				}
				if (frame.spritesheeted)
				{
					maintex = frame.texture_img;
					uv = frame.sheetTex;
					uv.left = frame.offx / maintex.width;
					uv.top = frame.offy / maintex.height;
					uv.right = (frame.offx + frame.width) / maintex.width;
					uv.bottom = (frame.offy + frame.height) / maintex.height;
					if (frame.offx === 0 && frame.offy === 0 && frame.width === maintex.width && frame.height === maintex.height)
					{
						frame.spritesheeted = false;
					}
				}
			}
		}
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"a": this.cur_animation.sid,
			"f": this.cur_frame,
			"cas": this.cur_anim_speed,
			"fs": this.frameStart,
			"ar": this.animRepeats,
			"at": this.animTimer.sum,
			"rt": this.cur_anim_repeatto
		};
		if (!this.animPlaying)
			o["ap"] = this.animPlaying;
		if (!this.animForwards)
			o["af"] = this.animForwards;
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		var anim = this.getAnimationBySid(o["a"]);
		if (anim)
			this.cur_animation = anim;
		this.cur_frame = o["f"];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		this.cur_anim_speed = o["cas"];
		this.frameStart = o["fs"];
		this.animRepeats = o["ar"];
		this.animTimer.reset();
		this.animTimer.sum = o["at"];
		this.animPlaying = o.hasOwnProperty("ap") ? o["ap"] : true;
		this.animForwards = o.hasOwnProperty("af") ? o["af"] : true;
		if (o.hasOwnProperty("rt"))
			this.cur_anim_repeatto = o["rt"];
		else
			this.cur_anim_repeatto = this.cur_animation.repeatto;
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
		this.collision_poly.set_pts(this.curFrame.poly_pts);
		this.hotspotX = this.curFrame.hotspotX;
		this.hotspotY = this.curFrame.hotspotY;
	};
	instanceProto.animationFinish = function (reverse)
	{
		this.cur_frame = reverse ? 0 : this.cur_animation.frames.length - 1;
		this.animPlaying = false;
		this.animTriggerName = this.cur_animation.name;
		this.inAnimTrigger = true;
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished, this);
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnimFinished, this);
		this.inAnimTrigger = false;
		this.animRepeats = 0;
	};
	instanceProto.getNowTime = function()
	{
		return this.animTimer.sum;
	};
	instanceProto.tick = function()
	{
		this.animTimer.add(this.runtime.getDt(this));
		if (this.changeAnimName.length)
			this.doChangeAnim();
		if (this.changeAnimFrame >= 0)
			this.doChangeAnimFrame();
		var now = this.getNowTime();
		var cur_animation = this.cur_animation;
		var prev_frame = cur_animation.frames[this.cur_frame];
		var next_frame;
		var cur_frame_time = prev_frame.duration / this.cur_anim_speed;
		if (this.animPlaying && now >= this.frameStart + cur_frame_time)
		{
			if (this.animForwards)
			{
				this.cur_frame++;
			}
			else
			{
				this.cur_frame--;
			}
			this.frameStart += cur_frame_time;
			if (this.cur_frame >= cur_animation.frames.length)
			{
				if (cur_animation.pingpong)
				{
					this.animForwards = false;
					this.cur_frame = cur_animation.frames.length - 2;
				}
				else if (cur_animation.loop)
				{
					this.cur_frame = this.cur_anim_repeatto;
				}
				else
				{
					this.animRepeats++;
					if (this.animRepeats >= cur_animation.repeatcount)
					{
						this.animationFinish(false);
					}
					else
					{
						this.cur_frame = this.cur_anim_repeatto;
					}
				}
			}
			if (this.cur_frame < 0)
			{
				if (cur_animation.pingpong)
				{
					this.cur_frame = 1;
					this.animForwards = true;
					if (!cur_animation.loop)
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
					}
				}
				else
				{
					if (cur_animation.loop)
					{
						this.cur_frame = this.cur_anim_repeatto;
					}
					else
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
						else
						{
							this.cur_frame = this.cur_anim_repeatto;
						}
					}
				}
			}
			if (this.cur_frame < 0)
				this.cur_frame = 0;
			else if (this.cur_frame >= cur_animation.frames.length)
				this.cur_frame = cur_animation.frames.length - 1;
			if (now > this.frameStart + (cur_animation.frames[this.cur_frame].duration / this.cur_anim_speed))
			{
				this.frameStart = now;
			}
			next_frame = cur_animation.frames[this.cur_frame];
			this.OnFrameChanged(prev_frame, next_frame);
			this.runtime.redraw = true;
		}
	};
	instanceProto.getAnimationByName = function (name_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (cr.equals_nocase(a.name, name_))
				return a;
		}
		return null;
	};
	instanceProto.getAnimationBySid = function (sid_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (a.sid === sid_)
				return a;
		}
		return null;
	};
	instanceProto.doChangeAnim = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var anim = this.getAnimationByName(this.changeAnimName);
		this.changeAnimName = "";
		if (!anim)
			return;
		if (cr.equals_nocase(anim.name, this.cur_animation.name) && this.animPlaying)
			return;
		this.cur_animation = anim;
		this.cur_anim_speed = anim.speed;
		this.cur_anim_repeatto = anim.repeatto;
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (this.changeAnimFrom === 1)
			this.cur_frame = 0;
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		this.animForwards = true;
		this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
		this.runtime.redraw = true;
	};
	instanceProto.doChangeAnimFrame = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var prev_frame_number = this.cur_frame;
		this.cur_frame = cr.floor(this.changeAnimFrame);
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (prev_frame_number !== this.cur_frame)
		{
			this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
			this.frameStart = this.getNowTime();
			this.runtime.redraw = true;
		}
		this.changeAnimFrame = -1;
	};
	instanceProto.OnFrameChanged = function (prev_frame, next_frame)
	{
		var oldw = prev_frame.width;
		var oldh = prev_frame.height;
		var neww = next_frame.width;
		var newh = next_frame.height;
		if (oldw != neww)
			this.width *= (neww / oldw);
		if (oldh != newh)
			this.height *= (newh / oldh);
		this.hotspotX = next_frame.hotspotX;
		this.hotspotY = next_frame.hotspotY;
		this.collision_poly.set_pts(next_frame.poly_pts);
		this.set_bbox_changed();
		this.curFrame = next_frame;
		this.curWebGLTexture = next_frame.webGL_texture;
		var i, len, b;
		for (i = 0, len = this.behavior_insts.length; i < len; i++)
		{
			b = this.behavior_insts[i];
			if (b.onSpriteFrameChanged)
				b.onSpriteFrameChanged(prev_frame, next_frame);
		}
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnFrameChanged, this);
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		var cur_frame = this.curFrame;
		var spritesheeted = cur_frame.spritesheeted;
		var cur_image = cur_frame.texture_img;
		var myx = this.x;
		var myy = this.y;
		var w = this.width;
		var h = this.height;
		if (this.angle === 0 && w >= 0 && h >= 0)
		{
			myx -= this.hotspotX * w;
			myy -= this.hotspotY * h;
			if (this.runtime.pixel_rounding)
			{
				myx = Math.round(myx);
				myy = Math.round(myy);
			}
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 myx, myy, w, h);
			}
			else
			{
				ctx.drawImage(cur_image, myx, myy, w, h);
			}
		}
		else
		{
			if (this.runtime.pixel_rounding)
			{
				myx = Math.round(myx);
				myy = Math.round(myy);
			}
			ctx.save();
			var widthfactor = w > 0 ? 1 : -1;
			var heightfactor = h > 0 ? 1 : -1;
			ctx.translate(myx, myy);
			if (widthfactor !== 1 || heightfactor !== 1)
				ctx.scale(widthfactor, heightfactor);
			ctx.rotate(this.angle * widthfactor * heightfactor);
			var drawx = 0 - (this.hotspotX * cr.abs(w))
			var drawy = 0 - (this.hotspotY * cr.abs(h));
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 drawx, drawy, cr.abs(w), cr.abs(h));
			}
			else
			{
				ctx.drawImage(cur_image, drawx, drawy, cr.abs(w), cr.abs(h));
			}
			ctx.restore();
		}
		/*
		ctx.strokeStyle = "#f00";
		ctx.lineWidth = 3;
		ctx.beginPath();
		this.collision_poly.cache_poly(this.width, this.height, this.angle);
		var i, len, ax, ay, bx, by;
		for (i = 0, len = this.collision_poly.pts_count; i < len; i++)
		{
			ax = this.collision_poly.pts_cache[i*2] + this.x;
			ay = this.collision_poly.pts_cache[i*2+1] + this.y;
			bx = this.collision_poly.pts_cache[((i+1)%len)*2] + this.x;
			by = this.collision_poly.pts_cache[((i+1)%len)*2+1] + this.y;
			ctx.moveTo(ax, ay);
			ctx.lineTo(bx, by);
		}
		ctx.stroke();
		ctx.closePath();
		*/
		/*
		if (this.behavior_insts.length >= 1 && this.behavior_insts[0].draw)
		{
			this.behavior_insts[0].draw(ctx);
		}
		*/
	};
	instanceProto.drawGL_earlyZPass = function(glw)
	{
		this.drawGL(glw);
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.curWebGLTexture);
		glw.setOpacity(this.opacity);
		var cur_frame = this.curFrame;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = Math.round(this.x) - this.x;
			var oy = Math.round(this.y) - this.y;
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, cur_frame.sheetTex);
			else
				glw.quad(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy);
		}
		else
		{
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, cur_frame.sheetTex);
			else
				glw.quad(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly);
		}
	};
	instanceProto.getImagePointIndexByName = function(name_)
	{
		var cur_frame = this.curFrame;
		var i, len;
		for (i = 0, len = cur_frame.image_points.length; i < len; i++)
		{
			if (cr.equals_nocase(name_, cur_frame.image_points[i][0]))
				return i;
		}
		return -1;
	};
	instanceProto.getImagePoint = function(imgpt, getX)
	{
		var cur_frame = this.curFrame;
		var image_points = cur_frame.image_points;
		var index;
		if (cr.is_string(imgpt))
			index = this.getImagePointIndexByName(imgpt);
		else
			index = imgpt - 1;	// 0 is origin
		index = cr.floor(index);
		if (index < 0 || index >= image_points.length)
			return getX ? this.x : this.y;	// return origin
		var x = (image_points[index][1] - cur_frame.hotspotX) * this.width;
		var y = image_points[index][2];
		y = (y - cur_frame.hotspotY) * this.height;
		var cosa = Math.cos(this.angle);
		var sina = Math.sin(this.angle);
		var x_temp = (x * cosa) - (y * sina);
		y = (y * cosa) + (x * sina);
		x = x_temp;
		x += this.x;
		y += this.y;
		return getX ? x : y;
	};
	function Cnds() {};
	var arrCache = [];
	function allocArr()
	{
		if (arrCache.length)
			return arrCache.pop();
		else
			return [0, 0, 0];
	};
	function freeArr(a)
	{
		a[0] = 0;
		a[1] = 0;
		a[2] = 0;
		arrCache.push(a);
	};
	function makeCollKey(a, b)
	{
		if (a < b)
			return "" + a + "," + b;
		else
			return "" + b + "," + a;
	};
	function collmemory_add(collmemory, a, b, tickcount)
	{
		var a_uid = a.uid;
		var b_uid = b.uid;
		var key = makeCollKey(a_uid, b_uid);
		if (collmemory.hasOwnProperty(key))
		{
			collmemory[key][2] = tickcount;
			return;
		}
		var arr = allocArr();
		arr[0] = a_uid;
		arr[1] = b_uid;
		arr[2] = tickcount;
		collmemory[key] = arr;
	};
	function collmemory_remove(collmemory, a, b)
	{
		var key = makeCollKey(a.uid, b.uid);
		if (collmemory.hasOwnProperty(key))
		{
			freeArr(collmemory[key]);
			delete collmemory[key];
		}
	};
	function collmemory_removeInstance(collmemory, inst)
	{
		var uid = inst.uid;
		var p, entry;
		for (p in collmemory)
		{
			if (collmemory.hasOwnProperty(p))
			{
				entry = collmemory[p];
				if (entry[0] === uid || entry[1] === uid)
				{
					freeArr(collmemory[p]);
					delete collmemory[p];
				}
			}
		}
	};
	var last_coll_tickcount = -2;
	function collmemory_has(collmemory, a, b)
	{
		var key = makeCollKey(a.uid, b.uid);
		if (collmemory.hasOwnProperty(key))
		{
			last_coll_tickcount = collmemory[key][2];
			return true;
		}
		else
		{
			last_coll_tickcount = -2;
			return false;
		}
	};
	var candidates1 = [];
	Cnds.prototype.OnCollision = function (rtype)
	{
		if (!rtype)
			return false;
		var runtime = this.runtime;
		var cnd = runtime.getCurrentCondition();
		var ltype = cnd.type;
		var collmemory = null;
		if (cnd.extra["collmemory"])
		{
			collmemory = cnd.extra["collmemory"];
		}
		else
		{
			collmemory = {};
			cnd.extra["collmemory"] = collmemory;
		}
		if (!cnd.extra["spriteCreatedDestroyCallback"])
		{
			cnd.extra["spriteCreatedDestroyCallback"] = true;
			runtime.addDestroyCallback(function(inst) {
				collmemory_removeInstance(cnd.extra["collmemory"], inst);
			});
		}
		var lsol = ltype.getCurrentSol();
		var rsol = rtype.getCurrentSol();
		var linstances = lsol.getObjects();
		var rinstances;
		var l, linst, r, rinst;
		var curlsol, currsol;
		var tickcount = this.runtime.tickcount;
		var lasttickcount = tickcount - 1;
		var exists, run;
		var current_event = runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		for (l = 0; l < linstances.length; l++)
		{
			linst = linstances[l];
			if (rsol.select_all)
			{
				linst.update_bbox();
				this.runtime.getCollisionCandidates(linst.layer, rtype, linst.bbox, candidates1);
				rinstances = candidates1;
			}
			else
				rinstances = rsol.getObjects();
			for (r = 0; r < rinstances.length; r++)
			{
				rinst = rinstances[r];
				if (runtime.testOverlap(linst, rinst) || runtime.checkRegisteredCollision(linst, rinst))
				{
					exists = collmemory_has(collmemory, linst, rinst);
					run = (!exists || (last_coll_tickcount < lasttickcount));
					collmemory_add(collmemory, linst, rinst, tickcount);
					if (run)
					{
						runtime.pushCopySol(current_event.solModifiers);
						curlsol = ltype.getCurrentSol();
						currsol = rtype.getCurrentSol();
						curlsol.select_all = false;
						currsol.select_all = false;
						if (ltype === rtype)
						{
							curlsol.instances.length = 2;	// just use lsol, is same reference as rsol
							curlsol.instances[0] = linst;
							curlsol.instances[1] = rinst;
							ltype.applySolToContainer();
						}
						else
						{
							curlsol.instances.length = 1;
							currsol.instances.length = 1;
							curlsol.instances[0] = linst;
							currsol.instances[0] = rinst;
							ltype.applySolToContainer();
							rtype.applySolToContainer();
						}
						current_event.retrigger();
						runtime.popSol(current_event.solModifiers);
					}
				}
				else
				{
					collmemory_remove(collmemory, linst, rinst);
				}
			}
			cr.clearArray(candidates1);
		}
		return false;
	};
	var rpicktype = null;
	var rtopick = new cr.ObjectSet();
	var needscollisionfinish = false;
	var candidates2 = [];
	var temp_bbox = new cr.rect(0, 0, 0, 0);
	function DoOverlapCondition(rtype, offx, offy)
	{
		if (!rtype)
			return false;
		var do_offset = (offx !== 0 || offy !== 0);
		var oldx, oldy, ret = false, r, lenr, rinst;
		var cnd = this.runtime.getCurrentCondition();
		var ltype = cnd.type;
		var inverted = cnd.inverted;
		var rsol = rtype.getCurrentSol();
		var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
		var rinstances;
		if (rsol.select_all)
		{
			this.update_bbox();
			temp_bbox.copy(this.bbox);
			temp_bbox.offset(offx, offy);
			this.runtime.getCollisionCandidates(this.layer, rtype, temp_bbox, candidates2);
			rinstances = candidates2;
		}
		else if (orblock)
		{
			if (this.runtime.isCurrentConditionFirst() && !rsol.else_instances.length && rsol.instances.length)
				rinstances = rsol.instances;
			else
				rinstances = rsol.else_instances;
		}
		else
		{
			rinstances = rsol.instances;
		}
		rpicktype = rtype;
		needscollisionfinish = (ltype !== rtype && !inverted);
		if (do_offset)
		{
			oldx = this.x;
			oldy = this.y;
			this.x += offx;
			this.y += offy;
			this.set_bbox_changed();
		}
		for (r = 0, lenr = rinstances.length; r < lenr; r++)
		{
			rinst = rinstances[r];
			if (this.runtime.testOverlap(this, rinst))
			{
				ret = true;
				if (inverted)
					break;
				if (ltype !== rtype)
					rtopick.add(rinst);
			}
		}
		if (do_offset)
		{
			this.x = oldx;
			this.y = oldy;
			this.set_bbox_changed();
		}
		cr.clearArray(candidates2);
		return ret;
	};
	typeProto.finish = function (do_pick)
	{
		if (!needscollisionfinish)
			return;
		if (do_pick)
		{
			var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
			var sol = rpicktype.getCurrentSol();
			var topick = rtopick.valuesRef();
			var i, len, inst;
			if (sol.select_all)
			{
				sol.select_all = false;
				cr.clearArray(sol.instances);
				for (i = 0, len = topick.length; i < len; ++i)
				{
					sol.instances[i] = topick[i];
				}
				if (orblock)
				{
					cr.clearArray(sol.else_instances);
					for (i = 0, len = rpicktype.instances.length; i < len; ++i)
					{
						inst = rpicktype.instances[i];
						if (!rtopick.contains(inst))
							sol.else_instances.push(inst);
					}
				}
			}
			else
			{
				if (orblock)
				{
					var initsize = sol.instances.length;
					for (i = 0, len = topick.length; i < len; ++i)
					{
						sol.instances[initsize + i] = topick[i];
						cr.arrayFindRemove(sol.else_instances, topick[i]);
					}
				}
				else
				{
					cr.shallowAssignArray(sol.instances, topick);
				}
			}
			rpicktype.applySolToContainer();
		}
		rtopick.clear();
		needscollisionfinish = false;
	};
	Cnds.prototype.IsOverlapping = function (rtype)
	{
		return DoOverlapCondition.call(this, rtype, 0, 0);
	};
	Cnds.prototype.IsOverlappingOffset = function (rtype, offx, offy)
	{
		return DoOverlapCondition.call(this, rtype, offx, offy);
	};
	Cnds.prototype.IsAnimPlaying = function (animname)
	{
		if (this.changeAnimName.length)
			return cr.equals_nocase(this.changeAnimName, animname);
		else
			return cr.equals_nocase(this.cur_animation.name, animname);
	};
	Cnds.prototype.CompareFrame = function (cmp, framenum)
	{
		return cr.do_cmp(this.cur_frame, cmp, framenum);
	};
	Cnds.prototype.CompareAnimSpeed = function (cmp, x)
	{
		var s = (this.animForwards ? this.cur_anim_speed : -this.cur_anim_speed);
		return cr.do_cmp(s, cmp, x);
	};
	Cnds.prototype.OnAnimFinished = function (animname)
	{
		return cr.equals_nocase(this.animTriggerName, animname);
	};
	Cnds.prototype.OnAnyAnimFinished = function ()
	{
		return true;
	};
	Cnds.prototype.OnFrameChanged = function ()
	{
		return true;
	};
	Cnds.prototype.IsMirrored = function ()
	{
		return this.width < 0;
	};
	Cnds.prototype.IsFlipped = function ()
	{
		return this.height < 0;
	};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	Cnds.prototype.IsCollisionEnabled = function ()
	{
		return this.collisionsEnabled;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Spawn = function (obj, layer, imgpt)
	{
		if (!obj || !layer)
			return;
		var inst = this.runtime.createInstance(obj, layer, this.getImagePoint(imgpt, true), this.getImagePoint(imgpt, false));
		if (!inst)
			return;
		if (typeof inst.angle !== "undefined")
		{
			inst.angle = this.angle;
			inst.set_bbox_changed();
		}
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
		var cur_act = this.runtime.getCurrentAction();
		var reset_sol = false;
		if (cr.is_undefined(cur_act.extra["Spawn_LastExec"]) || cur_act.extra["Spawn_LastExec"] < this.runtime.execcount)
		{
			reset_sol = true;
			cur_act.extra["Spawn_LastExec"] = this.runtime.execcount;
		}
		var sol;
		if (obj != this.type)
		{
			sol = obj.getCurrentSol();
			sol.select_all = false;
			if (reset_sol)
			{
				cr.clearArray(sol.instances);
				sol.instances[0] = inst;
			}
			else
				sol.instances.push(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					s = inst.siblings[i];
					sol = s.type.getCurrentSol();
					sol.select_all = false;
					if (reset_sol)
					{
						cr.clearArray(sol.instances);
						sol.instances[0] = s;
					}
					else
						sol.instances.push(s);
				}
			}
		}
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.blend_mode = effect;
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.StopAnim = function ()
	{
		this.animPlaying = false;
	};
	Acts.prototype.StartAnim = function (from)
	{
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		if (from === 1 && this.cur_frame !== 0)
		{
			this.changeAnimFrame = 0;
			if (!this.inAnimTrigger)
				this.doChangeAnimFrame();
		}
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetAnim = function (animname, from)
	{
		this.changeAnimName = animname;
		this.changeAnimFrom = from;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnim();
	};
	Acts.prototype.SetAnimFrame = function (framenumber)
	{
		this.changeAnimFrame = framenumber;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnimFrame();
	};
	Acts.prototype.SetAnimSpeed = function (s)
	{
		this.cur_anim_speed = cr.abs(s);
		this.animForwards = (s >= 0);
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetAnimRepeatToFrame = function (s)
	{
		s = Math.floor(s);
		if (s < 0)
			s = 0;
		if (s >= this.cur_animation.frames.length)
			s = this.cur_animation.frames.length - 1;
		this.cur_anim_repeatto = s;
	};
	Acts.prototype.SetMirrored = function (m)
	{
		var neww = cr.abs(this.width) * (m === 0 ? -1 : 1);
		if (this.width === neww)
			return;
		this.width = neww;
		this.set_bbox_changed();
	};
	Acts.prototype.SetFlipped = function (f)
	{
		var newh = cr.abs(this.height) * (f === 0 ? -1 : 1);
		if (this.height === newh)
			return;
		this.height = newh;
		this.set_bbox_changed();
	};
	Acts.prototype.SetScale = function (s)
	{
		var cur_frame = this.curFrame;
		var mirror_factor = (this.width < 0 ? -1 : 1);
		var flip_factor = (this.height < 0 ? -1 : 1);
		var new_width = cur_frame.width * s * mirror_factor;
		var new_height = cur_frame.height * s * flip_factor;
		if (this.width !== new_width || this.height !== new_height)
		{
			this.width = new_width;
			this.height = new_height;
			this.set_bbox_changed();
		}
	};
	Acts.prototype.LoadURL = function (url_, resize_, crossOrigin_)
	{
		var img = new Image();
		var self = this;
		var curFrame_ = this.curFrame;
		img.onload = function ()
		{
			if (curFrame_.texture_img.src === img.src)
			{
				if (self.runtime.glwrap && self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				if (resize_ === 0)		// resize to image size
				{
					self.width = img.width;
					self.height = img.height;
					self.set_bbox_changed();
				}
				self.runtime.redraw = true;
				self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
				return;
			}
			curFrame_.texture_img = img;
			curFrame_.offx = 0;
			curFrame_.offy = 0;
			curFrame_.width = img.width;
			curFrame_.height = img.height;
			curFrame_.spritesheeted = false;
			curFrame_.datauri = "";
			curFrame_.pixelformat = 0;	// reset to RGBA, since we don't know what type of image will have come in
			if (self.runtime.glwrap)
			{
				if (curFrame_.webGL_texture)
					self.runtime.glwrap.deleteTexture(curFrame_.webGL_texture);
				curFrame_.webGL_texture = self.runtime.glwrap.loadTexture(img, false, self.runtime.linearSampling);
				if (self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.type.updateAllCurrentTexture();
			}
			if (resize_ === 0)		// resize to image size
			{
				self.width = img.width;
				self.height = img.height;
				self.set_bbox_changed();
			}
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:" && crossOrigin_ === 0)
			img["crossOrigin"] = "anonymous";
		this.runtime.setImageSrc(img, url_);
	};
	Acts.prototype.SetCollisions = function (set_)
	{
		if (this.collisionsEnabled === (set_ !== 0))
			return;		// no change
		this.collisionsEnabled = (set_ !== 0);
		if (this.collisionsEnabled)
			this.set_bbox_changed();		// needs to be added back to cells
		else
		{
			if (this.collcells.right >= this.collcells.left)
				this.type.collision_grid.update(this, this.collcells, null);
			this.collcells.set(0, 0, -1, -1);
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.AnimationFrame = function (ret)
	{
		ret.set_int(this.cur_frame);
	};
	Exps.prototype.AnimationFrameCount = function (ret)
	{
		ret.set_int(this.cur_animation.frames.length);
	};
	Exps.prototype.AnimationName = function (ret)
	{
		ret.set_string(this.cur_animation.name);
	};
	Exps.prototype.AnimationSpeed = function (ret)
	{
		ret.set_float(this.animForwards ? this.cur_anim_speed : -this.cur_anim_speed);
	};
	Exps.prototype.ImagePointX = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, true));
	};
	Exps.prototype.ImagePointY = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, false));
	};
	Exps.prototype.ImagePointCount = function (ret)
	{
		ret.set_int(this.curFrame.image_points.length);
	};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.curFrame.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.curFrame.height);
	};
	pluginProto.exps = new Exps();
}());
/* global cr,log,assert2 */
/* jshint globalstrict: true */
/* jshint strict: true */
;
;
cr.plugins_.Spritefont2 = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Spritefont2.prototype;
	pluginProto.onCreate = function ()
	{
	};
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.runtime.waitForImageLoad(this.texture_img, this.texture_file);
		this.webGL_texture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, false, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onDestroy = function()
	{
		freeAllLines (this.lines);
		freeAllClip  (this.clipList);
		freeAllClipUV(this.clipUV);
		cr.wipe(this.characterWidthList);
	};
	instanceProto.onCreate = function()
	{
		this.texture_img      = this.type.texture_img;
		this.characterWidth   = this.properties[0];
		this.characterHeight  = this.properties[1];
		this.characterSet     = this.properties[2];
		this.text             = this.properties[3];
		this.characterScale   = this.properties[4];
		this.visible          = (this.properties[5] === 0);	// 0=visible, 1=invisible
		this.halign           = this.properties[6]/2.0;		// 0=left, 1=center, 2=right
		this.valign           = this.properties[7]/2.0;		// 0=top, 1=center, 2=bottom
		this.wrapbyword       = (this.properties[9] === 0);	// 0=word, 1=character
		this.characterSpacing = this.properties[10];
		this.lineHeight       = this.properties[11];
		this.textWidth  = 0;
		this.textHeight = 0;
		if (this.recycled)
		{
			cr.clearArray(this.lines);
			cr.wipe(this.clipList);
			cr.wipe(this.clipUV);
			cr.wipe(this.characterWidthList);
		}
		else
		{
			this.lines = [];
			this.clipList = {};
			this.clipUV = {};
			this.characterWidthList = {};
		}
		this.text_changed = true;
		this.lastwrapwidth = this.width;
		if (this.runtime.glwrap)
		{
			if (!this.type.webGL_texture)
			{
				this.type.webGL_texture = this.runtime.glwrap.loadTexture(this.type.texture_img, false, this.runtime.linearSampling, this.type.texture_pixelformat);
			}
			this.webGL_texture = this.type.webGL_texture;
		}
		this.SplitSheet();
	};
	instanceProto.saveToJSON = function ()
	{
		var save = {
			"t": this.text,
			"csc": this.characterScale,
			"csp": this.characterSpacing,
			"lh": this.lineHeight,
			"tw": this.textWidth,
			"th": this.textHeight,
			"lrt": this.last_render_tick,
			"ha": this.halign,
			"va": this.valign,
			"cw": {}
		};
		for (var ch in this.characterWidthList)
			save["cw"][ch] = this.characterWidthList[ch];
		return save;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.text = o["t"];
		this.characterScale = o["csc"];
		this.characterSpacing = o["csp"];
		this.lineHeight = o["lh"];
		this.textWidth = o["tw"];
		this.textHeight = o["th"];
		this.last_render_tick = o["lrt"];
		if (o.hasOwnProperty("ha"))
			this.halign = o["ha"];
		if (o.hasOwnProperty("va"))
			this.valign = o["va"];
		for(var ch in o["cw"])
			this.characterWidthList[ch] = o["cw"][ch];
		this.text_changed = true;
		this.lastwrapwidth = this.width;
	};
	function trimRight(text)
	{
		return text.replace(/\s\s*$/, '');
	}
	var MAX_CACHE_SIZE = 1000;
	function alloc(cache,Constructor)
	{
		if (cache.length)
			return cache.pop();
		else
			return new Constructor();
	}
	function free(cache,data)
	{
		if (cache.length < MAX_CACHE_SIZE)
		{
			cache.push(data);
		}
	}
	function freeAll(cache,dataList,isArray)
	{
		if (isArray) {
			var i, len;
			for (i = 0, len = dataList.length; i < len; i++)
			{
				free(cache,dataList[i]);
			}
			cr.clearArray(dataList);
		} else {
			var prop;
			for(prop in dataList) {
				if(Object.prototype.hasOwnProperty.call(dataList,prop)) {
					free(cache,dataList[prop]);
					delete dataList[prop];
				}
			}
		}
	}
	function addLine(inst,lineIndex,cur_line) {
		var lines = inst.lines;
		var line;
		cur_line = trimRight(cur_line);
		if (lineIndex >= lines.length)
			lines.push(allocLine());
		line = lines[lineIndex];
		line.text = cur_line;
		line.width = inst.measureWidth(cur_line);
		inst.textWidth = cr.max(inst.textWidth,line.width);
	}
	var linesCache = [];
	function allocLine()       { return alloc(linesCache,Object); }
	function freeLine(l)       { free(linesCache,l); }
	function freeAllLines(arr) { freeAll(linesCache,arr,true); }
	function addClip(obj,property,x,y,w,h) {
		if (obj[property] === undefined) {
			obj[property] = alloc(clipCache,Object);
		}
		obj[property].x = x;
		obj[property].y = y;
		obj[property].w = w;
		obj[property].h = h;
	}
	var clipCache = [];
	function allocClip()      { return alloc(clipCache,Object); }
	function freeAllClip(obj) { freeAll(clipCache,obj,false);}
	function addClipUV(obj,property,left,top,right,bottom) {
		if (obj[property] === undefined) {
			obj[property] = alloc(clipUVCache,cr.rect);
		}
		obj[property].left   = left;
		obj[property].top    = top;
		obj[property].right  = right;
		obj[property].bottom = bottom;
	}
	var clipUVCache = [];
	function allocClipUV()      { return alloc(clipUVCache,cr.rect);}
	function freeAllClipUV(obj) { freeAll(clipUVCache,obj,false);}
	instanceProto.SplitSheet = function() {
		var texture      = this.texture_img;
		var texWidth     = texture.width;
		var texHeight    = texture.height;
		var charWidth    = this.characterWidth;
		var charHeight   = this.characterHeight;
		var charU        = charWidth /texWidth;
		var charV        = charHeight/texHeight;
		var charSet      = this.characterSet ;
		var cols = Math.floor(texWidth/charWidth);
		var rows = Math.floor(texHeight/charHeight);
		for ( var c = 0; c < charSet.length; c++) {
			if  (c >= cols * rows) break;
			var x = c%cols;
			var y = Math.floor(c/cols);
			var letter = charSet.charAt(c);
			if (this.runtime.glwrap) {
				addClipUV(
					this.clipUV, letter,
					x * charU ,
					y * charV ,
					(x+1) * charU ,
					(y+1) * charV
				);
			} else {
				addClip(
					this.clipList, letter,
					x * charWidth,
					y * charHeight,
					charWidth,
					charHeight
				);
			}
		}
	};
	/*
     *	Word-Wrapping
     */
	var wordsCache = [];
	pluginProto.TokeniseWords = function (text)
	{
		cr.clearArray(wordsCache);
		var cur_word = "";
		var ch;
		var i = 0;
		while (i < text.length)
		{
			ch = text.charAt(i);
			if (ch === "\n")
			{
				if (cur_word.length)
				{
					wordsCache.push(cur_word);
					cur_word = "";
				}
				wordsCache.push("\n");
				++i;
			}
			else if (ch === " " || ch === "\t" || ch === "-")
			{
				do {
					cur_word += text.charAt(i);
					i++;
				}
				while (i < text.length && (text.charAt(i) === " " || text.charAt(i) === "\t"));
				wordsCache.push(cur_word);
				cur_word = "";
			}
			else if (i < text.length)
			{
				cur_word += ch;
				i++;
			}
		}
		if (cur_word.length)
			wordsCache.push(cur_word);
	};
	pluginProto.WordWrap = function (inst)
	{
		var text = inst.text;
		var lines = inst.lines;
		if (!text || !text.length)
		{
			freeAllLines(lines);
			return;
		}
		var width = inst.width;
		if (width <= 2.0)
		{
			freeAllLines(lines);
			return;
		}
		var charWidth = inst.characterWidth;
		var charScale = inst.characterScale;
		var charSpacing = inst.characterSpacing;
		if ( (text.length * (charWidth * charScale + charSpacing) - charSpacing) <= width && text.indexOf("\n") === -1)
		{
			var all_width = inst.measureWidth(text);
			if (all_width <= width)
			{
				freeAllLines(lines);
				lines.push(allocLine());
				lines[0].text = text;
				lines[0].width = all_width;
				inst.textWidth  = all_width;
				inst.textHeight = inst.characterHeight * charScale + inst.lineHeight;
				return;
			}
		}
		var wrapbyword = inst.wrapbyword;
		this.WrapText(inst);
		inst.textHeight = lines.length * (inst.characterHeight * charScale + inst.lineHeight);
	};
	pluginProto.WrapText = function (inst)
	{
		var wrapbyword = inst.wrapbyword;
		var text       = inst.text;
		var lines      = inst.lines;
		var width      = inst.width;
		var wordArray;
		if (wrapbyword) {
			this.TokeniseWords(text);	// writes to wordsCache
			wordArray = wordsCache;
		} else {
			wordArray = text;
		}
		var cur_line = "";
		var prev_line;
		var line_width;
		var i;
		var lineIndex = 0;
		var line;
		var ignore_newline = false;
		for (i = 0; i < wordArray.length; i++)
		{
			if (wordArray[i] === "\n")
			{
				if (ignore_newline === true) {
					ignore_newline = false;
				} else {
					addLine(inst,lineIndex,cur_line);
					lineIndex++;
				}
				cur_line = "";
				continue;
			}
			ignore_newline = false;
			prev_line = cur_line;
			cur_line += wordArray[i];
			line_width = inst.measureWidth(trimRight(cur_line));
			if (line_width > width)
			{
				if (prev_line === "") {
					addLine(inst,lineIndex,cur_line);
					cur_line = "";
					ignore_newline = true;
				} else {
					addLine(inst,lineIndex,prev_line);
					cur_line = wordArray[i];
				}
				lineIndex++;
				if (!wrapbyword && cur_line === " ")
					cur_line = "";
			}
		}
		if (trimRight(cur_line).length)
		{
			addLine(inst,lineIndex,cur_line);
			lineIndex++;
		}
		for (i = lineIndex; i < lines.length; i++)
			freeLine(lines[i]);
		lines.length = lineIndex;
	};
	instanceProto.measureWidth = function(text) {
		var spacing = this.characterSpacing;
		var len     = text.length;
		var width   = 0;
		for (var i = 0; i < len; i++) {
			width += this.getCharacterWidth(text.charAt(i)) * this.characterScale + spacing;
		}
		width -= (width > 0) ? spacing : 0;
		return width;
	};
	/***/
	instanceProto.getCharacterWidth = function(character) {
		var widthList = this.characterWidthList;
		if (widthList[character] !== undefined) {
			return widthList[character];
		} else {
			return this.characterWidth;
		}
	};
	instanceProto.rebuildText = function() {
		if (this.text_changed || this.width !== this.lastwrapwidth) {
			this.textWidth = 0;
			this.textHeight = 0;
			this.type.plugin.WordWrap(this);
			this.text_changed = false;
			this.lastwrapwidth = this.width;
		}
	};
	var EPSILON = 0.00001;
	instanceProto.draw = function(ctx, glmode)
	{
		var texture = this.texture_img;
		if (this.text !== "" && texture != null) {
			this.rebuildText();
			if (this.height < this.characterHeight*this.characterScale + this.lineHeight) {
				return;
			}
			ctx.globalAlpha = this.opacity;
			var myx = this.x;
			var myy = this.y;
			if (this.runtime.pixel_rounding)
			{
				myx = Math.round(myx);
				myy = Math.round(myy);
			}
			var viewLeft = this.layer.viewLeft;
			var viewTop = this.layer.viewTop;
			var viewRight = this.layer.viewRight;
			var viewBottom = this.layer.viewBottom;
			ctx.save();
			ctx.translate(myx, myy);
			ctx.rotate(this.angle);
			var angle      = this.angle;
			var ha         = this.halign;
			var va         = this.valign;
			var scale      = this.characterScale;
			var charHeight = this.characterHeight * scale;
			var lineHeight = this.lineHeight;
			var charSpace  = this.characterSpacing;
			var lines = this.lines;
			var textHeight = this.textHeight;
			var letterWidth;
			var halign;
			var valign = va * cr.max(0,(this.height - textHeight));
			var offx = -(this.hotspotX * this.width);
			var offy = -(this.hotspotY * this.height);
			offy += valign;
			var drawX ;
			var drawY = offy;
			var roundX, roundY;
			for(var i = 0; i < lines.length; i++) {
				var line = lines[i].text;
				var len  = lines[i].width;
				halign = ha * cr.max(0,this.width - len);
				drawX = offx + halign;
				drawY += lineHeight;
				if (angle === 0 && myy + drawY + charHeight < viewTop)
				{
					drawY += charHeight;
					continue;
				}
				for(var j = 0; j < line.length; j++) {
					var letter = line.charAt(j);
					letterWidth = this.getCharacterWidth(letter);
					var clip = this.clipList[letter];
					if (angle === 0 && myx + drawX + letterWidth * scale + charSpace < viewLeft)
					{
						drawX += letterWidth * scale + charSpace;
						continue;
					}
					if ( drawX + letterWidth * scale > this.width + EPSILON ) {
						break;
					}
					if (clip !== undefined) {
						roundX = drawX;
						roundY = drawY;
						if (angle === 0 && scale === 1)
						{
							roundX = Math.round(roundX);
							roundY = Math.round(roundY);
						}
						ctx.drawImage( this.texture_img,
									 clip.x, clip.y, clip.w, clip.h,
									 roundX,roundY,clip.w*scale,clip.h*scale);
					}
					drawX += letterWidth * scale + charSpace;
					if (angle === 0 && myx + drawX > viewRight)
						break;
				}
				drawY += charHeight;
				if (angle === 0 && (drawY + charHeight + lineHeight > this.height || myy + drawY > viewBottom))
				{
					break;
				}
			}
			ctx.restore();
		}
	};
	var dQuad = new cr.quad();
	function rotateQuad(quad,cosa,sina) {
		var x_temp;
		x_temp   = (quad.tlx * cosa) - (quad.tly * sina);
		quad.tly = (quad.tly * cosa) + (quad.tlx * sina);
		quad.tlx = x_temp;
		x_temp    = (quad.trx * cosa) - (quad.try_ * sina);
		quad.try_ = (quad.try_ * cosa) + (quad.trx * sina);
		quad.trx  = x_temp;
		x_temp   = (quad.blx * cosa) - (quad.bly * sina);
		quad.bly = (quad.bly * cosa) + (quad.blx * sina);
		quad.blx = x_temp;
		x_temp    = (quad.brx * cosa) - (quad.bry * sina);
		quad.bry = (quad.bry * cosa) + (quad.brx * sina);
		quad.brx  = x_temp;
	}
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.webGL_texture);
		glw.setOpacity(this.opacity);
		if (!this.text)
			return;
		this.rebuildText();
		if (this.height < this.characterHeight*this.characterScale + this.lineHeight) {
			return;
		}
		this.update_bbox();
		var q = this.bquad;
		var ox = 0;
		var oy = 0;
		if (this.runtime.pixel_rounding)
		{
			ox = Math.round(this.x) - this.x;
			oy = Math.round(this.y) - this.y;
		}
		var viewLeft = this.layer.viewLeft;
		var viewTop = this.layer.viewTop;
		var viewRight = this.layer.viewRight;
		var viewBottom = this.layer.viewBottom;
		var angle      = this.angle;
		var ha         = this.halign;
		var va         = this.valign;
		var scale      = this.characterScale;
		var charHeight = this.characterHeight * scale;   // to precalculate in onCreate or on change
		var lineHeight = this.lineHeight;
		var charSpace  = this.characterSpacing;
		var lines = this.lines;
		var textHeight = this.textHeight;
		var letterWidth;
		var cosa,sina;
		if (angle !== 0)
		{
			cosa = Math.cos(angle);
			sina = Math.sin(angle);
		}
		var halign;
		var valign = va * cr.max(0,(this.height - textHeight));
		var offx = q.tlx + ox;
		var offy = q.tly + oy;
		var drawX ;
		var drawY = valign;
		var roundX, roundY;
		for(var i = 0; i < lines.length; i++) {
			var line       = lines[i].text;
			var lineWidth  = lines[i].width;
			halign = ha * cr.max(0,this.width - lineWidth);
			drawX = halign;
			drawY += lineHeight;
			if (angle === 0 && offy + drawY + charHeight < viewTop)
			{
				drawY += charHeight;
				continue;
			}
			for(var j = 0; j < line.length; j++) {
				var letter = line.charAt(j);
				letterWidth = this.getCharacterWidth(letter);
				var clipUV = this.clipUV[letter];
				if (angle === 0 && offx + drawX + letterWidth * scale + charSpace < viewLeft)
				{
					drawX += letterWidth * scale + charSpace;
					continue;
				}
				if (drawX + letterWidth * scale > this.width + EPSILON)
				{
					break;
				}
				if (clipUV !== undefined) {
					var clipWidth  = this.characterWidth*scale;
					var clipHeight = this.characterHeight*scale;
					roundX = drawX;
					roundY = drawY;
					if (angle === 0 && scale === 1)
					{
						roundX = Math.round(roundX);
						roundY = Math.round(roundY);
					}
					dQuad.tlx  = roundX;
					dQuad.tly  = roundY;
					dQuad.trx  = roundX + clipWidth;
					dQuad.try_ = roundY ;
					dQuad.blx  = roundX;
					dQuad.bly  = roundY + clipHeight;
					dQuad.brx  = roundX + clipWidth;
					dQuad.bry  = roundY + clipHeight;
					if(angle !== 0)
					{
						rotateQuad(dQuad,cosa,sina);
					}
					dQuad.offset(offx,offy);
					glw.quadTex(
						dQuad.tlx, dQuad.tly,
						dQuad.trx, dQuad.try_,
						dQuad.brx, dQuad.bry,
						dQuad.blx, dQuad.bly,
						clipUV
					);
				}
				drawX += letterWidth * scale + charSpace;
				if (angle === 0 && offx + drawX > viewRight)
					break;
			}
			drawY += charHeight;
			if (angle === 0 && (drawY + charHeight + lineHeight > this.height || offy + drawY > viewBottom))
			{
				break;
			}
		}
	};
	function Cnds() {}
	Cnds.prototype.CompareText = function(text_to_compare, case_sensitive)
	{
		if (case_sensitive)
			return this.text == text_to_compare;
		else
			return cr.equals_nocase(this.text, text_to_compare);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {}
	Acts.prototype.SetText = function(param)
	{
		if (cr.is_number(param) && param < 1e9)
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_set = param.toString();
		if (this.text !== text_to_set)
		{
			this.text = text_to_set;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.AppendText = function(param)
	{
		if (cr.is_number(param))
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_append = param.toString();
		if (text_to_append)	// not empty
		{
			this.text += text_to_append;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetScale = function(param)
	{
		if (param !== this.characterScale) {
			this.characterScale = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetCharacterSpacing = function(param)
	{
		if (param !== this.CharacterSpacing) {
			this.characterSpacing = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetLineHeight = function(param)
	{
		if (param !== this.lineHeight) {
			this.lineHeight = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	instanceProto.SetCharWidth = function(character,width) {
		var w = parseInt(width,10);
		if (this.characterWidthList[character] !== w) {
			this.characterWidthList[character] = w;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetCharacterWidth = function(characterSet,width)
	{
		if (characterSet !== "") {
			for(var c = 0; c < characterSet.length; c++) {
				this.SetCharWidth(characterSet.charAt(c),width);
			}
		}
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.blend_mode = effect;
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.SetHAlign = function (a)
	{
		this.halign = a / 2.0;
		this.text_changed = true;
		this.runtime.redraw = true;
	};
	Acts.prototype.SetVAlign = function (a)
	{
		this.valign = a / 2.0;
		this.text_changed = true;
		this.runtime.redraw = true;
	};
	pluginProto.acts = new Acts();
	function Exps() {}
	Exps.prototype.CharacterWidth = function(ret,character)
	{
		ret.set_int(this.getCharacterWidth(character));
	};
	Exps.prototype.CharacterHeight = function(ret)
	{
		ret.set_int(this.characterHeight);
	};
	Exps.prototype.CharacterScale = function(ret)
	{
		ret.set_float(this.characterScale);
	};
	Exps.prototype.CharacterSpacing = function(ret)
	{
		ret.set_int(this.characterSpacing);
	};
	Exps.prototype.LineHeight = function(ret)
	{
		ret.set_int(this.lineHeight);
	};
	Exps.prototype.Text = function(ret)
	{
		ret.set_string(this.text);
	};
	Exps.prototype.TextWidth = function (ret)
	{
		this.rebuildText();
		ret.set_float(this.textWidth);
	};
	Exps.prototype.TextHeight = function (ret)
	{
		this.rebuildText();
		ret.set_float(this.textHeight);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Text = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Text.prototype;
	pluginProto.onCreate = function ()
	{
		pluginProto.acts.SetWidth = function (w)
		{
			if (this.width !== w)
			{
				this.width = w;
				this.text_changed = true;	// also recalculate text wrapping
				this.set_bbox_changed();
			}
		};
	};
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			inst.mycanvas = null;
			inst.myctx = null;
			inst.mytex = null;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		if (this.recycled)
			cr.clearArray(this.lines);
		else
			this.lines = [];		// for word wrapping
		this.text_changed = true;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var requestedWebFonts = {};		// already requested web fonts have an entry here
	instanceProto.onCreate = function()
	{
		this.text = this.properties[0];
		this.visible = (this.properties[1] === 0);		// 0=visible, 1=invisible
		this.font = this.properties[2];
		this.color = this.properties[3];
		this.halign = this.properties[4];				// 0=left, 1=center, 2=right
		this.valign = this.properties[5];				// 0=top, 1=center, 2=bottom
		this.wrapbyword = (this.properties[7] === 0);	// 0=word, 1=character
		this.lastwidth = this.width;
		this.lastwrapwidth = this.width;
		this.lastheight = this.height;
		this.line_height_offset = this.properties[8];
		this.facename = "";
		this.fontstyle = "";
		this.ptSize = 0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.parseFont();
		this.mycanvas = null;
		this.myctx = null;
		this.mytex = null;
		this.need_text_redraw = false;
		this.last_render_tick = this.runtime.tickcount;
		if (this.recycled)
			this.rcTex.set(0, 0, 1, 1);
		else
			this.rcTex = new cr.rect(0, 0, 1, 1);
		if (this.runtime.glwrap)
			this.runtime.tickMe(this);
;
	};
	instanceProto.parseFont = function ()
	{
		var arr = this.font.split(" ");
		var i;
		for (i = 0; i < arr.length; i++)
		{
			if (arr[i].substr(arr[i].length - 2, 2) === "pt")
			{
				this.ptSize = parseInt(arr[i].substr(0, arr[i].length - 2));
				this.pxHeight = Math.ceil((this.ptSize / 72.0) * 96.0) + 4;	// assume 96dpi...
				if (i > 0)
					this.fontstyle = arr[i - 1];
				this.facename = arr[i + 1];
				for (i = i + 2; i < arr.length; i++)
					this.facename += " " + arr[i];
				break;
			}
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return {
			"t": this.text,
			"f": this.font,
			"c": this.color,
			"ha": this.halign,
			"va": this.valign,
			"wr": this.wrapbyword,
			"lho": this.line_height_offset,
			"fn": this.facename,
			"fs": this.fontstyle,
			"ps": this.ptSize,
			"pxh": this.pxHeight,
			"tw": this.textWidth,
			"th": this.textHeight,
			"lrt": this.last_render_tick
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.text = o["t"];
		this.font = o["f"];
		this.color = o["c"];
		this.halign = o["ha"];
		this.valign = o["va"];
		this.wrapbyword = o["wr"];
		this.line_height_offset = o["lho"];
		this.facename = o["fn"];
		this.fontstyle = o["fs"];
		this.ptSize = o["ps"];
		this.pxHeight = o["pxh"];
		this.textWidth = o["tw"];
		this.textHeight = o["th"];
		this.last_render_tick = o["lrt"];
		this.text_changed = true;
		this.lastwidth = this.width;
		this.lastwrapwidth = this.width;
		this.lastheight = this.height;
	};
	instanceProto.tick = function ()
	{
		if (this.runtime.glwrap && this.mytex && (this.runtime.tickcount - this.last_render_tick >= 300))
		{
			var layer = this.layer;
            this.update_bbox();
            var bbox = this.bbox;
            if (bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom)
			{
				this.runtime.glwrap.deleteTexture(this.mytex);
				this.mytex = null;
				this.myctx = null;
				this.mycanvas = null;
			}
		}
	};
	instanceProto.onDestroy = function ()
	{
		this.myctx = null;
		this.mycanvas = null;
		if (this.runtime.glwrap && this.mytex)
			this.runtime.glwrap.deleteTexture(this.mytex);
		this.mytex = null;
	};
	instanceProto.updateFont = function ()
	{
		this.font = this.fontstyle + " " + this.ptSize.toString() + "pt " + this.facename;
		this.text_changed = true;
		this.runtime.redraw = true;
	};
	instanceProto.draw = function(ctx, glmode)
	{
		ctx.font = this.font;
		ctx.textBaseline = "top";
		ctx.fillStyle = this.color;
		ctx.globalAlpha = glmode ? 1 : this.opacity;
		var myscale = 1;
		if (glmode)
		{
			myscale = Math.abs(this.layer.getScale());
			ctx.save();
			ctx.scale(myscale, myscale);
		}
		if (this.text_changed || this.width !== this.lastwrapwidth)
		{
			this.type.plugin.WordWrap(this.text, this.lines, ctx, this.width, this.wrapbyword);
			this.text_changed = false;
			this.lastwrapwidth = this.width;
		}
		this.update_bbox();
		var penX = glmode ? 0 : this.bquad.tlx;
		var penY = glmode ? 0 : this.bquad.tly;
		if (this.runtime.pixel_rounding)
		{
			penX = (penX + 0.5) | 0;
			penY = (penY + 0.5) | 0;
		}
		if (this.angle !== 0 && !glmode)
		{
			ctx.save();
			ctx.translate(penX, penY);
			ctx.rotate(this.angle);
			penX = 0;
			penY = 0;
		}
		var endY = penY + this.height;
		var line_height = this.pxHeight;
		line_height += this.line_height_offset;
		var drawX;
		var i;
		if (this.valign === 1)		// center
			penY += Math.max(this.height / 2 - (this.lines.length * line_height) / 2, 0);
		else if (this.valign === 2)	// bottom
			penY += Math.max(this.height - (this.lines.length * line_height) - 2, 0);
		for (i = 0; i < this.lines.length; i++)
		{
			drawX = penX;
			if (this.halign === 1)		// center
				drawX = penX + (this.width - this.lines[i].width) / 2;
			else if (this.halign === 2)	// right
				drawX = penX + (this.width - this.lines[i].width);
			ctx.fillText(this.lines[i].text, drawX, penY);
			penY += line_height;
			if (penY >= endY - line_height)
				break;
		}
		if (this.angle !== 0 || glmode)
			ctx.restore();
		this.last_render_tick = this.runtime.tickcount;
	};
	instanceProto.drawGL = function(glw)
	{
		if (this.width < 1 || this.height < 1)
			return;
		var need_redraw = this.text_changed || this.need_text_redraw;
		this.need_text_redraw = false;
		var layer_scale = this.layer.getScale();
		var layer_angle = this.layer.getAngle();
		var rcTex = this.rcTex;
		var floatscaledwidth = layer_scale * this.width;
		var floatscaledheight = layer_scale * this.height;
		var scaledwidth = Math.ceil(floatscaledwidth);
		var scaledheight = Math.ceil(floatscaledheight);
		var absscaledwidth = Math.abs(scaledwidth);
		var absscaledheight = Math.abs(scaledheight);
		var halfw = this.runtime.draw_width / 2;
		var halfh = this.runtime.draw_height / 2;
		if (!this.myctx)
		{
			this.mycanvas = document.createElement("canvas");
			this.mycanvas.width = absscaledwidth;
			this.mycanvas.height = absscaledheight;
			this.lastwidth = absscaledwidth;
			this.lastheight = absscaledheight;
			need_redraw = true;
			this.myctx = this.mycanvas.getContext("2d");
		}
		if (absscaledwidth !== this.lastwidth || absscaledheight !== this.lastheight)
		{
			this.mycanvas.width = absscaledwidth;
			this.mycanvas.height = absscaledheight;
			if (this.mytex)
			{
				glw.deleteTexture(this.mytex);
				this.mytex = null;
			}
			need_redraw = true;
		}
		if (need_redraw)
		{
			this.myctx.clearRect(0, 0, absscaledwidth, absscaledheight);
			this.draw(this.myctx, true);
			if (!this.mytex)
				this.mytex = glw.createEmptyTexture(absscaledwidth, absscaledheight, this.runtime.linearSampling, this.runtime.isMobile);
			glw.videoToTexture(this.mycanvas, this.mytex, this.runtime.isMobile);
		}
		this.lastwidth = absscaledwidth;
		this.lastheight = absscaledheight;
		glw.setTexture(this.mytex);
		glw.setOpacity(this.opacity);
		glw.resetModelView();
		glw.translate(-halfw, -halfh);
		glw.updateModelView();
		var q = this.bquad;
		var tlx = this.layer.layerToCanvas(q.tlx, q.tly, true, true);
		var tly = this.layer.layerToCanvas(q.tlx, q.tly, false, true);
		var trx = this.layer.layerToCanvas(q.trx, q.try_, true, true);
		var try_ = this.layer.layerToCanvas(q.trx, q.try_, false, true);
		var brx = this.layer.layerToCanvas(q.brx, q.bry, true, true);
		var bry = this.layer.layerToCanvas(q.brx, q.bry, false, true);
		var blx = this.layer.layerToCanvas(q.blx, q.bly, true, true);
		var bly = this.layer.layerToCanvas(q.blx, q.bly, false, true);
		if (this.runtime.pixel_rounding || (this.angle === 0 && layer_angle === 0))
		{
			var ox = ((tlx + 0.5) | 0) - tlx;
			var oy = ((tly + 0.5) | 0) - tly
			tlx += ox;
			tly += oy;
			trx += ox;
			try_ += oy;
			brx += ox;
			bry += oy;
			blx += ox;
			bly += oy;
		}
		if (this.angle === 0 && layer_angle === 0)
		{
			trx = tlx + scaledwidth;
			try_ = tly;
			brx = trx;
			bry = tly + scaledheight;
			blx = tlx;
			bly = bry;
			rcTex.right = 1;
			rcTex.bottom = 1;
		}
		else
		{
			rcTex.right = floatscaledwidth / scaledwidth;
			rcTex.bottom = floatscaledheight / scaledheight;
		}
		glw.quadTex(tlx, tly, trx, try_, brx, bry, blx, bly, rcTex);
		glw.resetModelView();
		glw.scale(layer_scale, layer_scale);
		glw.rotateZ(-this.layer.getAngle());
		glw.translate((this.layer.viewLeft + this.layer.viewRight) / -2, (this.layer.viewTop + this.layer.viewBottom) / -2);
		glw.updateModelView();
		this.last_render_tick = this.runtime.tickcount;
	};
	var wordsCache = [];
	pluginProto.TokeniseWords = function (text)
	{
		cr.clearArray(wordsCache);
		var cur_word = "";
		var ch;
		var i = 0;
		while (i < text.length)
		{
			ch = text.charAt(i);
			if (ch === "\n")
			{
				if (cur_word.length)
				{
					wordsCache.push(cur_word);
					cur_word = "";
				}
				wordsCache.push("\n");
				++i;
			}
			else if (ch === " " || ch === "\t" || ch === "-")
			{
				do {
					cur_word += text.charAt(i);
					i++;
				}
				while (i < text.length && (text.charAt(i) === " " || text.charAt(i) === "\t"));
				wordsCache.push(cur_word);
				cur_word = "";
			}
			else if (i < text.length)
			{
				cur_word += ch;
				i++;
			}
		}
		if (cur_word.length)
			wordsCache.push(cur_word);
	};
	var linesCache = [];
	function allocLine()
	{
		if (linesCache.length)
			return linesCache.pop();
		else
			return {};
	};
	function freeLine(l)
	{
		linesCache.push(l);
	};
	function freeAllLines(arr)
	{
		var i, len;
		for (i = 0, len = arr.length; i < len; i++)
		{
			freeLine(arr[i]);
		}
		cr.clearArray(arr);
	};
	pluginProto.WordWrap = function (text, lines, ctx, width, wrapbyword)
	{
		if (!text || !text.length)
		{
			freeAllLines(lines);
			return;
		}
		if (width <= 2.0)
		{
			freeAllLines(lines);
			return;
		}
		if (text.length <= 100 && text.indexOf("\n") === -1)
		{
			var all_width = ctx.measureText(text).width;
			if (all_width <= width)
			{
				freeAllLines(lines);
				lines.push(allocLine());
				lines[0].text = text;
				lines[0].width = all_width;
				return;
			}
		}
		this.WrapText(text, lines, ctx, width, wrapbyword);
	};
	function trimSingleSpaceRight(str)
	{
		if (!str.length || str.charAt(str.length - 1) !== " ")
			return str;
		return str.substring(0, str.length - 1);
	};
	pluginProto.WrapText = function (text, lines, ctx, width, wrapbyword)
	{
		var wordArray;
		if (wrapbyword)
		{
			this.TokeniseWords(text);	// writes to wordsCache
			wordArray = wordsCache;
		}
		else
			wordArray = text;
		var cur_line = "";
		var prev_line;
		var line_width;
		var i;
		var lineIndex = 0;
		var line;
		for (i = 0; i < wordArray.length; i++)
		{
			if (wordArray[i] === "\n")
			{
				if (lineIndex >= lines.length)
					lines.push(allocLine());
				cur_line = trimSingleSpaceRight(cur_line);		// for correct center/right alignment
				line = lines[lineIndex];
				line.text = cur_line;
				line.width = ctx.measureText(cur_line).width;
				lineIndex++;
				cur_line = "";
				continue;
			}
			prev_line = cur_line;
			cur_line += wordArray[i];
			line_width = ctx.measureText(cur_line).width;
			if (line_width >= width)
			{
				if (lineIndex >= lines.length)
					lines.push(allocLine());
				prev_line = trimSingleSpaceRight(prev_line);
				line = lines[lineIndex];
				line.text = prev_line;
				line.width = ctx.measureText(prev_line).width;
				lineIndex++;
				cur_line = wordArray[i];
				if (!wrapbyword && cur_line === " ")
					cur_line = "";
			}
		}
		if (cur_line.length)
		{
			if (lineIndex >= lines.length)
				lines.push(allocLine());
			cur_line = trimSingleSpaceRight(cur_line);
			line = lines[lineIndex];
			line.text = cur_line;
			line.width = ctx.measureText(cur_line).width;
			lineIndex++;
		}
		for (i = lineIndex; i < lines.length; i++)
			freeLine(lines[i]);
		lines.length = lineIndex;
	};
	function Cnds() {};
	Cnds.prototype.CompareText = function(text_to_compare, case_sensitive)
	{
		if (case_sensitive)
			return this.text == text_to_compare;
		else
			return cr.equals_nocase(this.text, text_to_compare);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetText = function(param)
	{
		if (cr.is_number(param) && param < 1e9)
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_set = param.toString();
		if (this.text !== text_to_set)
		{
			this.text = text_to_set;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.AppendText = function(param)
	{
		if (cr.is_number(param))
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_append = param.toString();
		if (text_to_append)	// not empty
		{
			this.text += text_to_append;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetFontFace = function (face_, style_)
	{
		var newstyle = "";
		switch (style_) {
		case 1: newstyle = "bold"; break;
		case 2: newstyle = "italic"; break;
		case 3: newstyle = "bold italic"; break;
		}
		if (face_ === this.facename && newstyle === this.fontstyle)
			return;		// no change
		this.facename = face_;
		this.fontstyle = newstyle;
		this.updateFont();
	};
	Acts.prototype.SetFontSize = function (size_)
	{
		if (this.ptSize === size_)
			return;
		this.ptSize = size_;
		this.pxHeight = Math.ceil((this.ptSize / 72.0) * 96.0) + 4;	// assume 96dpi...
		this.updateFont();
	};
	Acts.prototype.SetFontColor = function (rgb)
	{
		var newcolor = "rgb(" + cr.GetRValue(rgb).toString() + "," + cr.GetGValue(rgb).toString() + "," + cr.GetBValue(rgb).toString() + ")";
		if (newcolor === this.color)
			return;
		this.color = newcolor;
		this.need_text_redraw = true;
		this.runtime.redraw = true;
	};
	Acts.prototype.SetWebFont = function (familyname_, cssurl_)
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Text plugin: 'Set web font' not supported on this platform - the action has been ignored");
			return;		// DC todo
		}
		var self = this;
		var refreshFunc = (function () {
							self.runtime.redraw = true;
							self.text_changed = true;
						});
		if (requestedWebFonts.hasOwnProperty(cssurl_))
		{
			var newfacename = "'" + familyname_ + "'";
			if (this.facename === newfacename)
				return;	// no change
			this.facename = newfacename;
			this.updateFont();
			for (var i = 1; i < 10; i++)
			{
				setTimeout(refreshFunc, i * 100);
				setTimeout(refreshFunc, i * 1000);
			}
			return;
		}
		var wf = document.createElement("link");
		wf.href = cssurl_;
		wf.rel = "stylesheet";
		wf.type = "text/css";
		wf.onload = refreshFunc;
		document.getElementsByTagName('head')[0].appendChild(wf);
		requestedWebFonts[cssurl_] = true;
		this.facename = "'" + familyname_ + "'";
		this.updateFont();
		for (var i = 1; i < 10; i++)
		{
			setTimeout(refreshFunc, i * 100);
			setTimeout(refreshFunc, i * 1000);
		}
;
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.blend_mode = effect;
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Text = function(ret)
	{
		ret.set_string(this.text);
	};
	Exps.prototype.FaceName = function (ret)
	{
		ret.set_string(this.facename);
	};
	Exps.prototype.FaceSize = function (ret)
	{
		ret.set_int(this.ptSize);
	};
	Exps.prototype.TextWidth = function (ret)
	{
		var w = 0;
		var i, len, x;
		for (i = 0, len = this.lines.length; i < len; i++)
		{
			x = this.lines[i].width;
			if (w < x)
				w = x;
		}
		ret.set_int(w);
	};
	Exps.prototype.TextHeight = function (ret)
	{
		ret.set_int(this.lines.length * (this.pxHeight + this.line_height_offset) - this.line_height_offset);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.TextBox = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.TextBox.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var elemTypes = ["text", "password", "email", "number", "tel", "url"];
	if (navigator.userAgent.indexOf("MSIE 9") > -1)
	{
		elemTypes[2] = "text";
		elemTypes[3] = "text";
		elemTypes[4] = "text";
		elemTypes[5] = "text";
	}
	instanceProto.onCreate = function()
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Textbox plugin not supported on this platform - the object will not be created");
			return;
		}
		if (this.properties[7] === 6)	// textarea
		{
			this.elem = document.createElement("textarea");
			jQuery(this.elem).css("resize", "none");
		}
		else
		{
			this.elem = document.createElement("input");
			this.elem.type = elemTypes[this.properties[7]];
		}
		this.elem.id = this.properties[9];
		jQuery(this.elem).appendTo(this.runtime.canvasdiv ? this.runtime.canvasdiv : "body");
		this.elem["autocomplete"] = "off";
		this.elem.value = this.properties[0];
		this.elem["placeholder"] = this.properties[1];
		this.elem.title = this.properties[2];
		this.elem.disabled = (this.properties[4] === 0);
		this.elem["readOnly"] = (this.properties[5] === 1);
		this.elem["spellcheck"] = (this.properties[6] === 1);
		this.autoFontSize = (this.properties[8] !== 0);
		this.element_hidden = false;
		if (this.properties[3] === 0)
		{
			jQuery(this.elem).hide();
			this.visible = false;
			this.element_hidden = true;
		}
		var onchangetrigger = (function (self) {
			return function() {
				self.runtime.trigger(cr.plugins_.TextBox.prototype.cnds.OnTextChanged, self);
			};
		})(this);
		this.elem["oninput"] = onchangetrigger;
		if (navigator.userAgent.indexOf("MSIE") !== -1)
			this.elem["oncut"] = onchangetrigger;
		this.elem.onclick = (function (self) {
			return function(e) {
				e.stopPropagation();
				self.runtime.isInUserInputEvent = true;
				self.runtime.trigger(cr.plugins_.TextBox.prototype.cnds.OnClicked, self);
				self.runtime.isInUserInputEvent = false;
			};
		})(this);
		this.elem.ondblclick = (function (self) {
			return function(e) {
				e.stopPropagation();
				self.runtime.isInUserInputEvent = true;
				self.runtime.trigger(cr.plugins_.TextBox.prototype.cnds.OnDoubleClicked, self);
				self.runtime.isInUserInputEvent = false;
			};
		})(this);
		this.elem.addEventListener("touchstart", function (e) {
			e.stopPropagation();
		}, false);
		this.elem.addEventListener("touchmove", function (e) {
			e.stopPropagation();
		}, false);
		this.elem.addEventListener("touchend", function (e) {
			e.stopPropagation();
		}, false);
		jQuery(this.elem).mousedown(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).mouseup(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).keydown(function (e) {
			if (e.which !== 13 && e.which != 27)	// allow enter and escape
				e.stopPropagation();
		});
		jQuery(this.elem).keyup(function (e) {
			if (e.which !== 13 && e.which != 27)	// allow enter and escape
				e.stopPropagation();
		});
		this.lastLeft = 0;
		this.lastTop = 0;
		this.lastRight = 0;
		this.lastBottom = 0;
		this.lastWinWidth = 0;
		this.lastWinHeight = 0;
		this.updatePosition(true);
		this.runtime.tickMe(this);
	};
	instanceProto.saveToJSON = function ()
	{
		return {
			"text": this.elem.value,
			"placeholder": this.elem.placeholder,
			"tooltip": this.elem.title,
			"disabled": !!this.elem.disabled,
			"readonly": !!this.elem.readOnly,
			"spellcheck": !!this.elem["spellcheck"]
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.elem.value = o["text"];
		this.elem.placeholder = o["placeholder"];
		this.elem.title = o["tooltip"];
		this.elem.disabled = o["disabled"];
		this.elem.readOnly = o["readonly"];
		this.elem["spellcheck"] = o["spellcheck"];
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.isDomFree)
				return;
		jQuery(this.elem).remove();
		this.elem = null;
	};
	instanceProto.tick = function ()
	{
		this.updatePosition();
	};
	instanceProto.updatePosition = function (first)
	{
		if (this.runtime.isDomFree)
			return;
		var left = this.layer.layerToCanvas(this.x, this.y, true);
		var top = this.layer.layerToCanvas(this.x, this.y, false);
		var right = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, true);
		var bottom = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, false);
		var rightEdge = this.runtime.width / this.runtime.devicePixelRatio;
		var bottomEdge = this.runtime.height / this.runtime.devicePixelRatio;
		if (!this.visible || !this.layer.visible || right <= 0 || bottom <= 0 || left >= rightEdge || top >= bottomEdge)
		{
			if (!this.element_hidden)
				jQuery(this.elem).hide();
			this.element_hidden = true;
			return;
		}
		if (left < 1)
			left = 1;
		if (top < 1)
			top = 1;
		if (right >= rightEdge)
			right = rightEdge - 1;
		if (bottom >= bottomEdge)
			bottom = bottomEdge - 1;
		var curWinWidth = window.innerWidth;
		var curWinHeight = window.innerHeight;
		if (!first && this.lastLeft === left && this.lastTop === top && this.lastRight === right && this.lastBottom === bottom && this.lastWinWidth === curWinWidth && this.lastWinHeight === curWinHeight)
		{
			if (this.element_hidden)
			{
				jQuery(this.elem).show();
				this.element_hidden = false;
			}
			return;
		}
		this.lastLeft = left;
		this.lastTop = top;
		this.lastRight = right;
		this.lastBottom = bottom;
		this.lastWinWidth = curWinWidth;
		this.lastWinHeight = curWinHeight;
		if (this.element_hidden)
		{
			jQuery(this.elem).show();
			this.element_hidden = false;
		}
		var offx = Math.round(left) + jQuery(this.runtime.canvas).offset().left;
		var offy = Math.round(top) + jQuery(this.runtime.canvas).offset().top;
		jQuery(this.elem).css("position", "absolute");
		jQuery(this.elem).offset({left: offx, top: offy});
		jQuery(this.elem).width(Math.round(right - left));
		jQuery(this.elem).height(Math.round(bottom - top));
		if (this.autoFontSize)
			jQuery(this.elem).css("font-size", ((this.layer.getScale(true) / this.runtime.devicePixelRatio) - 0.2) + "em");
	};
	instanceProto.draw = function(ctx)
	{
	};
	instanceProto.drawGL = function(glw)
	{
	};
	function Cnds() {};
	Cnds.prototype.CompareText = function (text, case_)
	{
		if (this.runtime.isDomFree)
			return false;
		if (case_ === 0)	// insensitive
			return cr.equals_nocase(this.elem.value, text);
		else
			return this.elem.value === text;
	};
	Cnds.prototype.OnTextChanged = function ()
	{
		return true;
	};
	Cnds.prototype.OnClicked = function ()
	{
		return true;
	};
	Cnds.prototype.OnDoubleClicked = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetText = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.value = text;
	};
	Acts.prototype.SetPlaceholder = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.placeholder = text;
	};
	Acts.prototype.SetTooltip = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.title = text;
	};
	Acts.prototype.SetVisible = function (vis)
	{
		if (this.runtime.isDomFree)
			return;
		this.visible = (vis !== 0);
	};
	Acts.prototype.SetEnabled = function (en)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.disabled = (en === 0);
	};
	Acts.prototype.SetReadOnly = function (ro)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.readOnly = (ro === 0);
	};
	Acts.prototype.SetFocus = function ()
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.focus();
	};
	Acts.prototype.SetBlur = function ()
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.blur();
	};
	Acts.prototype.SetCSSStyle = function (p, v)
	{
		if (this.runtime.isDomFree)
			return;
		jQuery(this.elem).css(p, v);
	};
	Acts.prototype.ScrollToBottom = function ()
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.scrollTop = this.elem.scrollHeight;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Text = function (ret)
	{
		if (this.runtime.isDomFree)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(this.elem.value);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.TiledBg = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.TiledBg.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img.cr_filesize = this.texture_filesize;
		this.runtime.waitForImageLoad(this.texture_img, this.texture_file);
		this.pattern = null;
		this.webGL_texture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);							// 0=visible, 1=invisible
		this.rcTex = new cr.rect(0, 0, 0, 0);
		this.has_own_texture = false;										// true if a texture loaded in from URL
		this.texture_img = this.type.texture_img;
		if (this.runtime.glwrap)
		{
			this.type.loadTextures();
			this.webGL_texture = this.type.webGL_texture;
		}
		else
		{
			if (!this.type.pattern)
				this.type.pattern = this.runtime.ctx.createPattern(this.type.texture_img, "repeat");
			this.pattern = this.type.pattern;
		}
	};
	instanceProto.afterLoad = function ()
	{
		this.has_own_texture = false;
		this.texture_img = this.type.texture_img;
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.glwrap && this.has_own_texture && this.webGL_texture)
		{
			this.runtime.glwrap.deleteTexture(this.webGL_texture);
			this.webGL_texture = null;
		}
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		ctx.save();
		ctx.fillStyle = this.pattern;
		var myx = this.x;
		var myy = this.y;
		if (this.runtime.pixel_rounding)
		{
			myx = Math.round(myx);
			myy = Math.round(myy);
		}
		var drawX = -(this.hotspotX * this.width);
		var drawY = -(this.hotspotY * this.height);
		var offX = drawX % this.texture_img.width;
		var offY = drawY % this.texture_img.height;
		if (offX < 0)
			offX += this.texture_img.width;
		if (offY < 0)
			offY += this.texture_img.height;
		ctx.translate(myx, myy);
		ctx.rotate(this.angle);
		ctx.translate(offX, offY);
		ctx.fillRect(drawX - offX,
					 drawY - offY,
					 this.width,
					 this.height);
		ctx.restore();
	};
	instanceProto.drawGL_earlyZPass = function(glw)
	{
		this.drawGL(glw);
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.webGL_texture);
		glw.setOpacity(this.opacity);
		var rcTex = this.rcTex;
		rcTex.right = this.width / this.texture_img.width;
		rcTex.bottom = this.height / this.texture_img.height;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = Math.round(this.x) - this.x;
			var oy = Math.round(this.y) - this.y;
			glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, rcTex);
		}
		else
			glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, rcTex);
	};
	function Cnds() {};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEffect = function (effect)
	{
		this.blend_mode = effect;
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.LoadURL = function (url_, crossOrigin_)
	{
		var img = new Image();
		var self = this;
		img.onload = function ()
		{
			self.texture_img = img;
			if (self.runtime.glwrap)
			{
				if (self.has_own_texture && self.webGL_texture)
					self.runtime.glwrap.deleteTexture(self.webGL_texture);
				self.webGL_texture = self.runtime.glwrap.loadTexture(img, true, self.runtime.linearSampling);
			}
			else
			{
				self.pattern = self.runtime.ctx.createPattern(img, "repeat");
			}
			self.has_own_texture = true;
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.TiledBg.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:" && crossOrigin_ === 0)
			img.crossOrigin = "anonymous";
		this.runtime.setImageSrc(img, url_);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.texture_img.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.texture_img.height);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Touch = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Touch.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.touches = [];
		this.mouseDown = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var dummyoffset = {left: 0, top: 0};
	instanceProto.findTouch = function (id)
	{
		var i, len;
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			if (this.touches[i]["id"] === id)
				return i;
		}
		return -1;
	};
	var appmobi_accx = 0;
	var appmobi_accy = 0;
	var appmobi_accz = 0;
	function AppMobiGetAcceleration(evt)
	{
		appmobi_accx = evt.x;
		appmobi_accy = evt.y;
		appmobi_accz = evt.z;
	};
	var pg_accx = 0;
	var pg_accy = 0;
	var pg_accz = 0;
	function PhoneGapGetAcceleration(evt)
	{
		pg_accx = evt.x;
		pg_accy = evt.y;
		pg_accz = evt.z;
	};
	var theInstance = null;
	var touchinfo_cache = [];
	function AllocTouchInfo(x, y, id, index)
	{
		var ret;
		if (touchinfo_cache.length)
			ret = touchinfo_cache.pop();
		else
			ret = new TouchInfo();
		ret.init(x, y, id, index);
		return ret;
	};
	function ReleaseTouchInfo(ti)
	{
		if (touchinfo_cache.length < 100)
			touchinfo_cache.push(ti);
	};
	var GESTURE_HOLD_THRESHOLD = 15;		// max px motion for hold gesture to register
	var GESTURE_HOLD_TIMEOUT = 500;			// time for hold gesture to register
	var GESTURE_TAP_TIMEOUT = 333;			// time for tap gesture to register
	var GESTURE_DOUBLETAP_THRESHOLD = 25;	// max distance apart for taps to be
	function TouchInfo()
	{
		this.starttime = 0;
		this.time = 0;
		this.lasttime = 0;
		this.startx = 0;
		this.starty = 0;
		this.x = 0;
		this.y = 0;
		this.lastx = 0;
		this.lasty = 0;
		this["id"] = 0;
		this.startindex = 0;
		this.triggeredHold = false;
		this.tooFarForHold = false;
	};
	TouchInfo.prototype.init = function (x, y, id, index)
	{
		var nowtime = cr.performance_now();
		this.time = nowtime;
		this.lasttime = nowtime;
		this.starttime = nowtime;
		this.startx = x;
		this.starty = y;
		this.x = x;
		this.y = y;
		this.lastx = x;
		this.lasty = y;
		this.width = 0;
		this.height = 0;
		this.pressure = 0;
		this["id"] = id;
		this.startindex = index;
		this.triggeredHold = false;
		this.tooFarForHold = false;
	};
	TouchInfo.prototype.update = function (nowtime, x, y, width, height, pressure)
	{
		this.lasttime = this.time;
		this.time = nowtime;
		this.lastx = this.x;
		this.lasty = this.y;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.pressure = pressure;
		if (!this.tooFarForHold && cr.distanceTo(this.startx, this.starty, this.x, this.y) >= GESTURE_HOLD_THRESHOLD)
		{
			this.tooFarForHold = true;
		}
	};
	TouchInfo.prototype.maybeTriggerHold = function (inst, index)
	{
		if (this.triggeredHold)
			return;		// already triggered this gesture
		var nowtime = cr.performance_now();
		if (nowtime - this.starttime >= GESTURE_HOLD_TIMEOUT && !this.tooFarForHold && cr.distanceTo(this.startx, this.starty, this.x, this.y) < GESTURE_HOLD_THRESHOLD)
		{
			this.triggeredHold = true;
			inst.trigger_index = this.startindex;
			inst.trigger_id = this["id"];
			inst.getTouchIndex = index;
			inst.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnHoldGesture, inst);
			inst.curTouchX = this.x;
			inst.curTouchY = this.y;
			inst.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnHoldGestureObject, inst);
			inst.getTouchIndex = 0;
		}
	};
	var lastTapX = -1000;
	var lastTapY = -1000;
	var lastTapTime = -10000;
	TouchInfo.prototype.maybeTriggerTap = function (inst, index)
	{
		if (this.triggeredHold)
			return;
		var nowtime = cr.performance_now();
		if (nowtime - this.starttime <= GESTURE_TAP_TIMEOUT && !this.tooFarForHold && cr.distanceTo(this.startx, this.starty, this.x, this.y) < GESTURE_HOLD_THRESHOLD)
		{
			inst.trigger_index = this.startindex;
			inst.trigger_id = this["id"];
			inst.getTouchIndex = index;
			if ((nowtime - lastTapTime <= GESTURE_TAP_TIMEOUT * 2) && cr.distanceTo(lastTapX, lastTapY, this.x, this.y) < GESTURE_DOUBLETAP_THRESHOLD)
			{
				inst.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnDoubleTapGesture, inst);
				inst.curTouchX = this.x;
				inst.curTouchY = this.y;
				inst.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnDoubleTapGestureObject, inst);
				lastTapX = -1000;
				lastTapY = -1000;
				lastTapTime = -10000;
			}
			else
			{
				inst.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTapGesture, inst);
				inst.curTouchX = this.x;
				inst.curTouchY = this.y;
				inst.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTapGestureObject, inst);
				lastTapX = this.x;
				lastTapY = this.y;
				lastTapTime = nowtime;
			}
			inst.getTouchIndex = 0;
		}
	};
	instanceProto.onCreate = function()
	{
		theInstance = this;
		this.isWindows8 = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.orient_alpha = 0;
		this.orient_beta = 0;
		this.orient_gamma = 0;
		this.acc_g_x = 0;
		this.acc_g_y = 0;
		this.acc_g_z = 0;
		this.acc_x = 0;
		this.acc_y = 0;
		this.acc_z = 0;
		this.curTouchX = 0;
		this.curTouchY = 0;
		this.trigger_index = 0;
		this.trigger_id = 0;
		this.getTouchIndex = 0;
		this.useMouseInput = (this.properties[0] !== 0);
		var elem = (this.runtime.fullscreen_mode > 0) ? document : this.runtime.canvas;
		var elem2 = document;
		if (this.runtime.isDirectCanvas)
			elem2 = elem = window["Canvas"];
		else if (this.runtime.isCocoonJs)
			elem2 = elem = window;
		var self = this;
		if (typeof PointerEvent !== "undefined")
		{
			elem.addEventListener("pointerdown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("pointermove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("pointerup",
				function(info) {
					self.onPointerEnd(info, false);
				},
				false
			);
			elem2.addEventListener("pointercancel",
				function(info) {
					self.onPointerEnd(info, true);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				this.runtime.canvas.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else if (window.navigator["msPointerEnabled"])
		{
			elem.addEventListener("MSPointerDown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("MSPointerMove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("MSPointerUp",
				function(info) {
					self.onPointerEnd(info, false);
				},
				false
			);
			elem2.addEventListener("MSPointerCancel",
				function(info) {
					self.onPointerEnd(info, true);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else
		{
			elem.addEventListener("touchstart",
				function(info) {
					self.onTouchStart(info);
				},
				false
			);
			elem.addEventListener("touchmove",
				function(info) {
					self.onTouchMove(info);
				},
				false
			);
			elem2.addEventListener("touchend",
				function(info) {
					self.onTouchEnd(info, false);
				},
				false
			);
			elem2.addEventListener("touchcancel",
				function(info) {
					self.onTouchEnd(info, true);
				},
				false
			);
		}
		if (this.isWindows8)
		{
			var win8accelerometerFn = function(e) {
					var reading = e["reading"];
					self.acc_x = reading["accelerationX"];
					self.acc_y = reading["accelerationY"];
					self.acc_z = reading["accelerationZ"];
				};
			var win8inclinometerFn = function(e) {
					var reading = e["reading"];
					self.orient_alpha = reading["yawDegrees"];
					self.orient_beta = reading["pitchDegrees"];
					self.orient_gamma = reading["rollDegrees"];
				};
			var accelerometer = Windows["Devices"]["Sensors"]["Accelerometer"]["getDefault"]();
            if (accelerometer)
			{
                accelerometer["reportInterval"] = Math.max(accelerometer["minimumReportInterval"], 16);
				accelerometer.addEventListener("readingchanged", win8accelerometerFn);
            }
			var inclinometer = Windows["Devices"]["Sensors"]["Inclinometer"]["getDefault"]();
			if (inclinometer)
			{
				inclinometer["reportInterval"] = Math.max(inclinometer["minimumReportInterval"], 16);
				inclinometer.addEventListener("readingchanged", win8inclinometerFn);
			}
			document.addEventListener("visibilitychange", function(e) {
				if (document["hidden"] || document["msHidden"])
				{
					if (accelerometer)
						accelerometer.removeEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.removeEventListener("readingchanged", win8inclinometerFn);
				}
				else
				{
					if (accelerometer)
						accelerometer.addEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.addEventListener("readingchanged", win8inclinometerFn);
				}
			}, false);
		}
		else
		{
			window.addEventListener("deviceorientation", function (eventData) {
				self.orient_alpha = eventData["alpha"] || 0;
				self.orient_beta = eventData["beta"] || 0;
				self.orient_gamma = eventData["gamma"] || 0;
			}, false);
			window.addEventListener("devicemotion", function (eventData) {
				if (eventData["accelerationIncludingGravity"])
				{
					self.acc_g_x = eventData["accelerationIncludingGravity"]["x"] || 0;
					self.acc_g_y = eventData["accelerationIncludingGravity"]["y"] || 0;
					self.acc_g_z = eventData["accelerationIncludingGravity"]["z"] || 0;
				}
				if (eventData["acceleration"])
				{
					self.acc_x = eventData["acceleration"]["x"] || 0;
					self.acc_y = eventData["acceleration"]["y"] || 0;
					self.acc_z = eventData["acceleration"]["z"] || 0;
				}
			}, false);
		}
		if (this.useMouseInput && !this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
		}
		if (!this.runtime.isiOS && this.runtime.isCordova && navigator["accelerometer"] && navigator["accelerometer"]["watchAcceleration"])
		{
			navigator["accelerometer"]["watchAcceleration"](PhoneGapGetAcceleration, null, { "frequency": 40 });
		}
		this.runtime.tick2Me(this);
	};
	instanceProto.onPointerMove = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		var nowtime = cr.performance_now();
		if (i >= 0)
		{
			var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
			var t = this.touches[i];
			if (nowtime - t.time < 2)
				return;
			t.update(nowtime, info.pageX - offset.left, info.pageY - offset.top, info.width || 0, info.height || 0, info.pressure || 0);
		}
	};
	instanceProto.onPointerStart = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var touchx = info.pageX - offset.left;
		var touchy = info.pageY - offset.top;
		var nowtime = cr.performance_now();
		this.trigger_index = this.touches.length;
		this.trigger_id = info["pointerId"];
		this.touches.push(AllocTouchInfo(touchx, touchy, info["pointerId"], this.trigger_index));
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
		this.curTouchX = touchx;
		this.curTouchY = touchy;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onPointerEnd = function (info, isCancel)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		this.trigger_index = (i >= 0 ? this.touches[i].startindex : -1);
		this.trigger_id = (i >= 0 ? this.touches[i]["id"] : -1);
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
		if (i >= 0)
		{
			if (!isCancel)
				this.touches[i].maybeTriggerTap(this, i);
			ReleaseTouchInfo(this.touches[i]);
			this.touches.splice(i, 1);
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onTouchMove = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var nowtime = cr.performance_now();
		var i, len, t, u;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			var j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
				u = this.touches[j];
				if (nowtime - u.time < 2)
					continue;
				var touchWidth = (t.radiusX || t.webkitRadiusX || t.mozRadiusX || t.msRadiusX || 0) * 2;
				var touchHeight = (t.radiusY || t.webkitRadiusY || t.mozRadiusY || t.msRadiusY || 0) * 2;
				var touchForce = t.force || t.webkitForce || t.mozForce || t.msForce || 0;
				u.update(nowtime, t.pageX - offset.left, t.pageY - offset.top, touchWidth, touchHeight, touchForce);
			}
		}
	};
	instanceProto.onTouchStart = function (info)
	{
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var nowtime = cr.performance_now();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j !== -1)
				continue;
			var touchx = t.pageX - offset.left;
			var touchy = t.pageY - offset.top;
			this.trigger_index = this.touches.length;
			this.trigger_id = t["identifier"];
			this.touches.push(AllocTouchInfo(touchx, touchy, t["identifier"], this.trigger_index));
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
			this.curTouchX = touchx;
			this.curTouchY = touchy;
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onTouchEnd = function (info, isCancel)
	{
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				this.trigger_index = this.touches[j].startindex;
				this.trigger_id = this.touches[j]["id"];
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
				if (!isCancel)
					this.touches[j].maybeTriggerTap(this, j);
				ReleaseTouchInfo(this.touches[j]);
				this.touches.splice(j, 1);
			}
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.getAlpha = function ()
	{
		if (this.runtime.isCordova && this.orient_alpha === 0 && pg_accz !== 0)
			return pg_accz * 90;
		else
			return this.orient_alpha;
	};
	instanceProto.getBeta = function ()
	{
		if (this.runtime.isCordova && this.orient_beta === 0 && pg_accy !== 0)
			return pg_accy * 90;
		else
			return this.orient_beta;
	};
	instanceProto.getGamma = function ()
	{
		if (this.runtime.isCordova && this.orient_gamma === 0 && pg_accx !== 0)
			return pg_accx * 90;
		else
			return this.orient_gamma;
	};
	var noop_func = function(){};
	instanceProto.onMouseDown = function(info)
	{
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchStart(fakeinfo);
		this.mouseDown = true;
	};
	instanceProto.onMouseMove = function(info)
	{
		if (!this.mouseDown)
			return;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchMove(fakeinfo);
	};
	instanceProto.onMouseUp = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.runtime.had_a_click = true;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchEnd(fakeinfo);
		this.mouseDown = false;
	};
	instanceProto.tick2 = function()
	{
		var i, len, t;
		var nowtime = cr.performance_now();
		for (i = 0, len = this.touches.length; i < len; ++i)
		{
			t = this.touches[i];
			if (t.time <= nowtime - 50)
				t.lasttime = nowtime;
			t.maybeTriggerHold(this, i);
		}
	};
	function Cnds() {};
	Cnds.prototype.OnTouchStart = function ()
	{
		return true;
	};
	Cnds.prototype.OnTouchEnd = function ()
	{
		return true;
	};
	Cnds.prototype.IsInTouch = function ()
	{
		return this.touches.length;
	};
	Cnds.prototype.OnTouchObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	var touching = [];
	Cnds.prototype.IsTouchingObject = function (type)
	{
		if (!type)
			return false;
		var sol = type.getCurrentSol();
		var instances = sol.getObjects();
		var px, py;
		var i, leni, j, lenj;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			var inst = instances[i];
			inst.update_bbox();
			for (j = 0, lenj = this.touches.length; j < lenj; j++)
			{
				var touch = this.touches[j];
				px = inst.layer.canvasToLayer(touch.x, touch.y, true);
				py = inst.layer.canvasToLayer(touch.x, touch.y, false);
				if (inst.contains_pt(px, py))
				{
					touching.push(inst);
					break;
				}
			}
		}
		if (touching.length)
		{
			sol.select_all = false;
			cr.shallowAssignArray(sol.instances, touching);
			type.applySolToContainer();
			cr.clearArray(touching);
			return true;
		}
		else
			return false;
	};
	Cnds.prototype.CompareTouchSpeed = function (index, cmp, s)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
			return false;
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		var speed = 0;
		if (timediff > 0)
			speed = dist / timediff;
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.OrientationSupported = function ()
	{
		return typeof window["DeviceOrientationEvent"] !== "undefined";
	};
	Cnds.prototype.MotionSupported = function ()
	{
		return typeof window["DeviceMotionEvent"] !== "undefined";
	};
	Cnds.prototype.CompareOrientation = function (orientation_, cmp_, angle_)
	{
		var v = 0;
		if (orientation_ === 0)
			v = this.getAlpha();
		else if (orientation_ === 1)
			v = this.getBeta();
		else
			v = this.getGamma();
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.CompareAcceleration = function (acceleration_, cmp_, angle_)
	{
		var v = 0;
		if (acceleration_ === 0)
			v = this.acc_g_x;
		else if (acceleration_ === 1)
			v = this.acc_g_y;
		else if (acceleration_ === 2)
			v = this.acc_g_z;
		else if (acceleration_ === 3)
			v = this.acc_x;
		else if (acceleration_ === 4)
			v = this.acc_y;
		else if (acceleration_ === 5)
			v = this.acc_z;
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.OnNthTouchStart = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.OnNthTouchEnd = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.HasNthTouch = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return this.touches.length >= touch_ + 1;
	};
	Cnds.prototype.OnHoldGesture = function ()
	{
		return true;
	};
	Cnds.prototype.OnTapGesture = function ()
	{
		return true;
	};
	Cnds.prototype.OnDoubleTapGesture = function ()
	{
		return true;
	};
	Cnds.prototype.OnHoldGestureObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.OnTapGestureObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.OnDoubleTapGestureObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	pluginProto.cnds = new Cnds();
	function Exps() {};
	Exps.prototype.TouchCount = function (ret)
	{
		ret.set_int(this.touches.length);
	};
	Exps.prototype.X = function (ret, layerparam)
	{
		var index = this.getTouchIndex;
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.XAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.XForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		var index = this.getTouchIndex;
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.YAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.YForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].x);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteXAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].x);
	};
	Exps.prototype.AbsoluteXForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.x);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].y);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteYAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].y);
	};
	Exps.prototype.AbsoluteYForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.y);
	};
	Exps.prototype.SpeedAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		if (timediff <= 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.SpeedForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var dist = cr.distanceTo(touch.x, touch.y, touch.lastx, touch.lasty);
		var timediff = (touch.time - touch.lasttime) / 1000;
		if (timediff <= 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.AngleAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(t.lastx, t.lasty, t.x, t.y)));
	};
	Exps.prototype.AngleForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(touch.lastx, touch.lasty, touch.x, touch.y)));
	};
	Exps.prototype.Alpha = function (ret)
	{
		ret.set_float(this.getAlpha());
	};
	Exps.prototype.Beta = function (ret)
	{
		ret.set_float(this.getBeta());
	};
	Exps.prototype.Gamma = function (ret)
	{
		ret.set_float(this.getGamma());
	};
	Exps.prototype.AccelerationXWithG = function (ret)
	{
		ret.set_float(this.acc_g_x);
	};
	Exps.prototype.AccelerationYWithG = function (ret)
	{
		ret.set_float(this.acc_g_y);
	};
	Exps.prototype.AccelerationZWithG = function (ret)
	{
		ret.set_float(this.acc_g_z);
	};
	Exps.prototype.AccelerationX = function (ret)
	{
		ret.set_float(this.acc_x);
	};
	Exps.prototype.AccelerationY = function (ret)
	{
		ret.set_float(this.acc_y);
	};
	Exps.prototype.AccelerationZ = function (ret)
	{
		ret.set_float(this.acc_z);
	};
	Exps.prototype.TouchIndex = function (ret)
	{
		ret.set_int(this.trigger_index);
	};
	Exps.prototype.TouchID = function (ret)
	{
		ret.set_float(this.trigger_id);
	};
	Exps.prototype.WidthForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.width);
	};
	Exps.prototype.HeightForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.height);
	};
	Exps.prototype.PressureForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.pressure);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.UserMedia = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.UserMedia.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (inst.video_active && inst.v.videoWidth >= 0 && inst.v.videoHeight >= 0)
			{
				inst.webGL_texture = this.runtime.glwrap.createEmptyTexture(inst.v.videoWidth, inst.v.videoHeight, this.runtime.linearSampling);
			}
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var supportsMediaDevices = !!navigator["mediaDevices"];
	var supportsMediaDevicesGUM = supportsMediaDevices && !!navigator["mediaDevices"]["getUserMedia"];
	if (!window["URL"])
	{
		window["URL"] = window["webkitURL"] || window["mozURL"] || window["msURL"];
	}
	var audioSources = [];
	var videoSources = [];
	var isRequesting = false;
	var CJS_CAMWIDTH = 640;
	var CJS_CAMHEIGHT = 480;
	var supportsSpeechRecognition = !!(window["webkitSpeechRecognition"] || window["speechRecognition"]);
	var ambientlux = -1;
	var mediaRecorder = null;
	var canvasStream = null;
	var canvasRecordFormat = "";
	var canvasRecordChunks = [];
	var canvasRecordingUrl = "";
	function stopStream(stream)
	{
		if (!stream)
			return;
		if (stream.stop)
		{
			stream.stop();
		}
		else
		{
			var tracks = stream["getTracks"]();
			for (var i = 0, len = tracks.length; i < len; ++i)
			{
				var track = tracks[i];
				if (track.stop)
					track.stop();
			}
		}
	};
	var speechSynthesis = window["speechSynthesis"] || window["webkitSpeechSynthesis"] || window["mozSpeechSynthesis"] || window["msSpeechSynthesis"];
	var SpeechSynthesisUtterance = window["SpeechSynthesisUtterance"] || window["webkitSpeechSynthesisUtterance"] || window["mozSpeechSynthesisUtterance"] || window["msSpeechSynthesisUtterance"];
	var speechVoices = null;
	var requestedVoices = false;
	function lazyGetVoices()
	{
		if (requestedVoices || !speechSynthesis)
			return;
		speechVoices = speechSynthesis["getVoices"]();
		requestedVoices = true;
	};
	function getVoiceCount()
	{
		lazyGetVoices();
		return speechVoices ? speechVoices.length : 0;
	};
	function getVoiceAt(i)
	{
		lazyGetVoices();
		if (!speechVoices)
			return null;
		if (i < 0 || i >= speechVoices.length)
			return null;
		return speechVoices[i];
	};
	function getVoiceByURI(uri)
	{
		lazyGetVoices();
		if (!speechVoices)
			return null;
		var i, len, v;
		for (i = 0, len = speechVoices.length; i < len; ++i)
		{
			v = speechVoices[i];
			if (v["voiceURI"] === uri)
				return v;
		}
		return null;
	};
	instanceProto.onCreate = function()
	{
		var self = this;
		this.v = document.createElement("video");
		if (this.v)
		{
			this.v.crossOrigin = "anonymous";
			this.v.autoplay = true;
			this.v.addEventListener("canplaythrough", function ()
			{
				if (self.video_active)
					self.video_ready = true;
			});
		}
		cr.setGLBlend(this, 0, this.runtime.gl);		// normal alpha blend
		this.video_active = false;
		this.audio_active = false;
		this.media_stream = null;
		this.runtime.tickMe(this);
		this.snapshot_data = "";
		this.webGL_texture = null;
		this.lastDecodedFrame = -1;
		this.video_ready = false;
		this.viaCanvas = null;
		this.viaCtx = null;
		this.useViaCanvasWorkaround = this.runtime.isIE || this.runtime.isMicrosoftEdge;
		this.speechRecognition = null;
		this.finalTranscript = "";
		this.interimTranscript = "";
		this.isRecognisingSpeech = false;
		this.lastSpeechError = "";
		if (this.runtime.isWinJS && !this.runtime.isWindows8Capable)
		{
			var lightSensor = Windows["Devices"]["Sensors"]["LightSensor"]["getDefault"]();
			if (lightSensor)
			{
				var minInterval = lightSensor["minimumReportInterval"];
				lightSensor["reportInterval"] = (minInterval > 16 ? minInterval : 16);
				lightSensor.addEventListener("readingchanged", function (e)
				{
					ambientlux = e["reading"]["illuminanceInLux"];
					self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnDeviceLight, self);
				});
			}
		}
		else
		{
			window.addEventListener("devicelight", function (e) {
				ambientlux = e["value"];
				self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnDeviceLight, self);
			});
		}
	};
	instanceProto.onDestroy = function()
	{
		if (this.media_stream)
		{
			stopStream(this.media_stream);
			this.media_stream = null;
			this.video_active = false;
			this.video_ready = false;
			this.audio_active = false;
		}
		if (this.runtime.glwrap && this.webGL_texture)
		{
			this.runtime.glwrap.deleteTexture(this.webGL_texture);
			this.webGL_texture = null;
		}
		this.viaCanvas = null;
		this.viaCtx = null;
	};
	instanceProto.tick = function ()
	{
		if (this.video_active && this.video_ready)
			this.runtime.redraw = true;
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		ctx.save();
		ctx.fillStyle = "#000";
		ctx.fillRect(this.x, this.y, this.width, this.height);
		if (this.video_active && this.video_ready)
		{
			var videoWidth = this.v.videoWidth;
			var videoHeight = this.v.videoHeight;
			var videoAspect = videoWidth / videoHeight;
			var dispWidth = this.width;
			var dispHeight = this.height;
			var dispAspect = dispWidth / dispHeight;
			var offx = 0;
			var offy = 0;
			var drawWidth = 0;
			var drawHeight = 0;
			if (dispAspect > videoAspect)
			{
				drawWidth = dispHeight * videoAspect;
				drawHeight = dispHeight;
				offx = Math.floor((dispWidth - drawWidth) / 2);
				if (offx < 0)
					offx = 0;
			}
			else
			{
				drawWidth = dispWidth;
				drawHeight = dispWidth / videoAspect;
				offy = Math.floor((dispHeight - drawHeight) / 2);
				if (offy < 0)
					offy = 0;
			}
			try {
				ctx.drawImage(this.v, this.x + offx, this.y + offy, drawWidth, drawHeight);
			}
			catch (e) {}
		}
		ctx.restore();
	};
	instanceProto.drawGL = function (glw)
	{
		glw.setBlend(this.srcBlend, this.destBlend);
		glw.setOpacity(this.opacity);
		var q = this.bquad;
		glw.setTexture(null);
		glw.quad(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly);
		if (!this.video_active || !this.video_ready || this.v.videoWidth <= 0 || this.v.videoHeight <= 0)
		{
			return;
		}
		if (!this.webGL_texture)
		{
			this.webGL_texture = glw.createEmptyTexture(this.v.videoWidth, this.v.videoHeight, this.runtime.linearSampling);
		}
		var framecount = this.v["webkitDecodedFrameCount"] || this.v["mozParsedFrames"];
		var updatetexture = false;
		if (!framecount)
			updatetexture = true;
		else if (framecount > this.lastDecodedFrame)
		{
			updatetexture = true;
			this.lastDecodedFrame = framecount;
		}
		if (updatetexture)
		{
			if (this.useViaCanvasWorkaround)
			{
				if (!this.viaCtx)
				{
					this.viaCanvas = document.createElement("canvas");
					this.viaCanvas.width = this.v.videoWidth;
					this.viaCanvas.height = this.v.videoHeight;
					this.viaCtx = this.viaCanvas.getContext("2d");
				}
				this.viaCtx.drawImage(this.v, 0, 0);
				glw.videoToTexture(this.viaCanvas, this.webGL_texture);
			}
			else
			{
				glw.videoToTexture(this.v, this.webGL_texture);
			}
		}
		var videoWidth = this.v.videoWidth;
		var videoHeight = this.v.videoHeight;
		var videoAspect = videoWidth / videoHeight;
		var dispWidth = this.width;
		var dispHeight = this.height;
		var dispAspect = dispWidth / dispHeight;
		var offx = 0;
		var offy = 0;
		var drawWidth = 0;
		var drawHeight = 0;
		if (dispAspect > videoAspect)
		{
			drawWidth = dispHeight * videoAspect;
			drawHeight = dispHeight;
			offx = Math.floor((dispWidth - drawWidth) / 2);
			if (offx < 0)
				offx = 0;
		}
		else
		{
			drawWidth = dispWidth;
			drawHeight = dispWidth / videoAspect;
			offy = Math.floor((dispHeight - drawHeight) / 2);
			if (offy < 0)
				offy = 0;
		}
		var left = this.x + offx;
		var top = this.y + offy;
		var right = left + drawWidth;
		var bottom = top + drawHeight;
		glw.setTexture(this.webGL_texture);
		glw.quad(left, top, right, top, right, bottom, left, bottom);
	};
	function Cnds() {};
	Cnds.prototype.OnApproved = function ()
	{
		return true;
	};
	Cnds.prototype.OnDeclined = function ()
	{
		return true;
	};
	Cnds.prototype.SupportsUserMedia = function ()
	{
		return supportsMediaDevicesGUM;
	};
	Cnds.prototype.SupportsSpeechRecognition = function ()
	{
		return supportsSpeechRecognition;
	};
	Cnds.prototype.OnSpeechRecognitionStart = function ()
	{
		return true;
	};
	Cnds.prototype.OnSpeechRecognitionEnd = function ()
	{
		return true;
	};
	Cnds.prototype.OnSpeechRecognitionError = function ()
	{
		return true;
	};
	Cnds.prototype.OnSpeechRecognitionResult = function ()
	{
		return true;
	};
	Cnds.prototype.IsRecognisingSpeech = function ()
	{
		return this.isRecognisingSpeech;
	};
	Cnds.prototype.OnDeviceLight = function ()
	{
		return true;
	};
	Cnds.prototype.SupportsSpeechSynthesis = function ()
	{
		return !!speechSynthesis && !!SpeechSynthesisUtterance;
	};
	Cnds.prototype.IsSpeaking = function ()
	{
		return speechSynthesis && speechSynthesis["speaking"];
	};
	Cnds.prototype.OnMediaSources = function ()
	{
		return true;
	};
	Cnds.prototype.OnCanvasRecordingReady = function ()
	{
		return true;
	};
	Cnds.prototype.SupportsCanvasRecording = function ()
	{
		return this.runtime.canvas && this.runtime.canvas["captureStream"] && typeof MediaRecorder !== "undefined";
	};
	Cnds.prototype.IsCanvasRecordFormatSupported = function (format_)
	{
		var recordFormat;
		if (format_ === 0)
			recordFormat = "video/webm;codecs=vp8";
		else
			recordFormat = "video/webm;codecs=vp9";
		if (typeof MediaRecorder === "undefined")		// not supported
			return false;
		else if (MediaRecorder.isTypeSupported)			// Modern API
			return !!MediaRecorder.isTypeSupported(recordFormat);
		else if (MediaRecorder.canRecordMimeType)		// older API
			return !!MediaRecorder.canRecordMimeType(recordFormat);
		else
			return false;								// something else?
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.RequestCamera = function (source_index, preferredWidth, preferredHeight)
	{
		if (isRequesting || !supportsMediaDevicesGUM)
			return;			// already has info bar up or user media not supported
		isRequesting = true;
		var self = this;
		source_index = Math.floor(source_index);
		var constraints = {};
		if (source_index < 0 || source_index >= videoSources.length)
		{
			constraints["video"] = {};		// don't use boolean since width/height assignment can come later
		}
		else
		{
			constraints["video"] = {
				"deviceId": {
					"exact": videoSources[source_index]["deviceId"]
				}
			};
		}
		if (preferredWidth > 0 && preferredHeight > 0)
		{
			constraints["video"]["width"] = Math.floor(preferredWidth);
			constraints["video"]["height"] = Math.floor(preferredHeight);
		}
		var onGotMediaStream = function (localMediaStream)
		{
			self.media_stream = localMediaStream;
			self.video_ready = false;		// wait for canplaythrough event before rendering
			if (self.v.srcObject)
				self.v.srcObject = localMediaStream;
			else
				self.v.src = window["URL"].createObjectURL(localMediaStream);
			self.video_active = true;
			isRequesting = false;
			self.lastDecodedFrame = -1;
			if (self.runtime.glwrap && self.webGL_texture)
			{
				self.runtime.glwrap.deleteTexture(self.webGL_texture);
				self.webGL_texture = null;
			}
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnApproved, self);
		};
		var onError = function (e)
		{
			isRequesting = false;
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnDeclined, self);
		};
		navigator["mediaDevices"]["getUserMedia"](constraints).then(onGotMediaStream).catch(onError);
	};
	Acts.prototype.RequestMic = function (tag, source_index)
	{
		if (isRequesting || !supportsMediaDevicesGUM)
			return;			// already has info bar up or user media not supported
		isRequesting = true;
		var self = this;
		source_index = Math.floor(source_index);
		var constraints = {};
		if (source_index < 0 || source_index >= audioSources.length)
		{
			constraints["audio"] = true;
		}
		else
		{
			constraints["audio"] = {
				"optional": [{
					"deviceId": audioSources[source_index]["deviceId"]
				}]
			};
		}
		var onGotMediaStream = function (localMediaStream)
		{
			self.media_stream = localMediaStream;
			if (window["c2OnAudioMicStream"])
				window["c2OnAudioMicStream"](localMediaStream, tag);
			self.audio_active = true;
			isRequesting = false;
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnApproved, self);
		};
		var onError = function ()
		{
			isRequesting = false;
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnDeclined, self);
		};
		navigator["mediaDevices"]["getUserMedia"](constraints).then(onGotMediaStream).catch(onError);
	};
	Acts.prototype.Stop = function ()
	{
		if (this.media_stream)
		{
			stopStream(this.media_stream);
			this.media_stream = null;
			this.video_active = false;
			this.video_ready = false;
			this.audio_active = false;
		}
	};
	Acts.prototype.Snapshot = function (format_, quality_)
	{
		if (this.video_active && this.video_ready)
		{
			var tmpcanvas = document.createElement("canvas");
			tmpcanvas.width = this.v.videoWidth;
			tmpcanvas.height = this.v.videoHeight;
			var tmpctx = tmpcanvas.getContext("2d");
			tmpctx.drawImage(this.v, 0, 0, this.v.videoWidth, this.v.videoHeight);
			this.snapshot_data = tmpcanvas.toDataURL(format_ === 0 ? "image/png" : "image/jpeg", quality_ / 100);
		}
	};
	Acts.prototype.RequestSpeechRecognition = function (lang_, mode_, results_)
	{
		if (!supportsSpeechRecognition)
			return;
		if (window["webkitSpeechRecognition"])
			this.speechRecognition = new window["webkitSpeechRecognition"]();
		else if (window["speechRecognition"])
			this.speechRecognition = new window["speechRecognition"]();
		this.speechRecognition["lang"] = lang_;
		this.speechRecognition["continuous"] = (mode_ === 0);
		this.speechRecognition["interimResults"] = (results_ === 0);
		this.isRecognisingSpeech = false;		// reset until onstart fires
		this.interimTranscript = "";
		this.finalTranscript = "";
		var self = this;
		this.speechRecognition["onstart"] = function ()
		{
			self.isRecognisingSpeech = true;
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnSpeechRecognitionStart, self);
		};
		this.speechRecognition["onend"] = function ()
		{
			self.isRecognisingSpeech = false;
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnSpeechRecognitionEnd, self);
		};
		this.speechRecognition["onerror"] = function (e)
		{
			self.isRecognisingSpeech = false;
			self.lastSpeechError = e["error"] || "unknown";
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnSpeechRecognitionError, self);
		};
		this.speechRecognition["onresult"] = function (e)
		{
			var i;
			self.interimTranscript = "";
			for (i = e["resultIndex"]; i < e["results"].length; ++i)
			{
				if (e["results"][i]["isFinal"])
					self.finalTranscript += e["results"][i][0]["transcript"];
				else
					self.interimTranscript += e["results"][i][0]["transcript"];
			}
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnSpeechRecognitionResult, self);
		};
		this.speechRecognition["start"]();
	};
	Acts.prototype.StepSpeechRecognition = function ()
	{
		if (this.speechRecognition)
		{
			this.speechRecognition["stop"]();
			this.speechRecognition = null;
		}
	};
	function dbToLinear(x)
	{
		var v = Math.pow(10, x / 20);
		if (v < 0)
			v = 0;
		if (v > 1)
			v = 1;
		return v;
	};
	Acts.prototype.SpeakText = function (text, lang, uri, vol, rate, pitch)
	{
		if (!speechSynthesis || !SpeechSynthesisUtterance)
			return;
		var s = new SpeechSynthesisUtterance(text);
		if (lang)
			s["lang"] = lang;
		if (uri)
		{
			s["voice"] = getVoiceByURI(uri);	// not in the standard but seems to be used by Chrome
			s["voiceURI"] = uri;
		}
		s["volume"] = dbToLinear(vol);
		s["rate"] = rate;
		s["pitch"] = pitch;
		speechSynthesis["speak"](s);
	};
	Acts.prototype.StopSpeaking = function ()
	{
		if (!speechSynthesis)
			return;
		speechSynthesis["cancel"]();
	};
	Acts.prototype.PauseSpeaking = function ()
	{
		if (!speechSynthesis)
			return;
		speechSynthesis["pause"]();
	};
	Acts.prototype.ResumeSpeaking = function ()
	{
		if (!speechSynthesis)
			return;
		speechSynthesis["resume"]();
	};
	Acts.prototype.GetMediaSources = function ()
	{
		var self = this;
		cr.clearArray(audioSources);
		cr.clearArray(videoSources);
		var handleMediaSourcesList = function (media_sources)
		{
			var i, len, source, kind;
			for (i = 0, len = media_sources.length; i < len; ++i)
			{
				source = media_sources[i];
				kind = source["kind"];
				if (kind === "audio" || kind === "audioinput")
				{
					audioSources.push(source);
				}
				else if (kind === "video" || kind === "videoinput")
				{
					videoSources.push(source);
				}
				self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnMediaSources, self);
			}
		};
		if (navigator["mediaDevices"] && navigator["mediaDevices"]["enumerateDevices"])
		{
			navigator["mediaDevices"]["enumerateDevices"]().then(handleMediaSourcesList);
		}
		else if (window["MediaStreamTrack"] && window["MediaStreamTrack"]["getSources"])
		{
			window["MediaStreamTrack"]["getSources"](handleMediaSourcesList);
		}
	};
	Acts.prototype.StartRecordingCanvas = function (format_, quality_, framerate_)
	{
		if (mediaRecorder || canvasStream)
			return;		// already recording
		if (!this.runtime.canvas || !this.runtime.canvas["captureStream"] || typeof window["MediaRecorder"] === "undefined")
			return;		// not supported
		if (framerate_ > 0)
			canvasStream = this.runtime.canvas["captureStream"](framerate_);
		else
			canvasStream = this.runtime.canvas["captureStream"]();
		cr.clearArray(canvasRecordChunks);
		if (format_ === 0)
			canvasRecordFormat = "video/webm;codecs=vp8";
		else
			canvasRecordFormat = "video/webm;codecs=vp9";
		var self = this;
		try {
			mediaRecorder = new window["MediaRecorder"](canvasStream, {
				"bitsPerSecond": quality_ * 1000,
				"mimeType": canvasRecordFormat
			});
		}
		catch (e)
		{
			stopStream(canvasStream);
			canvasStream = null;
			return;
		}
		mediaRecorder["ondataavailable"] = function (e)
		{
			canvasRecordChunks.push(e.data);
		};
		mediaRecorder["onerror"] = function (e)
		{
			console.error("Recording error: ", e);
		};
		mediaRecorder["onwarning"] = function (e)
		{
			console.warn("Recording warning: ", e);
		};
		mediaRecorder["onstop"] = function (e)
		{
			var blob = new Blob(canvasRecordChunks, { "type": canvasRecordFormat });
			if (canvasRecordingUrl)
				URL.revokeObjectURL(canvasRecordingUrl);
			canvasRecordingUrl = URL.createObjectURL(blob);
			self.runtime.trigger(cr.plugins_.UserMedia.prototype.cnds.OnCanvasRecordingReady, self);
		};
		window.setTimeout(function ()
		{
			mediaRecorder["start"]();
		}, 100);
	};
	Acts.prototype.StopRecordingCanvas = function ()
	{
		if (!mediaRecorder)
			return;		// not recording
		mediaRecorder.stop();
		mediaRecorder = null;
		stopStream(canvasStream);
		canvasStream = null;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.VideoWidth = function (ret)
	{
		ret.set_int(this.v ? this.v.videoWidth : 0);
	};
	Exps.prototype.VideoHeight = function (ret)
	{
		ret.set_int(this.v ? this.v.videoHeight : 0);
	};
	Exps.prototype.SnapshotURL = function (ret)
	{
		ret.set_string(this.snapshot_data);
	};
	Exps.prototype.FinalTranscript = function (ret)
	{
		ret.set_string(this.finalTranscript);
	};
	Exps.prototype.InterimTranscript = function (ret)
	{
		ret.set_string(this.interimTranscript);
	};
	Exps.prototype.SpeechError = function (ret)
	{
		ret.set_string(this.lastSpeechError);
	};
	Exps.prototype.AmbientLux = function (ret)
	{
		ret.set_float(ambientlux);
	};
	Exps.prototype.VoiceCount = function (ret)
	{
		ret.set_int(getVoiceCount());
	};
	Exps.prototype.VoiceNameAt = function (ret, i)
	{
		i = Math.floor(i);
		var v = getVoiceAt(i);
		ret.set_string(v ? v["name"] : "");
	};
	Exps.prototype.VoiceLangAt = function (ret, i)
	{
		i = Math.floor(i);
		var v = getVoiceAt(i);
		ret.set_string(v ? v["lang"] : "");
	};
	Exps.prototype.VoiceURIAt = function (ret, i)
	{
		i = Math.floor(i);
		var v = getVoiceAt(i);
		ret.set_string(v ? v["voiceURI"] : "");
	};
	Exps.prototype.AudioSourceCount = function (ret)
	{
		ret.set_int(audioSources.length);
	};
	Exps.prototype.AudioSourceLabelAt = function (ret, i)
	{
		i = Math.floor(i);
		if (i < 0 || i >= audioSources.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(audioSources[i]["label"] || "");
	};
	Exps.prototype.CameraSourceCount = function (ret)
	{
		ret.set_int(videoSources.length);
	};
	Exps.prototype.CameraSourceLabelAt = function (ret, i)
	{
		i = Math.floor(i);
		if (i < 0 || i >= videoSources.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(videoSources[i]["label"] || "");
	};
	Exps.prototype.CameraSourceFacingAt = function (ret, i)
	{
		i = Math.floor(i);
		if (i < 0 || i >= videoSources.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(videoSources[i]["facing"] || videoSources[i]["facingMode"] || "");
	};
	Exps.prototype.CanvasRecordingURL = function (ret)
	{
		ret.set_string(canvasRecordingUrl);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.XML = function(runtime)
{
	this.runtime = runtime;
	if (this.runtime.isIE)
	{
		var x = {};
		window["XPathResult"] = x;
		x.NUMBER_TYPE = 1;
		x.STRING_TYPE = 2;
		x.UNORDERED_NODE_SNAPSHOT_TYPE = 6;
		x.ORDERED_NODE_SNAPSHOT_TYPE = 7;
	}
};
(function ()
{
	var pluginProto = cr.plugins_.XML.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.xmlDoc = null;
		this.nodeStack = [];
		if (this.runtime.isDomFree)
			cr.logexport("[Construct 2] The XML object is not supported on this platform.");
	};
	instanceProto.xpath_eval_one = function(xpath, result_type)
	{
		if (!this.xmlDoc)
			return;
		var root = this.nodeStack.length ? this.nodeStack[this.nodeStack.length - 1] : this.xmlDoc.documentElement;
		try {
			if (this.runtime.isIE)
				return root.selectSingleNode(xpath);
			else
				return this.xmlDoc.evaluate(xpath, root, null, result_type, null);
		}
		catch (e) { return null; }
	};
	instanceProto.xpath_eval_many = function(xpath, result_type)
	{
		if (!this.xmlDoc)
			return;
		var root = this.nodeStack.length ? this.nodeStack[this.nodeStack.length - 1] : this.xmlDoc.documentElement;
		try {
			if (this.runtime.isIE)
				return root.selectNodes(xpath);
			else
				return this.xmlDoc.evaluate(xpath, root, null, result_type, null);
		}
		catch (e) { return null; }
	};
	function Cnds() {};
	instanceProto.doForEachIteration = function (current_event, item)
	{
		this.nodeStack.push(item);
		this.runtime.pushCopySol(current_event.solModifiers);
		current_event.retrigger();
		this.runtime.popSol(current_event.solModifiers);
		this.nodeStack.pop();
	};
	Cnds.prototype.ForEach = function (xpath)
	{
		if (this.runtime.isDomFree)
			return false;
		var current_event = this.runtime.getCurrentEventStack().current_event;
		var result = this.xpath_eval_many(xpath, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE);
		var i, len, x;
		if (!result)
			return false;
		else
		{
			var current_loop = this.runtime.pushLoopStack();
			if (this.runtime.isIE)
			{
				for (i = 0, len = result.length; i < len; i++)
				{
					current_loop.index = i;
					this.doForEachIteration(current_event, result[i]);
				}
			}
			else
			{
				for (i = 0, len = result.snapshotLength; i < len; i++)
				{
					current_loop.index = i;
					this.doForEachIteration(current_event, result.snapshotItem(i));
				}
			}
			this.runtime.popLoopStack();
		}
		return false;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Load = function (str)
	{
		if (this.runtime.isDomFree)
			return;
		var xml, tmp;
		var isWindows8 = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		try {
			if (isWindows8)
	        {
	            xml = new Windows["Data"]["Xml"]["Dom"]["XmlDocument"]()
	            xml["loadXml"](str);
	        }
			else if (this.runtime.isIE)
			{
				var versions = ["MSXML2.DOMDocument.6.0",
                        "MSXML2.DOMDocument.3.0",
                        "MSXML2.DOMDocument"];
				for (var i = 0; i < 3; i++){
					try {
						xml = new ActiveXObject(versions[i]);
						if (xml)
							break;
					} catch (ex){
						xml = null;
					}
				}
				if (xml)
				{
					xml.async = "false";
					xml["loadXML"](str);
				}
			}
			else {
				tmp = new DOMParser();
				xml = tmp.parseFromString(str, "text/xml");
			}
		} catch(e) {
			xml = null;
		}
		if (xml)
		{
			this.xmlDoc = xml;
			if (this.runtime.isIE && !isWindows8)
				this.xmlDoc["setProperty"]("SelectionLanguage","XPath");
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.NumberValue = function (ret, xpath)
	{
		if (this.runtime.isDomFree)
		{
			ret.set_int(0);
			return;
		}
		var result = this.xpath_eval_one(xpath, XPathResult.NUMBER_TYPE);
		if (!result)
			ret.set_int(0);
		else if (this.runtime.isIE)
			ret.set_int(parseInt(result.nodeValue, 10));
		else
			ret.set_int(result.numberValue || 0);
	};
	Exps.prototype.StringValue = function (ret, xpath)
	{
		if (this.runtime.isDomFree)
		{
			ret.set_string("");
			return;
		}
		var result;
		if (/firefox/i.test(navigator.userAgent))
		{
			result = this.xpath_eval_one(xpath, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE);
			if (!result)
				ret.set_string("");
			else
			{
				var i, len, totalstr = "";
				for (i = 0, len = result.snapshotLength; i < len; i++)
				{
					totalstr += result.snapshotItem(i).textContent;
				}
				ret.set_string(totalstr);
			}
		}
		else
		{
			result = this.xpath_eval_one(xpath, XPathResult.STRING_TYPE);
			if (!result)
				ret.set_string("");
			else if (this.runtime.isIE)
				ret.set_string((result.nodeValue || result.nodeTypedValue) || "");
			else
				ret.set_string(result.stringValue || "");
		}
	};
	Exps.prototype.NodeCount = function (ret, xpath)
	{
		if (this.runtime.isDomFree)
		{
			ret.set_int(0);
			return;
		}
		var result = this.xpath_eval_many(xpath, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE);
		if (!result)
			ret.set_int(0);
		else if (this.runtime.isIE)
			ret.set_int(result.length || 0);
		else
			ret.set_int(result.snapshotLength || 0);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.htmlCODE = function(runtime) {
	this.runtime = runtime;
};
function C2(e) {
	e = e ? e.toString() : "";
	cr.plugins_.htmlCODE.prototype.fncs.OnC2(e);
};
(function () {
	var pluginProto = cr.plugins_.htmlCODE.prototype;
	var html_iframe = [];
	pluginProto.Type = function(plugin) {
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function() {};
	pluginProto.Instance = function(type) {
		this.type = type;
		this.runtime = type.runtime;
		this.link = document.createElement("a");
		this.frame = null;
		this.visible = false;
		this.load = 0;
		this.scale = 1.0;
		this.C2 = "";
		this.CSSfilename = "";
		this.url = "";
		html_iframe.push(this);
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function() {
		this.elem = document.createElement("div");
		if (this.properties[7]) {
			this.elem.innerHTML = this.properties[9];
			this.frame = this.elem;
		} else {
			this.elem.iframe = document.createElement("iframe");
			this.elem.iframe.style.width = "100%";
			this.elem.iframe.style.height = "100%";
			this.frame = this.elem.iframe;
			if (this.properties[8])
				this.GoToURL(this.properties[8]);
		};
		this.frame.id = this.properties[0] || this.makeID();
		this.frame.class = this.properties[1];
		this.frame.setAttribute("id", this.frame.id);
		this.frame.setAttribute("class", this.frame.class);
		if (this.properties[3])
			this.frame.setAttribute("title", this.properties[3]);
		this.frame.setAttribute("frameborder", 0);
		this.frame.setAttribute("allowFullScreen", "");
		var widthfactor = this.width > 0 ? 1 : -1;
		var heightfactor = this.height > 0 ? 1 : -1;
		this.elem.style.cssText = "-webkit-transform:rotate("+ this.angle * widthfactor * heightfactor*180/3.1416 + "deg);" +
						 		"-moz-transform:rotate("+ this.angle * widthfactor * heightfactor*180/3.1416 + "deg);" +
								"-o-transform:rotate("+ this.angle * widthfactor * heightfactor*180/3.1416 + "deg);" +
								"-ms-transform:rotate("+ this.angle * widthfactor * heightfactor*180/3.1416 + "deg);";
		this.frame.style.background = (this.properties[4]);
		this.frame.style.border = (this.properties[5]);
		this.frame.style.color = (this.properties[10]);
		switch (this.properties[6]) {
			case 0:
				this.frame.setAttribute("scrolling", "no");
				this.frame.style.overflow = "hidden";
				break;
			case 1:
				this.frame.style.overflow = "auto";
				break;
			case 2:
				this.frame.style.overflowX = "auto";
				this.frame.style.overflowY = "hidden";
				break;
			case 3:
				this.frame.style.overflowX = "hidden";
				this.frame.style.overflowY = "auto";
				break;
		};
		if(!this.properties[11]) {
			$(this.frame).css("user-select", "none");
			$(this.frame).css("cursor", "default");
		};
		if (this.properties[13])
			this.ImpCSS(this.properties[13].replace(/\s/g, ""));
		if (this.properties[14])
			this.ImpJS(this.properties[14].replace(/\s/g, ""));
		$(this.elem).appendTo(this.runtime.canvasdiv ? this.runtime.canvasdiv : "body");
		$(this.elem.iframe).appendTo($(this.elem));
		$(this.frame).bind('contextmenu', function(e){ return false; });
		if (!this.properties[2]) {
			jQuery(this.elem).hide();
			this.visible = false;
		};
		this.updatePosition();
		this.runtime.tickMe(this);
	};
	instanceProto.saveToJSON = function () {
		var url = this.properties[7] ? "" : this.elem.iframe.contentWindow.location.href;
		return {
			"id":	this.frame.id,
			"class":this.frame.class,
			"html":	this.elem.innerHTML,
			"css":	this.elem.style.cssText,
			"style":this.frame.style.cssText,
			"url": 	url
		};
	};
	instanceProto.loadFromJSON = function (get) {
		this.frame.id = get["id"];
		this.frame.class = get["class"];
		this.elem.style.cssText = get["css"];
		if (this.properties[7])
			this.elem.innerHTML = get["html"];
		else {
			this.elem.iframe.style.cssText = get["style"];
			this.GoToURL(get["url"]);
		}
	};
	instanceProto.draw = function(ctx) {};
	instanceProto.drawGL = function(glw) {};
	instanceProto.onDestroy = function () {
		html_iframe.splice(html_iframe.indexOf(this), 1);
		jQuery(this.frame).remove();
		this.elem = null;
	};
	instanceProto.tick = function () {
		this.updatePosition();
	};
	instanceProto.updatePosition = function () {
		if (this.runtime.isDomFree)
			return;
		var left = this.layer.layerToCanvas(this.x, this.y, true);
		var top = this.layer.layerToCanvas(this.x, this.y, false);
		var right = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, true);
		var bottom = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, false);
		if (!this.visible || !this.layer.visible || right <= 0 || bottom <= 0 || left >= this.runtime.width || top >= this.runtime.height) {
			jQuery(this.elem).hide();
			return;
		}
		left = left < 1 ? 1 : Math.round(left);
		top = top < 1 ? 1 : Math.round(top);
		right = right >= this.runtime.width ? Math.round(this.runtime.width - 1) : Math.round(right);
		bottom = bottom >= this.runtime.height ? Math.round(this.runtime.height - 1) : Math.round(bottom);
		jQuery(this.elem).show();
		var offx = left + jQuery(this.runtime.canvas).offset().left;
		var offy = top + jQuery(this.runtime.canvas).offset().top;
		jQuery(this.elem).offset({left: parseInt(offx), top: parseInt(offy)});
		jQuery(this.elem).width(right - left);
		jQuery(this.elem).height(bottom - top);
		this.elem.width = Math.round(this.elem.width);
		this.elem.height = Math.round(this.elem.height);
		this.elem.x = Math.round(this.elem.x);
		this.elem.y = Math.round(this.elem.y);
		if (this.properties[12] == 1)
			jQuery(this.elem).css("font-size", ((this.layer.getScale(true) / this.runtime.devicePixelRatio) - 0.2) + "em");
		if (this.properties[12] == 2)
			jQuery(this.elem).css("font-size", ((this.layer.getScale(true) / this.runtime.devicePixelRatio) - 0.4) + "em");
		if (this.properties[12] == 3)
			jQuery(this.elem).css("font-size", ((this.layer.getScale(true) / this.runtime.devicePixelRatio) - 0.1) + "em");
		if (this.properties[12] == 4)
			jQuery(this.elem).css("font-size", ((this.layer.getScale(true) / this.runtime.devicePixelRatio)) + "em");
	};
	instanceProto.makeID = function() {
	    var id = "", str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	    for (var i = 0; i < 10; i++)
	        id += str.charAt(Math.floor(Math.random() * str.length));
	    return id;
	};
	instanceProto.ImpCSS = function(file_) {
		var obj = file_.replace(/ /gi).split(";");
		for (var i = 0; i < obj.length; i++) {
			var offset = $("link[href='"+obj[i]+"']").offset();
			if (obj[i] != "" && typeof offset === "undefined") {
				this.CSSfilename += (this.CSSfilename.length) ? " "+file_ : file_;
				this.CSSref = document.createElement("link");
				this.CSSref.setAttribute("type", "text/css");
				this.CSSref.setAttribute("rel", "stylesheet");
				this.CSSref.setAttribute("href", obj[i]);
				if (typeof this.CSSref != "undefined")
					document.getElementsByTagName("head")[0].appendChild(this.CSSref);
			};
		};
	};
	instanceProto.ImpJS = function(file_) {
		var obj = file_.replace(/ /gi).split(";");
		for (var i = 0; i < obj.length; i++) {
			var offset = $("script[src='"+obj[i]+"']").offset();
			if (obj[i] != "" && typeof offset === "undefined") {
				this.JSref = document.createElement("script");
				this.JSref.setAttribute("type", "text/javascript");
				this.JSref.setAttribute("async", "async");
				this.JSref.setAttribute("src", obj[i]);
				if (typeof this.JSref != "undefined")
					document.getElementsByTagName("head")[0].appendChild(this.JSref);
			};
		};
	};
	instanceProto.Garbage = function(file_, type_) {
		var rem = document.getElementsByTagName(type_);
		var att = type_ === "script" ? "src" : "href";
		this.CSSfilename = type_ === "script" ? this.CSSfilename : this.CSSfilename.replace(file_, "").replace(/^\s+|\s+$/g, "");
		for (var i = 0; i < rem.length; i++) {
			if (rem[i].getAttribute(att) === file_) {
				rem[i].parentNode.removeChild(rem[i]);
				return;
			};
		};
	};
	instanceProto.GoToURL = function(url_) {
		if (this.properties[7])
			return;
		url_ = url_.indexOf("http") == 0 ? url_ : "http://"+url_;
		var self = this;
		this.url = url_;
		this.load = 1;
		this.elem.iframe.src = this.url;
		this.runtime.trigger(Cnds.prototype.OnGoToURL, this);
		jQuery.ajax({
			context: self,
			dataType: "text",
			type: "GET",
			url: url_,
			success: function() {
				self.frame.onload = (function () {
					return function() {
						self.url = self.frame.contentWindow.location.href;
						self.runtime.trigger(Cnds.prototype.OnLoad, self);
					};
				})(self);
				self.load = 0;
			},
			error: function() {
				self.frame.onload = (function () {
					return function() {
						self.url = self.frame.contentWindow.location.href;
						self.runtime.trigger(Cnds.prototype.OnError, self);
					};
				})(self);
				self.load = 0;
			}
		});
	};
	function Fncs() {};
	Fncs.prototype.OnC2 = function (e) {
		for (var i = 0; i < html_iframe.length; i++) {
			html_iframe[i].C2 = e;
			html_iframe[i].runtime.trigger(Cnds.prototype.OnC2, html_iframe[i]);
		};
	};
	pluginProto.fncs = new Fncs();
	function Cnds() {};
	Cnds.prototype.CompareCSSfilename = function (text) {
		if (this.runtime.isDomFree)
			return false;
		return cr.equals_nocase(this.CSSfilename, text);
	};
	Cnds.prototype.CompareCSSstyle = function (text) {
		if (this.runtime.isDomFree)
			return false;
		return cr.equals_nocase(this.frame.style.cssText, text);
	};
	Cnds.prototype.OnC2 = function () {
		return true;
	};
	Cnds.prototype.C2value = function (text, case_) {
		if (this.runtime.isDomFree)
			return false;
		if (case_ === 0)	// insensitive
			return cr.equals_nocase(this.C2, text);
		else				// sensitive
			return this.C2 === text;
	};
	Cnds.prototype.CompareHTML = function (text, case_) {
		if (this.runtime.isDomFree)
			return false;
		if (case_ === 0)	// insensitive
			return cr.equals_nocase(this.frame.innerHTML, text);
		else				// sensitive
			return this.frame.innerHTML === text;
	};
	Cnds.prototype.OnError = function () {
		return true;
	};
	Cnds.prototype.OnLoad = function () {
		return true;
	};
	Cnds.prototype.IsFocused = function () {
		if (this.runtime.isDomFree)
			return false;
		return this.frame === document.activeElement;
	};
	Cnds.prototype.IsLoading = function () {
		if (this.runtime.isDomFree)
			return false;
		return this.load;
	};
	Cnds.prototype.URL = function (text) {
		if (this.runtime.isDomFree)
			return false;
		return (this.properties[7] ? 0 : (text == this.url));
	};
	Cnds.prototype.OnGoToURL = function () {
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetVisible = function (vis) {
		if (this.runtime.isDomFree)
			return;
		this.visible = (vis !== 0);
	};
	Acts.prototype.SetTooltip = function (text) {
		if (this.runtime.isDomFree)
			return;
		this.frame.title = text;
	};
	Acts.prototype.ImpCSSfile = function (filename) {
		if (this.runtime.isDomFree || !filename)
			return;
		this.ImpCSS(filename.replace(/\s/g, ""));
	};
	Acts.prototype.RemCSSfile = function (filename) {
		if (this.runtime.isDomFree)
			return;
		this.Garbage(filename.replace(/\s/g, ""), "link");
	};
	Acts.prototype.SetCSS = function (p, v) {
		if (this.runtime.isDomFree)
			return;
		jQuery(this.frame).css(p, v);
	};
	Acts.prototype.SetScale = function (scale, r) {
		if (this.runtime.isDomFree)
			return;
		this.elem.style.transform = "scale(" + scale + ")";
		if (r) {
			this.width = (this.width * this.scale) / scale;
			this.height = (this.height * this.scale) / scale;
			this.scale = scale;
		};
	};
	Acts.prototype.AddClass = function (class_) {
		if (this.runtime.isDomFree)
			return;
		var loop = class_.split(" ");
		for (var i = 0; i < loop.length; i++) {
			if (!this.frame.class.match(loop[i]))
				this.frame.class += (this.frame.class.length) ? " "+loop[i] : loop[i];
		};
		this.frame.setAttribute("class", this.frame.class);
	};
	Acts.prototype.RemClass = function (class_) {
		if (this.runtime.isDomFree)
			return;
		var loop = class_.split(" ");
		for (var i = 0; i < loop.length; i++) {
			this.frame.class = this.frame.class.replace(loop[i], "").replace("  ", " ").trim();
		};
		this.frame.setAttribute("class", this.frame.class);
	};
	Acts.prototype.TextSelectable = function (selectable_) {
		$(this.frame).css("user-select", selectable_ ? "auto" : "none");
		$(this.frame).css("cursor", selectable_ ? "auto" : "default");
	};
	Acts.prototype.ImpJSfile = function (filename) {
		if (this.runtime.isDomFree)
			return;
		this.ImpJS(filename.replace(/\s/g, ""));
	};
	/***** Browsers save scripts in memory
	Acts.prototype.RemJSfile = function (filename)
	{
		if (this.runtime.isDomFree || !filename)
			return;
		this.Garbage(filename.replace(/\s/g, ""), "script");
	};
	*****/
	Acts.prototype.ExecJS = function (js_) {
		if (this.runtime.isDomFree)
			return;
		try { if (eval) eval(js_); }
		catch(e) {
			if (console && console.error)
				console.error("Error executing Javascript: ", e);
		};
	};
	Acts.prototype.SetHTML = function (text) {
		if (this.runtime.isDomFree)
			return;
		this.frame.innerHTML = text;
	};
	Acts.prototype.AppendHTML = function(param) {
		if (this.runtime.isDomFree)
			return;
		this.frame.innerHTML += (param);
	};
	Acts.prototype.LoadHTML = function (url_, postdata_) {
		if (this.runtime.isDomFree)
			return;
		this.load = 1;
		if(postdata_.length) {
			jQuery.ajax({
				context: this,
				dataType: "text",
				type: "POST",
				url: url_,
				data: postdata_,
				success: function(data) {
					this.load = 0;
					this.frame.innerHTML = data;
					this.runtime.trigger(Cnds.prototype.OnLoad, this);
				},
				error: function(err) {
					this.load = 0;
					this.frame.innerHTML = err;
					this.runtime.trigger(Cnds.prototype.OnError, this);
				}
			});
		} else {
			jQuery.ajax({
				context: this,
				dataType: "text",
				type: "GET",
				url: url_,
				success: function(data) {
					this.load = 0;
					this.frame.innerHTML = data;
					this.runtime.trigger(Cnds.prototype.OnLoad, this);
				},
				error: function(err) {
					this.load = 0;
					this.frame.innerHTML = err;
					this.runtime.trigger(Cnds.prototype.OnError, this);
				}
			});
		};
	};
	Acts.prototype.ScrollTop = function () {
		if (this.runtime.isDomFree)
			return;
        this.frame.scrollTop = 0;
	};
	Acts.prototype.ScrollBottom = function () {
		if (this.runtime.isDomFree)
			return;
		this.frame.scrollTop = this.frame.scrollHeight;
	};
	Acts.prototype.ScrollTo = function (to_) {
		if (this.runtime.isDomFree)
			return;
		to_ /= 100;
		this.frame.scrollTop = this.frame.scrollHeight;
		this.frame.scrollTop *= to_;
	};
	Acts.prototype.ScrollToPosition = function (to_) {
		if (this.runtime.isDomFree)
			return;
		this.frame.scrollTop = to_;
	};
	Acts.prototype.GetElement = function (elem_, set_, add_) {
		if (this.runtime.isDomFree)
			return;
		function NewValue(e) {
			if (!set_.length && add_.length)
				e.innerHTML += add_;
			else
				e.innerHTML = set_;
		};
		if (new RegExp("#").test(elem_))
			NewValue(document.getElementById(elem_.replace("#", "")));
		else {
			var e = document.getElementsByClassName(elem_.replace(".", ""));
			$(e).each(function(i) {
				NewValue(e[i]);
			});
		};
	};
	Acts.prototype.RemoveElement = function (elem_) {
		if (this.runtime.isDomFree)
			return;
		$(elem_).remove();
	};
	Acts.prototype.Blur = function () {
		if (this.runtime.isDomFree)
			return;
		this.frame.blur();
	};
	Acts.prototype.Focus = function () {
		if (this.runtime.isDomFree)
			return;
		this.frame.focus();
	};
	Acts.prototype.GoTo = function (url_) {
		if (this.runtime.isDomFree)
			return;
		this.GoToURL(url_);
	};
	Acts.prototype.Backward = function () {
		if (this.runtime.isDomFree)
			return;
		this.frame.src = this.frame.contentWindow.history.back();
	};
	Acts.prototype.Forward = function () {
		if (this.runtime.isDomFree)
			return;
		this.frame.src = this.frame.contentWindow.history.forward();
	};
	Acts.prototype.Refresh = function () {
		if (this.runtime.isDomFree)
			return;
		this.frame.contentWindow.location.reload();
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.CSSfilename = function (ret) {
		ret.set_string(this.CSSfilename);
	};
	Exps.prototype.CSS = function (ret) {
		ret.set_string(this.frame.style.cssText);
	};
	Exps.prototype.C2 = function (ret) {
		ret.set_string(this.C2);
	};
	Exps.prototype.ID = function (ret) {
		ret.set_string(this.frame.id);
	};
	Exps.prototype.Class = function (ret) {
		ret.set_string(this.frame.class);
	};
	Exps.prototype.HTML = function (ret) {
		ret.set_string(this.properties[7] ? this.frame.innerHTML : "<html>" + jQuery($(this.frame)).contents().find("*").html() + "</html>");
	};
	Exps.prototype.ScrollPosition = function (ret) {
		ret.set_float(this.frame.scrollTop);
	};
	Exps.prototype.ScrollHeight = function (ret) {
		ret.set_float(this.frame.scrollHeight);
	};
	Exps.prototype.URL = function (ret) {
		ret.set_string(this.url);
	};
	Exps.prototype.Host = function (ret) {
		this.link.href = this.url;
		var host = this.link.hostname.indexOf(".") >= 0 ?
			this.link.hostname.split(".")[0] === "www" ? this.link.hostname.split(".")[1] : this.link.hostname.split(".")[0] :
			this.link.hostname;
		ret.set_string(host);
	};
	Exps.prototype.HostPath = function (ret) {
		this.link.href = this.url;
		var str = this.link.pathname;
		ret.set_string(str.replace(/\//i, ""));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.rex_TouchWrap = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.rex_TouchWrap.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.touches = [];
		this.mouseDown = false;
		this.touchDown = false;
        this.check_name = "TOUCHWRAP";
        this.cursor = {x:null, y:null};
        this._callbackObjs = [];
	    this.fake_ret = {value:0,
	                     set_any: function(value){this.value=value;},
	                     set_int: function(value){this.value=value;},
                         set_float: function(value){this.value=value;},
	                    };
	};
	var instanceProto = pluginProto.Instance.prototype;
	var canvasOffset = {left: 0, top: 0};
	instanceProto.findTouch = function (id)
	{
		var i, len;
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			if (this.touches[i]["id"] === id)
				return i;
		}
		return -1;
	};
	var appmobi_accx = 0;
	var appmobi_accy = 0;
	var appmobi_accz = 0;
	function AppMobiGetAcceleration(evt)
	{
		appmobi_accx = evt.x;
		appmobi_accy = evt.y;
		appmobi_accz = evt.z;
	};
	var pg_accx = 0;
	var pg_accy = 0;
	var pg_accz = 0;
	function PhoneGapGetAcceleration(evt)
	{
		pg_accx = evt.x;
		pg_accy = evt.y;
		pg_accz = evt.z;
	};
	var theInstance = null;
	var touchinfo_cache = [];
	function AllocTouchInfo(x, y, id, index)
	{
		var ret;
		if (touchinfo_cache.length)
			ret = touchinfo_cache.pop();
		else
			ret = new TouchInfo();
		ret.init(x, y, id, index);
		return ret;
	};
	function ReleaseTouchInfo(ti)
	{
		if (touchinfo_cache.length < 100)
			touchinfo_cache.push(ti);
	};
	var GESTURE_HOLD_THRESHOLD = 15;		// max px motion for hold gesture to register
	var GESTURE_HOLD_TIMEOUT = 500;			// time for hold gesture to register
	var GESTURE_TAP_TIMEOUT = 333;			// time for tap gesture to register
	var GESTURE_DOUBLETAP_THRESHOLD = 25;	// max distance apart for taps to be
	function TouchInfo()
	{
		this.starttime = 0;
		this.time = 0;
		this.lasttime = 0;
		this.startx = 0;
		this.starty = 0;
		this.x = 0;
		this.y = 0;
		this.lastx = 0;
		this.lasty = 0;
		this["id"] = 0;
		this.startindex = 0;
		this.triggeredHold = false;
		this.tooFarForHold = false;
	};
	TouchInfo.prototype.init = function (x, y, id, index)
	{
		var nowtime = cr.performance_now();
		this.time = nowtime;
		this.lasttime = nowtime;
		this.starttime = nowtime;
		this.startx = x;
		this.starty = y;
		this.x = x;
		this.y = y;
		this.lastx = x;
		this.lasty = y;
		this.width = 0;
		this.height = 0;
		this.pressure = 0;
		this["id"] = id;
		this.startindex = index;
		this.triggeredHold = false;
		this.tooFarForHold = false;
	};
	TouchInfo.prototype.update = function (nowtime, x, y, width, height, pressure)
	{
		this.lasttime = this.time;
		this.time = nowtime;
		this.lastx = this.x;
		this.lasty = this.y;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.pressure = pressure;
		if (!this.tooFarForHold && cr.distanceTo(this.startx, this.starty, this.x, this.y) >= GESTURE_HOLD_THRESHOLD)
		{
			this.tooFarForHold = true;
		}
	};
	TouchInfo.prototype.maybeTriggerHold = function (inst, index)
	{
		if (this.triggeredHold)
			return;		// already triggered this gesture
		var nowtime = cr.performance_now();
		if (nowtime - this.starttime >= GESTURE_HOLD_TIMEOUT && !this.tooFarForHold && cr.distanceTo(this.startx, this.starty, this.x, this.y) < GESTURE_HOLD_THRESHOLD)
		{
			this.triggeredHold = true;
			inst.trigger_index = this.startindex;
			inst.trigger_id = this["id"];
			inst.getTouchIndex = index;
			inst.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnHoldGesture, inst);
			inst.curTouchX = this.x;
			inst.curTouchY = this.y;
			inst.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnHoldGestureObject, inst);
			inst.getTouchIndex = 0;
		}
	};
	var lastTapX = -1000;
	var lastTapY = -1000;
	var lastTapTime = -10000;
	TouchInfo.prototype.maybeTriggerTap = function (inst, index)
	{
		if (this.triggeredHold)
			return;
		var nowtime = cr.performance_now();
		if (nowtime - this.starttime <= GESTURE_TAP_TIMEOUT && !this.tooFarForHold && cr.distanceTo(this.startx, this.starty, this.x, this.y) < GESTURE_HOLD_THRESHOLD)
		{
			inst.trigger_index = this.startindex;
			inst.trigger_id = this["id"];
			inst.getTouchIndex = index;
			if ((nowtime - lastTapTime <= GESTURE_TAP_TIMEOUT * 2) && cr.distanceTo(lastTapX, lastTapY, this.x, this.y) < GESTURE_DOUBLETAP_THRESHOLD)
			{
				inst.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnDoubleTapGesture, inst);
				inst.curTouchX = this.x;
				inst.curTouchY = this.y;
				inst.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnDoubleTapGestureObject, inst);
				lastTapX = -1000;
				lastTapY = -1000;
				lastTapTime = -10000;
			}
			else
			{
				inst.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTapGesture, inst);
				inst.curTouchX = this.x;
				inst.curTouchY = this.y;
				inst.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTapGestureObject, inst);
				lastTapX = this.x;
				lastTapY = this.y;
				lastTapTime = nowtime;
			}
			inst.getTouchIndex = 0;
		}
	};
	instanceProto.onCreate = function()
	{
		theInstance = this;
		this.isWindows8 = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.orient_alpha = 0;
		this.orient_beta = 0;
		this.orient_gamma = 0;
		this.acc_g_x = 0;
		this.acc_g_y = 0;
		this.acc_g_z = 0;
		this.acc_x = 0;
		this.acc_y = 0;
		this.acc_z = 0;
		this.curTouchX = 0;
		this.curTouchY = 0;
		this.trigger_index = 0;
		this.trigger_id = 0;
		this.getTouchIndex = 0;
		this.useMouseInput = (this.properties[0] !== 0);
		var elem = (this.runtime.fullscreen_mode > 0) ? document : this.runtime.canvas;
		var elem2 = document;
		if (this.runtime.isDirectCanvas)
			elem2 = elem = window["Canvas"];
		else if (this.runtime.isCocoonJs)
			elem2 = elem = window;
		var self = this;
		if (typeof PointerEvent !== "undefined")
		{
			elem.addEventListener("pointerdown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("pointermove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("pointerup",
				function(info) {
					self.onPointerEnd(info, false);
				},
				false
			);
			elem2.addEventListener("pointercancel",
				function(info) {
					self.onPointerEnd(info, true);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				this.runtime.canvas.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else if (window.navigator["msPointerEnabled"])
		{
			elem.addEventListener("MSPointerDown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("MSPointerMove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("MSPointerUp",
				function(info) {
					self.onPointerEnd(info, false);
				},
				false
			);
			elem2.addEventListener("MSPointerCancel",
				function(info) {
					self.onPointerEnd(info, true);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else
		{
			elem.addEventListener("touchstart",
				function(info) {
					self.onTouchStart(info);
				},
				false
			);
			elem.addEventListener("touchmove",
				function(info) {
					self.onTouchMove(info);
				},
				false
			);
			elem2.addEventListener("touchend",
				function(info) {
					self.onTouchEnd(info, false);
				},
				false
			);
			elem2.addEventListener("touchcancel",
				function(info) {
					self.onTouchEnd(info, true);
				},
				false
			);
		}
		if (this.isWindows8)
		{
			var win8accelerometerFn = function(e) {
					var reading = e["reading"];
					self.acc_x = reading["accelerationX"];
					self.acc_y = reading["accelerationY"];
					self.acc_z = reading["accelerationZ"];
				};
			var win8inclinometerFn = function(e) {
					var reading = e["reading"];
					self.orient_alpha = reading["yawDegrees"];
					self.orient_beta = reading["pitchDegrees"];
					self.orient_gamma = reading["rollDegrees"];
				};
			var accelerometer = Windows["Devices"]["Sensors"]["Accelerometer"]["getDefault"]();
            if (accelerometer)
			{
                accelerometer["reportInterval"] = Math.max(accelerometer["minimumReportInterval"], 16);
				accelerometer.addEventListener("readingchanged", win8accelerometerFn);
            }
			var inclinometer = Windows["Devices"]["Sensors"]["Inclinometer"]["getDefault"]();
			if (inclinometer)
			{
				inclinometer["reportInterval"] = Math.max(inclinometer["minimumReportInterval"], 16);
				inclinometer.addEventListener("readingchanged", win8inclinometerFn);
			}
			document.addEventListener("visibilitychange", function(e) {
				if (document["hidden"] || document["msHidden"])
				{
					if (accelerometer)
						accelerometer.removeEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.removeEventListener("readingchanged", win8inclinometerFn);
				}
				else
				{
					if (accelerometer)
						accelerometer.addEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.addEventListener("readingchanged", win8inclinometerFn);
				}
			}, false);
		}
		else
		{
			window.addEventListener("deviceorientation", function (eventData) {
				self.orient_alpha = eventData["alpha"] || 0;
				self.orient_beta = eventData["beta"] || 0;
				self.orient_gamma = eventData["gamma"] || 0;
			}, false);
			window.addEventListener("devicemotion", function (eventData) {
				if (eventData["accelerationIncludingGravity"])
				{
					self.acc_g_x = eventData["accelerationIncludingGravity"]["x"] || 0;
					self.acc_g_y = eventData["accelerationIncludingGravity"]["y"] || 0;
					self.acc_g_z = eventData["accelerationIncludingGravity"]["z"] || 0;
				}
				if (eventData["acceleration"])
				{
					self.acc_x = eventData["acceleration"]["x"] || 0;
					self.acc_y = eventData["acceleration"]["y"] || 0;
					self.acc_z = eventData["acceleration"]["z"] || 0;
				}
			}, false);
		}
		if (this.useMouseInput && !this.runtime.isDomFree)
		{
			document.addEventListener("mousemove",
			    function(info) {
					self.onMouseMove(info);
				});
			document.addEventListener("mousedown",
			    function(info) {
					self.onMouseDown(info);
				});
			document.addEventListener("mouseup",
			    function(info) {
					self.onMouseUp(info);
				});
		}
		if (!this.runtime.isiOS && this.runtime.isCordova && navigator["accelerometer"] && navigator["accelerometer"]["watchAcceleration"])
		{
			navigator["accelerometer"]["watchAcceleration"](PhoneGapGetAcceleration, null, { "frequency": 40 });
		}
		this.runtime.tick2Me(this);
		this.enable = (this.properties[1] == 1);
		this.lastTouchX = null;
		this.lastTouchY = null;
	};
	instanceProto.getCanvasOffset = function()
	{
		if (!this.runtime.isDomFree)
		{
			canvasOffset.left = this.runtime.canvas.offsetLeft;
			canvasOffset.top = this.runtime.canvas.offsetTop;
		}
		return canvasOffset;
	}
	instanceProto.onPointerMove = function (info)
	{
	    if (!this.enable)
	        return;
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		var nowtime = cr.performance_now();
		var cnt=this._callbackObjs.length, hooki;
		if (i >= 0)
		{
			var offset = this.getCanvasOffset();
			var t = this.touches[i];
			if (nowtime - t.time < 2)
				return;
			t.update(nowtime, info.pageX - offset.left, info.pageY - offset.top, info.width || 0, info.height || 0, info.pressure || 0);
			var touchx = info.pageX - offset.left;
			var touchy = info.pageY - offset.top;
            for (hooki=0; hooki<cnt; hooki++)
			{
				if (this._callbackObjs[hooki].OnTouchMove)
                    this._callbackObjs[hooki].OnTouchMove(t["identifier"], touchx, touchy);
			}
		}
	};
	instanceProto.onPointerStart = function (info)
	{
	    if (!this.enable)
	        return;
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		var offset = this.getCanvasOffset();
		var touchx = info.pageX - offset.left;
		var touchy = info.pageY - offset.top;
		var nowtime = cr.performance_now();
		this.trigger_index = this.touches.length;
		this.trigger_id = info["pointerId"];
		this.touches.push(AllocTouchInfo(touchx, touchy, info["pointerId"], this.trigger_index));
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnNthTouchStart, this);
		this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchStart, this);
		this.curTouchX = touchx;
		this.curTouchY = touchy;
		this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchObject, this);
        var hooki, cnt=this._callbackObjs.length;
        for (hooki=0; hooki<cnt; hooki++)
		{
			if (this._callbackObjs[hooki].OnTouchStart)
                this._callbackObjs[hooki].OnTouchStart(this.trigger_id, this.curTouchX, this.curTouchY);
	    }
	    this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onPointerEnd = function (info, isCancel)
	{
	    if (!this.enable)
	        return;
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		this.trigger_index = (i >= 0 ? this.touches[i].startindex : -1);
		this.trigger_id = (i >= 0 ? this.touches[i]["id"] : -1);
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnNthTouchEnd, this);
		this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchEnd, this);
        if (i >= 0)
        {
		    this.lastTouchX = this.touches[i].x;
		    this.lastTouchY = this.touches[i].y;
		    this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchReleasedObject, this);
		}
        var cnt=this._callbackObjs.length, hooki;
        for (hooki=0; hooki<cnt; hooki++)
		{
		    if (this._callbackObjs[hooki].OnTouchEnd)
                this._callbackObjs[hooki].OnTouchEnd(this.trigger_id);
		}
		if (i >= 0)
		{
			if (!isCancel)
				this.touches[i].maybeTriggerTap(this, i);
			ReleaseTouchInfo(this.touches[i]);
			this.touches.splice(i, 1);
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onTouchMove = function (info)
	{
	    if (!this.enable)
	        return;
		if (info.preventDefault)
			info.preventDefault();
		var nowtime = cr.performance_now();
		var i, len, t, u;
		var cnt=this._callbackObjs.length, hooki;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			var j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				var offset = this.getCanvasOffset();
				u = this.touches[j];
				if (nowtime - u.time < 2)
					continue;
				var touchWidth = (t.radiusX || t.webkitRadiusX || t.mozRadiusX || t.msRadiusX || 0) * 2;
				var touchHeight = (t.radiusY || t.webkitRadiusY || t.mozRadiusY || t.msRadiusY || 0) * 2;
				var touchForce = t.force || t.webkitForce || t.mozForce || t.msForce || 0;
				u.update(nowtime, t.pageX - offset.left, t.pageY - offset.top, touchWidth, touchHeight, touchForce);
			    var touchx = t.pageX - offset.left;
			    var touchy = t.pageY - offset.top;
                for (hooki=0; hooki<cnt; hooki++)
			    {
			    	if (this._callbackObjs[hooki].OnTouchMove)
                        this._callbackObjs[hooki].OnTouchMove(t["identifier"], touchx, touchy);
			    }
			}
		}
	};
	instanceProto.onTouchStart = function (info)
	{
	    if (!this.enable)
	        return;
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		var offset = this.getCanvasOffset();
		var nowtime = cr.performance_now();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
        var cnt=this._callbackObjs.length, hooki;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j !== -1)
				continue;
			var touchx = t.pageX - offset.left;
			var touchy = t.pageY - offset.top;
			this.trigger_index = this.touches.length;
			this.trigger_id = t["identifier"];
			this.touches.push(AllocTouchInfo(touchx, touchy, t["identifier"], this.trigger_index));
			this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnNthTouchStart, this);
			this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchStart, this);
			this.curTouchX = touchx;
			this.curTouchY = touchy;
			this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchObject, this);
            for (hooki=0; hooki<cnt; hooki++)
			{
				if (this._callbackObjs[hooki].OnTouchStart)
                    this._callbackObjs[hooki].OnTouchStart(this.trigger_id, this.curTouchX, this.curTouchY);
			}
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onTouchEnd = function (info, isCancel)
	{
	    if (!this.enable)
	        return;
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
        var cnt=this._callbackObjs.length, hooki;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				this.trigger_index = this.touches[j].startindex;
				this.trigger_id = this.touches[j]["id"];
				this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnNthTouchEnd, this);
				this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchEnd, this);
		        this.lastTouchX = this.touches[j].x;
		        this.lastTouchY = this.touches[j].y;
				this.runtime.trigger(cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchReleasedObject, this);
                for (hooki=0; hooki<cnt; hooki++)
			    {
			        if (this._callbackObjs[hooki].OnTouchEnd)
                        this._callbackObjs[hooki].OnTouchEnd(this.trigger_id);
			    }
				if (!isCancel)
					this.touches[j].maybeTriggerTap(this, j);
				ReleaseTouchInfo(this.touches[j]);
				this.touches.splice(j, 1);
			}
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.getAlpha = function ()
	{
		if (this.runtime.isCordova && this.orient_alpha === 0 && pg_accz !== 0)
			return pg_accz * 90;
		else
			return this.orient_alpha;
	};
	instanceProto.getBeta = function ()
	{
		if (this.runtime.isCordova && this.orient_beta === 0 && pg_accy !== 0)
			return pg_accy * 90;
		else
			return this.orient_beta;
	};
	instanceProto.getGamma = function ()
	{
		if (this.runtime.isCordova && this.orient_gamma === 0 && pg_accx !== 0)
			return pg_accx * 90;
		else
			return this.orient_gamma;
	};
	var noop_func = function(){};
    instanceProto.updateCursor = function(info)
    {
        var offset = this.getCanvasOffset();
        this.cursor.x = info.pageX - offset.left;
        this.cursor.y = info.pageY - offset.top;
    }
	instanceProto.onMouseDown = function(info)
	{
	    if (!this.enable)
	        return;
        this.updateCursor(info);
		this.mouseDown = true;
		if (info.preventDefault && this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
        var index = this.findTouch(0);
        if (index !== -1)
        {
            ReleaseTouchInfo(this.touches[index]);
            cr.arrayRemove( this.touches, index );
        }
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchStart(fakeinfo);
	};
	instanceProto.onMouseMove = function(info)
	{
	    if (!this.enable)
	        return;
        this.updateCursor(info);
		if (!this.mouseDown)
			return;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchMove(fakeinfo);
	};
	instanceProto.onMouseUp = function(info)
	{
	    if (!this.enable)
	        return;
        this.updateCursor(info);
		this.mouseDown = false;
		if (info.preventDefault && this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.runtime.had_a_click = true;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchEnd(fakeinfo);
	};
	instanceProto.tick2 = function()
	{
	    if (!this.enable)
	        return;
		var i, len, t;
		var nowtime = cr.performance_now();
		for (i = 0, len = this.touches.length; i < len; ++i)
		{
			t = this.touches[i];
			if (t.time <= nowtime - 50)
				t.lasttime = nowtime;
			t.maybeTriggerHold(this, i);
		}
		this.lastTouchX = null;
		this.lastTouchY = null;
	};
	function Cnds() {};
	Cnds.prototype.OnTouchStart = function ()
	{
		return true;
	};
	Cnds.prototype.OnTouchEnd = function ()
	{
		return true;
	};
	Cnds.prototype.IsInTouch = function ()
	{
		return this.IsInTouch();
	};
	Cnds.prototype.OnTouchObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	var touching = [];
	Cnds.prototype.IsTouchingObject = function (type)
	{
        if (!this.IsInTouch())
            return;
		if (!type)
			return false;
		var sol = type.getCurrentSol();
		var instances = sol.getObjects();
		var px, py;
		var i, leni, j, lenj;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			var inst = instances[i];
			inst.update_bbox();
			for (j = 0, lenj = this.touches.length; j < lenj; j++)
			{
				var touch = this.touches[j];
				px = inst.layer.canvasToLayer(touch.x, touch.y, true);
				py = inst.layer.canvasToLayer(touch.x, touch.y, false);
				if (inst.contains_pt(px, py))
				{
					touching.push(inst);
					break;
				}
			}
		}
		if (touching.length)
		{
			sol.select_all = false;
			cr.shallowAssignArray(sol.instances, touching);
			type.applySolToContainer();
			cr.clearArray(touching);
			return true;
		}
		else
			return false;
	};
	Cnds.prototype.CompareTouchSpeed = function (index, cmp, s)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
			return false;
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		var speed = 0;
		if (timediff > 0)
			speed = dist / timediff;
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.OrientationSupported = function ()
	{
		return typeof window["DeviceOrientationEvent"] !== "undefined";
	};
	Cnds.prototype.MotionSupported = function ()
	{
		return typeof window["DeviceMotionEvent"] !== "undefined";
	};
	Cnds.prototype.CompareOrientation = function (orientation_, cmp_, angle_)
	{
		var v = 0;
		if (orientation_ === 0)
			v = this.getAlpha();
		else if (orientation_ === 1)
			v = this.getBeta();
		else
			v = this.getGamma();
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.CompareAcceleration = function (acceleration_, cmp_, angle_)
	{
		var v = 0;
		if (acceleration_ === 0)
			v = this.acc_g_x;
		else if (acceleration_ === 1)
			v = this.acc_g_y;
		else if (acceleration_ === 2)
			v = this.acc_g_z;
		else if (acceleration_ === 3)
			v = this.acc_x;
		else if (acceleration_ === 4)
			v = this.acc_y;
		else if (acceleration_ === 5)
			v = this.acc_z;
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.OnNthTouchStart = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.OnNthTouchEnd = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.HasNthTouch = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return this.touches.length >= touch_ + 1;
	};
	Cnds.prototype.OnHoldGesture = function ()
	{
		return true;
	};
	Cnds.prototype.OnTapGesture = function ()
	{
		return true;
	};
	Cnds.prototype.OnDoubleTapGesture = function ()
	{
		return true;
	};
	Cnds.prototype.OnHoldGestureObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.OnTapGestureObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.OnDoubleTapGestureObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.OnTouchReleasedObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.lastTouchX, this.lastTouchY, false);
	};
	pluginProto.cnds = new Cnds();
    function Acts() {};
    pluginProto.acts = new Acts();
    Acts.prototype.SetEnable = function(en)
    {
        this.enable = (en==1);
    };
	function Exps() {};
	Exps.prototype.TouchCount = function (ret)
	{
		ret.set_int(this.touches.length);
	};
	Exps.prototype.X = function (ret, layerparam)
	{
		var index = this.getTouchIndex;
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.XAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.XForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		var index = this.getTouchIndex;
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.YAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.YForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = 0;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].x);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteXAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].x);
	};
	Exps.prototype.AbsoluteXForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.x);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].y);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteYAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].y);
	};
	Exps.prototype.AbsoluteYForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.y);
	};
	Exps.prototype.SpeedAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.SpeedForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var dist = cr.distanceTo(touch.x, touch.y, touch.lastx, touch.lasty);
		var timediff = (touch.time - touch.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.AngleAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(t.lastx, t.lasty, t.x, t.y)));
	};
	Exps.prototype.AngleForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(touch.lastx, touch.lasty, touch.x, touch.y)));
	};
	Exps.prototype.Alpha = function (ret)
	{
		ret.set_float(this.getAlpha());
	};
	Exps.prototype.Beta = function (ret)
	{
		ret.set_float(this.getBeta());
	};
	Exps.prototype.Gamma = function (ret)
	{
		ret.set_float(this.getGamma());
	};
	Exps.prototype.AccelerationXWithG = function (ret)
	{
		ret.set_float(this.acc_g_x);
	};
	Exps.prototype.AccelerationYWithG = function (ret)
	{
		ret.set_float(this.acc_g_y);
	};
	Exps.prototype.AccelerationZWithG = function (ret)
	{
		ret.set_float(this.acc_g_z);
	};
	Exps.prototype.AccelerationX = function (ret)
	{
		ret.set_float(this.acc_x);
	};
	Exps.prototype.AccelerationY = function (ret)
	{
		ret.set_float(this.acc_y);
	};
	Exps.prototype.AccelerationZ = function (ret)
	{
		ret.set_float(this.acc_z);
	};
	Exps.prototype.TouchIndex = function (ret)
	{
		ret.set_int(this.trigger_index);
	};
	Exps.prototype.TouchID = function (ret)
	{
		ret.set_float(this.trigger_id);
	};
	Exps.prototype.WidthForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.width);
	};
	Exps.prototype.HeightForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.height);
	};
	Exps.prototype.PressureForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.pressure);
	};
	pluginProto.exps = new Exps();
    instanceProto.HookMe = function (obj)
    {
        this._callbackObjs.push(obj);
    };
    instanceProto.UnHookMe = function (obj)
    {
        cr.arrayFindRemove(this._callbackObjs, obj);
    };
    instanceProto.IsInTouch = function ()
	{
        return (this.touches.length > 0);
    };
    var exps = cr.plugins_.rex_TouchWrap.prototype.exps;
    instanceProto.TouchCount = function()
    {
        exps.TouchCount.call(this, this.fake_ret);
        return this.fake_ret.value
    };
    instanceProto.X = function(layerparam)
    {
        exps.X.call(this, this.fake_ret, layerparam);
        return this.fake_ret.value
    };
    instanceProto.XAt = function(index, layerparam)
    {
        exps.XAt.call(this, this.fake_ret, index, layerparam);
        return this.fake_ret.value
    };
    instanceProto.XForID = function(id, layerparam)
    {
        exps.XForID.call(this, this.fake_ret, id, layerparam);
        return this.fake_ret.value
    };
    instanceProto.Y = function(layerparam)
    {
        exps.Y.call(this, this.fake_ret, layerparam);
        return this.fake_ret.value
    };
    instanceProto.YAt = function(index, layerparam)
    {
        exps.YAt.call(this, this.fake_ret, index, layerparam);
        return this.fake_ret.value
    };
    instanceProto.YForID = function(id, layerparam)
    {
        exps.YForID.call(this, this.fake_ret, id, layerparam);
        return this.fake_ret.value
    };
    instanceProto.AbsoluteX = function()
    {
        exps.AbsoluteX.call(this, this.fake_ret);
        return this.fake_ret.value
    };
    instanceProto.AbsoluteXAt = function(index)
    {
        exps.AbsoluteXAt.call(this, this.fake_ret, index);
        return this.fake_ret.value
    };
    instanceProto.AbsoluteXForID = function(id)
    {
        exps.AbsoluteXForID.call(this, this.fake_ret, id);
        return this.fake_ret.value
    };
    instanceProto.AbsoluteY = function()
    {
        exps.AbsoluteY.call(this, this.fake_ret);
        return this.fake_ret.value
    };
    instanceProto.AbsoluteYAt = function(index)
    {
        exps.AbsoluteYAt.call(this, this.fake_ret, index);
        return this.fake_ret.value
    };
    instanceProto.AbsoluteYForID = function(id)
    {
        exps.AbsoluteYForID.call(this, this.fake_ret, id);
        return this.fake_ret.value
    };
	instanceProto.CursorX = function (layerparam)
	{
        if (this.cursor.x == null)
            return null;
        var x;
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			x = layer.canvasToLayer(this.cursor.x, this.cursor.y, true);
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				x = layer.canvasToLayer(this.cursor.x, this.cursor.y, true);
			else
				x = 0;
		}
        return x;
	};
	instanceProto.CursorY = function (layerparam)
	{
        if (this.cursor.y == null)
            return null;
        var y;
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = 1;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = 0;
			y = layer.canvasToLayer(this.cursor.x, this.cursor.y, false);
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				y = layer.canvasToLayer(this.cursor.x, this.cursor.y, false);
			else
				y = 0;
		}
        return y;
	};
    instanceProto.CursorAbsoluteX = function ()
    {
        return this.cursor.x;
    };
    instanceProto.CursorAbsoluteY = function ()
    {
        return this.cursor.y;
    };
}());
;
;
cr.plugins_.rojo_spritesheet = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.rojo_spritesheet.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
        if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.runtime.wait_for_textures.push(this.texture_img);
		this.webGL_texture = null;
	};
    typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);							// 0=visible, 1=invisible
		this.rcTex = new cr.rect(0, 0, 0, 0);
		if (this.runtime.glwrap)
		{
			this.type.loadTextures();
		}
        this.offsetx = this.properties[2];
        this.offsety = this.properties[3];
        this.subwidth = this.properties[4];
        this.subheight = this.properties[5];
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.saveToJSON = function ()
	{
		return {
            "offset x": this.offsetx,
            "offset y": this.offsety,
            "sub width": this.subwidth,
            "sub height": this.subheight
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
        this.offsetx = o["offset x"];
        this.offsety = o["offset y"];
        this.subwidth = o["sub width"];
        this.subheight = o["sub height"];
	};
	instanceProto.draw = function(ctx)
	{
        ctx.save();
		ctx.globalAlpha = this.opacity;
		ctx.globalCompositeOperation = this.compositeOp;
		var myx = this.x;
		var myy = this.y;
		if (this.runtime.pixel_rounding)
		{
			myx = Math.round(myx);
			myy = Math.round(myy);
		}
		ctx.translate(myx, myy);
        var w = this.width;
		var h = this.height;
		var widthfactor = w > 0 ? 1 : -1;
		var heightfactor = h > 0 ? 1 : -1;
        if (widthfactor !== 1 || heightfactor !== 1)
        {
				ctx.scale(widthfactor, heightfactor);
                w=cr.abs(w);
                h=cr.abs(h);
        }
        ctx.rotate(this.angle);
		ctx.drawImage(this.type.texture_img,
                          this.offsetx,
                          this.offsety,
                          this.subwidth,
                          this.subheight,
						  0 - (this.hotspotX * w),
						  0 - (this.hotspotY * h),
						  w,
						  h);
		ctx.restore();
	};
	instanceProto.drawGL = function (glw)
	{
        var img = this.type.texture_img;
        glw.setTexture(this.type.webGL_texture);
		glw.setOpacity(this.opacity);
        var rcTex = this.rcTex;
        rcTex.left = this.offsetx/img.width;
        rcTex.top = this.offsety/img.height;
		rcTex.right = (this.offsetx+this.subwidth) / img.width;
		rcTex.bottom = (this.offsety+this.subheight) / img.height;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = Math.round(this.x) - this.x;
			var oy = Math.round(this.y) - this.y;
			glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, rcTex);
		}
		else
			glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, rcTex);
	};
	function Cnds() {};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.LoadURL = function (url_)
	{
		var img = new Image();
		var self = this;
		img.onload = function ()
		{
            if (self.type.texture_img.src === img.src)
                return;
			self.type.texture_img = img;
			if (self.runtime.glwrap)
			{
				if (self.type.webGL_texture)
					self.runtime.glwrap.deleteTexture(self.type.webGL_texture);
				self.type.webGL_texture = self.runtime.glwrap.loadTexture(img, true, self.runtime.linearSampling);
			}
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.rojo_spritesheet.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		if (this.type.texture_img.src === url_)
                return;
		img.src = url_;
	};
	Acts.prototype.SetSubImage = function (offx, offy, subwidth, subheight)
    {
        this.offsetx = offx;
        this.offsety = offy;
        this.subwidth = subwidth;
        this.subheight = subheight;
		this.runtime.redraw = true;
    };
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.texture_img.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.texture_img.height);
	};
	Exps.prototype.offsetX = function (ret)
	{
		ret.set_float(this.offsetx);
	};
    Exps.prototype.offsetY = function (ret)
	{
		ret.set_float(this.offsety);
	};
    Exps.prototype.SubWidth = function (ret)
	{
		ret.set_float(this.subwidth);
	};
    Exps.prototype.SubHeight = function (ret)
	{
		ret.set_float(this.subheight);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.sirg_notifications = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.sirg_notifications.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	function indexToParamPosition(i){
		switch (i) {
			case 0:	return 'top-right';
			case 1:	return 'top-left';
			case 2:	return 'bottom-left';
			case 3:	return 'bottom-right';
		}
		return 'bottom-right';
	};
	function indexToParamFadeInSpeed(i){
		switch (i) {
			case 0:	return 'slow';
			case 1:	return 'medium';
			case 2:	return 'fast';
		}
		return 'slow';
	};
	function indexToParamFadeOutSpeed(i){
		switch (i) {
			case 0:	return 'slow';
			case 1:	return 'medium';
			case 2:	return 'fast';
		}
		return 'slow';
	};
	function indexToParamStyle(i){
		switch (i) {
			case 0:	return '';
			case 1:	return 'gritter-light';
			case 2:	return 'gritter-success';
			case 3:	return 'gritter-info';
			case 4:	return 'gritter-warning';
			case 5:	return 'gritter-error';
			case 6:	return 'gritter-red';
			case 7:	return 'gritter-yellow';
			case 8:	return 'gritter-blue';
			case 9:	return 'gritter-green';
		}
		return '';
	};
	instanceProto.onCreate = function()
	{
		this.position = indexToParamPosition(this.properties[0]);
		this.fade_in_speed = indexToParamFadeInSpeed(this.properties[1]);
		this.fade_out_speed = indexToParamFadeInSpeed(this.properties[2]);
		this.time = this.properties[3];
		this.max_number = this.properties[4];
		this.param_sticky = (this.properties[5]===0) ? true : false;
		this.param_style = this.properties[6];
		this.curr_tag = "";
		jQuery.extend(jQuery["gritter"].options, {
			"position": this.position, // possibilities: bottom-left, bottom-right, top-left, top-right
			"fade_in_speed": this.fade_in_speed, // how fast notifications fade in (string or int)
			"fade_out_speed": this.fade_out_speed, // how fast the notices fade out
			"time": this.time, // hang on the screen for...
			"max_to_display": this.max_number //
		});
	};
	instanceProto.onDestroy = function ()
	{
	};
	instanceProto.saveToJSON = function ()
	{
		return {
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
	};
	instanceProto.draw = function(ctx)
	{
	};
	instanceProto.drawGL = function (glw)
	{
	};
	function Cnds() {};
	Cnds.prototype.OnNotificationClicked = function (tag)
	{
		return cr.equals_nocase(tag, this.curr_tag);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.AddNotification = function (title,text,image,sticky,style,timeout)
	{
		jQuery["gritter"].add({
			"title": title,
			"text": text,
			"image": image,
			"sticky": sticky,
			"time": timeout, // hang on the screen for...
			"class_name": indexToParamStyle(style)
		});
	}
	Acts.prototype.DeleteAllNotifications = function ()
	{
		jQuery["gritter"].removeAll();
	};
	Acts.prototype.AddSimpleNotification = function (title,text,image)
	{
		var self = this;
		jQuery["gritter"].add({
			"title": title,
			"text": text,
			"image": image,
			"sticky": self.param_sticky,
			"class_name": indexToParamStyle(self.param_style)
		});
	}
	Acts.prototype.AddNotificationClickable = function (id,title,text,image,sticky,style,timeout,closeonclick)
	{
		var self = this;
		self.curr_tag = id;
		jQuery["gritter"].add({
			"title": title,
			"text": text,
			"image": image,
			"sticky": sticky,
			"time": timeout, // hang on the screen for...
			"class_name": "gritter-clickable gritter-id-" + id + " " + indexToParamStyle(style),
			"close_on_click": closeonclick
		});
		jQuery(".gritter-id-" + id).click(function(){
			self.runtime.trigger(cr.plugins_.sirg_notifications.prototype.cnds.OnNotificationClicked, self);
			return false;
		});
	}
	pluginProto.acts = new Acts();
	function Exps() {};
	pluginProto.exps = new Exps();
}());
;
;
cr.behaviors.DragnDrop = function(runtime)
{
	this.runtime = runtime;
	var self = this;
	if (!this.runtime.isDomFree)
	{
		jQuery(document).mousemove(
			function(info) {
				self.onMouseMove(info);
			}
		);
		jQuery(document).mousedown(
			function(info) {
				self.onMouseDown(info);
			}
		);
		jQuery(document).mouseup(
			function(info) {
				self.onMouseUp(info);
			}
		);
	}
	var elem = (this.runtime.fullscreen_mode > 0) ? document : this.runtime.canvas;
	if (this.runtime.isDirectCanvas)
		elem = window["Canvas"];
	else if (this.runtime.isCocoonJs)
		elem = window;
	if (typeof PointerEvent !== "undefined")
	{
		elem.addEventListener("pointerdown",
			function(info) {
				self.onPointerStart(info);
			},
			false
		);
		elem.addEventListener("pointermove",
			function(info) {
				self.onPointerMove(info);
			},
			false
		);
		elem.addEventListener("pointerup",
			function(info) {
				self.onPointerEnd(info);
			},
			false
		);
		elem.addEventListener("pointercancel",
			function(info) {
				self.onPointerEnd(info);
			},
			false
		);
	}
	else if (window.navigator["msPointerEnabled"])
	{
		elem.addEventListener("MSPointerDown",
			function(info) {
				self.onPointerStart(info);
			},
			false
		);
		elem.addEventListener("MSPointerMove",
			function(info) {
				self.onPointerMove(info);
			},
			false
		);
		elem.addEventListener("MSPointerUp",
			function(info) {
				self.onPointerEnd(info);
			},
			false
		);
		elem.addEventListener("MSPointerCancel",
			function(info) {
				self.onPointerEnd(info);
			},
			false
		);
	}
	else
	{
		elem.addEventListener("touchstart",
			function(info) {
				self.onTouchStart(info);
			},
			false
		);
		elem.addEventListener("touchmove",
			function(info) {
				self.onTouchMove(info);
			},
			false
		);
		elem.addEventListener("touchend",
			function(info) {
				self.onTouchEnd(info);
			},
			false
		);
		elem.addEventListener("touchcancel",
			function(info) {
				self.onTouchEnd(info);
			},
			false
		);
	}
};
(function ()
{
	var behaviorProto = cr.behaviors.DragnDrop.prototype;
	var dummyoffset = {left: 0, top: 0};
	function GetDragDropBehavior(inst)
	{
		var i, len;
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i] instanceof behaviorProto.Instance)
				return inst.behavior_insts[i];
		}
		return null;
	};
	behaviorProto.onMouseDown = function (info)
	{
		if (info.which !== 1)
			return;		// not left mouse button
		this.onInputDown("leftmouse", info.pageX, info.pageY);
	};
	behaviorProto.onMouseMove = function (info)
	{
		if (info.which !== 1)
			return;		// not left mouse button
		this.onInputMove("leftmouse", info.pageX, info.pageY);
	};
	behaviorProto.onMouseUp = function (info)
	{
		if (info.which !== 1)
			return;		// not left mouse button
		this.onInputUp("leftmouse");
	};
	behaviorProto.onTouchStart = function (info)
	{
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		var i, len, t, id;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			id = t.identifier;
			this.onInputDown(id ? id.toString() : "<none>", t.pageX, t.pageY);
		}
	};
	behaviorProto.onTouchMove = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var i, len, t, id;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			id = t.identifier;
			this.onInputMove(id ? id.toString() : "<none>", t.pageX, t.pageY);
		}
	};
	behaviorProto.onTouchEnd = function (info)
	{
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		var i, len, t, id;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			id = t.identifier;
			this.onInputUp(id ? id.toString() : "<none>");
		}
	};
	behaviorProto.onPointerStart = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		this.onInputDown(info["pointerId"].toString(), info.pageX, info.pageY);
	};
	behaviorProto.onPointerMove = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		this.onInputMove(info["pointerId"].toString(), info.pageX, info.pageY);
	};
	behaviorProto.onPointerEnd = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault && cr.isCanvasInputEvent(info))
			info.preventDefault();
		this.onInputUp(info["pointerId"].toString());
	};
	behaviorProto.onInputDown = function (src, pageX, pageY)
	{
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var x = pageX - offset.left;
		var y = pageY - offset.top;
		var lx, ly, topx, topy;
		var arr = this.my_instances.valuesRef();
		var i, len, b, inst, topmost = null;
		for (i = 0, len = arr.length; i < len; i++)
		{
			inst = arr[i];
			b = GetDragDropBehavior(inst);
			if (!b.enabled || b.dragging)
				continue;		// don't consider disabled or already-dragging instances
			lx = inst.layer.canvasToLayer(x, y, true);
			ly = inst.layer.canvasToLayer(x, y, false);
			inst.update_bbox();
			if (!inst.contains_pt(lx, ly))
				continue;		// don't consider instances not over this point
			if (!topmost)
			{
				topmost = inst;
				topx = lx;
				topy = ly;
				continue;
			}
			if (inst.layer.index > topmost.layer.index)
			{
				topmost = inst;
				topx = lx;
				topy = ly;
				continue;
			}
			if (inst.layer.index === topmost.layer.index && inst.get_zindex() > topmost.get_zindex())
			{
				topmost = inst;
				topx = lx;
				topy = ly;
				continue;
			}
		}
		if (topmost)
			GetDragDropBehavior(topmost).onDown(src, topx, topy);
	};
	behaviorProto.onInputMove = function (src, pageX, pageY)
	{
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var x = pageX - offset.left;
		var y = pageY - offset.top;
		var lx, ly;
		var arr = this.my_instances.valuesRef();
		var i, len, b, inst;
		for (i = 0, len = arr.length; i < len; i++)
		{
			inst = arr[i];
			b = GetDragDropBehavior(inst);
			if (!b.enabled || !b.dragging || (b.dragging && b.dragsource !== src))
				continue;		// don't consider disabled, not-dragging, or dragging by other sources
			lx = inst.layer.canvasToLayer(x, y, true);
			ly = inst.layer.canvasToLayer(x, y, false);
			b.onMove(lx, ly);
		}
	};
	behaviorProto.onInputUp = function (src)
	{
		var arr = this.my_instances.valuesRef();
		var i, len, b, inst;
		for (i = 0, len = arr.length; i < len; i++)
		{
			inst = arr[i];
			b = GetDragDropBehavior(inst);
			if (b.dragging && b.dragsource === src)
				b.onUp();
		}
	};
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.dragging = false;
		this.dx = 0;
		this.dy = 0;
		this.dragsource = "<none>";
		this.axes = this.properties[0];
		this.enabled = (this.properties[1] !== 0);
	};
	behinstProto.saveToJSON = function ()
	{
		return { "enabled": this.enabled };
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.enabled = o["enabled"];
		this.dragging = false;
	};
	behinstProto.onDown = function(src, x, y)
	{
		this.dx = x - this.inst.x;
		this.dy = y - this.inst.y;
		this.dragging = true;
		this.dragsource = src;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.behaviors.DragnDrop.prototype.cnds.OnDragStart, this.inst);
		this.runtime.isInUserInputEvent = false;
	};
	behinstProto.onMove = function(x, y)
	{
		var newx = x - this.dx;
		var newy = y - this.dy;
		if (this.axes === 0)		// both
		{
			if (this.inst.x !== newx || this.inst.y !== newy)
			{
				this.inst.x = newx;
				this.inst.y = newy;
				this.inst.set_bbox_changed();
			}
		}
		else if (this.axes === 1)	// horizontal
		{
			if (this.inst.x !== newx)
			{
				this.inst.x = newx;
				this.inst.set_bbox_changed();
			}
		}
		else if (this.axes === 2)	// vertical
		{
			if (this.inst.y !== newy)
			{
				this.inst.y = newy;
				this.inst.set_bbox_changed();
			}
		}
	};
	behinstProto.onUp = function()
	{
		this.dragging = false;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.behaviors.DragnDrop.prototype.cnds.OnDrop, this.inst);
		this.runtime.isInUserInputEvent = false;
	};
	behinstProto.tick = function ()
	{
	};
	function Cnds() {};
	Cnds.prototype.IsDragging = function ()
	{
		return this.dragging;
	};
	Cnds.prototype.OnDragStart = function ()
	{
		return true;
	};
	Cnds.prototype.OnDrop = function ()
	{
		return true;
	};
	Cnds.prototype.IsEnabled = function ()
	{
		return !!this.enabled;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEnabled = function (s)
	{
		this.enabled = (s !== 0);
		if (!this.enabled)
			this.dragging = false;
	};
	Acts.prototype.Drop = function ()
	{
		if (this.dragging)
			this.onUp();
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.LOS = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.LOS.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
		this.obstacleTypes = [];						// object types to check for as obstructions
	};
	behtypeProto.findLosBehavior = function (inst)
	{
		var i, len, b;
		for (i = 0, len = inst.behavior_insts.length; i < len; ++i)
		{
			b = inst.behavior_insts[i];
			if (b instanceof cr.behaviors.LOS.prototype.Instance && b.type === this)
				return b;
		}
		return null;
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.obstacleMode = this.properties[0];		// 0 = solids, 1 = custom
		this.range = this.properties[1];
		this.cone = cr.to_radians(this.properties[2]);
		this.useCollisionCells = (this.properties[3] !== 0);
	};
	behinstProto.onDestroy = function ()
	{
	};
	behinstProto.saveToJSON = function ()
	{
		var o = {
			"r": this.range,
			"c": this.cone,
			"t": []
		};
		var i, len;
		for (i = 0, len = this.type.obstacleTypes.length; i < len; i++)
		{
			o["t"].push(this.type.obstacleTypes[i].sid);
		}
		return o;
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.range = o["r"];
		this.cone = o["c"];
		cr.clearArray(this.type.obstacleTypes);
		var i, len, t;
		for (i = 0, len = o["t"].length; i < len; i++)
		{
			t = this.runtime.getObjectTypeBySid(o["t"][i]);
			if (t)
				this.type.obstacleTypes.push(t);
		}
	};
	behinstProto.tick = function ()
	{
	};
	var candidates = [];
	var tmpRect = new cr.rect(0, 0, 0, 0);
	behinstProto.hasLOSto = function (x_, y_)
	{
		var startx = this.inst.x;
		var starty = this.inst.y;
		var myangle = this.inst.angle;
		if (this.inst.width < 0)
			myangle += Math.PI;
		if (cr.distanceTo(startx, starty, x_, y_) > this.range)
			return false;		// too far away
		var a = cr.angleTo(startx, starty, x_, y_);
		if (cr.angleDiff(myangle, a) > this.cone / 2)
			return false;		// outside cone of view
		var i, leni, rinst, solid;
		tmpRect.set(startx, starty, x_, y_);
		tmpRect.normalize();
		if (this.obstacleMode === 0)
		{
			if (this.useCollisionCells)
			{
				this.runtime.getSolidCollisionCandidates(this.inst.layer, tmpRect, candidates);
			}
			else
			{
				solid = this.runtime.getSolidBehavior();
				if (solid)
					cr.appendArray(candidates, solid.my_instances.valuesRef());
			}
			for (i = 0, leni = candidates.length; i < leni; ++i)
			{
				rinst = candidates[i];
				if (!rinst.extra["solidEnabled"] || rinst === this.inst)
					continue;
				if (this.runtime.testSegmentOverlap(startx, starty, x_, y_, rinst))
				{
					cr.clearArray(candidates);
					return false;
				}
			}
		}
		else
		{
			if (this.useCollisionCells)
			{
				this.runtime.getTypesCollisionCandidates(this.inst.layer, this.type.obstacleTypes, tmpRect, candidates);
			}
			else
			{
				for (i = 0, leni = this.type.obstacleTypes.length; i < leni; ++i)
				{
					cr.appendArray(candidates, this.type.obstacleTypes[i].instances);
				}
			}
			for (i = 0, leni = candidates.length; i < leni; ++i)
			{
				rinst = candidates[i];
				if (rinst === this.inst)
					continue;
				if (this.runtime.testSegmentOverlap(startx, starty, x_, y_, rinst))
				{
					cr.clearArray(candidates);
					return false;
				}
			}
		}
		cr.clearArray(candidates);
		return true;
	};
	function Cnds() {};
	var ltopick = new cr.ObjectSet();
	var rtopick = new cr.ObjectSet();
	Cnds.prototype.HasLOSToObject = function (obj_)
	{
		if (!obj_)
			return false;
		var i, j, leni, lenj, linst, losbeh, rinst, pick;
		var lsol = this.runtime.getCurrentConditionObjectType().getCurrentSol();
		var rsol = obj_.getCurrentSol();
		var linstances = lsol.getObjects();
		var rinstances = rsol.getObjects();
		if (lsol.select_all)
			cr.clearArray(lsol.else_instances);
		if (rsol.select_all)
			cr.clearArray(rsol.else_instances);
		var inverted = this.runtime.getCurrentCondition().inverted;
		for (i = 0, leni = linstances.length; i < leni; ++i)
		{
			linst = linstances[i];
			pick = false;
			losbeh = this.findLosBehavior(linst);
;
			for (j = 0, lenj = rinstances.length; j < lenj; ++j)
			{
				rinst = rinstances[j];
				if (linst !== rinst && cr.xor(losbeh.hasLOSto(rinst.x, rinst.y), inverted))
				{
					pick = true;
					rtopick.add(rinst);
				}
			}
			if (pick)
				ltopick.add(linst);
		}
		var lpicks = ltopick.valuesRef();
		var rpicks = rtopick.valuesRef();
		lsol.select_all = false;
		rsol.select_all = false;
		cr.shallowAssignArray(lsol.instances, lpicks);
		cr.shallowAssignArray(rsol.instances, rpicks);
		ltopick.clear();
		rtopick.clear();
		return lsol.hasObjects();
	};
	Cnds.prototype.HasLOSToPosition = function (x_, y_)
	{
		return this.hasLOSto(x_, y_);
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetRange = function (r)
	{
		this.range = r;
	};
	Acts.prototype.SetCone = function (c)
	{
		this.cone = cr.to_radians(c);
	};
	Acts.prototype.AddObstacle = function (obj_)
	{
		var obstacleTypes = this.type.obstacleTypes;
		if (obstacleTypes.indexOf(obj_) !== -1)
			return;
		var i, len, t;
		for (i = 0, len = obstacleTypes.length; i < len; i++)
		{
			t = obstacleTypes[i];
			if (t.is_family && t.members.indexOf(obj_) !== -1)
				return;
		}
		obstacleTypes.push(obj_);
	};
	Acts.prototype.ClearObstacles = function ()
	{
		cr.clearArray(this.type.obstacleTypes);
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Range = function (ret)
	{
		ret.set_float(this.range);
	};
	Exps.prototype.ConeOfView = function (ret)
	{
		ret.set_float(cr.to_degrees(this.cone));
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Pin = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Pin.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.pinObject = null;
		this.pinObjectUid = -1;		// for loading
		this.pinAngle = 0;
		this.pinDist = 0;
		this.myStartAngle = 0;
		this.theirStartAngle = 0;
		this.lastKnownAngle = 0;
		this.mode = 0;				// 0 = position & angle; 1 = position; 2 = angle; 3 = rope; 4 = bar
		var self = this;
		if (!this.recycled)
		{
			this.myDestroyCallback = (function(inst) {
													self.onInstanceDestroyed(inst);
												});
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"uid": this.pinObject ? this.pinObject.uid : -1,
			"pa": this.pinAngle,
			"pd": this.pinDist,
			"msa": this.myStartAngle,
			"tsa": this.theirStartAngle,
			"lka": this.lastKnownAngle,
			"m": this.mode
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.pinObjectUid = o["uid"];		// wait until afterLoad to look up
		this.pinAngle = o["pa"];
		this.pinDist = o["pd"];
		this.myStartAngle = o["msa"];
		this.theirStartAngle = o["tsa"];
		this.lastKnownAngle = o["lka"];
		this.mode = o["m"];
	};
	behinstProto.afterLoad = function ()
	{
		if (this.pinObjectUid === -1)
			this.pinObject = null;
		else
		{
			this.pinObject = this.runtime.getObjectByUID(this.pinObjectUid);
;
		}
		this.pinObjectUid = -1;
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		if (this.pinObject == inst)
			this.pinObject = null;
	};
	behinstProto.onDestroy = function()
	{
		this.pinObject = null;
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.tick2 = function ()
	{
		if (!this.pinObject)
			return;
		if (this.lastKnownAngle !== this.inst.angle)
			this.myStartAngle = cr.clamp_angle(this.myStartAngle + (this.inst.angle - this.lastKnownAngle));
		var newx = this.inst.x;
		var newy = this.inst.y;
		if (this.mode === 3 || this.mode === 4)		// rope mode or bar mode
		{
			var dist = cr.distanceTo(this.inst.x, this.inst.y, this.pinObject.x, this.pinObject.y);
			if ((dist > this.pinDist) || (this.mode === 4 && dist < this.pinDist))
			{
				var a = cr.angleTo(this.pinObject.x, this.pinObject.y, this.inst.x, this.inst.y);
				newx = this.pinObject.x + Math.cos(a) * this.pinDist;
				newy = this.pinObject.y + Math.sin(a) * this.pinDist;
			}
		}
		else
		{
			newx = this.pinObject.x + Math.cos(this.pinObject.angle + this.pinAngle) * this.pinDist;
			newy = this.pinObject.y + Math.sin(this.pinObject.angle + this.pinAngle) * this.pinDist;
		}
		var newangle = cr.clamp_angle(this.myStartAngle + (this.pinObject.angle - this.theirStartAngle));
		this.lastKnownAngle = newangle;
		if ((this.mode === 0 || this.mode === 1 || this.mode === 3 || this.mode === 4)
			&& (this.inst.x !== newx || this.inst.y !== newy))
		{
			this.inst.x = newx;
			this.inst.y = newy;
			this.inst.set_bbox_changed();
		}
		if ((this.mode === 0 || this.mode === 2) && (this.inst.angle !== newangle))
		{
			this.inst.angle = newangle;
			this.inst.set_bbox_changed();
		}
	};
	function Cnds() {};
	Cnds.prototype.IsPinned = function ()
	{
		return !!this.pinObject;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Pin = function (obj, mode_)
	{
		if (!obj)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst)
			return;
		this.pinObject = otherinst;
		this.pinAngle = cr.angleTo(otherinst.x, otherinst.y, this.inst.x, this.inst.y) - otherinst.angle;
		this.pinDist = cr.distanceTo(otherinst.x, otherinst.y, this.inst.x, this.inst.y);
		this.myStartAngle = this.inst.angle;
		this.lastKnownAngle = this.inst.angle;
		this.theirStartAngle = otherinst.angle;
		this.mode = mode_;
	};
	Acts.prototype.Unpin = function ()
	{
		this.pinObject = null;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.PinnedUID = function (ret)
	{
		ret.set_int(this.pinObject ? this.pinObject.uid : -1);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Rex_Button2 = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_Button2.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
        this.touchwrap = null;
	};
	behtypeProto.TouchWrapGet = function ()
	{
        if (this.touchwrap != null)
            return;
        var plugins = this.runtime.types;
        var name, obj;
        for (name in plugins)
        {
            obj = plugins[name].instances[0];
            if ((obj != null) && (obj.check_name == "TOUCHWRAP"))
            {
                this.touchwrap = obj;
                this.touchwrap.HookMe(this);
                break;
            }
        }
;
	};
	function GetThisBehavior(inst)
	{
		var i, len;
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i] instanceof behaviorProto.Instance)
				return inst.behavior_insts[i];
		}
		return null;
	};
    var _touch_insts = [];
	var _behavior_insts = [];
    behtypeProto.OnTouchStart = function (touch_src, touchX, touchY)
    {
        _touch_insts.length = 0;
        _behavior_insts.length = 0;
        var insts = this.objtype.instances, inst;
        var lx, ly;
        var i, cnt=insts.length;
        for (i=0; i<cnt; i++)
        {
            inst = insts[i];
            inst.update_bbox();
			lx = inst.layer.canvasToLayer(touchX, touchY, true);
			ly = inst.layer.canvasToLayer(touchX, touchY, false);
            if (inst.contains_pt(lx, ly))
                _touch_insts.push(inst);
        }
        var touch_insts_cnt=_touch_insts.length
        if (touch_insts_cnt === 0)
        {
            _touch_insts.length = 0;
            _behavior_insts.length = 0;
            return false;
        }
        var behavior_inst;
        cnt = touch_insts_cnt;
        _behavior_insts.length = 0;
        for (i=0; i<cnt; i++ )
        {
		    inst = _touch_insts[i];
		    if (!inst)
		    {
		        continue;
		    }
            behavior_inst = GetThisBehavior(inst);
            if (behavior_inst == null)
                continue;
            if (behavior_inst.is_enable())
			    _behavior_insts.push(behavior_inst);
        }
        cnt = _behavior_insts.length;
		if (cnt === 0)  // no inst match
        {
            _touch_insts.length = 0;
            _behavior_insts.length = 0;
            return false;
        }
        var target_inst_behavior = _behavior_insts[0];
        var instB=target_inst_behavior.inst, instA;
        for (i=1; i<cnt; i++ )
        {
            behavior_inst = _behavior_insts[i];
            instA = behavior_inst.inst;
            if ( ( instA.layer.index > instB.layer.index) ||
                 ( (instA.layer.index == instB.layer.index) && (instA.get_zindex() > instB.get_zindex()) ) )
            {
                target_inst_behavior = behavior_inst;
                instB = instA;
            }
        }
        _touch_insts.length = 0;
        _behavior_insts.length = 0;
		target_inst_behavior.start_click_detecting(touch_src);
        return true;  // get drag inst
    };
    behtypeProto.OnTouchEnd = function (touch_src)
    {
		var insts = this.objtype.instances;
        var i, cnt=insts.length, inst, behavior_inst;
        for (i=0; i<cnt; i++ )
        {
		    inst = insts[i];
		    if (!inst)
		    {
		        continue;
		    }
            behavior_inst = GetThisBehavior(inst);
            if (behavior_inst == null)
                continue;
			if ((behavior_inst.touchSrc == touch_src) && (behavior_inst.buttonState == CLICK_DETECTING_STATE))
                behavior_inst.finish_click_detecting();
        }
    };
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
        type.TouchWrapGet();
	};
	var behinstProto = behaviorProto.Instance.prototype;
    var OFF_STATE = 0;
    var INACTIVE_STATE = 1;
    var ACTIVE_STATE = 2;
    var CLICK_DETECTING_STATE = 3;
    var CLICKED_STATE = 4;
    var state2name = ["OFF","INACTIVE","ACTIVE","CLICK DETECTING","CLICKED"];
    var NORMAL_DISPLAY = 0;
    var CLICKED_DISPLAY = 1;
    var INACTIVE_DISPLAY = 2;
    var ROLLINGIN_DISPLAY = 3;
	behinstProto.onCreate = function()
	{
	    this.initActivated = (this.properties[0]==1);
        this.clickMode = this.properties[1];
        this.isAutoCLICK2ACTIVE = (this.properties[2]==1);
		this.isVisibleChecking = (this.properties[3]==1);
        this.touchSrc = null;
        this.buttonState = OFF_STATE;
        this.buttonPreState = null;
        this.initFlag = true;
        this.rollingoverFlag = false;
        this.displayAnim = {normal:"",
                         click:"",
                         inactive:"",
                         rollingin:"",
                         frameSpeedSave:0,
                         cur_name:null};
        this.isSetStateInAction = false;
	};
	behinstProto.tick = function ()
	{
        this._init();
        if (this.buttonState == INACTIVE_STATE)
            return;
        var is_touch_inside = this._is_touch_inside();
        this._check_click_cancel(is_touch_inside);
        this._check_rollingover(is_touch_inside);
	};
	behinstProto.is_enable = function()
	{
	    var is_visible;
	    if (this.isVisibleChecking)
		{
	        var layer = this.runtime.getLayerByNumber(this.inst.layer.index);
	        is_visible = (layer.visible && this.inst.visible);
        }
		else
		    is_visible = true;
        return ( (this.buttonState == ACTIVE_STATE) && is_visible );
	};
	behinstProto._display_frame = function(frame_index)
	{
        this.displayAnim.frameSpeedSave = this.inst.cur_anim_speed;
        this.inst.cur_anim_speed = 0;
        if (frame_index != null)
            cr.plugins_.Sprite.prototype.acts.SetAnimFrame.apply(this.inst, [frame_index]);
	};
	behinstProto._display_animation = function(anim_name)
	{
        var frameSpeedSave = this.displayAnim.frameSpeedSave;
        if (frameSpeedSave != null)
            this.inst.cur_anim_speed = frameSpeedSave;
        if (anim_name != "")
            cr.plugins_.Sprite.prototype.acts.SetAnim.apply(this.inst, [anim_name, 1]);
	};
	behinstProto._set_animation = function(display, name)
	{
       if (typeof(display) == "number")
       {
           this._display_frame(display);
       }
       else if (display != "")
       {
           this._display_animation(display);
       }
       this.displayAnim.cur_name = name;
	};
	behinstProto._init = function()
	{
        if (!this.initFlag)
            return;
        this.displayAnim.frameSpeedSave = this.inst.cur_anim_speed;
        if (this.initActivated != null)
        {
            if (this.initActivated)
                this._goto_active_state();
            else
                this._goto_inactive_state();
        }
        this.initFlag = false;
	};
	behinstProto._is_touch_inside = function ()
	{
        var touchwrap = this.type.touchwrap;
        var touch_x = this.GetTouchX();
        var touch_y = this.GetTouchY();
        this.inst.update_bbox();
        return this.inst.contains_pt(touch_x, touch_y);
	};
	behinstProto._check_click_cancel = function (is_touch_inside)
	{
        if ((this.buttonState == CLICK_DETECTING_STATE) && (!is_touch_inside))
        {
            this.cancel_click_detecting();
            this._goto_active_state();
        }
	};
	behinstProto._check_rollingover = function (is_touch_inside)
	{
        if (is_touch_inside)
        {
            if (!this.rollingoverFlag)
            {
                this._set_animation(this.displayAnim.rollingin, ROLLINGIN_DISPLAY);
                this.rollingoverFlag = true;
                this.runtime.trigger(cr.behaviors.Rex_Button2.prototype.cnds.OnRollingIn, this.inst);
            }
        }
        else
        {
            if (this.rollingoverFlag)
            {
                this.rollingoverFlag = false;
                if (this.displayAnim.cur_name == ROLLINGIN_DISPLAY)
                    this._set_animation(this.displayAnim.normal, NORMAL_DISPLAY);
                this.runtime.trigger(cr.behaviors.Rex_Button2.prototype.cnds.OnRollingOut, this.inst);
            }
        }
	};
	behinstProto._set_state = function (state)
	{
	    this.buttonPreState = this.buttonState;
        this.buttonState = state;
	};
	behinstProto.start_click_detecting = function (touch_src)
	{
        if (this.clickMode == 0)
        {
            this.touchSrc = touch_src;
            this._set_state(CLICK_DETECTING_STATE);
            this.runtime.trigger(cr.behaviors.Rex_Button2.prototype.cnds.OnClickStart, this.inst);
        }
        else
            this.finish_click_detecting();
	};
	behinstProto._goto_active_state = function ()
	{
	    this.initActivated = null;
        this.touchSrc = null;
        this._set_state(ACTIVE_STATE);
        this._set_animation(this.displayAnim.normal, NORMAL_DISPLAY);
        this.runtime.trigger(cr.behaviors.Rex_Button2.prototype.cnds.OnActivated, this.inst);
	};
	behinstProto._goto_inactive_state = function ()
	{
	    this.initActivated = null;
        this.touchSrc = null;
        this._set_state(INACTIVE_STATE);
        this._set_animation(this.displayAnim.inactive, INACTIVE_DISPLAY);
        this.runtime.trigger(cr.behaviors.Rex_Button2.prototype.cnds.OnInactivated, this.inst);
	};
	behinstProto.cancel_click_detecting = function ()
	{
        this.runtime.trigger(cr.behaviors.Rex_Button2.prototype.cnds.OnClickCancel, this.inst);
	};
	behinstProto.finish_click_detecting = function ()
	{
        this._set_state(CLICKED_STATE);
        this._set_animation(this.displayAnim.click, CLICKED_DISPLAY);
        this.isSetStateInAction = false;
        this.runtime.trigger(cr.behaviors.Rex_Button2.prototype.cnds.OnClick, this.inst);
        if (this.isAutoCLICK2ACTIVE && !this.isSetStateInAction)
        {
            this._set_animation(this.displayAnim.normal, NORMAL_DISPLAY);
            this._set_state(ACTIVE_STATE);
        }
	};
	behinstProto.GetTouchX = function()
	{
        return this.type.touchwrap.XForID(this.touchSrc, this.inst.layer.index);
	};
	behinstProto.GetTouchY = function()
	{
        return this.type.touchwrap.YForID(this.touchSrc, this.inst.layer.index);
	};
	behinstProto.saveToJSON = function ()
	{
	    var activated = (this.buttonState != INACTIVE_STATE);
		return { "en": activated,
                 "fn": this.displayAnim.normal,
                 "fc": this.displayAnim.click,
                 "fi": this.displayAnim.inactive,
                 "fr": this.displayAnim.rollingin};
	};
	behinstProto.loadFromJSON = function (o)
	{
		var activated = o["en"];
		if (activated)
		    this._goto_active_state();
		else
		    this._goto_inactive_state();
        this.displayAnim.normal = o["fn"];
        this.displayAnim.click = o["fc"];
        this.displayAnim.inactive = o["fi"];
        this.displayAnim.rollingin = o["fr"];
	};
	behinstProto._cmd_goto_state = function (state)
	{
	    if (state == this.buttonState)  // state does not change
	        return;
	    if (this.buttonState == CLICK_DETECTING_STATE)
	        this.cancel_click_detecting();
	    if (state == ACTIVE_STATE)
	        this._goto_active_state();
	    else
	        this._goto_inactive_state();
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.OnClick = function ()
	{
        return true;
	};
	Cnds.prototype.OnClickCancel = function ()
	{
        return true;
	};
	Cnds.prototype.OnClickStart = function ()
	{
        return true;
	};
	Cnds.prototype.OnActivated = function ()
	{
        return true;
	};
	Cnds.prototype.OnInactivated = function ()
	{
        return true;
	};
	Cnds.prototype.OnRollingIn = function ()
	{
        return true;
	};
	Cnds.prototype.OnRollingOut = function ()
	{
        return true;
	};
	Cnds.prototype.IsEnable = function ()
	{
        return this.is_enable();
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.GotoACTIVE = function (_layer)
	{
        this.isSetStateInAction = true;
	    var state = ACTIVE_STATE;
	    if ((_layer!= null) && (this.inst.layer != _layer))
	        state = INACTIVE_STATE;
	    this._cmd_goto_state(state);
	};
	Acts.prototype.GotoINACTIVE = function (_layer)
	{
        this.isSetStateInAction = true;
	    var state = INACTIVE_STATE;
	    if ((_layer!= null) && (this.inst.layer != _layer))
	        state = ACTIVE_STATE;
	    this._cmd_goto_state(state);
	};
	Acts.prototype.SetDisplay = function (display_normal, display_click, display_inactive, display_rollingin)
	{
        this.displayAnim.normal = display_normal;
        this.displayAnim.click = display_click;
        this.displayAnim.inactive = display_inactive;
        this.displayAnim.rollingin = display_rollingin;
        this._init();
	};
	Acts.prototype.ManualTriggerCondition = function (condition_type)
	{
        var conds = cr.behaviors.Rex_Button2.prototype.cnds;
        var trig;
        switch (condition_type)
        {
        case 0: trig = conds.OnClick;        break;
        case 1: trig = conds.OnClickCancel;  break;
        case 2: trig = conds.OnClickStart;   break;
        case 3: trig = conds.OnActivated;    break;
        case 4: trig = conds.OnInactivated;  break;
        case 5: trig = conds.OnRollingIn;    break;
        case 6: trig = conds.OnRollingOut;   break;
        }
        this.runtime.trigger(trig, this.inst);
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.CurState = function (ret)
	{
	    ret.set_string(state2name[this.buttonState]);
	};
	Exps.prototype.PreState = function (ret)
	{
	    ret.set_string(state2name[this.buttonPreState]);
	};
}());
;
;
cr.behaviors.Rex_FSM = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_FSM.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
        this.activated = (this.properties[0] == 1);
		var previous_state = "Off";
		var current_state = this.properties[1];
        current_state = (current_state!="")? current_state:"Off";
        if (!this.recycled)
            this.fsm = new cr.behaviors.Rex_FSM.FSMKlass(this, previous_state, current_state);
        else
            this.fsm.Reset(this, previous_state, current_state);
        this.check_state = null;
        this.check_state2 = null;
        this.is_my_call = null;
        this.is_echo = false;
        this.next_state = null;
	};
	behinstProto.tick = function ()
	{
	};
    behinstProto.run_trigger = function(trigger)
    {
        this.is_echo = false;
        this.runtime.trigger(trigger, this.inst);
        return (this.is_echo);
    };
    behinstProto.get_next_state = function()
    {
        this.next_state = null;
        this.is_my_call = true;
		var is_echo = this.run_trigger(cr.behaviors.Rex_FSM.prototype.cnds.OnLogic);
		if (!is_echo)
		    this.run_trigger(cr.behaviors.Rex_FSM.prototype.cnds.OnDefaultLogic);
        this.is_my_call = null;
        return this.next_state;
    };
	behinstProto.saveToJSON = function ()
	{
		return { "en": this.activated,
		         "fsm": this.fsm.saveToJSON()
		         };
	};
	behinstProto.loadFromJSON = function (o)
	{
	    this.activated = o["en"];
	    this.fsm.loadFromJSON(o["fsm"]);
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.OnEnter = function (name)
	{
	    var is_my_handler = (this.check_state == name);
        this.is_echo |= is_my_handler;
		return is_my_handler;
	};
	Cnds.prototype.OnDefaultEnter = function ()
	{
		return (this.is_my_call);
	};
	Cnds.prototype.OnExit = function (name)
	{
	    var is_my_handler = (this.check_state == name);
        this.is_echo |= is_my_handler;
		return is_my_handler;
	};
	Cnds.prototype.OnDefaultExit = function ()
	{
		return (this.is_my_call);
	};
	Cnds.prototype.OnTransfer = function (name_from, name_to)
	{
	    var is_my_handler = (this.check_state == name_from) && (this.check_state2 == name_to);
        this.is_echo |= is_my_handler;
		return is_my_handler;
	};
	Cnds.prototype.OnStateChanged = function ()
	{
		return (this.is_my_call);
	};
	Cnds.prototype.OnLogic = function (name)
	{
	    var is_my_handler = (this.fsm.CurState == name);
        this.is_echo |= is_my_handler;
		return is_my_handler;
	};
	Cnds.prototype.IsCurState = function (name)
	{
		return (this.fsm.CurState == name);
	};
	Cnds.prototype.IsPreState = function (name)
	{
		return (this.fsm.PreState == name);
	};
	Cnds.prototype.OnDefaultLogic = function ()
	{
		return (this.is_my_call);
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.SetActivated = function (s)
	{
		this.activated = (s==1);
	};
    Acts.prototype.Request = function ()
	{
        if (!this.activated)
            return;
	    this.fsm.Request();
	};
    Acts.prototype.GotoState = function (new_state)
	{
        if (!this.activated)
            return;
	    this.fsm.Request(new_state);
	};
	Acts.prototype.NextStateSet = function (state)
	{
        this.next_state = state;
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.CurState = function (ret)
	{
	    ret.set_string(this.fsm.CurState);
	};
	Exps.prototype.PreState = function (ret)
	{
	    ret.set_string(this.fsm.PreState);
	};
}());
(function ()
{
    cr.behaviors.Rex_FSM.FSMKlass = function(plugin, previous_state, current_state)
    {
        this.Reset(plugin, previous_state, current_state);
    };
    var FSMKlassProto = cr.behaviors.Rex_FSM.FSMKlass.prototype;
    FSMKlassProto.Reset = function(plugin, previous_state, current_state)
    {
        this.plugin = plugin;
        this.PreState = previous_state;
        this.CurState = current_state;
    };
    FSMKlassProto.Request = function(new_state)
    {
        if (new_state == null)
        {
            new_state = this.plugin.get_next_state();
            if (new_state == null)
                return;
        }
        this.PreState = this.CurState;
        this.CurState = new_state;
        var pre_state = this.PreState;
        var cur_state = this.CurState;
        this.plugin.is_my_call = true;
		this.plugin.run_trigger(cr.behaviors.Rex_FSM.prototype.cnds.OnStateChanged);
        var is_echo = this._run_transfer_action(pre_state, cur_state);
        this.plugin.is_my_call = null;
        if (is_echo)
            return;
        this._run_exit_action(pre_state);
        this._run_enter_action(cur_state);
    };
    FSMKlassProto._run_transfer_action = function(pre_state, cur_state)
    {
        this.plugin.check_state = pre_state;
        this.plugin.check_state2 = cur_state;
        var is_echo = this.plugin.run_trigger(cr.behaviors.Rex_FSM.prototype.cnds.OnTransfer);
        this.plugin.check_state = null;
        this.plugin.check_state2 = null;
        return is_echo;
    };
    FSMKlassProto._run_exit_action = function(pre_state)
    {
        this.plugin.check_state = pre_state;
	    var is_echo = this.plugin.run_trigger(cr.behaviors.Rex_FSM.prototype.cnds.OnExit);
	    this.plugin.check_state = null;
		if (is_echo)
		{
		    return;
		}
        this.plugin.is_my_call = true;
	    this.plugin.run_trigger(cr.behaviors.Rex_FSM.prototype.cnds.OnDefaultExit);
        this.plugin.is_my_call = null;
    };
    FSMKlassProto._run_enter_action = function(cur_state)
    {
        this.plugin.check_state = cur_state;
	    var is_echo = this.plugin.run_trigger(cr.behaviors.Rex_FSM.prototype.cnds.OnEnter);
	    this.plugin.check_state = null;
		if (is_echo)
		{
		    return;
		}
        this.plugin.is_my_call = true;
	    this.plugin.run_trigger(cr.behaviors.Rex_FSM.prototype.cnds.OnDefaultEnter);
        this.plugin.is_my_call = false;
    };
	FSMKlassProto.saveToJSON = function ()
	{
		return { "ps": this.PreState,
		         "cs": this.CurState
			   };
	};
	FSMKlassProto.loadFromJSON = function (o)
	{
	    this.PreState = o["ps"];
		this.CurState = o["cs"];
	};
}());
;
;
cr.behaviors.Rex_MoveTo = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_MoveTo.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
        this.enabled = (this.properties[0] === 1);
        if (!this.recycled)
        {
            this.moveParams = {};
        }
        this.moveParams["max"] = this.properties[1];
        this.moveParams["acc"] = this.properties[2];
        this.moveParams["dec"] = this.properties[3];
        this.soildStopEnable = (this.properties[4] === 1);
        this.isContinueMode = (this.properties[5] === 1);
        if (!this.recycled)
        {
            this.target = {"x":0 , "y":0, "a":0};
        }
        this.isMoving = false;
        this.currentSpeed = 0;
        this.remainDistance = 0;
        this.remainDt = 0;
        if (!this.recycled)
        {
            this.prePosition = {"x":0,"y":0};
        }
        this.prePosition["x"] = 0;
        this.prePosition["y"] = 0;
        this.movingAngleData = newPointData(this.movingAngleData);
        this.movingAngleStartData = newPointData(this.movingAngleStartData);
        this.lastTick = null;
        this.isMyCall = false;
	};
    var newPointData = function (point)
    {
        if (point == null)
            point = {};
        point["x"] = 0;
        point["y"] = 0;
        point["a"] = -1;
        return point;
    };
	behinstProto.tick = function ()
	{
	    this.remainDt = 0;
        if ( (!this.enabled) || (!this.isMoving) )
            return;
		var dt = this.runtime.getDt(this.inst);
		this.move(dt);
	};
	behinstProto.move = function (dt)
	{
        if (dt == 0)   // can not move if dt == 0
            return;
        if ((this.prePosition["x"] !== this.inst.x) || (this.prePosition["y"] !== this.inst.y))
		    this.resetCurrentPosition();    // reset this.remainDistance
        var isSlowDown = false;
        if (this.moveParams["dec"] != 0)
        {
            var d = (this.currentSpeed * this.currentSpeed)/(2*this.moveParams["dec"]); // (v*v)/(2*a)
            isSlowDown = (d >= this.remainDistance);
        }
        var acc = (isSlowDown)? (-this.moveParams["dec"]):this.moveParams["acc"];
        if (acc != 0)
        {
            this.setCurrentSpeed( this.currentSpeed + (acc * dt) );
        }
        var distance = this.currentSpeed * dt;
        this.remainDistance -= distance;
        var isHitTarget = false;
        var angle = this.target["a"];
        var ux = Math.cos(angle);
        var uy = Math.sin(angle);
        if ( (this.remainDistance <= 0) || (this.currentSpeed <= 0) )
        {
            isHitTarget = true;
            this.inst.x = this.target["x"];
            this.inst.y = this.target["y"];
            if (this.currentSpeed > 0)
                this.remainDt = (-this.remainDistance)/this.currentSpeed;
            this.getMovingAngle();
            this.setCurrentSpeed(0);
        }
        else
        {
            var angle = this.target["a"];
            this.inst.x += (distance * ux);
            this.inst.y += (distance * uy);
        }
		this.inst.set_bbox_changed();
        var isSolidStop = false;
        if (this.soildStopEnable)
        {
		    var collobj = this.runtime.testOverlapSolid(this.inst);
		    if (collobj)
		    {
			    this.runtime.registerCollision(this.inst, collobj);
			    this.runtime.pushOutSolid(this.inst, -ux, -uy, Math.max(distance, 50));
                isSolidStop = true;
		    }
        }
		this.prePosition["x"] = this.inst.x;
		this.prePosition["y"] = this.inst.y;
        if (isSolidStop)
        {
            this.isMoving = false;  // stop
            this.isMyCall = true;
            this.runtime.trigger(cr.behaviors.Rex_MoveTo.prototype.cnds.OnSolidStop, this.inst);
            this.isMyCall = false;
        }
        else if (isHitTarget)
        {
            this.isMoving = false;  // stop
            this.isMyCall = true;
            this.runtime.trigger(cr.behaviors.Rex_MoveTo.prototype.cnds.OnHitTarget, this.inst);
            this.isMyCall = false;
        }
	};
	behinstProto.tick2 = function ()
	{
        this.movingAngleData["x"] = this.inst.x;
		this.movingAngleData["y"] = this.inst.y;
    };
	behinstProto.setCurrentSpeed = function(speed)
	{
        if (speed != null)
        {
            this.currentSpeed = (speed > this.moveParams["max"])?
                                 this.moveParams["max"]: speed;
        }
        else if (this.moveParams["acc"]==0)
        {
            this.currentSpeed = this.moveParams["max"];
        }
	};
	behinstProto.resetCurrentPosition = function ()
	{
        var dx = this.target["x"] - this.inst.x;
        var dy = this.target["y"] - this.inst.y;
        this.target["a"] = Math.atan2(dy, dx);
        this.remainDistance = Math.sqrt( (dx*dx) + (dy*dy) );
		this.prePosition["x"] = this.inst.x;
		this.prePosition["y"] = this.inst.y;
	};
	behinstProto.setTargetPos = function (_x, _y)
	{
		this.target["x"] = _x;
        this.target["y"] = _y;
        this.setCurrentSpeed(null);
        this.resetCurrentPosition();
		this.movingAngleData["x"] = this.inst.x;
		this.movingAngleData["y"] = this.inst.y;
        this.isMoving = true;
        this.movingAngleStartData["x"] = this.inst.x;
        this.movingAngleStartData["y"] = this.inst.y;
        this.movingAngleStartData["a"] = cr.to_clamped_degrees(cr.angleTo(this.inst.x, this.inst.y, _x, _y));
        if (this.isContinueMode)
            this.move(this.remainDt);
	};
	behinstProto.isTickChanged = function ()
	{
	    var curTick = this.runtime.tickcount;
		var tickChanged = (this.lastTick != curTick);
        this.lastTick = curTick;
		return tickChanged;
	};
 	behinstProto.getMovingAngle = function (ret)
	{
        if (this.isTickChanged())
        {
            var dx = this.inst.x - this.movingAngleData["x"];
            var dy = this.inst.y - this.movingAngleData["y"];
            if ((dx!=0) || (dy!=0))
                this.movingAngleData["a"] = cr.to_clamped_degrees(Math.atan2(dy,dx));
        }
		return this.movingAngleData["a"];
	};
    function clone(obj)
	{
        if (null == obj || "object" != typeof obj)
		    return obj;
        var result = obj.constructor();
        for (var attr in obj)
		{
            if (obj.hasOwnProperty(attr))
			    result[attr] = obj[attr];
        }
        return result;
    };
	behinstProto.saveToJSON = function ()
	{
		return { "en": this.enabled,
		         "v": clone(this.moveParams),
                 "t": clone(this.target),
                 "is_m": this.isMoving,
                 "c_spd" : this.currentSpeed,
                 "rd" : this.remainDistance,
                 "pp": clone(this.prePosition),
                 "ma": clone(this.movingAngleData),
                 "ms": clone(this.movingAngleStartData),
                 "lt": this.lastTick,
               };
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.enabled = o["en"];
		this.moveParams = o["v"];
		this.target = o["t"];
		this.isMoving = o["is_m"];
		this.currentSpeed = o["c_spd"];
		this.remainDistance = o["rd"];
        this.prePosition = o["pp"];
        this.movingAngleData = o["ma"];
        this.movingAngleStartData = o["ms"];
        this.lastTick = o["lt"];
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.OnHitTarget = function ()
	{
		return (this.isMyCall);
	};
	Cnds.prototype.CompareSpeed = function (cmp, s)
	{
		return cr.do_cmp(this.currentSpeed, cmp, s);
	};
    Cnds.prototype.OnMoving = function ()  // deprecated
	{
		return false;
	};
	Cnds.prototype.IsMoving = function ()
	{
		return (this.enabled && this.isMoving);
	};
	Cnds.prototype.CompareMovingAngle = function (cmp, s)
	{
        var angle = this.getMovingAngle();
        if (angle != (-1))
		    return cr.do_cmp(this.getMovingAngle(), cmp, s);
        else
            return false;
	};
	Cnds.prototype.OnSolidStop = function ()
	{
		return this.isMyCall;
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.SetEnabled = function (en)
	{
		this.enabled = (en === 1);
	};
	Acts.prototype.SetMaxSpeed = function (s)
	{
		this.moveParams["max"] = s;
        this.setCurrentSpeed(null);
	};
	Acts.prototype.SetAcceleration = function (a)
	{
		this.moveParams["acc"] = a;
        this.setCurrentSpeed(null);
	};
	Acts.prototype.SetDeceleration = function (a)
	{
		this.moveParams["dec"] = a;
	};
	Acts.prototype.SetTargetPos = function (x, y)
	{
        this.setTargetPos(x, y)
	};
	Acts.prototype.SetCurrentSpeed = function (s)
	{
        this.setCurrentSpeed(s);
	};
 	Acts.prototype.SetTargetPosOnObject = function (objtype)
	{
		if (!objtype)
			return;
		var inst = objtype.getFirstPicked();
        if (inst != null)
            this.setTargetPos(inst.x, inst.y);
	};
 	Acts.prototype.SetTargetPosByDeltaXY = function (dx, dy)
	{
        this.setTargetPos(this.inst.x + dx, this.inst.y + dy);
	};
 	Acts.prototype.SetTargetPosByDistanceAngle = function (distance, angle)
	{
        var a = cr.to_clamped_radians(angle);
        var dx = distance*Math.cos(a);
        var dy = distance*Math.sin(a);
        this.setTargetPos(this.inst.x + dx, this.inst.y + dy);
	};
 	Acts.prototype.Stop = function ()
	{
        this.isMoving = false;
	};
 	Acts.prototype.SetTargetPosOnUID = function (uid)
	{
		var inst = this.runtime.getObjectByUID(uid);
        if (inst != null)
            this.setTargetPos(inst.x, inst.y);
	};
 	Acts.prototype.SetStopBySolid = function (en)
	{
		this.soildStopEnable = (en === 1);
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.Activated = function (ret)
	{
		ret.set_int((this.enabled)? 1:0);
	};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(this.currentSpeed);
	};
	Exps.prototype.MaxSpeed = function (ret)
	{
		ret.set_float(this.moveParams["max"]);
	};
	Exps.prototype.Acc = function (ret)
	{
		ret.set_float(this.moveParams["acc"]);
	};
 	Exps.prototype.Dec = function (ret)
	{
		ret.set_float(this.moveParams["dec"]);
	};
	Exps.prototype.TargetX = function (ret)
	{
		ret.set_float(this.target["x"]);
	};
 	Exps.prototype.TargetY = function (ret)
	{
		ret.set_float(this.target["y"]);
	};
 	Exps.prototype.MovingAngle = function (ret)
	{
		ret.set_float(this.getMovingAngle());
	};
 	Exps.prototype.MovingAngleStart = function (ret)
	{
		ret.set_float(this.movingAngleStartData["a"]);
	};
}());
;
;
cr.behaviors.Rex_ShakeMod = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_ShakeMod.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.enabled = (this.properties[0] !== 0);
		var mode = this.properties[1];
        this.effectMode = (mode === 0);
        this.behaviorMode = (mode === 1);
        this.duration = this.properties[2];
        this.magnitude = this.properties[3];
        this.magMode = this.properties[4];
        this.isShaking = false;
        this.OX = null;
        this.OY = null;
        this.remaining = 0;
        this.is_my_call = false;
	};
	behinstProto.tick = function ()
	{
        if (this.effectMode)          // Effect
        {
            this.BackToOrigin();
        }
        else if (this.behaviorMode)  // Behavior
        {
            this.BackToOrigin(true);
            this.Shake();
        }
	};
	behinstProto.tick2 = function ()
	{
        if (this.effectMode)
        {
            this.Shake();
        }
        else if (this.behaviorMode)
        {
        }
	};
	behinstProto.Shake = function ()
	{
        if ( (!this.enabled) || (!this.isShaking) )
            return;
		var dt = this.runtime.getDt(this.inst);
        if (dt == 0)
            return;
        this.OX = this.inst.x;
        this.OY = this.inst.y;
		var isEnded = this.ShakePos(dt);
        if (isEnded)
        {
			this.OX = null;
			this.OY = null;
            this.isShaking = false;
            this.is_my_call = true;
            this.runtime.trigger(cr.behaviors.Rex_ShakeMod.prototype.cnds.OnShackingEnd, this.inst);
            this.is_my_call = false;
        }
	};
	behinstProto.ShakePos = function (dt)
	{
        var isEnded = (this.remaining <= dt);
        var offx, offy;
        if (isEnded)
        {
            offx = 0;
            offy = 0;
        }
        else
        {
            var mag = this.magnitude * Math.min(this.runtime.timescale, 1);
            if (this.magMode === 1)  // decay
            {
                mag *= this.remaining/this.duration;
            }
            var a = Math.random() * Math.PI * 2;
            offx = Math.cos(a) * mag;
            offy = Math.sin(a) * mag;
        }
        var nx = this.OX + offx;
        var ny = this.OY + offy;
        if ((nx !== this.inst.x) || (ny !== this.inst.y))
        {
		    this.inst.x = nx;
		    this.inst.y = ny;
		    this.inst.set_bbox_changed();
        }
        this.remaining -= dt;
        return isEnded;
	};
	behinstProto.BackToOrigin = function (noUpdateBBox)
	{
        if ( (!this.enabled) || (!this.isShaking) )
            return;
        if (this.OX === null)
            return;
        if ((this.OX === this.inst.x) && (this.OY === this.inst.y))
            return;
        this.inst.x = this.OX;
        this.inst.y = this.OY;
        this.OX = null;
        this.OY = null;
        if (!noUpdateBBox)
            this.inst.set_bbox_changed();
	};
	behinstProto.saveToJSON = function ()
	{
		return {
            "e": this.enable,
			"dur": this.duration,
			"mag": this.magnitude,
			"magMode": this.magMode,
            "isShake": this.isShaking,
            "ox": this.OX,
            "oy": this.OY,
            "rem": this.remaining,
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.enable = o["e"];
        this.duration = o["dur"]
		this.magnitude = o["mag"];
        this.magMode = o["magMode"];
        this.isShaking = o["isShake"];
        this.OX = o["ox"];
        this.OY = o["oy"];
        this.remaining = o["rem"];
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.OnShackingEnd = function ()
	{
		return (this.is_my_call);
	};
	Cnds.prototype.IsShaking = function ()
	{
		return (this.enabled && this.isShaking);
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.SetActivated = function (e)
	{
		this.enabled = (e === 1);
	};
	Acts.prototype.Start = function ()
	{
        this.isShaking = true;
        this.remaining = this.duration;
	};
 	Acts.prototype.Stop = function ()
	{
        this.isShaking = false;
        this.remaining = 0;
	};
	Acts.prototype.SetDuration = function (t)
	{
        if (this.isShaking)
        {
            this.remaining += (t - this.duration);
        }
        this.duration = t;
	};
	Acts.prototype.SetMagnitude = function (m)
	{
        this.magnitude = m;
	};
	Acts.prototype.SetMagnitudeMode = function (m)
	{
        this.magMode = m;
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.OX = function (ret)
	{
        var x = (this.OX !== null)? this.OX : this.inst.x;
		ret.set_float( x );
	};
	Exps.prototype.OY = function (ret)
	{
        var y = (this.OY !== null)? this.OY : this.inst.y;
		ret.set_float( y );
	};
	Exps.prototype.Duration = function (ret)
	{
		ret.set_float( this.duration );
	};
	Exps.prototype.Remainder = function (ret)
	{
        var t = (this.remaining > 0)? this.remaining : 0;
		ret.set_float( t );
	};
}());
;
;
cr.behaviors.Rex_SpriteExt = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_SpriteExt.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
        this.runtime.trigger(cr.behaviors.Rex_SpriteExt.prototype.cnds.OnCreating, this.inst);
	};
	behinstProto.onDestroy = function()
	{
        this.runtime.trigger(cr.behaviors.Rex_SpriteExt.prototype.cnds.OnDestroying, this.inst);
	};
	behinstProto.tick = function ()
	{
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.IsShown = function ()
	{
        var layer = this.runtime.getLayerByNumber(this.inst.layer.index);
		return (layer.visible && this.inst.visible);
	};
	Cnds.prototype.OnCreating = function ()
	{
		return true;
	};
	Cnds.prototype.OnDestroying = function ()
	{
		return true;
	};
	Cnds.prototype.IsSolid = function ()
	{
		return !!this.inst.extra["solidEnabled"];
	};
	Cnds.prototype.ContainsPt = function (x, y)
	{
		return this.inst.contains_pt(x, y);
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.SetVisible = function (s)
	{
        var visible = this.inst.visible
        if ( (visible && (s==1)) ||
             (!visible && (s==0))   )
            return;
		this.inst.visible = !visible;
        this.runtime.redraw = true;
	};
	Acts.prototype.SetMirrored = function (s)
	{
	    if (s == 2)
	        s = (this.inst.width >= 0)? 0:1;
	    else
	        s = (s==1)? 0:1;
	    cr.plugins_.Sprite.prototype.acts.SetMirrored.call(this.inst, s);
	};
	Acts.prototype.SetFlipped = function (f)
	{
	    if (f == 2)
	        f = (this.inst.height >= 0)? 0:1;
	    else
	        f = (f==1)? 0:1;
	    cr.plugins_.Sprite.prototype.acts.SetFlipped.call(this.inst, f);
	};
	Acts.prototype.SetSolid = function (e)
	{
	    if (e == 2)
	        this.inst.extra["solidEnabled"] = !this.inst.extra["solidEnabled"];
	    else
	        this.inst.extra["solidEnabled"] = (e === 1);
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.imageUrl = function (ret)
	{
		ret.set_string(this.inst.curFrame.getDataUri());
	};
	Exps.prototype.IsMirror = function (ret)
	{
		ret.set_int( (this.inst.width < 0)? 1:0 );
	};
	Exps.prototype.IsFlipped = function (ret)
	{
		ret.set_int( (this.inst.height < 0)? 1:0 );
	};
}());
;
;
cr.behaviors.Rex_ToggleSwitch = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_ToggleSwitch.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
        this.value = (this.properties[0]===1);
        this.is_my_call = false;
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.set_value = function (v)
	{
        if (v === this.value)
            return;
        this.value = v;
        var trig_method = (this.value)?
                          cr.behaviors.Rex_ToggleSwitch.prototype.cnds.OnTurnOn:
                          cr.behaviors.Rex_ToggleSwitch.prototype.cnds.OnTurnOff;
        this.is_my_call = true;
        this.runtime.trigger(trig_method, this.inst);
        this.is_my_call = false;
	};
	behinstProto.saveToJSON = function ()
	{
		return { "v": this.value };
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.value = o["v"];
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.OnTurnOn = function ()
	{
		return this.is_my_call;
	};
	Cnds.prototype.OnTurnOff = function ()
	{
		return this.is_my_call;
	};
	Cnds.prototype.IsTurnOn = function ()
	{
		return this.value;
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.ToogleValue = function ()
	{
		this.set_value(!this.value);
	};
	Acts.prototype.SetValue = function (s)
	{
		this.set_value((s===1));
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.Value = function (ret)
	{
		ret.set_int(this.value? 1:0);
	};
}());
;
;
cr.behaviors.Rex_TouchDirection2 = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_TouchDirection2.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
        this.touchwrap = null;
        this.GetX = null;
        this.GetY = null;
        this.GetAbsoluteX = null;
        this.GetAbsoluteY = null;
        this.GetSpeed = null;
        this.behavior_index = null;
        this.touch_src = null;
	};
	behtypeProto.TouchWrapGet = function ()
	{
        if (this.touchwrap != null)
            return;
        var plugins = this.runtime.types;
        var name, obj;
        for (name in plugins)
        {
            obj = plugins[name].instances[0];
            if ((obj != null) && (obj.check_name == "TOUCHWRAP"))
            {
                this.touchwrap = obj;
                this.GetX = cr.plugins_.rex_TouchWrap.prototype.exps.XForID;
                this.GetY = cr.plugins_.rex_TouchWrap.prototype.exps.YForID;
                this.GetAbsoluteX = cr.plugins_.rex_TouchWrap.prototype.exps.AbsoluteXForID;
                this.GetAbsoluteY = cr.plugins_.rex_TouchWrap.prototype.exps.AbsoluteYForID;
                this.GetSpeed = cr.plugins_.rex_TouchWrap.prototype.exps.SpeedAt;
                this.touchwrap.HookMe(this);
                break;
            }
        }
;
	};
    behtypeProto.OnTouchStart = function (touch_src, touchX, touchY)
    {
	    if (this.touch_src != null)
		    return;
        this.touch_src = touch_src;
        if (this.behavior_index == null )
            this.behavior_index = this.objtype.getBehaviorIndexByName(this.name);
        var insts = this.objtype.instances;
        var inst, i, cnt = insts.length;
        for (i=0; i<cnt; i++ )
        {
            inst = insts[i].behavior_insts[this.behavior_index];
            inst.on_moving_start();
        }
    };
    behtypeProto.OnTouchEnd = function (touch_src)
    {
        if (this.touch_src != touch_src)
            return;
        if (this.behavior_index == null )
            this.behavior_index = this.objtype.getBehaviorIndexByName(this.name);
        var insts = this.objtype.instances;
        var inst, i, cnt = insts.length;
        for (i=0; i<cnt; i++ )
        {
            inst = insts[i].behavior_insts[this.behavior_index];
            inst.on_moving_end();
        }
        this.touch_src = null;
    };
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
        type.TouchWrapGet();
		this.pre_x = 0;
		this.pre_y = 0;
        this.is_on_drag = false;
        this._dir = null;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
        this.activated = (this.properties[0] == 1);
        this.move_axis = this.properties[1];
        this.move_proportion = this.properties[2];
	};
	behinstProto.tick = function ()
	{
        if ( (!this.activated) || (!this.is_on_drag) )
            return;
        var inst = this.inst;
        var cur_x = this.GetOffsetX();
        var cur_y = this.GetOffsetY();
        var dx = cur_x - this.pre_x;
        var dy = cur_y - this.pre_y;
        if ( (dx!=0) || (dy!=0) )
        {
            switch (this.move_axis)
            {
                case 1:    // Horizontal
                    inst.x += (this.move_proportion * dx);
                    break;
                case 2:    // Vertical
                    inst.y += (this.move_proportion * dy);
                    break;
                case 3:    // Horizontal or vertical
                    if (this._dir == null)
                        this._dir = (Math.abs(dx) >= Math.abs(dy))? 0:1;
                    if (this._dir == 0)
                        inst.x += (this.move_proportion * dx);
                    else if (this._dir == 1)
                        inst.y += (this.move_proportion * dy);
                    break;
                default:   // Both
                    inst.x += (this.move_proportion * dx);
                    inst.y += (this.move_proportion * dy);
                    break;
            }
            inst.set_bbox_changed();
            this.pre_x = cur_x;
            this.pre_y = cur_y;
        }
	};
	behinstProto.on_moving_start = function()
	{
        this.is_on_drag = true;
        this._dir = null;
        this.pre_x = this.GetOffsetX();
        this.pre_y = this.GetOffsetY();
        this.runtime.trigger(cr.behaviors.Rex_TouchDirection2.prototype.cnds.OnDraggingStart, this.inst);
	};
	behinstProto.on_moving_end = function()
	{
        this.is_on_drag = false;
        this.runtime.trigger(cr.behaviors.Rex_TouchDirection2.prototype.cnds.OnDraggingStop, this.inst);
	};
	behinstProto.GetABSX = function ()
	{
        var touch_obj = this.type.touchwrap;
        this.type.GetAbsoluteX.call(touch_obj, touch_obj.fake_ret, this.type.touch_src);
        return touch_obj.fake_ret.value;
	};
	behinstProto.GetABSY = function ()
	{
        var touch_obj = this.type.touchwrap;
        this.type.GetAbsoluteY.call(touch_obj, touch_obj.fake_ret, this.type.touch_src);
        return touch_obj.fake_ret.value;
	};
	behinstProto.GetX = function()
	{
        var touch_obj = this.type.touchwrap;
        this.type.GetX.call(touch_obj,
                            touch_obj.fake_ret, this.type.touch_src, this.inst.layer.index);
        return touch_obj.fake_ret.value;
	};
	behinstProto.GetY = function()
	{
        var touch_obj = this.type.touchwrap;
        this.type.GetY.call(touch_obj,
                            touch_obj.fake_ret, this.type.touch_src, this.inst.layer.index);
        return touch_obj.fake_ret.value;
	};
	behinstProto.GetSpeed = function()
	{
        var touch_obj = this.type.touchwrap;
        this.type.GetSpeed.call(touch_obj, touch_obj.fake_ret, 0);
        return touch_obj.fake_ret.value;
	};
	behinstProto.GetOffsetX = function()
	{
        var x = this.GetX();
        var layer = this.inst.layer;
        var scrollX = (layer.parallaxX != 0)? layer.layout.scrollX : 0;
        return x - scrollX;
	};
	behinstProto.GetOffsetY = function()
	{
        var y = this.GetY();
        var layer = this.inst.layer;
        var scrollY = (layer.parallaxX != 0)? layer.layout.scrollY : 0;
        return y - scrollY;
	};
	behinstProto.saveToJSON = function ()
	{
		return { "en": this.activated };
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.activated = o["en"];
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.OnDraggingStart = function ()
	{
        return true;
	};
	Cnds.prototype.OnDraggingStop = function ()
	{
		return true;
	};
 	Cnds.prototype.OnDragging = function ()
	{
        return true;
    }
 	Cnds.prototype.IsDragging = function ()
	{
        return (this.is_on_drag);
    }
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.SetActivated = function (s)
	{
        if ( (!this.activated) &&
             this.is_on_drag &&
             (s==1)
           )
        {
            this._dir = null;
        this.pre_x = this.GetOffsetX();
        this.pre_y = this.GetOffsetY();
        }
		this.activated = (s==1);
	};
	Acts.prototype.SetProportion = function (s)
	{
		this.move_proportion = s;
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.X = function (ret)
	{
        ret.set_float( this.GetX() );
	};
	Exps.prototype.Y = function (ret)
	{
	    ret.set_float( this.GetY() );
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
        ret.set_float( this.GetABSX() );
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
        ret.set_float( this.GetABSY() );
	};
	Exps.prototype.Activated = function (ret)
	{
		ret.set_int(this.activated);
	};
	Exps.prototype.Proportion = function (ret)
	{
		ret.set_float(this.move_proportion);
	};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(this.GetSpeed());
	};
}());
;
;
cr.behaviors.Rex_TriggerTouch = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_TriggerTouch.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
    var TouchStartEvtNames = ["pointerdown", "MSPointerDown", "touchstart", "mousedown"];
    var TouchEndEvtNames = ["pointerup", "MSPointerUp", "touchend", "mouseup"];
    var TouchMoveEvtNames = ["pointermove", "MSPointerMove", "touchmove", "mousemove"];
	var dummyoffset = {left: 0, top: 0};
    var elem = jQuery(document);
	behtypeProto.onCreate = function()
	{
        this.touchStyle = (window.navigator["pointerEnabled"])? 0:
                                   (window.navigator["pointerEnabled"])? 1:
                                   2;
        this.useMouseInput = null;
	};
    behtypeProto.GetUseMouseInput = function()
    {
        if (this.useMouseInput !== null)
            return this.useMouseInput;
        var plugins = this.runtime.types;
        var name, inst;
        for (name in plugins)
        {
            inst = plugins[name].instances[0];
            if ( (cr.plugins_.Touch && (inst instanceof cr.plugins_.Touch.prototype.Instance)) ||
                 (cr.plugins_.rex_TouchWrap && (inst instanceof cr.plugins_.rex_TouchWrap.prototype.Instance)) )
            {
                this.useMouseInput = inst.useMouseInput;
                return this.useMouseInput;
            }
        }
        this.useMouseInput = false;
        return this.useMouseInput;
    };
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
        this.identifier = this.properties[1];
        this.isTouched = false;
        this.preX = this.inst.x;
        this.preY = this.inst.y;
        if (this.properties[0] === 1)
            this.TriggerTouchEvent(0);
	};
	behinstProto.tick = function ()
	{
        if (this.isTouched)
        {
            if ((this.preX !== this.inst.x) || (this.preY !== this.inst.y))
            {
                this.TriggerTouchEvent(2);
            }
        }
        this.preX = this.inst.x;
        this.preY = this.inst.y;
	};
    var Type2EventNames = [TouchStartEvtNames, TouchEndEvtNames, TouchMoveEvtNames];
    behinstProto.TriggerTouchEvent = function (type)
	{
        var isTouchStart = (type === 0);
        var isTouchEnd = (type === 1);
        var isTouchMove = (type === 2);
        if (isTouchStart)
            this.isTouched = true;
        else if (isTouchEnd)
            this.isTouched = false;
        var info;
        if (isTouchStart || isTouchMove)
        {
            var pos = this.layerxy2canvasxy();
            info = { "pageX":pos.x, "pageY":pos.y, "identifier":this.identifier };
        }
        else
        {
            info = { "identifier":this.identifier };
        }
        var evetNames = Type2EventNames[type];
        var e = jQuery["Event"]( evetNames[this.type.touchStyle], info );
        elem["trigger"]( e );
        if (this.type.GetUseMouseInput())
        {
            var e = jQuery["Event"]( evetNames[3], info );
            elem["trigger"]( e );
        }
	};
    var pos = {x:0, y:0};
	behinstProto.layerxy2canvasxy = function (x, y, layer)
	{
        if (x == null)
            x = this.inst.x;
        if (y ==null)
            y = this.inst.y;
        if (layer == null)
            layer = this.inst.layer;
		var offset = (this.runtime.isDomFree)? dummyoffset : jQuery(this.runtime.canvas).offset();
        pos.x = layer.layerToCanvas(x, y, true) + offset.left;
        pos.y = layer.layerToCanvas(x, y, false) + offset.top;
        return pos;
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.IsTouching = function ()
	{
		return this.isTouched;
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
    Acts.prototype.SetIdentifier = function (identifier)
	{
        this.identifier = identifier;
	};
    Acts.prototype.TriggerTouchEvent = function (type)
	{
        this.TriggerTouchEvent(type);
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Rex_boundary = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_boundary.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	var _sort_boundary = function(boundary)
	{
	    if (boundary[1] < boundary[0])
	    {
	        var tmp = boundary[0]; boundary[0] = boundary[1]; boundary[1] = tmp;
	    }
	};
	behinstProto.onCreate = function()
	{
		this.mode = this.properties[0];
		this.align_mode = this.properties[1];
        this.horizontal_enable = (this.properties[2]==1);
        this.horizontal_boundary = [this.properties[3], this.properties[4]];
        this.vertical_enable = (this.properties[5]==1);
        this.vertical_boundary = [this.properties[6], this.properties[7]];
        _sort_boundary(this.horizontal_boundary);
        _sort_boundary(this.vertical_boundary);
        this.horizontal_pin_instance = {"uid":(-1), "p0":null, "p1":null};
        this.vertical_pin_instance = {"uid":(-1), "p0":null, "p1":null};
	};
	behinstProto.tick = function ()
	{
		var hit_horizontal, hit_vertical;
		if (this.mode == 0)
		{
		    hit_horizontal = this.horizontal_boundary_clamp();
		    hit_vertical = this.vertical_boundary_clamp();
        }
		else if (this.mode == 1)
		{
		    hit_horizontal = this.horizontal_boundary_wrap();
		    hit_vertical = this.vertical_boundary_wrap();
		}
		else if (this.mode == 2)
		{
		    hit_horizontal = this.horizontal_boundary_modwrap();
		    hit_vertical = this.vertical_boundary_modwrap();
		}
		if (hit_horizontal || hit_vertical)
        {
            this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitAnyBoundary, this.inst);
		    this.inst.set_bbox_changed();
        }
	};
	behinstProto.horizontal_boundary_update = function ()
	{
        var pin = this.horizontal_pin_instance;
        var pin_inst = this.runtime.getObjectByUID(pin["uid"]);
        if (pin_inst == null)
            return;
        this.horizontal_boundary[0] = pin_inst.getImagePoint(pin["p0"], true);
        this.horizontal_boundary[1] = pin_inst.getImagePoint(pin["p1"], true);
        _sort_boundary(this.horizontal_boundary);
	};
	behinstProto.vertical_boundary_update = function ()
	{
        var pin = this.vertical_pin_instance;
        var pin_inst = this.runtime.getObjectByUID(pin["uid"]);
        if (pin_inst == null)
            return;
        this.vertical_boundary[0] = pin_inst.getImagePoint(pin["p0"], false);
        this.vertical_boundary[1] = pin_inst.getImagePoint(pin["p1"], false);
        _sort_boundary(this.vertical_boundary);
	};
	behinstProto.horizontal_boundary_clamp = function ()
	{
	    if (!this.horizontal_enable)
		    return false;
		var curr_x = this.inst.x;
		if (this.align_mode == 0)    // origin
		{
		    if (this.is_hit_bound(1))
            {
		        this.inst.x = this.horizontal_boundary[0];
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitLeftBoundary, this.inst);
            }
            else if (this.is_hit_bound(2))
            {
		        this.inst.x = this.horizontal_boundary[1];
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitRightBoundary, this.inst);
            }
		}
		else    // boundaries
		{
		    this.inst.update_bbox();
			var bbox = this.inst.bbox;
		    if (this.is_hit_bound(1))
            {
		        this.inst.x = this.horizontal_boundary[0] + (this.inst.x - bbox.left);
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitLeftBoundary, this.inst);
            }
            else if (this.is_hit_bound(2))
            {
		        this.inst.x = this.horizontal_boundary[1] - (bbox.right - this.inst.x);
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitRightBoundary, this.inst);
            }
		}
	    return (curr_x != this.inst.x);
	};
	behinstProto.vertical_boundary_clamp = function ()
	{
	    if (!this.vertical_enable)
		    return false;
	    var curr_y = this.inst.y;
		if (this.align_mode == 0)    // origin
		{
		    if (this.is_hit_bound(4))
            {
		        this.inst.y = this.vertical_boundary[0];
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitTopBoundary, this.inst);
            }
            else if (this.is_hit_bound(8))
            {
		        this.inst.y = this.vertical_boundary[1];
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitBottomBoundary, this.inst);
            }
		}
		else    // boundaries
		{
		    this.inst.update_bbox();
			var bbox = this.inst.bbox;
		    if (this.is_hit_bound(4))
            {
		        this.inst.y = this.vertical_boundary[0] + (this.inst.y - bbox.top);
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitTopBoundary, this.inst);
            }
            else if (this.is_hit_bound(8))
            {
		        this.inst.y = this.vertical_boundary[1] - (bbox.bottom - this.inst.y);
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitBottomBoundary, this.inst);
            }
		}
	    return (curr_y != this.inst.y);
	};
	behinstProto.horizontal_boundary_wrap = function ()
	{
	    if (!this.horizontal_enable)
		    return false;
		var curr_x = this.inst.x;
		if (this.align_mode == 0)    // origin
		{
		    if (this.is_hit_bound(1))
            {
		        this.inst.x = this.horizontal_boundary[1] + 1;
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitLeftBoundary, this.inst);
            }
            else if (this.is_hit_bound(2))
            {
		        this.inst.x = this.horizontal_boundary[0] - 1;
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitRightBoundary, this.inst);
            }
		}
		else    // boundaries
		{
		    this.inst.update_bbox();
			var bbox = this.inst.bbox;
		    if (this.is_hit_bound(1))
            {
		        this.inst.x = this.horizontal_boundary[1] + 1 + (bbox.right - this.inst.x);
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitLeftBoundary, this.inst);
            }
            else if (this.is_hit_bound(2))
            {
		        this.inst.x = this.horizontal_boundary[0] - 1 - (this.inst.x - bbox.left);
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitRightBoundary, this.inst);
            }
		}
	    return (curr_x != this.inst.x);
	};
	behinstProto.vertical_boundary_wrap = function ()
	{
	    if (!this.vertical_enable)
		    return false;
	    var curr_y = this.inst.y;
		if (this.align_mode == 0)    // origin
		{
		    if (this.is_hit_bound(4))
            {
		        this.inst.y = this.vertical_boundary[1] + 1;
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitTopBoundary, this.inst);
            }
            else if (this.is_hit_bound(8))
            {
		        this.inst.y = this.vertical_boundary[0] - 1;
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitBottomBoundary, this.inst);
            }
		}
		else    // boundaries
		{
		    this.inst.update_bbox();
			var bbox = this.inst.bbox;
		    if (this.is_hit_bound(4))
            {
		        this.inst.y = this.vertical_boundary[1] + 1 + (bbox.bottom - this.inst.y) ;
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitTopBoundary, this.inst);
            }
            else if (this.is_hit_bound(8))
            {
		        this.inst.y = this.vertical_boundary[0] - 1- (this.inst.y - bbox.top);
                this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitBottomBoundary, this.inst);
            }
		}
	    return (curr_y != this.inst.y);
	};
	behinstProto.horizontal_boundary_modwrap = function ()
	{
	    if (!this.horizontal_enable)
		    return false;
		var hit_left = this.is_hit_bound(1);
		var hit_right = this.is_hit_bound(2);
		var is_hit = (hit_left || hit_right);
		if (is_hit)
		{
		    var dist = this.horizontal_boundary[1] - this.horizontal_boundary[0];
		    var offset =  (this.inst.x - this.horizontal_boundary[0]) % dist;
		    if (offset < 0)
		        offset += dist;
	        this.inst.x = offset + this.horizontal_boundary[0];
		}
        if (hit_left)
            this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitLeftBoundary, this.inst);
        else if (hit_right)
            this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitRightBoundary, this.inst);
	    return is_hit;
	};
	behinstProto.vertical_boundary_modwrap = function ()
	{
	    if (!this.vertical_enable)
		    return false;
		var hit_top = this.is_hit_bound(4);
		var hit_bottom = this.is_hit_bound(8);
		var is_hit = (hit_top || hit_bottom);
		if (is_hit)
		{
		    var dist = this.vertical_boundary[1] - this.vertical_boundary[0];
		    var offset =  (this.inst.y - this.vertical_boundary[0]) % dist;
		    if (offset < 0)
		        offset += dist;
	        this.inst.y = offset + this.vertical_boundary[0];
		}
		if (hit_top)
            this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitTopBoundary, this.inst);
        else if (hit_bottom)
            this.runtime.trigger(cr.behaviors.Rex_boundary.prototype.cnds.OnHitBottomBoundary, this.inst);
	    return is_hit;
	};
	behinstProto.is_hit_bound = function (bound_type)
	{
        this.horizontal_boundary_update();
        this.vertical_boundary_update();
        var is_hit = false;
        if (this.align_mode == 0)
        {
		    if ((bound_type&1) === 1)
		        is_hit |= (this.inst.x < this.horizontal_boundary[0]);
		    if (((bound_type>>1)&1) === 1)
		        is_hit |=  (this.inst.x > this.horizontal_boundary[1]);
		    if (((bound_type>>2)&1) === 1)
		        is_hit |=  (this.inst.y < this.vertical_boundary[0]);
		    if (((bound_type>>3)&1) === 1)
		        is_hit |=  (this.inst.y > this.vertical_boundary[1]);
		}
		else
		{
		    this.inst.update_bbox();
			var bbox = this.inst.bbox;
            if (this.mode === 0)
            {
		        if ((bound_type&1) === 1)
		            is_hit |= (bbox.left < this.horizontal_boundary[0]);
		        if (((bound_type>>1)&1) === 1)
		            is_hit |= (bbox.right > this.horizontal_boundary[1]);
		        if (((bound_type>>2)&1) === 1)
		            is_hit |= (bbox.top < this.vertical_boundary[0]);
		        if (((bound_type>>3)&1) === 1)
		            is_hit |= (bbox.bottom > this.vertical_boundary[1]);
            }
			else if ((this.mode === 1) || (this.mode === 2))
		    {
		        if ((bound_type&1) === 1)
		            is_hit |= (bbox.right < this.horizontal_boundary[0]);
		        if (((bound_type>>1)&1) === 1)
		            is_hit |= (bbox.left > this.horizontal_boundary[1]);
		        if (((bound_type>>2)&1) === 1)
		            is_hit |= (bbox.bottom < this.vertical_boundary[0]);
		        if (((bound_type>>3)&1) === 1)
		            is_hit |= (bbox.top > this.vertical_boundary[1]);
			}
		}
		return is_hit;
	};
	behinstProto.posX2percentage = function ()
	{
	    var offset_inst, offset_bound;
        this.horizontal_boundary_update();
        if (this.align_mode == 0)
		{
            offset_inst = this.inst.x - this.horizontal_boundary[0];
            offset_bound = this.horizontal_boundary[1] - this.horizontal_boundary[0];
	    }
		else
		{
		    this.inst.update_bbox();
            offset_inst = this.inst.bbox.left - this.horizontal_boundary[0];
            offset_bound = this.horizontal_boundary[1] - this.horizontal_boundary[0] - (this.inst.bbox.right - this.inst.bbox.left);
		}
        var pec = cr.clamp((offset_inst/offset_bound), 0, 1) ;
        return pec;
	};
	behinstProto.posY2percentage = function ()
	{
	    var offset_inst, offset_bound;
        this.vertical_boundary_update();
        if (this.align_mode == 0)
		{
            offset_inst = this.inst.y - this.vertical_boundary[0];
            offset_bound = this.vertical_boundary[1] - this.vertical_boundary[0];
		}
		else
		{
		    this.inst.update_bbox();
            offset_inst = this.inst.bbox.top - this.vertical_boundary[0];
            offset_bound = this.vertical_boundary[1] - this.vertical_boundary[0] - (this.inst.bbox.bottom - this.inst.bbox.top);
        }
        var pec = cr.clamp((offset_inst/offset_bound), 0, 1);
        return pec;
	};
	behinstProto.percentage2posX = function (p)
	{
        p = cr.clamp(p, 0, 1);
        this.horizontal_boundary_update();
        var rb, lb;
		if (this.align_mode == 0)    // origin
		{
            lb = this.horizontal_boundary[0];
            rb = this.horizontal_boundary[1];
        }
		else    // boundaries
		{
		    this.inst.update_bbox();
            lb = this.horizontal_boundary[0] + (this.inst.x - this.inst.bbox.left);
			rb = this.horizontal_boundary[1] - (this.inst.bbox.right - this.inst.x);
        }
        var x = lb + (rb - lb)*p;
        return x;
	};
	behinstProto.percentage2posY = function (p)
	{
        p = cr.clamp(p, 0, 1);
        this.vertical_boundary_update();
        var bb, tb;
		if (this.align_mode == 0)    // origin
		{
            tb = this.vertical_boundary[0];
            bb = this.vertical_boundary[1];
        }
		else    // boundaries
		{
		    this.inst.update_bbox();
            tb = this.vertical_boundary[0] + (this.inst.y - this.inst.bbox.top);
			bb = this.vertical_boundary[1] - (this.inst.bbox.bottom - this.inst.y);
        }
        var y = tb + (bb - tb)*p;
        return y;
	};
	behinstProto.saveToJSON = function ()
	{
		return { "he": this.horizontal_enable,
		         "hb": this.horizontal_boundary,
                 "ve": this.vertical_enable,
                 "vb": this.vertical_boundary,
                 "hp": this.horizontal_pin_instance,
                 "vp": this.vertical_pin_instance
                };
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.activated = o["he"];
		this.horizontal_boundary = o["hb"];
        this.vertical_enable = o["ve"];
        this.vertical_boundary = o["vb"];
        this.horizontal_pin_instance = o["hp"];
        this.vertical_pin_instance = o["vp"];
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.OnHitAnyBoundary = function ()
	{
		return true;
	};
	Cnds.prototype.OnHitLeftBoundary = function ()
	{
		return true;
	};
	Cnds.prototype.OnHitRightBoundary = function ()
	{
		return true;
	};
	Cnds.prototype.OnHitTopBoundary = function ()
	{
		return true;
	};
	Cnds.prototype.OnHitBottomBoundary = function ()
	{
		return true;
	};
	var BOUNDTYPE_MAP = [15,1,2,4,8];
	Cnds.prototype.IsHitBoundary = function (bound_type)
	{
		return this.is_hit_bound( BOUNDTYPE_MAP[bound_type] );
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.EnableHorizontal = function (s)
	{
		this.horizontal_enable = (s==1);
	};
	Acts.prototype.EnableVertical = function (s)
	{
		this.vertical_enable = (s==1);
	};
	Acts.prototype.SetHorizontalBoundary = function (l, r)
	{
		this.horizontal_boundary[0] = l;
		this.horizontal_boundary[1] = r;
		_sort_boundary(this.horizontal_boundary);
        this.horizontal_pin_instance["uid"] = (-1);
	};
	Acts.prototype.SetVerticalBoundary = function (u, d)
	{
		this.vertical_boundary[0] = u;
		this.vertical_boundary[1] = d;
		_sort_boundary(this.vertical_boundary);
        this.vertical_pin_instance["uid"] = (-1);
	};
    var _get_instance = function (obj)
	{
		if (!obj)
			return null;
		return obj.getFirstPicked();
	};
	Acts.prototype.SetHorizontalBoundaryToObject = function (obj, left_imgpt, right_imgpt)
	{
        var pin = this.horizontal_pin_instance;
		pin["uid"] = _get_instance(obj).uid;
        pin["p0"] = left_imgpt;
        pin["p1"] = right_imgpt;
	};
	Acts.prototype.SetVerticalBoundaryToObject = function (obj, top_imgpt, bottom_imgpt)
	{
        var pin = this.vertical_pin_instance;
		pin["uid"] = _get_instance(obj).uid;
        pin["p0"] = top_imgpt;
        pin["p1"] = bottom_imgpt;
	};
	Acts.prototype.SetXByPercentage = function (p)
	{
	    if (!this.horizontal_enable)
		    return;
        var newX = this.percentage2posX(p);
        if (newX !== this.inst.x)
        {
            this.inst.x = newX;
            this.inst.set_bbox_changed();
        }
	};
	Acts.prototype.SetYByPercentage = function (p)
	{
	    if (!this.vertical_enable)
		    return;
        var newY = this.percentage2posY(p);
        if (newY !== this.inst.y)
        {
            this.inst.y = newY;
            this.inst.set_bbox_changed();
        }
	};
	Acts.prototype.SetYXByPercentage = function (px, py)
	{
        var isXChanged = false;
	    if (this.horizontal_enable)
        {
            this.inst.x = this.percentage2posX(px);
            isXChanged = (newX !== this.inst.x);
            if (isXChanged)
                this.inst.x = newX;
        }
        var isYChanged = false;
	    if (this.vertical_enable)
        {
		    newY = this.percentage2posY(py);
            isYChanged = (newY !== this.inst.y);
            if (isYChanged)
                this.inst.y = newY;
        }
        if (isXChanged || isYChanged)
        {
            this.inst.set_bbox_changed();
        }
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.HorizontalEnable = function (ret)
	{
        ret.set_int( (this.horizontal_enable)? 1:0 );
	};
	Exps.prototype.VerticalEnable = function (ret)
	{
        ret.set_int( (this.vertical_enable)? 1:0 );
	};
	Exps.prototype.LeftBound = function (ret)
	{
        this.horizontal_boundary_update();
        ret.set_float( this.horizontal_boundary[0] );
	};
	Exps.prototype.RightBound = function (ret)
	{
        this.horizontal_boundary_update();
        ret.set_float( this.horizontal_boundary[1] );
	};
	Exps.prototype.TopBound = function (ret)
	{
        this.vertical_boundary_update();
        ret.set_float( this.vertical_boundary[0] );
	};
	Exps.prototype.BottomBound = function (ret)
	{
        this.vertical_boundary_update();
        ret.set_float( this.vertical_boundary[1] );
	};
	Exps.prototype.HorPercent = function (ret)
	{
        ret.set_float( this.posX2percentage() );
	};
	Exps.prototype.VerPercent = function (ret)
	{
        ret.set_float( this.posY2percentage() );
	};
	Exps.prototype.HorScale = function (ret, min_value, max_value)
	{
        var pec = this.posX2percentage();
        if (max_value < min_value)
        {
            var tmp = max_value; max_value = min_value; min_value = tmp;
            pec = 1.0-pec;
        }
        var scaled = min_value + pec*(max_value-min_value);
        ret.set_float( scaled );
	};
	Exps.prototype.VerScale = function (ret, min_value, max_value)
	{
        var pec = this.posY2percentage();
        if (max_value < min_value)
        {
            var tmp = max_value; max_value = min_value; min_value = tmp;
            pec = 1.0-pec;
        }
        var scaled = min_value + pec*(max_value-min_value);
        ret.set_float( scaled );
	};
	Exps.prototype.HorPercent2PosX = function (ret, p)
	{
        ret.set_float( this.percentage2posX(p) );
	};
	Exps.prototype.VerPercent2PosY = function (ret, p)
	{
        ret.set_float( this.percentage2posY(p) );
	};
}());
;
;
cr.behaviors.Rex_layouter_linear = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_layouter_linear.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
	    this.check_name = "LAYOUTER";
        this.mode = this.properties[0];
        this.direction = this.properties[1];
        this.alignment = this.properties[2];
        this.spacing = this.properties[3];
        this._points = {start:{x:0,y:0},end:{x:0,y:0}};
        this.on_add_insts = this._on_update;
        this.on_remove_insts = this._on_update;
        this.mode_handler = [this._update_avarage_mode,
                             this._update_fix_mode];
	};
	behinstProto.tick = function ()
	{
	};
	var OFFSET_RIGHT = 0;
	var OFFSET_BOTTOM = 1;
	var OFFSET_LEFT = 2;
	var OFFSET_TOP = 3;
    var _offset_p = {x:0, y:0};
	behinstProto._offset_get = function (uid, direction)
	{
        var inst = this.runtime.getObjectByUID(uid);
		if (inst == null)
			return;
        inst.update_bbox();
        var quad = inst.bquad;
        var px, py;
	    switch (direction)
	    {
	    case OFFSET_RIGHT:
            px = (quad.trx + quad.brx)/2;
            py = (quad.try_ + quad.bry)/2;
	        break;
	    case OFFSET_BOTTOM:
            px = (quad.blx + quad.brx)/2;
            py = (quad.bly + quad.bry)/2;
	        break;
	    case OFFSET_LEFT:
            px = (quad.tlx + quad.blx)/2;
            py = (quad.tly + quad.bly)/2;
	        break;
	    case OFFSET_TOP:
            px = (quad.tlx + quad.trx)/2;
            py = (quad.tly + quad.try_)/2;
	        break;
	    }
        _offset_p.x = inst.x - px;
        _offset_p.y = inst.y - py;
	    return _offset_p;
	};
	behinstProto._get_start_end_points = function (uids)
	{
        var layouter =  this.inst;
	    layouter.update_bbox();
	    var quad = layouter.bquad;
	    var inst_cnt = uids.length;
        var _offset_p;
        switch (this.direction)
        {
        case 0:  // Left to right
            this._points.start.x = (quad.tlx + quad.blx)/2;
            this._points.start.y = (quad.tly + quad.bly)/2;
            this._points.end.x = (quad.trx + quad.brx)/2;
            this._points.end.y = (quad.try_ + quad.bry)/2;
            if (inst_cnt >= 1)
            {
                _offset_p = this._offset_get(uids[0], OFFSET_LEFT);
                this._points.start.x += _offset_p.x;
                this._points.start.y += _offset_p.y;
            }
            if (inst_cnt >= 2)
            {
                _offset_p = this._offset_get(uids[inst_cnt-1], OFFSET_RIGHT);
                this._points.end.x += _offset_p.x;
                this._points.end.y += _offset_p.y;
            }
            break;
        case 1:  // Right to left
            this._points.start.x = (quad.trx + quad.brx)/2;
            this._points.start.y = (quad.try_ + quad.bry)/2;
            this._points.end.x = (quad.tlx + quad.blx)/2;
            this._points.end.y = (quad.tly + quad.bly)/2;
            if (inst_cnt >= 1)
            {
                _offset_p = this._offset_get(uids[0], OFFSET_RIGHT);
                this._points.start.x += _offset_p.x;
                this._points.start.y += _offset_p.y;
            }
            if (inst_cnt >= 2)
            {
                _offset_p = this._offset_get(uids[inst_cnt-1], OFFSET_LEFT);
                this._points.end.x += _offset_p.x;
                this._points.end.y += _offset_p.y;
            }
            break;
        case 2:  // Top to bottom
            this._points.start.x = (quad.tlx + quad.trx)/2;
            this._points.start.y = (quad.tly + quad.try_)/2;
            this._points.end.x = (quad.blx + quad.brx)/2;
            this._points.end.y = (quad.bly + quad.bry)/2;
            if (inst_cnt >= 1)
            {
                _offset_p = this._offset_get(uids[0], OFFSET_TOP);
                this._points.start.x += _offset_p.x;
                this._points.start.y += _offset_p.y;
            }
            if (inst_cnt >= 2)
            {
                _offset_p = this._offset_get(uids[inst_cnt-1], OFFSET_BOTTOM);
                this._points.end.x += _offset_p.x;
                this._points.end.y += _offset_p.y;
            }
            break;
        case 3:  // Bottom to top
            this._points.start.x = (quad.blx + quad.brx)/2;
            this._points.start.y = (quad.bly + quad.bry)/2;
            this._points.end.x = (quad.tlx + quad.trx)/2;
            this._points.end.y = (quad.tly + quad.try_)/2;
            if (inst_cnt >= 1)
            {
                _offset_p = this._offset_get(uids[0], OFFSET_BOTTOM);
                this._points.start.x += _offset_p.x;
                this._points.start.y += _offset_p.y;
            }
            if (inst_cnt >= 2)
            {
                _offset_p = this._offset_get(uids[inst_cnt-1], OFFSET_TOP);
                this._points.end.x += _offset_p.x;
                this._points.end.y += _offset_p.y;
            }
            break;
        }
        return this._points;
	};
 	behinstProto._on_update = function ()
	{
        this.mode_handler[this.mode].apply(this);
    };
    var angle_saved = [];
    behinstProto._rotate_all = function (uids, a)
    {
        var cnt = uids.length, i, inst;
        for (i=0; i<cnt; i++)
        {
            inst = this.runtime.getObjectByUID(uids[i]);
			if (inst == null)
			    continue;
            angle_saved.push(inst.angle);
            inst.angle = a;
            inst.set_bbox_changed();
        }
    };
    behinstProto._rotate_recover = function (uids)
    {
        var cnt = uids.length, i, inst;
        for (i=0; i<cnt; i++)
        {
            inst = this.runtime.getObjectByUID(uids[i]);
			if (inst == null)
			    continue;
            inst.angle = angle_saved[i];
            inst.set_bbox_changed();
        }
        angle_saved.length = 0;
    };
	behinstProto._update_avarage_mode = function ()
	{
	    var layouter =  this.inst;
	    var sprites = layouter.sprites;
	    var cnt = sprites.length;
	    if (cnt == 0)
	        return;
	    var a = layouter.angle;
	    this._rotate_all(sprites, a);
        var points = this._get_start_end_points(sprites);
        var i, params;
        var seg = (cnt==1)? 1: (cnt-1);
        var dx = (points.end.x - points.start.x)/seg;
        var dy = (points.end.y - points.start.y)/seg;
        this.spacing = Math.sqrt((dx*dx) + (dy*dy));
        var start_x = points.start.x;
        var start_y = points.start.y;
        this._rotate_recover(sprites);
	    for (i=0;i<cnt;i++)
	    {
	        params = {x:start_x + (dx*i),
	                  y:start_y + (dy*i),
	                  angle:sprites[i].angle};
	        layouter.layout_inst(sprites[i], params);
	    }
	};
	behinstProto._update_fix_mode = function ()
	{
	    var layouter =  this.inst;
	    var sprites = layouter.sprites;
	    var cnt = sprites.length;
	    if (cnt == 0)
	        return;
	    this._rotate_all(sprites, layouter.angle);
        var points = this._get_start_end_points(sprites);
        var layouter =  this.inst;
        var a = Math.atan2(points.end.y - points.start.y,
                           points.end.x - points.start.x);
        var cos_a = Math.cos(a), sin_a = Math.sin(a);
        var i, params;
        var dx = this.spacing * cos_a;
        var dy = this.spacing * sin_a;
        var total_distance = this.spacing * (cnt-1);
        switch (this.alignment)
        {
        case 0:
            break;
        case 1:  // alignment center
            total_distance /= 2;
            var center_x = (points.start.x + points.end.x)/2;
            var center_y = (points.start.y + points.end.y)/2;
            this._points.start.x = center_x - (total_distance * cos_a);
            this._points.start.y = center_y - (total_distance * sin_a);
            break;
        case 2:  // alignment end
            this._points.start.x = points.end.x - (total_distance * cos_a);
            this._points.start.y = points.end.y - (total_distance * sin_a);
            break;
        }
        var start_x = points.start.x;
        var start_y = points.start.y;
        this._rotate_recover(sprites);
	    for (i=0;i<cnt;i++)
	    {
	        params = {x:start_x + (dx*i),
	                  y:start_y + (dy*i),
	                  angle:sprites[i].angle};
	        layouter.layout_inst(sprites[i], params);
	    }
	};
	behinstProto.saveToJSON = function ()
	{
		return { "m": this.mode,
                 "dir": this.direction,
                 "ali": this.alignment,
                 "dd": this.spacing
                };
	};
	behinstProto.loadFromJSON = function (o)
	{
        this.mode = o["m"];
        this.direction = o["dir"];
        this.alignment = o["ali"];
        this.spacing = o["dd"];
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.SetMode = function (m)
	{
		this.mode = m;
	};
	Acts.prototype.SetDirection = function (m)
	{
		this.direction = m;
	};
	Acts.prototype.SetAlignment = function (m)
	{
		this.alignment = m;
	};
	Acts.prototype.SetDeltaDist = function (d)
	{
		this.spacing = d;
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Rex_maxmin = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_maxmin.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
	    this.is_my_call = false;
	    this.value = null;
	    this.max = this.properties[1];
	    this.min = this.properties[2];
	    this.set_value( this.properties[0], true );
	    this.pre_value = this.value;
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.set_value = function (v, no_checking)
	{
	    this.pre_value = this.value;
	    this.value = cr.clamp(v, this.min, this.max);
	    if (no_checking)
	        return;
	    if (this.pre_value != this.value)
	    {
	        this.is_my_call = true;
	        this.runtime.trigger(cr.behaviors.Rex_maxmin.prototype.cnds.OnValueChanging, this.inst);
	        this.is_my_call = false;
	    }
	};
	behinstProto.saveToJSON = function ()
	{
		return {"v":this.value,
		        "max": this.max,
		        "min": this.min,
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
	    this.value = o["v"];
	    this.max = o["max"];
	    this.min = o["min"];
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
    Cnds.prototype.OnValueChanging = function ()
	{
		return this.is_my_call;
	};
	Cnds.prototype.CompareValue = function (cmp, s)
	{
		return cr.do_cmp(this.value, cmp, s);
	};
    Cnds.prototype.IsValueChanged = function ()
	{
		return (this.pre_value != this.value);
	};
	Cnds.prototype.CompareDeltaValue = function (cmp, s)
	{
	    var delta = this.value - this.pre_value;
		return cr.do_cmp(delta, cmp, s);
	};
	Cnds.prototype.CompareBound = function (bound_type, cmp, s)
	{
	    var value = (bound_type == 1)? this.max : this.min;
		return cr.do_cmp(value, cmp, s);
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
    Acts.prototype.SetValue = function (v)
	{
        this.set_value( v );
	};
    Acts.prototype.SetMax = function (v)
	{
	    this.max = v;
        this.value = this.set_value( this.value );
	};
    Acts.prototype.SetMin = function (v)
	{
	    this.min = v;
        this.set_value( this.value );
	};
    Acts.prototype.AddTo = function (v)
	{
        this.set_value( this.value + v );
	};
    Acts.prototype.SubtractFrom = function (v)
	{
        this.set_value( this.value - v );
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
 	Exps.prototype.Value = function (ret)
	{
		ret.set_float(this.value);
	};
 	Exps.prototype.Max = function (ret)
	{
		ret.set_float(this.max);
	};
 	Exps.prototype.Min = function (ret)
	{
		ret.set_float(this.min);
	};
 	Exps.prototype.Percentage = function (ret)
	{
		ret.set_float( (this.value - this.min)/(this.max - this.min) );
	};
 	Exps.prototype.PreValue = function (ret)
	{
		ret.set_float(this.pre_value);
	};
}());
;
;
cr.behaviors.Rex_pin2imgpt = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_pin2imgpt.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	    if (!cr.plugins_.Sprite)
	    {
	        this.imgptX_get = null;
	        this.imgptY_get = null;
	    }
	    else
	    {
	        this.imgptX_get = cr.plugins_.Sprite.prototype.exps.ImagePointX;
	        this.imgptY_get = cr.plugins_.Sprite.prototype.exps.ImagePointY;
	    }
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.pinObject = null;
		this.pinObjectUid = -1;		// for loading
		this.imgpt = null;
		this.myStartAngle = 0;
		this.theirStartAngle = 0;
		this.lastKnownAngle = 0;
		this.mode = null;
		var self = this;
		if (!this.recycled)
		{
			this.myDestroyCallback = (function(inst) {
													self.onInstanceDestroyed(inst);
												});
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"uid": this.pinObject ? this.pinObject.uid : -1,
			"imgpt": this.imgpt,
			"msa": this.myStartAngle,
			"tsa": this.theirStartAngle,
			"lka": this.lastKnownAngle,
			"m": this.mode
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.pinObjectUid = o["uid"];		// wait until afterLoad to look up
		this.imgpt = o["imgpt"];
		this.myStartAngle = o["msa"];
		this.theirStartAngle = o["tsa"];
		this.lastKnownAngle = o["lka"];
		this.mode = o["m"];
	};
	behinstProto.afterLoad = function ()
	{
		if (this.pinObjectUid === -1)
			this.pinObject = null;
		else
		{
			this.pinObject = this.runtime.getObjectByUID(this.pinObjectUid);
;
		}
		this.pinObjectUid = -1;
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		if (this.pinObject == inst)
			this.pinObject = null;
	};
	behinstProto.onDestroy = function()
	{
		this.pinObject = null;
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.tick = function ()
	{
	};
	var fake_ret = {value:0,
	                set_any: function(value){this.value=value;},
	                set_int: function(value){this.value=value;},
                    set_float: function(value){this.value=value;},
                    set_string: function(value){this.value=value;},
	               };
    behinstProto.imgptX_get = function (pinObject, imgpt)
    {
        this.type.imgptX_get.call(pinObject, fake_ret, imgpt);
        return fake_ret.value;
    };
    behinstProto.imgptY_get = function (pinObject, imgpt)
    {
        this.type.imgptY_get.call(pinObject, fake_ret, imgpt);
        return fake_ret.value;
    };
	behinstProto.tick2 = function ()
	{
		if ((!this.pinObject) || (!this.type.imgptX_get) || (!this.type.imgptY_get))
			return;
		var newx = this.imgptX_get(this.pinObject, this.imgpt);
		var newy = this.imgptY_get(this.pinObject, this.imgpt);
		if (this.inst.x !== newx || this.inst.y !== newy)
		{
			this.inst.x = newx;
			this.inst.y = newy;
			this.inst.set_bbox_changed();
		}
		if (this.mode == 1)
		{
		    if (this.lastKnownAngle !== this.inst.angle)
		    {
			    this.myStartAngle = cr.clamp_angle(this.myStartAngle + (this.inst.angle - this.lastKnownAngle));
			}
		    var newangle = cr.clamp_angle(this.myStartAngle + (this.pinObject.angle - this.theirStartAngle));
		    this.lastKnownAngle = newangle;
    	}
		if ((this.mode == 1) && (this.inst.angle !== newangle))
		{
			this.inst.angle = newangle;
			this.inst.set_bbox_changed();
		}
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.IsPinned = function ()
	{
		return !!this.pinObject;
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.Pin = function (obj, imgpt, mode_)
	{
		if (!obj)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst)
			return;
		this.pinObject = otherinst;
        this.imgpt = imgpt;
		this.myStartAngle = this.inst.angle;
		this.lastKnownAngle = this.inst.angle;
		this.theirStartAngle = otherinst.angle;
        this.mode = mode_;
	};
	Acts.prototype.Unpin = function ()
	{
		this.pinObject = null;
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.PinnedUID = function (ret)
	{
		ret.set_int(this.pinObject ? this.pinObject.uid : -1);
	};
}());
;
;
cr.behaviors.Rex_pinOffsetXY = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_pinOffsetXY.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.pinObject = null;
		this.pinObjectUid = -1;		// for loading
		this.pin_offsetx = 0;
		this.pin_offsety = 0;
		var self = this;
		if (!this.recycled)
		{
			this.myDestroyCallback = (function(inst) {
													self.onInstanceDestroyed(inst);
												});
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"uid": this.pinObject ? this.pinObject.uid : -1,
			"offx": this.pin_offsetx,
			"offy": this.pin_offsety,
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.pinObjectUid = o["uid"];		// wait until afterLoad to look up
		this.pin_offsetx = o["offx"];
		this.pin_offsety = o["offy"];
	};
	behinstProto.afterLoad = function ()
	{
		if (this.pinObjectUid === -1)
			this.pinObject = null;
		else
		{
			this.pinObject = this.runtime.getObjectByUID(this.pinObjectUid);
;
		}
		this.pinObjectUid = -1;
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		if (this.pinObject == inst)
			this.pinObject = null;
	};
	behinstProto.onDestroy = function()
	{
		this.pinObject = null;
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.tick2 = function ()
	{
		if (!this.pinObject)
			return;
		var newx = this.pinObject.x + this.pin_offsetx;
		var newy = this.pinObject.y + this.pin_offsety;
		if (this.inst.x !== newx || this.inst.y !== newy)
		{
			this.inst.x = newx;
			this.inst.y = newy;
			this.inst.set_bbox_changed();
		}
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.IsPinned = function ()
	{
		return !!this.pinObject;
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.Pin = function (obj, offset_x, offset_y)
	{
		if (!obj)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst)
			return;
        if (offset_x == null)
            offset_x = this.inst.x - otherinst.x;
        if (offset_y == null)
            offset_y = this.inst.y - otherinst.y;
		this.pinObject = otherinst;
		this.pin_offsetx = offset_x;
		this.pin_offsety = offset_y;
	};
	Acts.prototype.Unpin = function ()
	{
		this.pinObject = null;
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.PinnedUID = function (ret)
	{
		ret.set_int(this.pinObject ? this.pinObject.uid : -1);
	};
}());
;
;
cr.behaviors.Rex_text_properties = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_text_properties.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.text_type = this.get_text_type();
	};
	behinstProto.tick = function ()
	{
	};
   	behinstProto.get_text_type = function ()
	{
	    var text_type;
        if (cr.plugins_.Text &&
		    (this.inst instanceof cr.plugins_.Text.prototype.Instance))
	        text_type = "Text";
	    else if (cr.plugins_.Spritefont2 &&
		         (this.inst instanceof cr.plugins_.Spritefont2.prototype.Instance))
			text_type = "Spritefont2";
	    else if (cr.plugins_.TextBox &&
		         (this.inst instanceof cr.plugins_.TextBox.prototype.Instance))
		    text_type = "TextBox";
	    else if (cr.plugins_.rex_TagText &&
		         (this.inst instanceof cr.plugins_.rex_TagText.prototype.Instance))
		    text_type = "rex_TagText";
	    else if (cr.plugins_.rex_bbcodeText &&
		         (this.inst instanceof cr.plugins_.rex_bbcodeText.prototype.Instance))
		    text_type = "rex_bbcodeText";
		else
		    text_type = "";
		return text_type;
	};
    behinstProto._get_webgl_ctx = function ()
	{
        var inst = this.inst;
        var ctx = inst.myctx;
		if (!ctx)
		{
			inst.mycanvas = document.createElement("canvas");
            var scaledwidth = Math.ceil(inst.layer.getScale()*inst.width);
            var scaledheight = Math.ceil(inst.layer.getAngle()*inst.height);
			inst.mycanvas.width = scaledwidth;
			inst.mycanvas.height = scaledheight;
			inst.lastwidth = scaledwidth;
			inst.lastheight = scaledheight;
			inst.myctx = inst.mycanvas.getContext("2d");
            ctx = inst.myctx;
		}
        return ctx;
	};
	behinstProto.drawText = function ()
	{
        var inst = this.inst;
        var ctx = (this.runtime.enableWebGL)?
                  this._get_webgl_ctx():this.runtime.ctx;
        inst.draw(ctx);                      // call this function to get lines
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.SetHorizontalAlignment = function(align)
	{
        if (this.text_type === "Spritefont2")
        {
            cr.plugins_.Spritefont2.prototype.acts.SetHAlign.call(this.inst, align);
        }
	    else // Text, rex_TagText, rex_bbcodeText
	    {
	        if (this.inst.halign != align)
	        {
	            this.inst.need_text_redraw = true;
	            this.runtime.redraw = true;
	        }
            this.inst.halign = align;   // 0=left, 1=center, 2=right
        }
	};
	Acts.prototype.SetVerticalAlignment = function(align)
	{
        if (this.text_type === "Spritefont2")
        {
            cr.plugins_.Spritefont2.prototype.acts.SetVAlign.call(this.inst, align);
        }
	    else // Text, rex_TagText, rex_bbcodeText
	    {
	        if (this.inst.valign != align)
	        {
	            this.inst.need_text_redraw = true;
	            this.runtime.redraw = true;
	        }
            this.inst.valign = align;   // 0=top, 1=center, 2=bottom
        }
	};
	Acts.prototype.SetWrapping = function(wrap_mode)
	{
	    wrap_mode = (wrap_mode === 0);  // 0=word, 1=character
        if (this.text_type === "Spritefont2")
        {
	        if (this.inst.wrapbyword != wrap_mode)
	        {
			    this.inst.text_changed = true;
			    this.runtime.redraw = true;
	        }
            this.inst.wrapbyword = wrap_mode;
        }
	    else // Text, rex_TagText, rex_bbcodeText
	    {
	        if (this.inst.wrapbyword != wrap_mode)
	        {
	            this.inst.need_text_redraw = true;
	            this.runtime.redraw = true;
	        }
            this.inst.wrapbyword = wrap_mode;
        }
	};
	Acts.prototype.SetLineHeight = function(line_height_offset)
	{
        if (this.text_type === "Spritefont2")
        {
            cr.plugins_.Spritefont2.prototype.acts.SetLineHeight.call(this.inst, line_height_offset);
        }
	    else // Text, rex_TagText, rex_bbcodeText
	    {
	        if (this.inst.line_height_offset != line_height_offset)
	        {
	            this.inst.need_text_redraw = true;
	            this.runtime.redraw = true;
	        }
            this.inst.line_height_offset = line_height_offset;
        }
	};
	Acts.prototype.SetFontFace = function (face_, style_)
	{
        if (this.text_type === "Spritefont2")
        {
        }
	    else // Text, rex_TagText, rex_bbcodeText
	    {
		    var newstyle = "";
		    switch (style_) {
		    case 1: newstyle = "bold"; break;
		    case 2: newstyle = "italic"; break;
		    case 3: newstyle = "bold italic"; break;
		    }
		    var inst = this.inst;
		    if (face_ === inst.facename && newstyle === inst.fontstyle)
		    	return;		// no change
		    inst.facename = face_;
		    inst.fontstyle = newstyle;
		    inst.updateFont();
	    }
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
    Exps.prototype.LineBreakContent = function (ret)
	{
        this.drawText();
        var content;
        if ((this.text_type === "Text") || (this.text_type === "Spritefont2"))
        {
            content = this.inst.lines.join("\n");
        }
        else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
        {
            var pensMgr = this.inst.copyPensMgr();
            var cnt = pensMgr.getLines().length;
            var lines = [];
            for (var i=0; i<cnt; i++)
            {
              var si = pensMgr.getLineStartChartIndex(i);
              var ei = pensMgr.getLineEndChartIndex(i);
              var txt = pensMgr.getSliceTagText(si, ei+1);
              lines.push(txt);
            }
            content = lines.join("\n");
        }
	    ret.set_string( content );
	};
}());
;
;
cr.behaviors.Rex_text_resize = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_text_resize.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
        this.is_auto_resize = (this.properties[0] === 1);
        this.minWidth = this.properties[1];
        this.minHeight = this.properties[2];
        this.maxWidth = this.inst.width;
        this.maxHeight = this.inst.height;
        this.is_resize_now = false;
        this.background_objects = {};
        this.pre_width = this.inst.width;
        this.pre_height = this.inst.height;
        this.bgInsts_save = null;
	    this.text_type = this._text_type_get();
	    this.get_TextHeight_handler = this.get_TextHeight_handler_get();
	    this.get_TextWidth_handler = this.get_TextWidth_handler_get();
		if (!this.recycled)
		{
		    this.myDestroyCallback = (function (self) {
											return function(inst) {
												self.onInstanceDestroyed(inst);
											};
										})(this);
        }
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
        var uid = inst.uid;
        if (this.background_objects.hasOwnProperty(uid))
            delete this.background_objects[uid];
	};
	behinstProto.onDestroy = function()
	{
        var uid;
		for (uid in this.background_objects)
            delete this.background_objects[uid];
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.tick = function ()
	{
        if (this.is_resize_now && !this._text_changed_get(this.text_type))
        {
            this.resize();
        }
	};
	behinstProto.tick2 = function ()
	{
        if (!this.is_auto_resize)
            return;
        if (this._text_changed_get())
        {
            this.prepare_draw();
        }
	};
    behinstProto.prepare_draw = function ()
	{
        var inst = this.inst;
        inst.width = this.maxWidth;
        inst.set_bbox_changed();
        this.is_resize_now = true;
	};
    behinstProto.force_draw = function ()
	{
        this.prepare_draw();
        var ctx = (this.runtime.enableWebGL)?
                  this._get_webgl_ctx():this.runtime.ctx;
        var inst = this.inst;
        inst.draw(ctx);
        inst.text_changed = true;
        inst.runtime.redraw = true;
	};
    behinstProto._get_webgl_ctx = function ()
	{
        var inst = this.inst;
        var ctx = inst.myctx;
		if (!ctx)
		{
			inst.mycanvas = document.createElement("canvas");
            var scaledwidth = Math.ceil(inst.layer.getScale()*inst.width);
            var scaledheight = Math.ceil(inst.layer.getAngle()*inst.height);
			inst.mycanvas.width = scaledwidth;
			inst.mycanvas.height = scaledheight;
			inst.lastwidth = scaledwidth;
			inst.lastheight = scaledheight;
			inst.myctx = inst.mycanvas.getContext("2d");
            ctx = inst.myctx;
		}
        return ctx;
	};
	behinstProto.resize = function ()
	{
        this.is_resize_now = false;
        var is_resized = this.resize_myself();
        if (is_resized)
        {
            this.resize_background();
            this.save_current_size();
            this.runtime.trigger(cr.behaviors.Rex_text_resize.prototype.cnds.OnSizeChanged, this.inst);
        }
	};
	behinstProto.resize_myself = function ()
	{
        var new_width= this.get_TextWidth() + 1;
        new_width = cr.clamp(new_width, this.minWidth, this.maxWidth);
        var new_height = this.get_TextHeight() + 1;
        if (new_height < this.minHeight)
            new_height = this.minHeight;
        var inst=this.inst, is_resized=false;
        if ((new_width !== inst.width) || (new_height !== inst.height))
        {
            this.setInstSize(new_width, new_height);
            is_resized = true;
        }
        return is_resized;
	};
    behinstProto.setInstSize = function (width, height)
    {
        var inst=this.inst;
        inst.width = width;
        inst.height = height;
        inst.set_bbox_changed();
        switch (this.text_type)
        {
        case "Text":                  inst.lastwrapwidth = width;  break;
        case "Spritefont2":        inst.lastwrapwidth = width;  break;
        case "rex_TagText":      inst.lastwrapwidth = width;  break;
        case "rex_bbcodeText": inst.lastwrapwidth = width;  break;
        }
    }
	behinstProto.resize_background = function ()
	{
        var my_width = this.inst.width;
        var my_height = this.inst.height;
        var dw = this.inst.width - this.maxWidth;
        var dh = this.inst.height - this.maxHeight;
        var w, h;
        var uid, bg_obj, bg_inst, resize_mode;
        for (uid in this.background_objects)
        {
            bg_obj = this.background_objects[uid];
            bg_inst = bg_obj["inst"];
            resize_mode = bg_obj["rm"];
            w = bg_obj["maxw"] + dw;
            h = bg_obj["maxh"] + dh;
            if (resize_mode === 0)
            {
                if (  (bg_inst.width !== w) || (bg_inst.height !== h)  )
                {
                    bg_inst.height = h;
                    bg_inst.width = w;
                    bg_inst.set_bbox_changed();
                }
            }
            else if (resize_mode === 1)
            {
                if (bg_inst.height !== h)
                {
                    bg_inst.height = h;
                    bg_inst.set_bbox_changed();
                }
            }
        }
	};
	behinstProto.save_current_size = function ()
	{
        this.pre_width = this.inst.width;
        this.pre_height = this.inst.height;
	};
	behinstProto._text_type_get = function ()
	{
	    var text_type;
        if (cr.plugins_.Text &&
		    (this.inst instanceof cr.plugins_.Text.prototype.Instance))
	        text_type = "Text";
	    else if (cr.plugins_.Spritefont2 &&
		         (this.inst instanceof cr.plugins_.Spritefont2.prototype.Instance))
			text_type = "Spritefont2";
	    else if (cr.plugins_.rex_TagText &&
		         (this.inst instanceof cr.plugins_.rex_TagText.prototype.Instance))
		    text_type = "rex_TagText";
	    else if (cr.plugins_.rex_bbcodeText &&
		         (this.inst instanceof cr.plugins_.rex_bbcodeText.prototype.Instance))
		    text_type = "rex_bbcodeText";
		else
		    text_type = "";
		return text_type;
	};
    behinstProto.get_TextHeight_handler_get = function ()
    {
        switch (this.text_type)
        {
        case "Text":                  return cr.plugins_.Text.prototype.exps.TextHeight;
        case "Spritefont2":        return cr.plugins_.Spritefont2.prototype.exps.TextHeight;
        case "rex_TagText":      return cr.plugins_.rex_TagText.prototype.exps.TextHeight;
        case "rex_bbcodeText": return cr.plugins_.rex_bbcodeText.prototype.exps.TextHeight;
        }
    };
    behinstProto.get_TextWidth_handler_get = function ()
    {
        switch (this.text_type)
        {
        case "Text":                  return cr.plugins_.Text.prototype.exps.TextWidth;
        case "Spritefont2":        return cr.plugins_.Spritefont2.prototype.exps.TextWidth;
        case "rex_TagText":      return cr.plugins_.rex_TagText.prototype.exps.TextWidth;
        case "rex_bbcodeText": return cr.plugins_.rex_bbcodeText.prototype.exps.TextWidth;
        }
    };
 	var fake_ret = {value:0,
	                set_any: function(value){this.value=value;},
	                set_int: function(value){this.value=value;},
                    set_float: function(value){this.value=value;},
                    set_string: function(value){this.value=value;},
	               };
	behinstProto.get_TextHeight = function ()
	{
        this.get_TextHeight_handler.call(this.inst, fake_ret);
        return fake_ret.value;
	};
	behinstProto.get_TextWidth = function ()
	{
        this.get_TextWidth_handler.call(this.inst, fake_ret);
        return fake_ret.value;
	};
	behinstProto._text_changed_get = function ()
	{
        switch (this.text_type)
        {
        case "Text":                  return this.inst.text_changed;
        case "Spritefont2":        return this.inst.text_changed;
        case "rex_TagText":      return this.inst.text_changed;
        case "rex_bbcodeText": return this.inst.text_changed;
        }
	};
	behinstProto.saveToJSON = function ()
	{
	    var uid, bg_insts_save = {}, bgInfo;
	    for (uid in this.background_objects)
	    {
            bgInfo = this.background_objects[uid];
	        bg_insts_save[uid] = {
               "rm": bgInfo["rm"],
               "maxw": bgInfo["maxw"],
               "maxh": bgInfo["maxh"],
            };
	    }
		return {
            "minw":this.minWidth,
            "minh":this.minHeight,
			"maxw": this.maxWidth,
            "maxh": this.maxHeight,
            "pw": this.pre_width,
            "ph": this.pre_height,
            "bg": bg_insts_save,
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
        this.minWidth = o["minw"];
        this.minHeight = o["minh"];
		this.maxWidth = o["maxw"];
        this.maxHeight = o["maxh"];
		this.pre_width = o["pw"];
		this.pre_height = o["ph"];
		this.bgInsts_save = o["bg"];
	};
	behinstProto.afterLoad = function ()
	{
	    var uid;
	    for(uid in this.background_objects)
	        delete this.background_objects[uid];
	    var bg_inst, rm;
	    for(uid in this.bgInsts_save)
	    {
            uid = parseInt(uid);
	        bg_inst = this.runtime.getObjectByUID(uid);
;
	        this.background_objects[uid] = this.bgInsts_save[uid];
            this.background_objects[uid]["inst"] = bg_inst;
	    }
	    this.bgInsts_save = null;
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.OnSizeChanged = function ()
	{
		return true;
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
	Acts.prototype.Resize = function ()
	{
	    this.force_draw();
	    this.resize();
	};
	Acts.prototype.SetMaxWidth = function (w)
	{
	    this.maxWidth = w;
	};
	Acts.prototype.SetMinWidth = function (w)
	{
	    this.minWidth = w;
	};
	Acts.prototype.SetMinHeight = function (h)
	{
	    this.minHeight = h;
	};
	Acts.prototype.AddBackground = function (obj, resize_mode)
	{
		if (!obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
        var bg_obj = {
            "inst":inst,
            "rm": resize_mode,
            "maxw": inst.width,
            "maxh": inst.height,
        };
        this.background_objects[inst.uid] = bg_obj;
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Rex_text_scrolling = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_text_scrolling.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.autoRedraw = (this.properties[0] === 1);
        this.content = "";
	    this.total_lines_cnt = 0;
	    this.visible_lines = 0;
        this.line_pos_percent = 0;
        this.start_line_index = 0;
        this.text_changed = false;
        this.lastwidth = this.inst.width;
        this.lastheight = this.inst.height;
		this.text_type = this.get_text_type();
		this.SetText_handler = this.get_setText_handler();
        this.init_content_lines();
	};
	behinstProto.get_text_type = function ()
	{
	    var text_type;
        if (cr.plugins_.Text &&
		    (this.inst instanceof cr.plugins_.Text.prototype.Instance))
	        text_type = "Text";
	    else if (cr.plugins_.Spritefont2 &&
		         (this.inst instanceof cr.plugins_.Spritefont2.prototype.Instance))
			text_type = "Spritefont2";
	    else if (cr.plugins_.rex_TagText &&
		         (this.inst instanceof cr.plugins_.rex_TagText.prototype.Instance))
		    text_type = "rex_TagText";
	    else if (cr.plugins_.rex_bbcodeText &&
		         (this.inst instanceof cr.plugins_.rex_bbcodeText.prototype.Instance))
		    text_type = "rex_bbcodeText";
	    else if (cr.plugins_.SpriteFontPlus &&
		         (this.inst instanceof cr.plugins_.SpriteFontPlus.prototype.Instance))
			text_type = "SpriteFontPlus";
		else
		    text_type = "";
		return text_type;
	};
	behinstProto.get_setText_handler = function ()
	{
	    var set_text_handler;
        if (this.text_type === "Text")
	        set_text_handler = cr.plugins_.Text.prototype.acts.SetText;
	    else if (this.text_type === "Spritefont2")
			set_text_handler = cr.plugins_.Spritefont2.prototype.acts.SetText;
	    else if (this.text_type === "rex_TagText")
			set_text_handler = cr.plugins_.rex_TagText.prototype.acts.SetText;
	    else if (this.text_type === "rex_bbcodeText")
			set_text_handler = cr.plugins_.rex_bbcodeText.prototype.acts.SetText;
	    else if (this.text_type === "SpriteFontPlus")
			set_text_handler = cr.plugins_.SpriteFontPlus.prototype.acts.SetText;
	    else
		    set_text_handler = null;
	    return set_text_handler;
    };
	behinstProto.init_content_lines = function ()
	{
	    var set_text_handler;
        if ((this.text_type === "Text") || (this.text_type === "Spritefont2") || (this.text_type === "SpriteFontPlus"))
	        this.content_lines = [];
	    else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
			this.content_lines = null;
	    else
		    this.content_lines = [];
    };
	behinstProto.onDestroy = function()
	{
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.tick2 = function ()
	{
		if (this.autoRedraw)
            this.redraw_text();
	};
	behinstProto.redraw_text = function ()
	{
        var size_changed = (this.lastwidth !== this.inst.width) || (this.lastheight !== this.inst.height);
        if (size_changed || this.text_changed)
        {
            this.SetContent();
            this.text_changed = false;
            this.lastwidth = this.inst.width;
            this.lastheight = this.inst.height;
        }
	};
	behinstProto.get_lastStartLineIndex = function ()
	{
        var idx = this.total_lines_cnt - this.visible_lines;
        if (idx < 0)
            idx = 0;
        return idx;
	};
	behinstProto.perent2line = function (percent)
	{
        return Math.floor(this.get_lastStartLineIndex() * percent);
	};
	behinstProto.line2percent = function (line_index)
	{
        var percent = line_index/this.get_lastStartLineIndex();
        return cr.clamp(percent, 0, 1);
	};
	behinstProto.copy_content_lines = function ()
	{
        if ((this.text_type === "Text") || (this.text_type === "Spritefont2") || (this.text_type === "SpriteFontPlus"))
        {
            var lines = this.inst.lines;
	        this.content_lines.length = 0;
	        var i, line, line_cnt=lines.length;
	        for (i=0; i<line_cnt; i++)
		    {
		        this.content_lines.push(lines[i].text);
	        }
        }
        else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
        {
            this.content_lines = this.inst.copyPensMgr(this.content_lines);
        }
        return this.content_lines;
	};
	behinstProto.get_visible_text = function (start_line_index)
	{
        this.start_line_index = (start_line_index < 0)? 0:start_line_index;
        var end_index = this.start_line_index + this.visible_lines;
        if (end_index > this.total_lines_cnt)
            end_index = this.total_lines_cnt;
        return this.getSubText(this.start_line_index, end_index);
	};
	behinstProto.getSubText = function (start, end)
	{
        if (start >= end)
            return "";
        var txt;
		if ( (this.text_type === "Text") || (this.text_type === "Spritefont2") || (this.text_type === "SpriteFontPlus"))
		{
		    txt = "";
            end -= 1;
		    for (var i=start; i<=end; i++)
            {
                txt += this.content_lines[i];
                if (i < end )
			        txt += "\n";
            }
		}
		else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
		{
            var si = this.content_lines.getLineStartChartIndex(start);
            var ei = this.content_lines.getLineEndChartIndex(end-1);
            txt = this.content_lines.getSliceTagText(si, ei+1);
		}
        return txt;
	};
	behinstProto.get_total_lines_cnt = function ()
	{
        var cnt;
        if ((this.text_type === "Text") || (this.text_type === "Spritefont2") || (this.text_type === "SpriteFontPlus"))
        {
	        cnt = this.content_lines.length;
        }
        else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
        {
            cnt = this.content_lines.getLines().length;
        }
        return cnt;
	};
	behinstProto.SetContent = function ()
	{
        var inst = this.inst;
        this.SetText(this.content);         // start from line 0
        var ctx = (this.runtime.enableWebGL)?
                  this._get_webgl_ctx():this.runtime.ctx;
        inst.draw(ctx);                      // call this function to get lines
        this.copy_content_lines();
	    this.total_lines_cnt = this.get_total_lines_cnt();
		var line_height = this.get_line_height();
	    this.visible_lines = Math.floor(inst.height/line_height);
        if ((inst.height%line_height) == 0)
            this.visible_lines -= 1;
        this.SetText("");     // clean remain text
        this.SetText(this.get_visible_text(this.start_line_index));
	};
	behinstProto.get_line_height = function ()
	{
	    var line_height, inst=this.inst;
        if (this.text_type == "Text")
	        line_height = inst.pxHeight;
        else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
	        line_height = inst.pxHeight;
	    else if ((this.text_type == "Spritefont2") || (this.text_type === "SpriteFontPlus"))
			line_height = (inst.characterHeight * inst.characterScale) + inst.lineHeight;
;
	    return line_height;
    };
	behinstProto.SetText = function (content)
	{
	    if (this.SetText_handler == null)
		    return;
        if  ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
        {
            var is_force_render_save = this.inst.is_force_render;
            this.inst.is_force_render = false;
        }
		this.SetText_handler.call(this.inst, content); // set text
        if  ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
        {
            this.inst.is_force_render = is_force_render_save;
        }
	};
    behinstProto._get_webgl_ctx = function ()
	{
        var inst = this.inst;
        var ctx = inst.myctx;
		if (!ctx)
		{
			inst.mycanvas = document.createElement("canvas");
            var scaledwidth = Math.ceil(inst.layer.getScale()*inst.width);
            var scaledheight = Math.ceil(inst.layer.getAngle()*inst.height);
			inst.mycanvas.width = scaledwidth;
			inst.mycanvas.height = scaledheight;
			inst.lastwidth = scaledwidth;
			inst.lastheight = scaledheight;
			inst.myctx = inst.mycanvas.getContext("2d");
            ctx = inst.myctx;
		}
        return ctx;
	};
	behinstProto.saveToJSON = function ()
	{
		return { "raw" : this.content,
		         "lcnt": this.total_lines_cnt,
		         "vlcnt": this.visible_lines,
		         "lper": this.line_pos_percent,
		         "start": this.start_line_index,
		          };
	};
	behinstProto.loadFromJSON = function (o)
	{
        this.content = o["raw"];
	    this.total_lines_cnt = o["lcnt"];
	    this.visible_lines = o["vlcnt"];
        this.line_pos_percent = o["lper"];
        this.start_line_index = o["start"];
	};
	behinstProto.afterLoad = function ()
	{
        this.SetContent();    // get this.content_lines back
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	Cnds.prototype.IsLastPage = function ()
	{
		return (this.start_line_index + this.visible_lines >= this.total_lines_cnt);
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
    var _param2string = function (param)
    {
        if (typeof param === "number")
            param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
        return param.toString();
    };
	Acts.prototype.SetContent = function(param)
	{
        this.content = _param2string(param);
		this.start_line_index = 0;
        this.SetContent();
	};
	Acts.prototype.ScrollToPercent = function(percent)
	{
        this.redraw_text();
        this.line_pos_percent = cr.clamp(percent, 0, 1);
        var start_line_index = this.perent2line(this.line_pos_percent);
        this.SetText(this.get_visible_text(start_line_index));
	};
	Acts.prototype.AppendContent = function(param)
	{
        this.content += _param2string(param);
        this.text_changed = true;
	};
	Acts.prototype.ScrollToLineIndex = function(line_index)
	{
        this.redraw_text();
        this.SetText(this.get_visible_text(line_index));
	};
	Acts.prototype.NextLine = function()
	{
        this.redraw_text();
        this.SetText(this.get_visible_text(this.start_line_index+1));
	};
	Acts.prototype.PreviousLine = function()
	{
        this.redraw_text();
        this.SetText(this.get_visible_text(this.start_line_index-1));
	};
	Acts.prototype.NextPage = function()
	{
        this.redraw_text();
        this.SetText(this.get_visible_text(this.start_line_index+this.visible_lines));
	};
	Acts.prototype.PreviousPage = function()
	{
        this.redraw_text();
        this.SetText(this.get_visible_text(this.start_line_index-this.visible_lines));
	};
	Acts.prototype.ScrollToPageIndex = function(page_index)
	{
        this.redraw_text();
        this.SetText(this.get_visible_text(page_index*this.visible_lines));
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
	Exps.prototype.Text = function(ret)
	{
		ret.set_string(this.content);
	};
	Exps.prototype.TotalCnt = function(ret)
	{
		ret.set_int(this.total_lines_cnt);
	};
	Exps.prototype.VisibleCnt = function(ret)
	{
		ret.set_int(this.visible_lines);
	};
	Exps.prototype.CurrIndex = function(ret)
	{
		ret.set_int(this.start_line_index);
	};
	Exps.prototype.CurrLastIndex = function(ret)
	{
        var cur_last = this.start_line_index + this.visible_lines-1;
        var last_index = this.total_lines_cnt -1;
        if (cur_last > last_index)
            cur_last = last_index;
		ret.set_int(cur_last);
	};
	Exps.prototype.Lines = function(ret, start, end)
	{
        if (start < 0)
            start = 0;
        if (end > this.total_lines_cnt)
            end = this.total_lines_cnt;
        var text;
        if (end > start)
            text = this.getSubText(start, end);
        else
            text = "";
		ret.set_string(text);
	};
}());
;
;
cr.behaviors.Rex_text_typing = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rex_text_typing.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
        this.timeline = null;
        this.timelineUid = -1;    // for loading
	};
    behtypeProto._timeline_get = function ()
    {
        if (this.timeline != null)
            return this.timeline;
;
        var plugins = this.runtime.types;
        var name, inst;
        for (name in plugins)
        {
            inst = plugins[name].instances[0];
            if (inst instanceof cr.plugins_.Rex_TimeLine.prototype.Instance)
            {
                this.timeline = inst;
                return this.timeline;
            }
        }
;
        return null;
    };
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
        this.isLineBreak = (this.properties[0] === 1);
        this.typing_timer = null;
        this.typing_speed = 0;
        this.typing_index = 0;
        this.content = "";
        this.typing_content = null;
        this.raw_text_length = 0;
        this.timer_save = null;
		this.text_type = this.get_text_type();
		this.SetText_handler = this.get_setText_handler(this.text_type);
	};
   	behinstProto.get_text_type = function ()
	{
	    var text_type;
        if (cr.plugins_.Text &&
		    (this.inst instanceof cr.plugins_.Text.prototype.Instance))
	        text_type = "Text";
	    else if (cr.plugins_.Spritefont2 &&
		         (this.inst instanceof cr.plugins_.Spritefont2.prototype.Instance))
			text_type = "Spritefont2";
	    else if (cr.plugins_.TextBox &&
		         (this.inst instanceof cr.plugins_.TextBox.prototype.Instance))
		    text_type = "TextBox";
	    else if (cr.plugins_.rex_TagText &&
		         (this.inst instanceof cr.plugins_.rex_TagText.prototype.Instance))
		    text_type = "rex_TagText";
	    else if (cr.plugins_.rex_bbcodeText &&
		         (this.inst instanceof cr.plugins_.rex_bbcodeText.prototype.Instance))
		    text_type = "rex_bbcodeText";
	    else if (cr.plugins_.SpriteFontPlus &&
		         (this.inst instanceof cr.plugins_.SpriteFontPlus.prototype.Instance))
			text_type = "SpriteFontPlus";
		else
		    text_type = "";
		return text_type;
	};
	behinstProto.get_setText_handler = function (text_type)
	{
	    var set_text_handler;
        if (text_type === "Text")
	        set_text_handler = cr.plugins_.Text.prototype.acts.SetText;
	    else if (text_type === "Spritefont2")
			set_text_handler = cr.plugins_.Spritefont2.prototype.acts.SetText;
	    else if (text_type === "TextBox")
			set_text_handler = cr.plugins_.TextBox.prototype.acts.SetText;
	    else if (text_type === "rex_TagText")
			set_text_handler = cr.plugins_.rex_TagText.prototype.acts.SetText;
	    else if (this.text_type === "rex_bbcodeText")
			set_text_handler = cr.plugins_.rex_bbcodeText.prototype.acts.SetText;
	    else if (this.text_type === "SpriteFontPlus")
			set_text_handler = cr.plugins_.SpriteFontPlus.prototype.acts.SetText;
	    else
		    set_text_handler = null;
	    return set_text_handler;
    };
	behinstProto.onDestroy = function()
	{
        this.typing_timer_remove();
	};
	behinstProto.typing_timer_remove = function ()
	{
        if (this.typing_timer != null)
            this.typing_timer.Remove();
    };
	behinstProto.tick = function ()
	{
	};
	behinstProto.get_rawTextLength = function (content)
	{
	    var len;
		if ((this.text_type === "Text") ||
		    (this.text_type === "Spritefont2") || (this.text_type === "SpriteFontPlus") ||
			(this.text_type === "TextBox"))
		    len = content.length;
        else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
            len = this.inst.getRawText(content).length;
        else
            len = 0;
        return len;
	};
	behinstProto.SetText = function (content, start_index, end_index)
	{
	    if (this.SetText_handler == null)
		    return;
	    if (start_index == null)
	        start_index = 0;
	    if (end_index == null)
	        end_index = this.get_rawTextLength(content);
		if ((this.text_type == "Text") ||
		   (this.text_type == "Spritefont2") || (this.text_type === "SpriteFontPlus") ||
		   (this.text_type == "TextBox"))
		{
		    content = content.slice(start_index, end_index);
            this.SetText_handler.call(this.inst, content);
        }
        else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
        {
            content = this.inst.getSubText(start_index, end_index, content);
            this.SetText_handler.call(this.inst, content);
        }
	};
    behinstProto._get_timer = function ()
    {
        var timer = this.typing_timer;
        if  (timer == null)
        {
            var timeline = this.type._timeline_get();
;
            timer = timeline.CreateTimer(on_timeout);
            timer.plugin = this;
        }
        return timer;
    };
	behinstProto.start_typing = function (text, speed, start_index)
	{
        if (this.isLineBreak)
        {
            text = this.lineBreakContent(text);
        }
	    this.raw_text_length = this.get_rawTextLength(text);
        if (speed != 0)
        {
            if (start_index == null)
                start_index = 1;
            this.typing_timer = this._get_timer();
            this.typing_content = text;
            this.typing_speed = speed;
            this.typing_index = start_index;
            this.typing_timer.Start(0);
        }
        else
        {
            this.typing_index = this.raw_text_length;
            this.SetText(text, 0, this.typing_index);
            this.runtime.trigger(cr.behaviors.Rex_text_typing.prototype.cnds.OnTypingCompleted, this.inst);
        }
    };
    var on_timeout = function ()
    {
        this.plugin.text_typing_handler();
    };
	behinstProto.text_typing_handler = function()
	{
        this.SetText(this.typing_content, 0, this.typing_index);
        this.runtime.trigger(cr.behaviors.Rex_text_typing.prototype.cnds.OnTextTyping, this.inst);
        this.typing_index += 1;
        if (this.typing_index <= this.raw_text_length)
            this.typing_timer.Restart(this.typing_speed);
        else
        {
            this.typing_index = this.raw_text_length;
            this.typing_content = null;
            this.runtime.trigger(cr.behaviors.Rex_text_typing.prototype.cnds.OnTypingCompleted, this.inst);
        }
	};
	behinstProto.is_typing = function ()
	{
        return (this.typing_timer)? this.typing_timer.IsActive():false;
	};
    behinstProto._get_webgl_ctx = function ()
	{
        var inst = this.inst;
        var ctx = inst.myctx;
		if (!ctx)
		{
			inst.mycanvas = document.createElement("canvas");
            var scaledwidth = Math.ceil(inst.layer.getScale()*inst.width);
            var scaledheight = Math.ceil(inst.layer.getAngle()*inst.height);
			inst.mycanvas.width = scaledwidth;
			inst.mycanvas.height = scaledheight;
			inst.lastwidth = scaledwidth;
			inst.lastheight = scaledheight;
			inst.myctx = inst.mycanvas.getContext("2d");
            ctx = inst.myctx;
		}
        return ctx;
	};
	behinstProto.drawText = function (text)
	{
        this.SetText(text);
        var inst = this.inst;
        var ctx = (this.runtime.enableWebGL)?
                  this._get_webgl_ctx():this.runtime.ctx;
        inst.draw(ctx);                      // call this function to get lines
	};
    behinstProto.lineBreakContent = function (source)
	{
        this.drawText(source);
        var content;
		if (this.text_type === "Text")
		{
			content = this.inst.lines.join("\n");
		}
		else if ((this.text_type === "Spritefont2") || (this.text_type === "SpriteFontPlus"))
		{
			var cnt = this.inst.lines.length;
			var lines = [];
			for(var i=0; i<cnt; i++)
			{
				lines.push(this.inst.lines[i].text);
			}
			content = lines.join("\n");
		}
        else if ((this.text_type === "rex_TagText") || (this.text_type === "rex_bbcodeText"))
        {
            var pensMgr = this.inst.copyPensMgr();
            var cnt = pensMgr.getLines().length;
			var addNewLine=false;
			content = "";
            for (var i=0; i<cnt; i++)
            {
			  if (addNewLine)
			    content += "\n";
              var si = pensMgr.getLineStartChartIndex(i);
              var ei = pensMgr.getLineEndChartIndex(i);
              var txt = pensMgr.getSliceTagText(si, ei+1);
              content += txt;
			  addNewLine = (txt.indexOf("\n") === -1);
			}
        }
	    return content || "";
	};
	behinstProto.saveToJSON = function ()
	{
		return { "c": this.content,
                 "tc": this.typing_content,
		         "spd" : this.typing_speed,
		         "i" : this.typing_index,
		         "tim": (this.typing_timer != null)? this.typing_timer.saveToJSON() : null,
                 "tluid": (this.type.timeline != null)? this.type.timeline.uid: (-1)
                };
	};
	behinstProto.loadFromJSON = function (o)
	{
	    this.content = o["c"];
        this.typing_content = o["tc"];
	    this.typing_speed = o["spd"];
	    this.typing_index = o["i"];
        this.timer_save = o["tim"];
        this.type.timelineUid = o["tluid"];
	};
	behinstProto.afterLoad = function ()
	{
		if (this.type.timelineUid === -1)
			this.type.timeline = null;
		else
		{
			this.type.timeline = this.runtime.getObjectByUID(this.type.timelineUid);
;
		}
        if (this.timer_save == null)
            this.typing_timer = null;
        else
        {
            this.typing_timer = this.type.timeline.LoadTimer(this.timer_save, on_timeout);
            this.typing_timer.plugin = this;
        }
        this.timers_save = null;
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
    Cnds.prototype.OnTextTyping = function ()
	{
		return true;
	};
    Cnds.prototype.OnTypingCompleted = function ()
	{
		return true;
	};
	Cnds.prototype.IsTextTyping = function ()
	{
        return this.is_typing();
	};
	function Acts() {};
	behaviorProto.acts = new Acts();
    Acts.prototype.SetupTimer = function (timeline_objs)
	{
        var timeline = timeline_objs.instances[0];
        if (timeline.check_name == "TIMELINE")
            this.type.timeline = timeline;
        else
            alert ("Text-typing should connect to a timeline object");
	};
	Acts.prototype.TypeText = function(param, speed)
	{
        if (typeof param === "number")
            param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
        this.content = param.toString();
        this.start_typing(this.content, speed);
	};
	Acts.prototype.SetTypingSpeed = function(speed)
	{
	    if (this.typing_speed === speed)
	        return;
        this.typing_speed = speed;
        var timer = this.typing_timer;
        if (timer == null)
            return;
        if (timer.IsActive())
        {
            timer.Restart(speed);
        }
	};
	Acts.prototype.StopTyping = function(is_show_all)
	{
        this.typing_timer_remove();
        if (is_show_all)
        {
            this.SetText(this.content);
            this.runtime.trigger(cr.behaviors.Rex_text_typing.prototype.cnds.OnTypingCompleted, this.inst);
        }
	};
	Acts.prototype.AppendText = function(param)
	{
        var start_index = this.raw_text_length;
        if (typeof param === "number")
            param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
        this.content += param.toString();
        if (!this.is_typing())
            this.start_typing(this.content, this.typing_speed, start_index);
	};
    Acts.prototype.Pause = function ()
	{
	    if (this.typing_timer == null)
	        return;
	    this.typing_timer.Suspend();
	};
    Acts.prototype.Resume = function ()
	{
	    if (this.typing_timer == null)
	        return;
	    this.typing_timer.Resume();
	};
	function Exps() {};
	behaviorProto.exps = new Exps();
    Exps.prototype.TypingSpeed = function (ret)
	{
	    ret.set_float( this.typing_speed );
	};
    Exps.prototype.TypingIndex = function (ret)
	{
	    ret.set_float( this.typing_index -1 );
	};
    Exps.prototype.Content = function (ret)
	{
	    ret.set_string( this.content );
	};
    Exps.prototype.LastTypingCharacter = function (ret)
	{
	    ret.set_string( this.content.charAt(this.typing_index-1) );
	};
}());
;
;
cr.behaviors.Rotate = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rotate.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.speed = cr.to_radians(this.properties[0]);
		this.acc = cr.to_radians(this.properties[1]);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"speed": this.speed,
			"acc": this.acc
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.speed = o["speed"];
		this.acc = o["acc"];
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		if (dt === 0)
			return;
		if (this.acc !== 0)
			this.speed += this.acc * dt;
		if (this.speed !== 0)
		{
			this.inst.angle = cr.clamp_angle(this.inst.angle + this.speed * dt);
			this.inst.set_bbox_changed();
		}
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetSpeed = function (s)
	{
		this.speed = cr.to_radians(s);
	};
	Acts.prototype.SetAcceleration = function (a)
	{
		this.acc = cr.to_radians(a);
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(cr.to_degrees(this.speed));
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(cr.to_degrees(this.acc));
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Sin = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Sin.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.i = 0;		// period offset (radians)
	};
	var behinstProto = behaviorProto.Instance.prototype;
	var _2pi = 2 * Math.PI;
	var _pi_2 = Math.PI / 2;
	var _3pi_2 = (3 * Math.PI) / 2;
	behinstProto.onCreate = function()
	{
		this.active = (this.properties[0] === 1);
		this.movement = this.properties[1]; // 0=Horizontal|1=Vertical|2=Size|3=Width|4=Height|5=Angle|6=Opacity|7=Value only
		this.wave = this.properties[2];		// 0=Sine|1=Triangle|2=Sawtooth|3=Reverse sawtooth|4=Square
		this.period = this.properties[3];
		this.period += Math.random() * this.properties[4];								// period random
		if (this.period === 0)
			this.i = 0;
		else
		{
			this.i = (this.properties[5] / this.period) * _2pi;								// period offset
			this.i += ((Math.random() * this.properties[6]) / this.period) * _2pi;			// period offset random
		}
		this.mag = this.properties[7];													// magnitude
		this.mag += Math.random() * this.properties[8];									// magnitude random
		this.initialValue = 0;
		this.initialValue2 = 0;
		this.ratio = 0;
		if (this.movement === 5)			// angle
			this.mag = cr.to_radians(this.mag);
		this.init();
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"i": this.i,
			"a": this.active,
			"mv": this.movement,
			"w": this.wave,
			"p": this.period,
			"mag": this.mag,
			"iv": this.initialValue,
			"iv2": this.initialValue2,
			"r": this.ratio,
			"lkv": this.lastKnownValue,
			"lkv2": this.lastKnownValue2
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.i = o["i"];
		this.active = o["a"];
		this.movement = o["mv"];
		this.wave = o["w"];
		this.period = o["p"];
		this.mag = o["mag"];
		this.initialValue = o["iv"];
		this.initialValue2 = o["iv2"] || 0;
		this.ratio = o["r"];
		this.lastKnownValue = o["lkv"];
		this.lastKnownValue2 = o["lkv2"] || 0;
	};
	behinstProto.init = function ()
	{
		switch (this.movement) {
		case 0:		// horizontal
			this.initialValue = this.inst.x;
			break;
		case 1:		// vertical
			this.initialValue = this.inst.y;
			break;
		case 2:		// size
			this.initialValue = this.inst.width;
			this.ratio = this.inst.height / this.inst.width;
			break;
		case 3:		// width
			this.initialValue = this.inst.width;
			break;
		case 4:		// height
			this.initialValue = this.inst.height;
			break;
		case 5:		// angle
			this.initialValue = this.inst.angle;
			break;
		case 6:		// opacity
			this.initialValue = this.inst.opacity;
			break;
		case 7:
			this.initialValue = 0;
			break;
		case 8:		// forwards/backwards
			this.initialValue = this.inst.x;
			this.initialValue2 = this.inst.y;
			break;
		default:
;
		}
		this.lastKnownValue = this.initialValue;
		this.lastKnownValue2 = this.initialValue2;
	};
	behinstProto.waveFunc = function (x)
	{
		x = x % _2pi;
		switch (this.wave) {
		case 0:		// sine
			return Math.sin(x);
		case 1:		// triangle
			if (x <= _pi_2)
				return x / _pi_2;
			else if (x <= _3pi_2)
				return 1 - (2 * (x - _pi_2) / Math.PI);
			else
				return (x - _3pi_2) / _pi_2 - 1;
		case 2:		// sawtooth
			return 2 * x / _2pi - 1;
		case 3:		// reverse sawtooth
			return -2 * x / _2pi + 1;
		case 4:		// square
			return x < Math.PI ? -1 : 1;
		};
		return 0;
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		if (!this.active || dt === 0)
			return;
		if (this.period === 0)
			this.i = 0;
		else
		{
			this.i += (dt / this.period) * _2pi;
			this.i = this.i % _2pi;
		}
		this.updateFromPhase();
	};
	behinstProto.updateFromPhase = function ()
	{
		switch (this.movement) {
		case 0:		// horizontal
			if (this.inst.x !== this.lastKnownValue)
				this.initialValue += this.inst.x - this.lastKnownValue;
			this.inst.x = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.x;
			break;
		case 1:		// vertical
			if (this.inst.y !== this.lastKnownValue)
				this.initialValue += this.inst.y - this.lastKnownValue;
			this.inst.y = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.y;
			break;
		case 2:		// size
			this.inst.width = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.inst.height = this.inst.width * this.ratio;
			break;
		case 3:		// width
			this.inst.width = this.initialValue + this.waveFunc(this.i) * this.mag;
			break;
		case 4:		// height
			this.inst.height = this.initialValue + this.waveFunc(this.i) * this.mag;
			break;
		case 5:		// angle
			if (this.inst.angle !== this.lastKnownValue)
				this.initialValue = cr.clamp_angle(this.initialValue + (this.inst.angle - this.lastKnownValue));
			this.inst.angle = cr.clamp_angle(this.initialValue + this.waveFunc(this.i) * this.mag);
			this.lastKnownValue = this.inst.angle;
			break;
		case 6:		// opacity
			this.inst.opacity = this.initialValue + (this.waveFunc(this.i) * this.mag) / 100;
			if (this.inst.opacity < 0)
				this.inst.opacity = 0;
			else if (this.inst.opacity > 1)
				this.inst.opacity = 1;
			break;
		case 8:		// forwards/backwards
			if (this.inst.x !== this.lastKnownValue)
				this.initialValue += this.inst.x - this.lastKnownValue;
			if (this.inst.y !== this.lastKnownValue2)
				this.initialValue2 += this.inst.y - this.lastKnownValue2;
			this.inst.x = this.initialValue + Math.cos(this.inst.angle) * this.waveFunc(this.i) * this.mag;
			this.inst.y = this.initialValue2 + Math.sin(this.inst.angle) * this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.x;
			this.lastKnownValue2 = this.inst.y;
			break;
		}
		this.inst.set_bbox_changed();
	};
	behinstProto.onSpriteFrameChanged = function (prev_frame, next_frame)
	{
		switch (this.movement) {
		case 2:	// size
			this.initialValue *= (next_frame.width / prev_frame.width);
			this.ratio = next_frame.height / next_frame.width;
			break;
		case 3:	// width
			this.initialValue *= (next_frame.width / prev_frame.width);
			break;
		case 4:	// height
			this.initialValue *= (next_frame.height / prev_frame.height);
			break;
		}
	};
	function Cnds() {};
	Cnds.prototype.IsActive = function ()
	{
		return this.active;
	};
	Cnds.prototype.CompareMovement = function (m)
	{
		return this.movement === m;
	};
	Cnds.prototype.ComparePeriod = function (cmp, v)
	{
		return cr.do_cmp(this.period, cmp, v);
	};
	Cnds.prototype.CompareMagnitude = function (cmp, v)
	{
		if (this.movement === 5)
			return cr.do_cmp(this.mag, cmp, cr.to_radians(v));
		else
			return cr.do_cmp(this.mag, cmp, v);
	};
	Cnds.prototype.CompareWave = function (w)
	{
		return this.wave === w;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetActive = function (a)
	{
		this.active = (a === 1);
	};
	Acts.prototype.SetPeriod = function (x)
	{
		this.period = x;
	};
	Acts.prototype.SetMagnitude = function (x)
	{
		this.mag = x;
		if (this.movement === 5)	// angle
			this.mag = cr.to_radians(this.mag);
	};
	Acts.prototype.SetMovement = function (m)
	{
		if (this.movement === 5 && m !== 5)
			this.mag = cr.to_degrees(this.mag);
		this.movement = m;
		this.init();
	};
	Acts.prototype.SetWave = function (w)
	{
		this.wave = w;
	};
	Acts.prototype.SetPhase = function (x)
	{
		this.i = (x * _2pi) % _2pi;
		this.updateFromPhase();
	};
	Acts.prototype.UpdateInitialState = function ()
	{
		this.init();
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.CyclePosition = function (ret)
	{
		ret.set_float(this.i / _2pi);
	};
	Exps.prototype.Period = function (ret)
	{
		ret.set_float(this.period);
	};
	Exps.prototype.Magnitude = function (ret)
	{
		if (this.movement === 5)	// angle
			ret.set_float(cr.to_degrees(this.mag));
		else
			ret.set_float(this.mag);
	};
	Exps.prototype.Value = function (ret)
	{
		ret.set_float(this.waveFunc(this.i) * this.mag);
	};
	behaviorProto.exps = new Exps();
}());
;
;
function trim (str) {
    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
}
cr.behaviors.rex_lunarray_Tween_mod = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.rex_lunarray_Tween_mod.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.i = 0;		// progress
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.groupUpdateProgress = function(v)
	{
		if (v > 1) v = 1;
		if (cr.lunarray_tweenProgress[this.group] = -1) cr.lunarray_tweenProgress[this.group] = v;
		if (cr.lunarray_tweenProgress[this.group] >= v) cr.lunarray_tweenProgress[this.group] = v;
	}
	behinstProto.groupSync = function()
	{
		if (this.group != "") {
			if (typeof cr.lunarray_tweenGroup === "undefined") {
				cr.lunarray_tweenGroup = {};
				cr.lunarray_tweenProgress = {};
			}
			if (typeof cr.lunarray_tweenGroup[this.group] === "undefined") {
				cr.lunarray_tweenGroup[this.group] = [];
				cr.lunarray_tweenProgress[this.group] = -1;
			}
			if (cr.lunarray_tweenGroup[this.group].indexOf(this) == -1) {
				cr.lunarray_tweenGroup[this.group].push(this);
			}
		}
	}
	behinstProto.saveState = function()
	{
		this.tweenSaveWidth = this.inst.width;
		this.tweenSaveHeight = this.inst.height;
		this.tweenSaveAngle = this.inst.angle;
		this.tweenSaveOpacity = this.inst.opacity;
		this.tweenSaveX = this.inst.x;
		this.tweenSaveY = this.inst.y;
		this.tweenSaveValue = this.value;
	}
	behinstProto.onCreate = function()
	{
		this.active = (this.properties[0] === 1);
		this.tweened = this.properties[1]; // 0=Position|1=Size|2=Width|3=Height|4=Angle|5=Opacity|6=Value only|7=Pixel Size
		this.easing = this.properties[2];
		this.initial = this.properties[3];
		this.target = this.properties[4];
		this.duration = this.properties[5];
		this.wait = this.properties[6];
		this.playmode = this.properties[7]; //0=Play Once|1=Repeat|2=Ping Pong|3=Play once and destroy|4=Loop|5=Ping Pong Stop|6=Play and stop
		this.value = this.properties[8];
		this.coord_mode = this.properties[9]; //0=Absolute|1=Relative
		this.forceInit = (this.properties[10] === 1);
		this.group = this.properties[11];
		this.setRepeatCount(this.properties[12]);
		this.targetObject = null;
		this.pingpongCounter = 0;
		if (this.playmode == 5) this.pingpongCounter = 1;
		this.groupSync();
		this.isPaused = false;
		this.initialX = this.inst.x;
		this.initialY = this.inst.y;
		this.targetX = parseFloat(this.target.split(",")[0]);
		this.targetY = parseFloat(this.target.split(",")[1]);
		this.saveState();
		this.tweenInitialX = 0;
		this.tweenInitialY = 0;
		this.tweenTargetX = 0;
		this.tweenTargetY = 0;
		this.tweenTargetAngle = 0;
		this.ratio = this.inst.height / this.inst.width;
		this.reverse = false;
		this.rewindMode = false;
		this.doTweenX = true;
		this.doTweenY = true;
		this.loop = false;
		this.initiating = 0;
		this.cooldown = 0;
		this.lastPlayMode = this.playmode;
		this.lastKnownValue = this.tweenInitialX;
		this.lastKnownX = this.tweenInitialX;
		this.lastKnownY = this.tweenInitialY;
		if (this.forceInit) this.init();
		if (this.initial == "") this.initial = "current";
		this.onStarted = false;
		this.onStartedDone = false;
		this.onWaitEnd = false;
		this.onWaitEndDone = false;
		this.onEnd = false;
		this.onEndDone = false;
		this.onCooldown = false;
		this.onCooldownDone = false;
		this.onCountEnd = false;
		if (this.active) {
			this.init();
		}
	};
	behinstProto.init = function ()
	{
		this.onStarted = false;
		if (this.initial === "") this.initial = "current";
		if (this.target === "") this.target = "current";
		var isCurrent = (this.initial === "current");
		var targetIsCurrent = (this.target === "current");
		var isTargettingObject = (this.target === "OBJ");
		if (this.target === "OBJ") {
			if (this.targetObject != null) {
				if (this.tweened == 0) {
					if (this.coord_mode == 1) //relative mode
						this.target = (this.targetObject.x-this.inst.x) + "," + (this.targetObject.y-this.inst.y);
					else //absolute mode
						this.target = (this.targetObject.x) + "," + (this.targetObject.y);
				} else if ((this.tweened == 1) || (this.tweened == 2) || (this.tweened == 3) || (this.tweened == 7)) {
					if (this.coord_mode == 1) { //relative mode
						this.target = ((this.tweened==2)?1:(this.targetObject.width)) + "," + ((this.tweened==3)?1:(this.targetObject.height));
					} else {
						this.target = ((this.tweened==2)?1:(this.targetObject.width/this.tweenSaveWidth)) + "," + ((this.tweened==3)?1:(this.targetObject.height/this.tweenSaveHeight));
					}
				} else if (this.tweened == 4) {
					if (this.coord_mode == 1) //relative mode
						this.target = cr.to_degrees(this.targetObject.angle-this.inst.angle) + "";
					else //absolute mode
						this.target = cr.to_degrees(this.targetObject.angle) + "";
				} else if (this.tweened == 5) {
					if (this.coord_mode == 1) //relative mode
						this.target = ((this.targetObject.opacity-this.inst.opacity)*100) + "";
					else //absolute mode
						this.target = (this.targetObject.opacity*100) + "";
				}
			}
		}
		if (this.tweened == 0) {
			if (targetIsCurrent) this.target = this.inst.x + "," + this.inst.y;
			if (!isCurrent) {
				if (!this.reverse) {
					if (this.playmode != 1) {
						this.inst.x = parseFloat(this.initial.split(",")[0]);
						this.inst.y = parseFloat(this.initial.split(",")[1]);
					}
				}
			} else {
				if (this.coord_mode == 1) {
					this.initial = this.inst.x + "," + this.inst.y;
				} else {
					this.initial = this.tweenSaveX + "," + this.tweenSaveY;
				}
			}
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.x = this.tweenSaveX;
					this.inst.y = this.tweenSaveY;
				}
				this.initialX = this.inst.x;
				this.initialY = this.inst.y;
				if (!this.reverse) {
					this.targetX = parseFloat(this.target.split(",")[0]);
					this.targetY = parseFloat(this.target.split(",")[1]);
				} else {
					this.targetX = -parseFloat(this.target.split(",")[0]);
					this.targetY = -parseFloat(this.target.split(",")[1]);
				}
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				this.tweenTargetX = this.tweenInitialX + this.targetX;
				this.tweenTargetY = this.tweenInitialY + this.targetY;
			} else {
				if (!this.reverse) {
					this.inst.x = this.tweenSaveX;
					this.inst.y = this.tweenSaveY;
					this.targetX = parseFloat(this.target.split(",")[0]);
					this.targetY = parseFloat(this.target.split(",")[1]);
				} else {
					this.inst.x = parseFloat(this.target.split(",")[0]);
					this.inst.y = parseFloat(this.target.split(",")[1]);
					this.targetX = this.tweenSaveX;
					this.targetY = this.tweenSaveY;
				}
				this.initialX = this.inst.x;
				this.initialY = this.inst.y;
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
				if (this.playmode == -6) {
					this.tweenTargetX = this.tweenSaveX;
					this.tweenTargetY = this.tweenSaveY;
				}
			}
		} else if ((this.tweened == 1) || (this.tweened == 2) || (this.tweened == 3)) {
			if (targetIsCurrent) this.target = "1,1";
			if (this.initial == "current") this.initial = "1,1";
			this.initial = "" + this.initial;
			this.target = "" + this.target;
			if (this.tweened == 2) {
				if (this.initial.indexOf(',') == -1) this.initial = parseFloat(this.initial) + ",1";
				if (this.target.indexOf(',') == -1) this.target = parseFloat(this.target) + ",1";
			} else if (this.tweened == 3) {
				if (this.initial.indexOf(',') == -1) this.initial = "1," + parseFloat(this.initial);
				if (this.target.indexOf(',') == -1) this.target = "1," + parseFloat(this.target);
			} else {
				if (this.initial.indexOf(',') == -1) this.initial = parseFloat(this.initial) + "," + parseFloat(this.initial);
				if (this.target.indexOf(',') == -1) this.target = parseFloat(this.target) + "," + parseFloat(this.target);
			}
			var ix = parseFloat(this.initial.split(",")[0]);
			var iy = parseFloat(this.initial.split(",")[1]);
			this.doTweenX = true;
			var tx = parseFloat(this.target.split(",")[0]);
			if ((tx == 0) || (isNaN(tx)))	this.doTweenX = false;
			if (this.tweened == 3) this.doTweenX = false;
			this.doTweenY = true;
			var ty = parseFloat(this.target.split(",")[1]);
			if ((ty == 0) || (isNaN(ty)))	this.doTweenY = false;
			if (this.tweened == 2) this.doTweenY = false;
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.width = this.tweenSaveWidth;
					this.inst.height = this.tweenSaveHeight;
				}
				if (!isCurrent) {
					if (!this.reverse) {
						this.inst.width = this.inst.width * ix;
						this.inst.height = this.inst.height * iy;
					} else {
						this.inst.width = this.inst.width * tx;
						this.inst.height = this.inst.height * ty;
					}
				}
				this.initialX = this.inst.width;
				this.initialY = this.inst.height;
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				if (!this.reverse) {
					this.targetX = this.initialX * tx;
					this.targetY = this.initialY * ty;
				} else {
					this.targetX = this.initialX * ix/tx;
					this.targetY = this.initialY * iy/ty;
				}
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
			} else {
				if (!isCurrent) {
					if (!this.reverse) {
						this.inst.width = this.tweenSaveWidth * ix;
						this.inst.height = this.tweenSaveHeight * iy;
					} else {
						this.inst.width = this.tweenSaveWidth * tx;
						this.inst.height = this.tweenSaveHeight * ty;
					}
				}
				this.initialX = this.inst.width;
				this.initialY = this.inst.height;
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				if (!this.reverse) {
					this.targetX = this.tweenSaveWidth * tx;
					this.targetY = this.tweenSaveHeight * ty;
				} else {
					this.targetX = this.tweenSaveWidth * ix;
					this.targetY = this.tweenSaveHeight * iy;
				}
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
			}
			if (this.playmode == -6) {
				this.tweenTargetX = this.tweenSaveWidth * ix;
				this.tweenTargetY = this.tweenSaveHeight * iy;
			}
		} else if (this.tweened == 4) {
			if (targetIsCurrent) this.target = cr.to_degrees(this.inst.angle);
			if (this.initial != "current") {
				if (!this.reverse) {
					if (this.playmode != 1) { //if repeat, don't initialize
						this.inst.angle = cr.to_radians(parseFloat(this.initial.split(",")[0]));
					}
				}
			}
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.angle = this.tweenSaveAngle;
				}
				this.initialX = this.inst.angle;
				if (this.reverse) {
					this.targetX = this.inst.angle - cr.to_radians(parseFloat(this.target.split(",")[0]));
				} else {
					this.targetX = this.inst.angle + cr.to_radians(parseFloat(this.target.split(",")[0]));
				}
				this.tweenInitialX = this.initialX;
				this.tweenTargetX = cr.to_degrees(this.targetX);
			} else {
				if (this.reverse) {
					this.inst.angle = cr.to_radians(parseFloat(this.target.split(",")[0]));;
					this.initialX = this.inst.angle;
					this.targetX = this.tweenSaveAngle;
					this.tweenInitialX = this.initialX;
					this.tweenTargetX = cr.to_degrees(this.targetX);
				} else {
					this.inst.angle = this.tweenSaveAngle;
					this.initialX = this.inst.angle;
					this.targetX = cr.to_radians(parseFloat(this.target.split(",")[0]));
					this.tweenInitialX = this.initialX;
					this.tweenTargetX = cr.to_degrees(this.targetX);
				}
			}
			if (this.playmode == -6) {
				this.tweenTargetX = cr.to_degrees(this.tweenSaveAngle);
			}
			this.tweenTargetAngle = cr.to_radians(this.tweenTargetX);
		} else if (this.tweened == 5) {
			if (this.initial == "current") this.initial = this.inst.opacity;
			if (targetIsCurrent) this.target = ""+this.inst.opacity;
			if (!isCurrent) {
				if (!this.reverse) {
					if (this.playmode != 1) { //if repeat, don't initialize
						this.inst.opacity = parseFloat(this.initial.split(",")[0]) / 100;
					}
				}
			}
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.opacity = this.tweenSaveOpacity;
				}
				this.initialX = this.inst.opacity;
				this.tweenInitialX = this.initialX;
				if (!this.reverse) {
					this.targetX = parseFloat(this.target.split(",")[0]) / 100;
				} else {
					this.targetX = -parseFloat(this.target.split(",")[0]) / 100;
				}
				this.tweenTargetX = this.tweenInitialX + this.targetX;
			} else {
				this.initialX = this.inst.opacity;
				if (!this.reverse) {
					this.tweenInitialX = this.initialX;
					this.targetX = parseFloat(this.target.split(",")[0]) / 100;
				} else {
					this.tweenInitialX = parseFloat(this.target.split(",")[0]) / 100;
					this.targetX = parseFloat(this.initial.split(",")[0]) / 100;
				}
				this.tweenTargetX = this.targetX;
			}
			if (this.playmode == -6) {
				this.tweenTargetX = this.tweenSaveOpacity;
			}
		} else if (this.tweened == 6) {
			if (isNaN(this.value)) this.value = 0;
			if (this.initial == "current") this.initial = ""+this.value;
			if (targetIsCurrent) this.target = ""+this.value;
			if (!isCurrent) {
				if (!this.reverse) {
					if (this.playmode != 1) { //if repeat, don't initialize
						this.value = parseFloat(this.initial.split(",")[0]);
					}
				}
			}
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.value = this.tweenSaveValue;
				}
				if (!isCurrent) {
					if (!this.reverse) {
						this.value = parseFloat(this.initial.split(",")[0]);
					} else {
						this.value = parseFloat(this.target.split(",")[0]);
					}
				}
				this.initialX = this.value;
				if (!this.reverse) {
					this.targetX = this.initialX + parseFloat(this.target.split(",")[0]);
				} else {
					this.targetX = this.initialX - parseFloat(this.target.split(",")[0]);
				}
				this.tweenInitialX = this.initialX;
				this.tweenTargetX = this.targetX;
			} else {
				if (!isCurrent) {
					if (!this.reverse) {
						this.value = parseFloat(this.initial.split(",")[0]);
					} else {
						this.value = parseFloat(this.target.split(",")[0]);
					}
				}
				this.initialX = this.value;
				if (!this.reverse) {
					this.targetX = parseFloat(this.target.split(",")[0]);
				} else {
					this.targetX = parseFloat(this.initial.split(",")[0]);
				}
				this.tweenInitialX = this.initialX;
				this.tweenTargetX = this.targetX;
			}
			if (this.playmode == -6) {
				this.tweenTargetX = this.tweenSaveValue;
			}
		} else if (this.tweened == 7) {
			if (targetIsCurrent) this.target = this.inst.width + "," + this.inst.height;
			if (this.initial != "current") {
				if (!this.reverse) {
					if (this.playmode != 1) { //if repeat, don't initialize
						this.inst.width = parseFloat(this.initial.split(",")[0]);
						this.inst.height = parseFloat(this.initial.split(",")[1]);
					}
				}
			}
			this.doTweenX = true;
			var tx = parseFloat(this.target.split(",")[0]);
			if ((tx < 0) || (isNaN(tx)))	this.doTweenX = false;
			this.doTweenY = true;
			var ty = parseFloat(this.target.split(",")[1]);
			if ((ty < 0) || (isNaN(ty)))	this.doTweenY = false;
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.width = this.tweenSaveWidth;
					this.inst.height = this.tweenSaveHeight;
				}
				this.initialX = this.inst.width;
				this.initialY = this.inst.height;
				if (!this.reverse) {
					this.targetX = this.initialX + parseFloat(this.target.split(",")[0]);
					this.targetY = this.initialY + parseFloat(this.target.split(",")[1]);
				} else {
					this.targetX = this.initialX - parseFloat(this.target.split(",")[0]);
					this.targetY = this.initialY - parseFloat(this.target.split(",")[1]);
				}
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
			} else {
				if (!isCurrent) {
					if (!this.reverse) {
						this.inst.width = this.tweenSaveWidth;
						this.inst.height = this.tweenSaveHeight;
					} else {
						this.inst.width = parseFloat(this.target.split(",")[0]);
						this.inst.height = parseFloat(this.target.split(",")[1]);
					}
				}
				this.initialX = this.inst.width;
				this.initialY = this.inst.height;
				if (!this.reverse) {
					this.targetX = parseFloat(this.target.split(",")[0]);
					this.targetY = parseFloat(this.target.split(",")[1]);
				} else {
					this.targetX = this.tweenSaveWidth;
					this.targetY = this.tweenSaveHeight;
				}
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
			}
			if (this.playmode == -6) {
				this.tweenTargetX = this.tweenSaveWidth;
				this.tweenTargetY = this.tweenSaveHeight;
			}
		} else {
;
		}
		this.lastKnownValue = this.tweenInitialX;
		this.lastKnownX = this.tweenInitialX;
		this.lastKnownY = this.tweenInitialY;
		this.initiating = parseFloat(this.wait.split(",")[0]);
		this.cooldown = parseFloat(this.wait.split(",")[1]);
		if ((this.initiating < 0) || (isNaN(this.initiating)))	this.initiating = 0;
		if ((this.cooldown < 0) || (isNaN(this.cooldown)))	this.cooldown = 0;
		if (isCurrent) this.initial = "current";
		if (targetIsCurrent) this.target = "current";
		if (isTargettingObject) this.target = "OBJ";
	};
	function easeOutBounce(t,b,c,d) {
		if ((t/=d) < (1/2.75)) {
			return c*(7.5625*t*t) + b;
		} else if (t < (2/2.75)) {
			return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
		} else if (t < (2.5/2.75)) {
			return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
		} else {
			return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
		}
	}
	behinstProto.easeFunc = function (t, b, c, d)
	{
		switch (this.easing) {
		case 0:		// linear
			return c*t/d + b;
		case 1:		// easeInQuad
			return c*(t/=d)*t + b;
		case 2:		// easeOutQuad
			return -c *(t/=d)*(t-2) + b;
		case 3:		// easeInOutQuad
			if ((t/=d/2) < 1) return c/2*t*t + b;
			return -c/2 * ((--t)*(t-2) - 1) + b;
		case 4:		// easeInCubic
			return c*(t/=d)*t*t + b;
		case 5:		// easeOutCubic
			return c*((t=t/d-1)*t*t + 1) + b;
		case 6:		// easeInOutCubic
			if ((t/=d/2) < 1)
				return c/2*t*t*t + b;
			return c/2*((t-=2)*t*t + 2) + b;
		case 7:		// easeInQuart
			return c*(t/=d)*t*t*t + b;
		case 8:		// easeOutQuart
			return -c * ((t=t/d-1)*t*t*t - 1) + b;
		case 9:		// easeInOutQuart
			if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
			return -c/2 * ((t-=2)*t*t*t - 2) + b;
		case 10:		// easeInQuint
			return c*(t/=d)*t*t*t*t + b;
		case 11:		// easeOutQuint
			return c*((t=t/d-1)*t*t*t*t + 1) + b;
		case 12:		// easeInOutQuint
			if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
			return c/2*((t-=2)*t*t*t*t + 2) + b;
		case 13:		// easeInCircle
			return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
		case 14:		// easeOutCircle
			return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
		case 15:		// easeInOutCircle
			if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
			return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
		case 16:		// easeInBack
			var s = 0;
			if (s==0) s = 1.70158;
			return c*(t/=d)*t*((s+1)*t - s) + b;
		case 17:		// easeOutBack
			var s = 0;
			if (s==0) s = 1.70158;
			return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
		case 18:		// easeInOutBack
			var s = 0;
			if (s==0) s = 1.70158;
			if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
			return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
		case 19:	//easeInElastic
			var a = 0;
			var p = 0;
			if (t==0) return b;  if ((t/=d)==1) return b+c; if (p==0) p=d*.3;
			if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (c/a);
			return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
		case 20:	//easeOutElastic
			var a = 0;
			var p = 0;
			if (t==0) return b;  if ((t/=d)==1) return b+c;  if (p == 0) p=d*.3;
			if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (c/a);
			return (a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b);
		case 21:	//easeInOutElastic
			var a = 0;
			var p = 0;
			if (t==0) return b;
			if ((t/=d/2)==2) return b+c;
			if (p==0) p=d*(.3*1.5);
			if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (c/a);
			if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
			return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
		case 22:	//easeInBounce
			return c - easeOutBounce(d-t, 0, c, d) + b;
		case 23:	//easeOutBounce
			return easeOutBounce(t,b,c,d);
		case 24:	//easeInOutBounce
			if (t < d/2) return (c - easeOutBounce(d-(t*2), 0, c, d) + b) * 0.5 +b;
			else return easeOutBounce(t*2-d, 0, c, d) * .5 + c*.5 + b;
		case 25:	//easeInSmoothstep
			var mt = (t/d) / 2;
			return (2*(mt * mt * (3 - 2*mt)));
		case 26:	//easeOutSmoothstep
			var mt = ((t/d) + 1) / 2;
			return ((2*(mt * mt * (3 - 2*mt))) - 1);
		case 27:	//easeInOutSmoothstep
			var mt = (t / d);
			return (mt * mt * (3 - 2*mt));
		};
		return 0;
	};
	behinstProto.saveToJSON = function ()
	{
		return {
		    "i": this.i,
			"active": this.active,
			"tweened": this.tweened,
			"easing": this.easing,
			"initial": this.initial,
			"target": this.target,
			"duration": this.duration,
			"wait": this.wait,
			"playmode": this.playmode,
			"value": this.value,
			"coord_mode": this.coord_mode,
			"forceInit": this.forceInit,
			"group": this.group,
			"repeatcount":this.repeatcount,
			"targetObject": this.targetObject,
			"pingpongCounter": this.pingpongCounter,
			"isPaused": this.isPaused,
			"initialX": this.initialX,
			"initialY": this.initialY,
			"targetX": this.targetX,
			"targetY": this.targetY,
			"tweenSaveWidth": this.tweenSaveWidth,
			"tweenSaveHeight": this.tweenSaveHeight,
			"tweenSaveAngle": this.tweenSaveAngle,
			"tweenSaveX": this.tweenSaveX,
			"tweenSaveY": this.tweenSaveY,
			"tweenSaveValue": this.tweenSaveValue,
			"tweenInitialX": this.tweenInitialX,
			"tweenInitialY": this.tweenInitialY,
			"tweenTargetX": this.tweenTargetX,
			"tweenTargetY": this.tweenTargetY,
			"tweenTargetAngle": this.tweenTargetAngle,
			"ratio": this.ratio,
			"reverse": this.reverse,
			"rewindMode": this.rewindMode,
			"doTweenX": this.doTweenX,
			"doTweenY": this.doTweenY,
			"loop": this.loop,
			"initiating": this.initiating,
			"cooldown": this.cooldown,
			"lastPlayMode": this.lastPlayMode,
			"lastKnownValue": this.lastKnownValue,
			"lastKnownX": this.lastKnownX,
			"lastKnownY": this.lastKnownY,
			"onStarted": this.onStarted,
			"onStartedDone": this.onStartedDone,
			"onWaitEnd": this.onWaitEnd,
			"onWaitEndDone": this.onWaitEndDone,
			"onEnd": this.onEnd,
			"onEndDone": this.onEndDone,
			"onCooldown": this.onCooldown,
			"onCooldownDone": this.onCooldownDone,
			"onCountEnd":this.onCountEnd,
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
			this.i = o["i"];
			this.active = o["active"];
			this.tweened = o["tweened"];
			this.easing = o["easing"];
			this.initial = o["initial"];
			this.target = o["target"];
			this.duration = o["duration"];
			this.wait = o["wait"];
			this.playmode = o["playmode"];
			this.value = o["value"];
			this.coord_mode = o["coord_mode"];
			this.forceInit = o["forceInit"];
			this.group = o["group"];
			this.repeatcount = o["repeatcount"];
			this.targetObject = o["targetObject"];
			this.pingpongCounter = o["pingpongCounter"];
			this.isPaused = o["isPaused"];
			this.initialX = o["initialX"];
			this.initialY = o["initialY"];
			this.targetX = o["targetX"];
			this.targetY = o["targetY"];
			this.tweenSaveWidth = o["tweenSaveWidth"];
			this.tweenSaveHeight = o["tweenSaveHeight"];
			this.tweenSaveAngle = o["tweenSaveAngle"];
			this.tweenSaveX = o["tweenSaveX"];
			this.tweenSaveY = o["tweenSaveY"];
			this.tweenSaveValue = o["tweenSaveValue"];
			this.tweenInitialX = o["tweenInitialX"];
			this.tweenInitialY = o["tweenInitialY"];
			this.tweenTargetX = o["tweenTargetX"];
			this.tweenTargetY = o["tweenTargetY"];
			this.tweenTargetAngle = o["tweenTargetAngle"];
			this.ratio = o["ratio"];
			this.reverse = o["reverse"];
			this.rewindMode = o["rewindMode"];
			this.doTweenX = o["doTweenX"];
			this.doTweenY = o["doTweenY"];
			this.loop = o["loop"];
			this.initiating = o["initiating"];
			this.cooldown = o["cooldown"];
			this.lastPlayMode = o["lastPlayMode"];
			this.lastKnownValue = o["lastKnownValue"];
			this.lastKnownX = o["lastKnownX"];
			this.lastKnownY = o["lastKnownY"];
			this.onStarted = o["onStarted"];
			this.onStartedDone = o["onStartedDone"];
			this.onWaitEnd = o["onWaitEnd"];
			this.onWaitEndDone = o["onWaitEndDone"]
			this.onEnd = o["onEnd"];
			this.onEndDone = o["onEndDone"];
			this.onCooldown = o["onCooldown"];
			this.onCooldownDone = o["onCooldownDone"];
			this.onCountEnd = o["onCountEnd"];
			this.groupSync();
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		var isForceStop = (this.i == -1);
		if (!this.active || dt === 0)
			return;
		if (this.i == 0) {
			if (!this.onStarted) {
				this.onStarted = true;
				this.onStartedDone = false;
				this.onWaitEnd = false;
				this.onWaitEndDone = false;
				this.onEnd = false;
				this.onEndDone = false;
				this.onCooldown = false;
				this.onCooldownDone = false;
				this.runtime.trigger(cr.behaviors.rex_lunarray_Tween_mod.prototype.cnds.OnStart, this.inst);
				this.onStartedDone = true;
			}
		}
		if (this.i == -1) {
			this.i = this.initiating + this.duration + this.cooldown;
		} else {
			this.i += dt;
		}
		if (this.i <= this.initiating) {
			return;
		} else {
			if (this.onWaitEnd == false) {
				this.onWaitEnd = true;
				this.runtime.trigger(cr.behaviors.rex_lunarray_Tween_mod.prototype.cnds.OnWaitEnd, this.inst);
				this.onWaitEndDone = true;
			}
		}
		if (this.i <= (this.duration + this.initiating)) {
			var factor = this.easeFunc(this.i-this.initiating, 0, 1, this.duration);
			if (this.tweened == 0) {
				if (this.coord_mode == 1) {
					if (this.inst.x !== this.lastKnownX) {
						this.tweenInitialX += (this.inst.x - this.lastKnownX);
						this.tweenTargetX += (this.inst.x - this.lastKnownX);
					}
					if (this.inst.y !== this.lastKnownY) {
						this.tweenInitialY += (this.inst.y - this.lastKnownY);
						this.tweenTargetY += (this.inst.y - this.lastKnownY);
					}
				} else {
					if (this.inst.x !== this.lastKnownX)
						this.tweenInitialX += (this.inst.x - this.lastKnownX);
					if (this.inst.y !== this.lastKnownY)
						this.tweenInitialY += (this.inst.y - this.lastKnownY);
				}
				this.inst.x = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
				this.inst.y = this.tweenInitialY + (this.tweenTargetY - this.tweenInitialY) * factor;
				this.lastKnownX = this.inst.x;
				this.lastKnownY = this.inst.y;
			} else if ((this.tweened == 1) || (this.tweened == 2) || (this.tweened == 3)) {
				if (this.inst.width !== this.lastKnownX)
					this.tweenInitialX = this.inst.width;
				if (this.inst.height !== this.lastKnownY)
					this.tweenInitialY = this.inst.height;
				if (this.doTweenX) {
					this.inst.width = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
				}
				if (this.doTweenY) {
					this.inst.height = this.tweenInitialY + (this.tweenTargetY - this.tweenInitialY) * factor;
				} else {
					if (this.tweened == 1) {
						this.inst.height = this.inst.width * this.ratio;
					}
				}
				this.lastKnownX = this.inst.width;
				this.lastKnownY = this.inst.height;
			} else if (this.tweened == 4) {
				var tangle = this.tweenInitialX + (this.tweenTargetAngle - this.tweenInitialX) * factor;
				if (this.i >= (this.duration + this.initiating))
					tangle = this.tweenTargetAngle;
				this.inst.angle = cr.clamp_angle(tangle);
			} else if (this.tweened == 5) {
				if (this.coord_mode == 1) {
					if (this.inst.opacity !== this.lastKnownX)
						this.tweenInitialX = this.inst.opacity;
				}
				this.inst.opacity = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
				this.lastKnownX = this.inst.opacity;
			} else if (this.tweened == 6) {
				this.value = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
			} else if (this.tweened == 7) {
				if (this.coord_mode == 1) {
					if (this.inst.width !== this.lastKnownX)
						this.tweenInitialX = this.inst.width;
					if (this.inst.height !== this.lastKnownY)
						this.tweenInitialY = this.inst.height;
				}
				if (this.doTweenX) this.inst.width = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
				if (this.doTweenY) this.inst.height = this.tweenInitialY + (this.tweenTargetY - this.tweenInitialY) * factor;
				this.lastKnownX = this.inst.width;
				this.lastKnownY = this.inst.height;
			}
			this.inst.set_bbox_changed();
		}
		if (this.i >= this.duration + this.initiating) {
			this.doEndFrame(isForceStop);
			this.inst.set_bbox_changed();
			if (this.onEnd == false) {
				this.onEnd = true;
				this.runtime.trigger(cr.behaviors.rex_lunarray_Tween_mod.prototype.cnds.OnEnd, this.inst);
				this.onEndDone = true;
			}
		}
	};
	behinstProto.doEndFrame = function (isForceStop)
	{
		switch (this.tweened) {
		case 0:		// position
			this.inst.x = this.tweenTargetX;
			this.inst.y = this.tweenTargetY;
			break;
		case 1:		// size
			if (this.doTweenX) this.inst.width = this.tweenTargetX;
			if (this.doTweenY) {
				this.inst.height = this.tweenTargetY;
			} else {
				this.inst.height = this.inst.width * this.ratio;
			}
			break;
		case 2:		// width
			this.inst.width = this.tweenTargetX;
			break;
		case 3:		// height
			this.inst.height = this.tweenTargetY;
			break;
		case 4:		// angle
			var tangle = this.tweenTargetAngle;
			this.inst.angle = cr.clamp_angle(tangle);
			this.lastKnownValue = this.inst.angle;
			break;
		case 5:		// opacity
			this.inst.opacity = this.tweenTargetX;
			break;
		case 6:		// value
			this.value = this.tweenTargetX;
			break;
		case 7:		// size
			if (this.doTweenX) this.inst.width = this.tweenTargetX;
			if (this.doTweenY) this.inst.height = this.tweenTargetY;
			break;
		}
		if (this.repeatcount > 0)
		    this.repeatcount -= 1;
		if (this.i >= this.duration + this.initiating + this.cooldown) {
			if (this.playmode == 0) {
				this.active = false;
				this.reverse = false;
				this.i = this.duration + this.initiating + this.cooldown;
                this.onCountEnd = true;
			} else if (this.playmode == 1) {
				this.i = 0;
				this.init();
				this.onCountEnd = (this.repeatcount == 0);
				this.active = (!this.onCountEnd);
			} else if (this.playmode == 2) {
				if (isForceStop) {
					this.reverse = false;
					this.init();
				} else {
					this.reverse = !this.reverse;
					this.i = 0;
					this.init();
					this.onCountEnd = (this.repeatcount == 0);
				    this.active = (!this.onCountEnd);
				}
			} else if (this.playmode == 3) {
				this.runtime.DestroyInstance(this.inst);
			} else if (this.playmode == 4) {
				this.loop = true;
				this.i = 0;
				this.init();
				this.onCountEnd = (this.repeatcount == 0);
				this.active = (!this.onCountEnd);
			} else if (this.playmode == 5) {
				if (isForceStop) {
					this.reverse = false;
					this.init();
				} else {
					if (this.pingpongCounter <= 0) {
						this.i = this.duration + this.initiating + this.cooldown;
						this.onCountEnd = (this.repeatcount == 0);
				        this.active = (!this.onCountEnd);
					} else {
						if (!this.reverse) {
							this.pingpongCounter -= 1;
							this.reverse = true;
							this.i = 0;
							this.init();
							this.active = true;
						} else {
							this.pingpongCounter -= 1;
							this.reverse = false;
							this.i = 0;
							this.init();
							this.active = true;
						}
					}
				}
			} else if (this.playmode == -6) {
				this.playmode = this.lastPlayMode;
				this.reverse = false;
				this.i = 0;
				this.active = false;
			} else if (this.playmode == 6) {
				this.reverse = false;
				this.i = this.duration + this.initiating + this.cooldown;
				this.active = false;
                this.onCountEnd = true;
			}
		}
		if (this.onCooldown == false) {
			this.onCooldown = true;
			this.runtime.trigger(cr.behaviors.rex_lunarray_Tween_mod.prototype.cnds.OnCooldownEnd, this.inst);
			this.onCooldownDone = true;
		}
		if (this.onCountEnd)
		{
		    this.runtime.trigger(cr.behaviors.rex_lunarray_Tween_mod.prototype.cnds.OnCountEnd, this.inst);
		    this.onCountEnd = false;
		}
	};
	behinstProto.setRepeatCount = function (cnt)
    {
	    this.repeatcount_save = cnt;
		if (this.repeatcount_save <= 0)
		    this.repeatcount_save = -1;
		this.repeatcount = this.repeatcount_save;
    };
	behaviorProto.cnds = {};
	var cnds = behaviorProto.cnds;
	cnds.IsActive = function ()
	{
		return this.active;
	};
	cnds.CompareGroupProgress = function (cmp, v)
	{
		var x = [];
		cr.lunarray_tweenGroup[this.group].forEach(function (value) {
			x.push((value.i / (value.duration + value.initiating + value.cooldown)));
		} );
		return cr.do_cmp(	Math.min.apply(null, x), cmp, v );
	}
	cnds.CompareProgress = function (cmp, v)
	{
		return cr.do_cmp((this.i / (this.duration + this.initiating + this.cooldown)), cmp, v);
	};
	cnds.OnStart = function ()
	{
		if (this.onStartedDone === false) {
			return this.onStarted;
		}
	};
    cnds.OnWaitEnd = function ()
	{
		if (this.onWaitEndDone === false) {
			return this.onWaitEnd;
		}
	};
    cnds.OnEnd = function (a, b, c)
	{
		if (this.onEndDone === false) {
			return this.onEnd;
		}
	};
    cnds.OnCooldownEnd = function ()
	{
		if (this.onCooldownDone === false) {
			return this.onCooldown;
		}
	};
    cnds.OnCountEnd = function ()
	{
		return this.onCountEnd;
	};
	behaviorProto.acts = {};
	var acts = behaviorProto.acts;
	acts.SetActive = function (a)
	{
		this.active = (a === 1);
	};
	acts.StartGroup = function (force, sgroup)
	{
		if (sgroup === "") sgroup = this.group;
		var groupReady = (force === 1) || cr.lunarray_tweenGroup[sgroup].every(function(value2) { return !value2.active; } );
		if ( groupReady ) {
			cr.lunarray_tweenGroup[sgroup].forEach(
				function(value) {
					if (force === 1) {
						acts.Force.apply(value);
					} else {
						acts.Start.apply(value);
					}
				}
			);
		}
	}
	acts.StopGroup = function (stopmode, sgroup)
	{
		if (sgroup === "") sgroup = this.group;
		cr.lunarray_tweenGroup[sgroup].forEach( function(value) {
			acts.Stop.apply(value, [stopmode]);
		} );
	}
	acts.ReverseGroup = function (force, rewindMode, sgroup)
	{
		if (sgroup === "") sgroup = this.group;
		var groupReady = (force === 1) || cr.lunarray_tweenGroup[sgroup].every(function(value2) { return !value2.active; } );
		if ( groupReady ) {
			cr.lunarray_tweenGroup[sgroup].forEach(
				function(value) {
					if (force === 1) {
						acts.ForceReverse.apply(value, [rewindMode]);
					} else {
						acts.Reverse.apply(value, [rewindMode]);
					}
				}
			);
		}
	}
	acts.Force = function ()
	{
		this.loop = (this.playmode === 4);
		if (this.playmode == 5) this.pingpongCounter = 1;
		if ((this.playmode == 6) || (this.playmode == -6)) {
			if (this.i < this.duration + this.cooldown + this.initiating) {
				this.reverse = false;
				this.init();
				this.active = true;
			}
		} else {
			this.reverse = false;
			this.i = 0;
			this.init();
			this.active = true;
		}
	};
	acts.ForceReverse = function (rewindMode)
	{
		this.rewindMode = (rewindMode == 1);
		this.loop = (this.playmode === 4);
		if (this.playmode == 5) this.pingpongCounter = 1;
		if ((this.playmode == 6) || (this.playmode == -6)) {
			if (this.i < this.duration + this.cooldown + this.initiating) {
				this.reverse = true;
				this.init();
				this.active = true;
			}
		} else {
			if (rewindMode) {
				if (this.pingpongCounter == 1) {
					if (this.i >= this.duration + this.cooldown + this.initiating) {
						this.reverse = true;
						this.i = 0;
						this.pingpongCounter = 2;
						this.init();
						this.active = true;
					}
				}
			} else {
				this.reverse = true;
				this.i = 0;
				this.init();
				this.active = true;
			}
		}
	};
	acts.Start = function ()
	{
		if (!this.active) {
		    this.repeatcount = this.repeatcount_save;
			this.loop = (this.playmode === 4);
			if (this.playmode == 5) this.pingpongCounter = 1;
			if ((this.playmode == 6) || (this.playmode == -6)) {
				if (this.i < this.duration + this.cooldown + this.initiating) {
					this.reverse = false;
					this.init();
					this.active = true;
				}
			} else {
				this.pingpongCounter = 1;
				this.reverse = false;
				this.i = 0;
				this.init();
				this.active = true;
			}
		}
	};
	acts.Stop = function (stopmode)
	{
		if (this.active) {
			if ((this.playmode == 2) || (this.playmode == 4)) {
				if (this.reverse) {
					this.i = 0;
				} else {
					this.i = -1;
				}
			} else {
				if (stopmode == 1) {
					this.saveState();
				} else if (stopmode == 0) {
					this.i = this.initiating + this.cooldown + this.duration;
				} else {
					this.i = 0;
				}
			}
			this.tick();
			this.active = false;
		}
	};
	acts.Pause = function () {
		if (this.active) {
			this.isPaused = true;
			this.active = false;
		}
	}
	acts.Resume = function () {
		if (this.isPaused) {
			this.active = true;
			this.isPaused = false;
		} else {
			if (!this.active) {
				this.reverse = false;
				this.i = 0;
				this.init();
				this.active = true;
			}
		}
	}
	acts.Reverse = function (rewindMode)
	{
		this.rewindMode = (rewindMode == 1);
		if (!this.active) {
			this.loop = (this.playmode === 4);
			if (this.playmode == 5) this.pingpongCounter = 1;
			if ((this.playmode == 6) || (this.playmode == -6)) {
				if (this.i < this.duration + this.cooldown + this.initiating) {
					this.reverse = true;
					this.init();
					this.active = true;
				}
			} else {
				if (rewindMode) {
					if (this.pingpongCounter == 1) {
						if (this.i >= this.duration + this.cooldown + this.initiating) {
							this.reverse = true;
							this.i = 0;
							this.pingpongCounter = 2;
							this.init();
							this.active = true;
						}
					}
				} else {
					this.reverse = true;
					this.i = 0;
					this.init();
					this.active = true;
				}
			}
		}
	};
	acts.SetDuration = function (x)
	{
		this.duration = x;
	};
	acts.SetWait = function (x)
	{
		this.wait = x;
		this.initiating = parseFloat(this.wait.split(",")[0]);
		this.cooldown = parseFloat(this.wait.split(",")[1]);
		if ((this.initiating < 0) || (isNaN(this.initiating)))	this.initiating = 0;
		if ((this.cooldown < 0) || (isNaN(this.cooldown)))	this.cooldown = 0;
	};
	acts.SetTarget = function (x)
	{
		if (typeof(x) == "string") {
			this.target = x;
			this.targetX = parseFloat(x.split(",")[0]);
			this.targetY = parseFloat(x.split(",")[1]);
		} else {
			this.target = x;
			this.targetX = x;
		}
		if (!this.active) {
			this.init();
		} else {
		}
	};
	acts.SetTargetObject = function (obj)
	{
		if (!obj)
			return;
		var otherinst = obj.getFirstPicked();
		if (!otherinst)
			return;
		this.targetObject = otherinst;
		this.target = "OBJ";
	};
	acts.SetRepeatCount = function (cnt)
	{
	    this.setRepeatCount(cnt);
	};
	acts.SetTargetX = function (x)
	{
		if ((this.tweened == 2) || (this.tweened == 3) || (this.tweened == 4) || (this.tweened == 5) || (this.tweened == 6)) {
			if (typeof(x) == "string") {
				this.target = parseFloat(x.split(",")[0]);
			} else {
				this.target = ""+x+","+this.targetY;
			}
			this.targetX = this.target;
		} else {
			var currY = this.target.split(",")[1];
			this.target = String(x) + "," + currY;
			this.targetX = parseFloat(this.target.split(",")[0]);
			this.targetY = parseFloat(this.target.split(",")[1]);
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetTargetY = function (x)
	{
		if ((this.tweened == 2) || (this.tweened == 3) || (this.tweened == 4) || (this.tweened == 5) || (this.tweened == 6)) {
			if (typeof(x) == "string") {
				this.target = parseFloat(x)+"";
			} else {
				this.target = this.targetX+","+x;
			}
			this.targetX = this.target;
		} else {
			var currX = this.target.split(",")[0];
			this.target = currX + "," + String(x);
			this.targetX = parseFloat(this.target.split(",")[0]);
			this.targetY = parseFloat(this.target.split(",")[1]);
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetInitial = function (x)
	{
		if (typeof(x) == "string") {
			this.initial = x;
			this.initialX = parseFloat(x.split(",")[0]);
			this.initialY = parseFloat(x.split(",")[1]);
		} else {
			this.initial = ""+x;
			this.initialX = x;
		}
		if (this.tweened == 6) {
			this.value = this.initialX;
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetInitialX = function (x)
	{
		if ((this.tweened == 2) || (this.tweened == 3) || (this.tweened == 4) || (this.tweened == 5) || (this.tweened == 6)) {
			if (typeof(x) == "string") {
				this.initial = parseFloat(x);
			} else {
				this.initial = ""+x+","+this.initialY;
			}
			this.initialX = this.initial;
		} else {
			if (this.initial == "") this.initial = "current";
			if (this.initial == "current") {
				var currY = this.tweenSaveY;
			} else {
				var currY = this.initial.split(",")[1];
			}
			this.initial = String(x) + "," + currY;
			this.initialX = parseFloat(this.initial.split(",")[0]);
			this.initialY = parseFloat(this.initial.split(",")[1]);
		}
		if (this.tweened == 6) {
			this.value = this.initialX;
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetInitialY = function (x)
	{
		if ((this.tweened == 2) || (this.tweened == 3) || (this.tweened == 4) || (this.tweened == 5) || (this.tweened == 6)) {
			if (typeof(x) == "string") {
				this.initial = parseFloat(x);
			} else {
				this.initial = ""+this.initialX+","+x;
			}
			this.initialX = this.initial;
		} else {
			if (this.initial == "") this.initial = "current";
			if (this.initial == "current") {
				var currX = this.tweenSaveX;
			} else {
				var currX = this.initial.split(",")[0];
			}
			this.initial = currX + "," + String(x);
			this.initialX = parseFloat(this.initial.split(",")[0]);
			this.initialY = parseFloat(this.initial.split(",")[1]);
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetValue = function (x)
	{
		this.value = x;
	};
	acts.SetTweenedProperty = function (m)
	{
		this.tweened = m;
	};
	acts.SetEasing = function (w)
	{
		this.easing = w;
	};
	acts.SetPlayback = function (x)
	{
		this.playmode = x;
	};
	acts.SetParameter = function (tweened, playmode, easefunction, initial, target, duration, wait, cmode)
	{
        if (typeof(easefunction) == "string")
        {
            easefunction = alias_map[easefunction];
            if (easefunction == null)
                easefunction = 0;
        }
		this.tweened = tweened;
		this.playmode = playmode;
		this.easing = easefunction;
		acts.SetInitial.apply(this, [initial]);
		acts.SetTarget.apply(this, [target]);
		acts.SetDuration.apply(this, [duration]);
		acts.SetWait.apply(this, [wait]);
		this.coord_mode = cmode;
		this.saveState();
	};
    var alias_map = {};
	acts.SetEasingAlias = function (alias, easefunction)
	{
		alias_map[alias] = easefunction;
	};
	behaviorProto.exps = {};
	var exps = behaviorProto.exps;
	exps.Progress = function (ret)
	{
		ret.set_float(this.i / (this.duration + this.initiating + this.cooldown));
	};
	exps.ProgressTime = function (ret)
	{
		ret.set_float(this.i);
	};
	exps.Duration = function (ret)
	{
		ret.set_float(this.duration);
	};
	exps.Initiating = function (ret)
	{
		ret.set_float(this.initiating);
	};
	exps.Cooldown = function (ret)
	{
		ret.set_float(this.cooldown);
	};
	exps.Target = function (ret)
	{
		ret.set_string(this.target);
	};
	exps.Value = function (ret)
	{
		ret.set_float(this.value);
	};
	exps.isPaused = function (ret)
	{
		ret.set_int(this.isPaused ? 1: 0);
	};
}());
cr.getObjectRefTable = function () { return [
	cr.plugins_.NinePatch,
	cr.plugins_.AJAX,
	cr.plugins_.Arr,
	cr.plugins_.Audio,
	cr.plugins_.Browser,
	cr.plugins_.Button,
	cr.plugins_.Dictionary,
	cr.plugins_.Function,
	cr.plugins_.Keyboard,
	cr.plugins_.LocalStorage,
	cr.plugins_.Mouse,
	cr.plugins_.Rex_SLGSquareTx,
	cr.plugins_.Rex_Comment,
	cr.plugins_.Rex_CopyToClipboard,
	cr.plugins_.Rex_CSV2Array,
	cr.plugins_.Rex_CSV2Dictionary,
	cr.plugins_.Rex_DungeonGen,
	cr.plugins_.Rex_EventBalancer,
	cr.plugins_.Rex_Firebase,
	cr.plugins_.Rex_FirebaseAPIV3,
	cr.plugins_.Rex_Firebase_Authentication,
	cr.plugins_.Rex_Firebase_Counter,
	cr.plugins_.Rex_Firebase_CurTime,
	cr.plugins_.Rex_Firebase_Geofire,
	cr.plugins_.Rex_Firebase_ItemBook,
	cr.plugins_.Rex_Firebase_ItemFilter,
	cr.plugins_.Rex_Firebase_ItemMonitor,
	cr.plugins_.Rex_Firebase_ItemTable,
	cr.plugins_.Rex_Firebase_Leaderboard,
	cr.plugins_.Rex_Firebase_message,
	cr.plugins_.Rex_Firebase_Query,
	cr.plugins_.Rex_Firebase_Rooms,
	cr.plugins_.Rex_Firebase_SaveSlot,
	cr.plugins_.Rex_Firebase_SimpleMessage,
	cr.plugins_.Rex_Firebase_SingleLogin,
	cr.plugins_.Rex_Firebase_Storage,
	cr.plugins_.Rex_Firebase_SyncQueue,
	cr.plugins_.Rex_Firebase_Timer,
	cr.plugins_.Rex_Firebase_Token,
	cr.plugins_.Rex_Firebase_UserID2ID,
	cr.plugins_.Rex_Firebase_Userlist,
	cr.plugins_.Rex_fnParam2Array,
	cr.plugins_.Rex_FSM,
	cr.plugins_.Rex_Layouter,
	cr.plugins_.Rex_LayerObj,
	cr.plugins_.Rex_ListCtrl,
	cr.plugins_.Rex_LoopIterator,
	cr.plugins_.Rex_MazeGen,
	cr.plugins_.Rex_PatternGen,
	cr.plugins_.Rex_SequenceMatcher,
	cr.plugins_.Rex_SysExt,
	cr.plugins_.rex_TouchWrap,
	cr.plugins_.Rex_WaitEvent,
	cr.plugins_.Rex_WebstorageExt,
	cr.plugins_.rojo_spritesheet,
	cr.plugins_.sirg_notifications,
	cr.plugins_.Sprite,
	cr.plugins_.Spritefont2,
	cr.plugins_.Text,
	cr.plugins_.TextBox,
	cr.plugins_.TiledBg,
	cr.plugins_.Touch,
	cr.plugins_.UserMedia,
	cr.plugins_.XML,
	cr.plugins_.htmlCODE,
	cr.behaviors.Rex_ShakeMod,
	cr.behaviors.Rex_pinOffsetXY,
	cr.behaviors.Pin,
	cr.behaviors.Rex_pin2imgpt,
	cr.behaviors.Rex_MoveTo,
	cr.behaviors.Rex_ToggleSwitch,
	cr.behaviors.rex_lunarray_Tween_mod,
	cr.behaviors.Rex_boundary,
	cr.behaviors.DragnDrop,
	cr.behaviors.Rotate,
	cr.behaviors.Rex_text_resize,
	cr.behaviors.Rex_Button2,
	cr.behaviors.Rex_TriggerTouch,
	cr.behaviors.Rex_text_properties,
	cr.behaviors.Rex_maxmin,
	cr.behaviors.Rex_text_typing,
	cr.behaviors.Rex_text_scrolling,
	cr.behaviors.Rex_FSM,
	cr.behaviors.Rex_layouter_linear,
	cr.behaviors.Rex_TouchDirection2,
	cr.behaviors.LOS,
	cr.behaviors.Sin,
	cr.behaviors.Rex_SpriteExt,
	cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchStart,
	cr.system_object.prototype.acts.SetVar,
	cr.plugins_.rex_TouchWrap.prototype.exps.AbsoluteX,
	cr.plugins_.rex_TouchWrap.prototype.exps.AbsoluteY,
	cr.system_object.prototype.cnds.EveryTick,
	cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
	cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
	cr.plugins_.Rex_Layouter.prototype.cnds.CompareInstanceVar,
	cr.plugins_.Rex_Layouter.prototype.acts.SetVisible,
	cr.plugins_.Rex_Layouter.prototype.cnds.IsVisible,
	cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
	cr.plugins_.Text.prototype.acts.SetVisible,
	cr.plugins_.Text.prototype.acts.SetText,
	cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
	cr.behaviors.Rex_ToggleSwitch.prototype.exps.Value,
	cr.plugins_.Rex_LayerObj.prototype.cnds.IsOnLayer,
	cr.plugins_.Rex_LayerObj.prototype.cnds.CompareInstanceVar,
	cr.plugins_.Rex_LayerObj.prototype.acts.SetVisible,
	cr.system_object.prototype.exps.tokenat,
	cr.plugins_.Arr.prototype.exps.At,
	cr.system_object.prototype.cnds.CompareVar,
	cr.plugins_.Text.prototype.acts.MoveToTop,
	cr.system_object.prototype.cnds.IsGroupActive,
	cr.system_object.prototype.cnds.OnLayoutStart,
	cr.system_object.prototype.acts.ResetGlobals,
	cr.plugins_.AJAX.prototype.acts.RequestFile,
	cr.behaviors.Rex_ToggleSwitch.prototype.acts.SetValue,
	cr.plugins_.Function.prototype.acts.CallFunction,
	cr.plugins_.Spritefont2.prototype.cnds.CompareInstanceVar,
	cr.plugins_.Spritefont2.prototype.acts.Destroy,
	cr.plugins_.NinePatch.prototype.cnds.CompareInstanceVar,
	cr.plugins_.NinePatch.prototype.acts.Destroy,
	cr.plugins_.Sprite.prototype.acts.Destroy,
	cr.plugins_.Text.prototype.acts.Destroy,
	cr.plugins_.TextBox.prototype.cnds.CompareInstanceVar,
	cr.plugins_.TextBox.prototype.acts.Destroy,
	cr.plugins_.Rex_ListCtrl.prototype.cnds.CompareInstanceVar,
	cr.plugins_.Rex_ListCtrl.prototype.acts.Destroy,
	cr.plugins_.Rex_EventBalancer.prototype.acts.Start,
	cr.plugins_.Rex_EventBalancer.prototype.cnds.IsProcessing,
	cr.system_object.prototype.cnds.Repeat,
	cr.plugins_.Rex_Layouter.prototype.acts.CreateInsts,
	cr.plugins_.Rex_Layouter.prototype.exps.X,
	cr.plugins_.Rex_Layouter.prototype.exps.Y,
	cr.plugins_.Rex_Layouter.prototype.exps.LayerName,
	cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
	cr.system_object.prototype.exps.loopindex,
	cr.plugins_.Sprite.prototype.acts.SetSize,
	cr.plugins_.Rex_Layouter.prototype.exps.Width,
	cr.plugins_.Sprite.prototype.acts.SetOpacity,
	cr.plugins_.Sprite.prototype.acts.SetPos,
	cr.behaviors.Rex_TouchDirection2.prototype.acts.SetActivated,
	cr.behaviors.Rex_FSM.prototype.acts.Request,
	cr.system_object.prototype.acts.CreateObject,
	cr.plugins_.Rex_Layouter.prototype.exps.BBoxTop,
	cr.plugins_.Sprite.prototype.exps.Width,
	cr.plugins_.Sprite.prototype.exps.Height,
	cr.plugins_.Sprite.prototype.exps.X,
	cr.plugins_.Sprite.prototype.exps.Y,
	cr.plugins_.Sprite.prototype.acts.MoveToTop,
	cr.behaviors.Rex_pin2imgpt.prototype.acts.Pin,
	cr.plugins_.Sprite.prototype.exps.LayerName,
	cr.plugins_.Text.prototype.acts.SetInstanceVar,
	cr.behaviors.Pin.prototype.acts.Pin,
	cr.plugins_.Text.prototype.acts.SetWidth,
	cr.plugins_.Text.prototype.acts.SetSize,
	cr.plugins_.Rex_Layouter.prototype.acts.ForceLayout,
	cr.plugins_.Text.prototype.acts.SetPos,
	cr.plugins_.Rex_Layouter.prototype.exps.BBoxBottom,
	cr.plugins_.TextBox.prototype.acts.SetInstanceVar,
	cr.plugins_.TextBox.prototype.acts.SetSize,
	cr.plugins_.TextBox.prototype.acts.SetPos,
	cr.plugins_.Sprite.prototype.exps.BBoxLeft,
	cr.plugins_.Sprite.prototype.exps.BBoxTop,
	cr.plugins_.TextBox.prototype.acts.SetCSSStyle,
	cr.plugins_.Rex_Layouter.prototype.exps.BBoxLeft,
	cr.plugins_.Rex_ListCtrl.prototype.acts.SetInstanceVar,
	cr.plugins_.Rex_ListCtrl.prototype.acts.SetSize,
	cr.plugins_.Rex_Layouter.prototype.exps.Height,
	cr.plugins_.Rex_ListCtrl.prototype.acts.MoveToTop,
	cr.plugins_.NinePatch.prototype.acts.SetInstanceVar,
	cr.plugins_.NinePatch.prototype.acts.SetSize,
	cr.plugins_.NinePatch.prototype.acts.MoveToTop,
	cr.plugins_.TextBox.prototype.exps.Text,
	cr.behaviors.Rex_text_properties.prototype.acts.SetHorizontalAlignment,
	cr.plugins_.NinePatch.prototype.exps.X,
	cr.plugins_.NinePatch.prototype.exps.BBoxTop,
	cr.plugins_.NinePatch.prototype.exps.BBoxBottom,
	cr.plugins_.Rex_EventBalancer.prototype.acts.Stop,
	cr.system_object.prototype.acts.Wait,
	cr.plugins_.Function.prototype.cnds.OnFunction,
	cr.system_object.prototype.cnds.ForEach,
	cr.plugins_.Rex_Layouter.prototype.cnds.PickAllInsts,
	cr.behaviors.Rex_boundary.prototype.acts.SetVerticalBoundary,
	cr.behaviors.Rex_boundary.prototype.acts.SetHorizontalBoundary,
	cr.plugins_.Rex_Layouter.prototype.exps.BBoxRight,
	cr.behaviors.Pin.prototype.acts.Unpin,
	cr.plugins_.NinePatch.prototype.exps.LayerName,
	cr.plugins_.NinePatch.prototype.exps.Y,
	cr.plugins_.Sprite.prototype.acts.SetPosToObject,
	cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
	cr.plugins_.Sprite.prototype.acts.SetAngle,
	cr.plugins_.Sprite.prototype.acts.SetY,
	cr.behaviors.Rex_boundary.prototype.exps.BottomBound,
	cr.behaviors.DragnDrop.prototype.cnds.IsDragging,
	cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
	cr.system_object.prototype.exps.floor,
	cr.behaviors.Rex_boundary.prototype.exps.HorPercent,
	cr.system_object.prototype.cnds.LayerVisible,
	cr.behaviors.Rex_text_scrolling.prototype.acts.ScrollToPercent,
	cr.behaviors.Rex_boundary.prototype.exps.VerPercent,
	cr.plugins_.Rex_ListCtrl.prototype.acts.SetOYByPercentage,
	cr.behaviors.Rex_TouchDirection2.prototype.acts.SetProportion,
	cr.behaviors.Rex_TouchDirection2.prototype.cnds.IsDragging,
	cr.behaviors.Rex_TouchDirection2.prototype.cnds.OnDraggingStop,
	cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
	cr.plugins_.Mouse.prototype.exps.Y,
	cr.behaviors.Rex_text_scrolling.prototype.cnds.IsLastPage,
	cr.plugins_.Rex_ListCtrl.prototype.exps.DefaultLineHeight,
	cr.plugins_.NinePatch.prototype.acts.SetEffectParam,
	cr.plugins_.Spritefont2.prototype.acts.SetEffectParam,
	cr.plugins_.AJAX.prototype.cnds.OnComplete,
	cr.plugins_.Rex_CSV2Array.prototype.acts.CSV2Array,
	cr.plugins_.AJAX.prototype.exps.LastData,
	cr.plugins_.Arr.prototype.acts.Pop,
	cr.plugins_.Arr.prototype.acts.Insert,
	cr.plugins_.Arr.prototype.cnds.ArrForEach,
	cr.plugins_.Arr.prototype.cnds.CompareCurrent,
	cr.plugins_.Arr.prototype.exps.CurX,
	cr.plugins_.Rex_LayerObj.prototype.cnds.IsVisible,
	cr.behaviors.Rex_Button2.prototype.cnds.OnClick,
	cr.plugins_.Rex_SysExt.prototype.acts.PickByUID,
	cr.plugins_.Sprite.prototype.exps.UID,
	cr.behaviors.Rex_ShakeMod.prototype.acts.Start,
	cr.behaviors.Rex_ToggleSwitch.prototype.acts.ToogleValue,
	cr.plugins_.Text.prototype.exps.UID,
	cr.behaviors.Rex_maxmin.prototype.cnds.CompareValue,
	cr.behaviors.Rex_maxmin.prototype.exps.Max,
	cr.behaviors.Rex_maxmin.prototype.acts.SetValue,
	cr.behaviors.Rex_maxmin.prototype.exps.Min,
	cr.system_object.prototype.cnds.Else,
	cr.behaviors.Rex_maxmin.prototype.acts.AddTo,
	cr.behaviors.Rex_maxmin.prototype.exps.Value,
	cr.system_object.prototype.acts.RestartLayout,
	cr.behaviors.Rex_boundary.prototype.exps.TopBound,
	cr.plugins_.htmlCODE.prototype.acts.GoTo,
	cr.behaviors.rex_lunarray_Tween_mod.prototype.cnds.OnStart,
	cr.behaviors.rex_lunarray_Tween_mod.prototype.cnds.OnEnd,
	cr.plugins_.rex_TouchWrap.prototype.cnds.IsInTouch,
	cr.plugins_.rex_TouchWrap.prototype.cnds.IsTouchingObject,
	cr.system_object.prototype.cnds.PickByComparison,
	cr.plugins_.rex_TouchWrap.prototype.cnds.OnTouchEnd,
	cr.plugins_.UserMedia.prototype.cnds.IsSpeaking,
	cr.plugins_.UserMedia.prototype.acts.SpeakText,
	cr.plugins_.Text.prototype.exps.Text,
	cr.plugins_.UserMedia.prototype.acts.StopSpeaking,
	cr.plugins_.rex_TouchWrap.prototype.cnds.OnTapGestureObject,
	cr.plugins_.Text.prototype.acts.AddInstanceVar,
	cr.plugins_.Arr.prototype.exps.Height,
	cr.plugins_.Arr.prototype.cnds.CompareXY,
	cr.system_object.prototype.acts.AddVar,
	cr.system_object.prototype.acts.SubVar,
	cr.system_object.prototype.cnds.Compare,
	cr.behaviors.rex_lunarray_Tween_mod.prototype.acts.Start,
	cr.behaviors.rex_lunarray_Tween_mod.prototype.acts.Reverse,
	cr.system_object.prototype.cnds.PickAll,
	cr.behaviors.Rex_Button2.prototype.cnds.OnClickStart,
	cr.plugins_.Text.prototype.acts.SetHeight,
	cr.system_object.prototype.exps.newline,
	cr.behaviors.Rex_MoveTo.prototype.acts.SetTargetPosOnObject,
	cr.plugins_.Button.prototype.cnds.OnClicked,
	cr.plugins_.htmlCODE.prototype.acts.Backward,
	cr.plugins_.htmlCODE.prototype.acts.Forward,
	cr.plugins_.htmlCODE.prototype.acts.Refresh,
	cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased,
	cr.plugins_.TextBox.prototype.cnds.OnClicked,
	cr.plugins_.TextBox.prototype.cnds.CompareText,
	cr.plugins_.htmlCODE.prototype.cnds.OnLoad,
	cr.plugins_.Sprite.prototype.acts.SetVisible,
	cr.behaviors.Rotate.prototype.acts.SetSpeed,
	cr.plugins_.Rex_FSM.prototype.acts.GotoState,
	cr.behaviors.Rex_text_scrolling.prototype.acts.AppendContent,
	cr.plugins_.Rex_FSM.prototype.exps.CurState,
	cr.plugins_.Rex_Comment.prototype.acts.NOOP,
	cr.plugins_.Rex_PatternGen.prototype.acts.RemoveAllPatterns,
	cr.plugins_.TextBox.prototype.acts.SetText,
	cr.plugins_.htmlCODE.prototype.exps.URL,
	cr.system_object.prototype.exps.mid,
	cr.system_object.prototype.exps.len,
	cr.plugins_.Rex_FSM.prototype.acts.Request,
	cr.system_object.prototype.exps.replace,
	cr.system_object.prototype.exps.tokencount,
	cr.system_object.prototype.exps.lowercase,
	cr.plugins_.Rex_Comment.prototype.cnds.NOOP,
	cr.plugins_.Text.prototype.acts.AppendText,
	cr.plugins_.Rex_FSM.prototype.cnds.OnEnter,
	cr.plugins_.Arr.prototype.cnds.CompareX,
	cr.plugins_.Arr.prototype.exps.Front,
	cr.plugins_.Arr.prototype.exps.CurValue,
	cr.plugins_.Rex_PatternGen.prototype.acts.SetPattern,
	cr.system_object.prototype.exps["int"],
	cr.plugins_.Arr.prototype.exps.CurY,
	cr.plugins_.Rex_PatternGen.prototype.exps.LastPattern,
	cr.plugins_.Rex_PatternGen.prototype.exps.Pattern,
	cr.plugins_.TextBox.prototype.cnds.OnTextChanged,
	cr.plugins_.Keyboard.prototype.cnds.OnKey,
	cr.plugins_.Text.prototype.cnds.CompareText,
	cr.plugins_.Rex_ListCtrl.prototype.acts.PushNewLines,
	cr.plugins_.Rex_ListCtrl.prototype.acts.SetValue,
	cr.plugins_.Rex_ListCtrl.prototype.acts.RefreshVisibleLines,
	cr.plugins_.Rex_ListCtrl.prototype.cnds.OnLineVisible,
	cr.plugins_.Rex_ListCtrl.prototype.exps.LayerName,
	cr.plugins_.Rex_ListCtrl.prototype.exps.LineCX,
	cr.plugins_.Rex_ListCtrl.prototype.exps.LineTLY,
	cr.plugins_.Text.prototype.acts.SetFontSize,
	cr.plugins_.Rex_ListCtrl.prototype.exps.Width,
	cr.plugins_.Rex_ListCtrl.prototype.acts.PinInstToLine,
	cr.plugins_.Rex_ListCtrl.prototype.exps.At,
	cr.plugins_.Rex_ListCtrl.prototype.exps.LineIndex,
	cr.plugins_.Rex_ListCtrl.prototype.acts.SetLineHeight,
	cr.plugins_.Text.prototype.exps.TextHeight,
	cr.behaviors.Rex_text_scrolling.prototype.acts.NextPage,
	cr.behaviors.Rex_text_scrolling.prototype.acts.PreviousPage,
	cr.behaviors.Rex_text_scrolling.prototype.acts.ScrollToLineIndex,
	cr.behaviors.Rex_text_scrolling.prototype.exps.CurrLastIndex,
	cr.plugins_.htmlCODE.prototype.cnds.IsLoading,
	cr.system_object.prototype.cnds.Every,
	cr.plugins_.Mouse.prototype.cnds.OnRelease,
	cr.plugins_.htmlCODE.prototype.cnds.OnError,
	cr.plugins_.Browser.prototype.cnds.OnOffline,
	cr.plugins_.sirg_notifications.prototype.acts.AddNotificationClickable,
	cr.plugins_.htmlCODE.prototype.acts.SetVisible,
	cr.plugins_.Rex_FSM.prototype.cnds.OnLogic,
	cr.plugins_.Rex_FSM.prototype.acts.NextStateSet,
	cr.plugins_.AJAX.prototype.acts.Request,
	cr.plugins_.Rex_Layouter.prototype.cnds.OnCreated,
	cr.behaviors.Rex_FSM.prototype.cnds.OnLogic,
	cr.plugins_.Rex_Layouter.prototype.acts.SetBoolInstanceVar,
	cr.plugins_.Rex_EventBalancer.prototype.cnds.DynamicLoop,
	cr.plugins_.Rex_Layouter.prototype.cnds.IsBoolInstanceVarSet,
	cr.plugins_.NinePatch.prototype.acts.SetPosToObject,
	cr.behaviors.Rex_pinOffsetXY.prototype.acts.Pin,
	cr.plugins_.NinePatch.prototype.acts.ZMoveToObject,
	cr.plugins_.Sprite.prototype.acts.ZMoveToObject,
	cr.behaviors.Rex_FSM.prototype.acts.GotoState,
	cr.plugins_.Text.prototype.acts.SetBoolInstanceVar,
	cr.plugins_.Text.prototype.cnds.IsBoolInstanceVarSet,
	cr.plugins_.Text.prototype.exps.LayerName,
	cr.plugins_.Text.prototype.exps.Width,
	cr.plugins_.Text.prototype.exps.Height,
	cr.plugins_.Text.prototype.cnds.OnCreated,
	cr.plugins_.Rex_MazeGen.prototype.acts.GenerateMaze,
	cr.system_object.prototype.acts.WaitForSignal,
	cr.plugins_.Browser.prototype.acts.ConsoleLog,
	cr.plugins_.Rex_MazeGen.prototype.exps.MapAsJson,
	cr.plugins_.Rex_MazeGen.prototype.cnds.OnCompleted,
	cr.system_object.prototype.acts.Signal,
	cr.plugins_.Rex_EventBalancer.prototype.cnds.OnStart,
	cr.plugins_.Rex_LoopIterator.prototype.acts.AddForLoop,
	cr.plugins_.Rex_MazeGen.prototype.exps.MapHeight,
	cr.plugins_.Rex_MazeGen.prototype.exps.MapWidth,
	cr.plugins_.Rex_EventBalancer.prototype.cnds.OnProcessing,
	cr.plugins_.Rex_LoopIterator.prototype.acts.Next,
	cr.plugins_.Rex_SLGSquareTx.prototype.exps.LXY2PX,
	cr.plugins_.Rex_LoopIterator.prototype.exps.loopindex,
	cr.plugins_.Rex_SLGSquareTx.prototype.exps.LXY2PY,
	cr.plugins_.Rex_MazeGen.prototype.exps.ValueAt,
	cr.plugins_.Rex_LoopIterator.prototype.cnds.HasNext,
	cr.plugins_.Rex_MazeGen.prototype.cnds.IsGenerating,
	cr.plugins_.Rex_DungeonGen.prototype.acts.GenerateDungeonDigger,
	cr.system_object.prototype.exps.random,
	cr.plugins_.Rex_DungeonGen.prototype.acts.GenerateDungeonRogue,
	cr.plugins_.Rex_DungeonGen.prototype.acts.GenerateDungeonUniform,
	cr.plugins_.Rex_DungeonGen.prototype.cnds.OnCompleted,
	cr.plugins_.Rex_DungeonGen.prototype.exps.MapHeight,
	cr.plugins_.Rex_DungeonGen.prototype.exps.MapWidth,
	cr.plugins_.Function.prototype.exps.Param,
	cr.plugins_.Rex_DungeonGen.prototype.cnds.TileType,
	cr.plugins_.Rex_DungeonGen.prototype.cnds.IsCorridorType,
	cr.plugins_.Sprite.prototype.acts.Spawn,
	cr.plugins_.Rex_EventBalancer.prototype.cnds.OnStop,
	cr.plugins_.Rex_DungeonGen.prototype.cnds.ForEachRoom,
	cr.plugins_.Rex_DungeonGen.prototype.exps.CurRoomLeft,
	cr.plugins_.Rex_DungeonGen.prototype.exps.CurRoomTop,
	cr.plugins_.Rex_DungeonGen.prototype.exps.CurRoomRight,
	cr.plugins_.Rex_DungeonGen.prototype.exps.CurRoomBottom,
	cr.plugins_.Rex_DungeonGen.prototype.exps.CurRoomCenterX,
	cr.plugins_.Rex_DungeonGen.prototype.exps.CurRoomCenterY,
	cr.plugins_.Rex_DungeonGen.prototype.cnds.IsGenerating
];};
